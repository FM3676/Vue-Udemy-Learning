1
00:00:02,150 --> 00:00:03,850
所以作为下一步

2
00:00:03,850 --> 00:00:06,560
我想允许这个网络应用的用户

3
00:00:06,560 --> 00:00:10,740
实际添加他或她自己的学习资源。

4
00:00:10,740 --> 00:00:12,300
所以为此我们需要一个表格

5
00:00:12,300 --> 00:00:16,660
用户可以在其中输入标题、描述和链接

6
00:00:16,660 --> 00:00:19,920
我实际上想给用户两个按钮

7
00:00:19,920 --> 00:00:23,600
可用于在此视图之间切换

8
00:00:23,600 --> 00:00:26,350
我们在哪里看到学习资源列表

9
00:00:26,350 --> 00:00:29,203
以及我们仍然必须创造的那种形式。

10
00:00:30,580 --> 00:00:33,520
因此，我将从添加一个新组件开始

11
00:00:33,520 --> 00:00:38,520
在学习资源中，就是添加resource.view文件

12
00:00:38,540 --> 00:00:40,350
这是哪个组件

13
00:00:40,350 --> 00:00:42,910
最终可以添加新资源。

14
00:00:42,910 --> 00:00:44,570
暂时在模板中

15
00:00:44,570 --> 00:00:47,010
我将添加一个 h2 标签

16
00:00:47,010 --> 00:00:51,920
我只想说添加资源

17
00:00:51,920 --> 00:00:54,480
这样我们就可以识别这个组件

18
00:00:54,480 --> 00:00:55,680
当它出现在屏幕上时。

19
00:00:56,620 --> 00:00:58,220
因为我真的想开始

20
00:00:58,220 --> 00:01:00,440
首先在另一个组件上工作，

21
00:01:00,440 --> 00:01:05,069
这就是theresources.view 组件。

22
00:01:05,069 --> 00:01:08,810
我选择这个命名是因为我们只会使用一次

23
00:01:08,810 --> 00:01:10,290
在整个应用程序中

24
00:01:10,290 --> 00:01:12,590
这将是一个主要的切入点

25
00:01:12,590 --> 00:01:15,400
我们这里的资源区。

26
00:01:15,400 --> 00:01:19,070
以及资源组件的想法

27
00:01:19,070 --> 00:01:22,800
是不是我们最终有标签，你可以说，

28
00:01:22,800 --> 00:01:24,870
我们有两个按钮可以让我们

29
00:01:24,870 --> 00:01:29,060
在存储资源之间切换和添加资源。

30
00:01:29,060 --> 00:01:31,430
因此，在该资源中

31
00:01:31,430 --> 00:01:34,350
我当然也添加了一个模板。

32
00:01:34,350 --> 00:01:38,550
在那个模板中，我现在想要这两个按钮。

33
00:01:38,550 --> 00:01:41,680
我实际上会将它们包装在基本卡组件中

34
00:01:41,680 --> 00:01:44,960
因为我想让那张卡片环顾四周。

35
00:01:44,960 --> 00:01:48,720
在那里我们可以添加一个基本按钮。

36
00:01:48,720 --> 00:01:51,060
准确地说，我们将添加两个基本按钮，

37
00:01:51,060 --> 00:01:52,970
所以我会复制它。

38
00:01:52,970 --> 00:01:56,470
第一个按钮显示存储的资源，

39
00:01:56,470 --> 00:02:00,380
所以这个按钮将我们带到存储资源组件。

40
00:02:00,380 --> 00:02:03,100
第二个按钮说添加资源

41
00:02:03,100 --> 00:02:05,690
因为那，你猜它会带我们去

42
00:02:05,690 --> 00:02:07,393
添加资源组件。

43
00:02:09,169 --> 00:02:10,560
我们现在如何实施呢？

44
00:02:10,560 --> 00:02:13,023
我们如何实现这个选项卡功能？

45
00:02:13,920 --> 00:02:17,510
我们实际上可以使用动态组件功能

46
00:02:17,510 --> 00:02:20,640
您在上一个课程模块中了解到。

47
00:02:20,640 --> 00:02:24,450
因此，在这里的脚本部分

48
00:02:24,450 --> 00:02:29,130
我将添加我的数据属性来存储一些数据

49
00:02:29,130​​ --> 00:02:31,830
仅属于该组件。

50
00:02:31,830 --> 00:02:36,830
在这里我想管理当前选择的选项卡。

51
00:02:37,080 --> 00:02:39,810
当然，这里的名字取决于你。

52
00:02:39,810 --> 00:02:43,500
我将从存储资源选项卡开始，

53
00:02:43,500 --> 00:02:46,780
但这也可以更改为添加资源

54
00:02:46,780 --> 00:02:48,200
然后我会用那个

55
00:02:48,200 --> 00:02:51,433
稍后在两个组件之间切换。

56
00:02:52,510 --> 00:02:54,390
所以现在我当然也想要一个方法

57
00:02:54,390 --> 00:02:57,250
这允许我更改选定的选项卡。

58
00:02:57,250 --> 00:02:59,400
所以让我们添加这个方法选项

59
00:02:59,400 --> 00:03:01,740
到这个配置对象，

60
00:03:01,740 --> 00:03:05,930
在这里我将添加一个 set selected tab 方法

61
00:03:05,930 --> 00:03:07,180
我在哪里得到标签

62
00:03:07,180 --> 00:03:09,280
应该选择作为我们的论点，

63
00:03:09,280 --> 00:03:12,783
然后我们可以将这个选定的选项卡设置为等于选项卡。

64
00:03:13,840 --> 00:03:17,300
现在应该在哪里调用这个方法？

65
00:03:17,300 --> 00:03:19,320
那将是我们的按钮。

66
00:03:19,320 --> 00:03:22,210
所以在第一个按钮上，点击一下

67
00:03:22,210 --> 00:03:26,460
我想调用这个方法。

68
00:03:26,460 --> 00:03:29,090
所以我将指向设置选定的选项卡

69
00:03:29,090 --> 00:03:31,390
并告诉你如何执行它。

70
00:03:31,390 --> 00:03:33,760
然后你应该在这里执行它

71
00:03:33,760 --> 00:03:36,523
带有存储资源的参数。

72
00:03:37,750 --> 00:03:39,680
在这里添加资源，

73
00:03:39,680 --> 00:03:44,680
我还将添加单击并设置选定选项卡以添加资源。

74
00:03:46,910 --> 00:03:50,130
现在让我们在这里稍作停顿

75
00:03:50,130 --> 00:03:52,080
因为我在这里做某事

76
00:03:52,080 --> 00:03:54,930
这实际上是我们以前没有做过的。

77
00:03:54,930 --> 00:03:57,170
你明白那是什么吗？

78
00:03:57,170 --> 00:03:59,983
它与动态组件无关。

79
00:04:01,140 --> 00:04:05,040
我在基本按钮上添加了一个点击监听器。

80
00:04:05,040 --> 00:04:08,460
好吧，一方面这可能不太花哨，

81
00:04:08,460 --> 00:04:10,480
我们向按钮添加了点击监听器

82
00:04:10,480 --> 00:04:12,340
整个课程。

83
00:04:12,340 --> 00:04:15,170
但请记住，这不是常规按钮。

84
00:04:15,170 --> 00:04:17,839
这是我们自己的自定义组件，

85
00:04:17,839 --> 00:04:20,600
为什么我不能在上面添加点击监听器？

86
00:04:20,600 --> 00:04:24,800
我的意思是，点击毕竟不是自定义事件

87
00:04:24,800 --> 00:04:26,220
我在那里发射。

88
00:04:26,220 --> 00:04:28,130
如果我们看一下基本按钮，

89
00:04:28,130 --> 00:04:30,830
这个组件不发出任何事件，

90
00:04:30,830 --> 00:04:34,060
在此按钮上，在本机 HTML 按钮上

91
00:04:34,060 --> 00:04:35,663
没有点击监听器。

92
00:04:36,920 --> 00:04:41,280
这实际上是 Vue 的一种特殊行为。

93
00:04:41,280 --> 00:04:46,280
当您在自定义组件上添加道具或事件侦听器时，

94
00:04:46,630 --> 00:04:50,150
然后默认情况下他们会失败

95
00:04:50,150 --> 00:04:52,170
到根级元素

96
00:04:52,170 --> 00:04:54,633
在那个自定义组件模板中。

97
00:04:55,890 --> 00:05:00,010
所以如果我添加任何道具或事件监听器

98
00:05:00,010 --> 00:05:02,430
以基本按钮为例，

99
00:05:02,430 --> 00:05:05,600
他们将失败并被应用

100
00:05:05,600 --> 00:05:10,240
到基本按钮模板中的根 HTML 元素，

101
00:05:10,240 --> 00:05:13,710
在这种情况下，它是本机 HTML 按钮。

102
00:05:13,710 --> 00:05:16,190
所以这个点击监听器在这里

103
00:05:16,190 --> 00:05:21,190
落入此模板中的本机按钮。

104
00:05:21,750 --> 00:05:25,910
所以它会自动添加到这个按钮，你可以说，

105
00:05:25,910 --> 00:05:27,760
这是在幕后发生的。

106
00:05:27,760 --> 00:05:30,530
这是 Vue.js 的一个重要行为

107
00:05:30,530 --> 00:05:32,170
我在这里使用的。

108
00:05:32,170 --> 00:05:33,860
我们以前没见过的

109
00:05:33,860 --> 00:05:37,510
因为我们真的没有一个很好的地方来使用它，

110
00:05:37,510 --> 00:05:40,340
但这绝对是对我们有帮助的东西

111
00:05:40,340 --> 00:05:42,363
用于包装此按钮。

112
00:05:43,260 --> 00:05:45,460
所以我们可以在这里添加这个点击监听器

113
00:05:45,460 --> 00:05:49,830
并在单击这些按钮时更改选定的选项卡。

114
00:05:49,830 --> 00:05:53,170
现在当然我不只是想让你在这里改变数据，

115
00:05:53,170 --> 00:05:57,730
我还想反映用户界面的变化。

116
00:05:57,730 --> 00:06:01,730
准确地说，我想渲染存储的资源

117
00:06:01,730 --> 00:06:04,520
或添加资源组件。

118
00:06:04,520 --> 00:06:07,590
因此在我的基本卡下面，

119
00:06:07,590 --> 00:06:11,020
我现在将添加内置组件，组件

120
00:06:11,020 --> 00:06:13,790
这是您使用的那个组件

121
00:06:13,790 --> 00:06:15,733
如您所学的动态组件。

122
00:06:17,090 --> 00:06:19,690
在这里我们绑定 is 道具

123
00:06:19,690 --> 00:06:23,470
告诉您应该在此处呈现哪个实际组件。

124
00:06:23,470 --> 00:06:26,910
所以我们需要传递HTML元素标签

125
00:06:26,910 --> 00:06:28,850
关闭我们的自定义组件。

126
00:06:28,850 --> 00:06:31,400
现在这就是为什么我在这里使用我的标签

127
00:06:31,400 --> 00:06:35,510
作为选定的选项卡存储资源并添加资源

128
00:06:35,510 --> 00:06:39,550
那将是我的自定义组件 HTML 标记。

129
00:06:39,550 --> 00:06:42,693
因此，我们可以在这里指向选定的选项卡。

130
00:06:43,780 --> 00:06:46,060
当然，这现在只会起作用

131
00:06:46,060 --> 00:06:49,410
如果我们在这里注册我自己的组件。

132
00:06:49,410 --> 00:06:53,430
因为当前添加资源无处注册，

133
00:06:53,430 --> 00:06:58,040
并且存储的资源注册在 app.vue 文件中。

134
00:06:58,040 --> 00:06:59,870
现在如果我们在那里注册它，

135
00:06:59,870 --> 00:07:02,620
它实际上只在模板中可用，

136
00:07:02,620 --> 00:07:04,900
它在其他任何地方都不可用。

137
00:07:04,900 --> 00:07:06,930
所以要保证存储的资源

138
00:07:06,930 --> 00:07:10,160
可以在这里使用他们的资源，

139
00:07:10,160 --> 00:07:12,060
我会从这里删除它

140
00:07:12,060 --> 00:07:14,330
因为我们在这里不再需要它了。

141
00:07:14,330 --> 00:07:17,070
如果我们愿意，我们也可以在那里注册。

142
00:07:17,070 --> 00:07:20,980
可以在多个组件中本地注册一个组件，

143
00:07:20,980 --> 00:07:22,720
但我们在这里不需要它。

144
00:07:22,720 --> 00:07:25,920
相反，我现在去资源

145
00:07:25,920 --> 00:07:29,210
在此处导入存储的资源，

146
00:07:29,210 --> 00:07:33,140
虽然我需要调整导入路径

147
00:07:33,140 --> 00:07:36,130
因为实际上存储的 resources.view 文件

148
00:07:36,130 --> 00:07:40,590
现在与 resources.view 位于同一文件夹中。

149
00:07:40,590 --> 00:07:42,423
然后在组件中，

150
00:07:44,910 --> 00:07:48,540
我想注册存储的资源。

151
00:07:48,540 --> 00:07:49,710
当然也一样

152
00:07:49,710 --> 00:07:53,780
对于新添加的添加资源组件

153
00:07:53,780 --> 00:07:57,710
从添加资源视图导入。

154
00:07:57,710 --> 00:08:01,173
然后在这里注册为本地组件。

155
00:08:03,320 --> 00:08:05,160
现在我们将能够渲染两者

156
00:08:05,160 --> 00:08:07,540
但我们会有几个问题。

157
00:08:07,540 --> 00:08:09,760
现在对于应用程序视图中的一个，

158
00:08:09,760 --> 00:08:13,610
我不再可以使用这个存储资源组件，

159
00:08:13,610 --> 00:08:16,460
所以我们应该从模板中删除它。

160
00:08:16,460 --> 00:08:21,370
但除此之外，存储资源也需要一个道具。

161
00:08:21,370 --> 00:08:23,710
它想要这个资源道具

162
00:08:23,710 --> 00:08:27,170
我用它来循环所有资源。

163
00:08:27,170 --> 00:08:30,300
现在我们在这里使用动态组件，

164
00:08:30,300 --> 00:08:33,059
我不再传递那个道具。

165
00:08:33,059 --> 00:08:35,693
那么接下来我们该如何解决呢？