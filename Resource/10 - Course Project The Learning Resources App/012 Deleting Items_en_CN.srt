1
00:00:02,100 --> 00:00:05,230
因此，让我们确保可以删除资源。

2
00:00:05,230 --> 00:00:07,720
为此，我们在这里得到了这个删除按钮

3
00:00:07,720 --> 00:00:10,600
在学习 Resource.view 文件中。

4
00:00:10,600 --> 00:00:13,408
目前这个按钮没有做任何事情。

5
00:00:13,408 --> 00:00:17,850
现在当然应该删除资源

6
00:00:17,850 --> 00:00:22,040
我们从 storedResources 数组中单击它

7
00:00:22,040 --> 00:00:23,778
在资源中。

8
00:00:23,778 --> 00:00:26,740
现在，由于我们使用的是动态组件，

9
00:00:26,740 --> 00:00:30,349
自定义事件可能不是我们想要解决的问题。

10
00:00:30,349 --> 00:00:35,040
因此，相反，我会像我们正在处理的那样做

11
00:00:35,040 --> 00:00:37,360
它用于添加资源。

12
00:00:37,360 --> 00:00:41,920
我将在这里添加一个 removeResource 方法，

13
00:00:41,920 --> 00:00:44,770
我希望在哪里获得该资源 ID

14
00:00:44,770 --> 00:00:47,590
应该删除的资源。

15
00:00:47,590 --> 00:00:50,353
现在我们需要更新我们的存储资源。

16
00:00:52,420 --> 00:00:54,310
现在，有两种方法可以做到这一点，

17
00:00:54,310 --> 00:00:56,240
我会，首先给你指路

18
00:00:56,240 --> 00:01:00,196
这将不起作用，并让您知道为什么它不起作用。

19
00:01:00,196 --> 00:01:04,430
第一种方法是我们设置我们的 storedResources

20
00:01:04,430 --> 00:01:07,300
等于一个新数组，一个新数组，

21
00:01:07,300 --> 00:01:09,930
这是来自storedResources的河，

22
00:01:09,930 --> 00:01:13,130
但是我们使用filter方法过滤掉的地方

23
00:01:13,130 --> 00:01:15,700
具有此 ID 的资源。

24
00:01:15,700 --> 00:01:18,730
为此，我们可以在每个资源上执行一个函数。

25
00:01:18,730 --> 00:01:21,106
JavaScript 会自动为我们做这件事。

26
00:01:21,106 --> 00:01:24,689
我们将确保资源

27
00:01:24,689 --> 00:01:26,610
用我们得到的 ID

28
00:01:26,610 --> 00:01:29,233
通过添加此代码被删除。

29
00:01:30,871 --> 00:01:34,480
如果我 Console.log 这个，这确实会，

30
00:01:34,480 --> 00:01:36,683
这确实将确保资源

31
00:01:36,683 --> 00:01:38,403
从 storedResources 中删除。

32
00:01:39,495 --> 00:01:42,120
我们现在可以提供这个功能

33
00:01:42,120 --> 00:01:44,980
就像我们提供 addResource 一样。

34
00:01:44,980 --> 00:01:47,920
我们可以在这里添加 deleteResource 作为键，

35
00:01:47,920 --> 00:01:49,570
并指向这个removeResource。

36
00:01:50,870 --> 00:01:52,910
当然你可以在这里使用相同的名字

37
00:01:52,910 --> 00:01:54,650
如果你想要那个。

38
00:01:54,650 --> 00:01:57,081
现在我们可以注入 deleteResource

39
00:01:57,081 --> 00:01:59,940
进入学习资源组件。

40
00:01:59,940 --> 00:02:03,780
在这里我们现在可以注入 deleteResource

41
00:02:04,630 --> 00:02:06,260
所以这个新添加的键，

42
00:02:06,260 --> 00:02:09,580
它指向 removeResource 方法。

43
00:02:09,580 --> 00:02:13,030
当用户在这里点击这个按钮时

44
00:02:13,030 --> 00:02:15,641
使用点击监听器，我们指向这个

45
00:02:15,641 --> 00:02:19,153
注入的 deleteResource 方法。

46
00:02:20,990 --> 00:02:24,700
实际上，我们不仅指向它，还执行它。

47
00:02:24,700 --> 00:02:27,480
为此，我们需要资源的概念。

48
00:02:27,480 --> 00:02:29,843
所以我们应该期待它作为一个道具。

49
00:02:31,500 --> 00:02:34,670
一旦我们确实将这个资源作为道具的想法，

50
00:02:34,670 --> 00:02:37,038
我们可以在这里使用它来提供它

51
00:02:37,038 --> 00:02:39,550
deleteResource 方法，因此

52
00:02:39,550 --> 00:02:43,193
到资源中的 removeResource 方法。

53
00:02:44,500 --> 00:02:48,230
现在我们只需要确保提供了这个 ID 属性。

54
00:02:48,230 --> 00:02:51,490
所以在我们正在创建的 storedResources 中

55
00:02:51,490 --> 00:02:54,465
所有的学习资源，我们现在也提供

56
00:02:54,465 --> 00:02:57,293
我们刚刚添加的这个 ID 道具。

57
00:02:59,700 --> 00:03:02,890
这样它应该可以工作，但你会注意到

58
00:03:02,890 --> 00:03:06,520
如果我单击删除，则不会发生任何事情。

59
00:03:06,520 --> 00:03:09,385
另一方面，如果我打开开发者工具，

60
00:03:09,385 --> 00:03:13,230
我们将看到该资源已被删除。

61
00:03:13,230 --> 00:03:18,230
如果我不记录资源，我们实际上可以最好地看到这一点。

62
00:03:18,230 --> 00:03:20,163
但是例如，这里的长度。

63
00:03:21,010 --> 00:03:23,620
如果长度为 1，则表示资源

64
00:03:23,620 --> 00:03:27,125
被删除是因为最初我们的长度为 2。

65
00:03:27,125 --> 00:03:28,440
所以让我们再试一次。

66
00:03:28,440 --> 00:03:30,590
如果我重新加载，请单击 D删除，你会看到，

67
00:03:30,590 --> 00:03:32,135
我们得到一个长度。

68
00:03:32,135 --> 00:03:34,170
所以资源被删除了，

69
00:03:34,170 --> 00:03:36,370
但我们在屏幕上看不到这一点。

70
00:03:36,370 --> 00:03:37,203
为什么？

71
00:03:38,610 --> 00:03:42,540
因为提供注入以及它是如何工作的。

72
00:03:42,540 --> 00:03:47,380
我们确实在这里提供了我们的存储资源。

73
00:03:47,380 --> 00:03:50,210
现在，视图执行这个提供方法

74
00:03:50,210 --> 00:03:52,940
最后当它创建这个组件时。

75
00:03:52,940 --> 00:03:56,526
所以它然后注入这个 storedResources 数组

76
00:03:56,526 --> 00:04:00,220
进入所有需要资源的组件。

77
00:04:00,220 --> 00:04:02,550
问题是，这是一个数组，

78
00:04:02,550 --> 00:04:06,100
因此它是存储在内存中的值。

79
00:04:06,100 --> 00:04:09,410
它是 JavaScript 中的参考值。

80
00:04:09,410 --> 00:04:13,410
当我们通过 push 或 unshift 来改变这个数组时，

81
00:04:13,410 --> 00:04:15,600
因为我们这样做是为了添加资源

82
00:04:15,600 --> 00:04:18,269
改变内存中的同一个数组，

83
00:04:18,269 --> 00:04:20,260
我们最初提供的，

84
00:04:20,260 --> 00:04:22,619
因此认为能够识别

85
00:04:22,619 --> 00:04:24,650
我们对其所做的更改。

86
00:04:24,650 --> 00:04:28,000
以及所有注入此 Resources 密钥的地方，

87
00:04:28,000 --> 00:04:30,593
将收到有关这些更改的通知。

88
00:04:32,000 --> 00:04:34,320
但是，如果我们使用这种方法，

89
00:04:34,320 --> 00:04:39,243
我用一个全新的数组覆盖了这个 storedResources。

90
00:04:39,243 --> 00:04:44,040
然后不再提供这个全新的阵列

91
00:04:44,040 --> 00:04:45,760
到所有其他组件。

92
00:04:45,760 --> 00:04:48,842
所以所有注入资源的组件

93
00:04:48,842 --> 00:04:53,023
仍在使用旧的，使用原始数组。

94
00:04:54,080 --> 00:04:55,910
那么我们该如何解决呢？

95
00:04:55,910 --> 00:04:59,290
好吧，在这里解决这个问题的一种简单方法

96
00:04:59,290 --> 00:05:02,732
是我们不覆盖旧数组，

97
00:05:02,732 --> 00:05:06,850
但相反，我们使用了稍微不同的方法。

98
00:05:06,850 --> 00:05:10,550
我们得到要删除的资源的索引

99
00:05:10,550 --> 00:05:12,800
在我们的 storedResources 数组中。

100
00:05:12,800 --> 00:05:15,670
我们可以用 findIndex 方法做到这一点，

101
00:05:15,670 --> 00:05:18,540
它存在于 JavaScript 数组中。

102
00:05:18,540 --> 00:05:21,630
在这里我想找到ID所在的资源

103
00:05:21,630 --> 00:05:25,300
等于我们作为参数获得的资源 ID。

104
00:05:25,300 --> 00:05:28,220
那就是给我们资源的索引

105
00:05:28,220 --> 00:05:29,273
我们想删除。

106
00:05:30,890 --> 00:05:33,320
然后我们可以使用拼接方法

107
00:05:33,320 --> 00:05:36,770
在 storedResources 数组上进行拼接。

108
00:05:36,770 --> 00:05:40,840
所以要在这个索引处删除这个元素

109
00:05:40,840 --> 00:05:42,563
只是这个元素。

110
00:05:44,080 --> 00:05:46,580
这会操纵原始数组

111
00:05:46,580 --> 00:05:48,810
而不是创建一个新的。

112
00:05:48,810 --> 00:05:51,310
所以这就像推和不换，

113
00:05:51,310 --> 00:05:54,720
因此这里的观点将能够认识到这一点

114
00:05:54,720 --> 00:05:57,791
以及注入这个数组的所有组件

115
00:05:57,791 --> 00:06:00,282
也会注意到这一点。

116
00:06:00,282 --> 00:06:03,320
所以现在如果我重新加载并点击删除，

117
00:06:03,320 --> 00:06:07,030
我们可以删除资源。

118
00:06:07,030 --> 00:06:10,080
所以我们也在这里添加一个新的资源

119
00:06:12,570 --> 00:06:15,120
我们也可以删除它。

120
00:06:15,120 --> 00:06:17,286
所以现在一切正常，

121
00:06:17,286 --> 00:06:21,160
就这样，我们完成了这个应用程序。

122
00:06:21,160 --> 00:06:24,630
我们使用了很多你学到的概念

123
00:06:24,630 --> 00:06:26,590
在最后的模块中。

124
00:06:26,590 --> 00:06:30,250
因此希望你现在有一个更好的主意

125
00:06:30,250 --> 00:06:32,290
如何使用组件，

126
00:06:32,290 --> 00:06:36,670
如何构建至少一点点更大的视图应用程序

127
00:06:36,670 --> 00:06:39,873
以及所有这些不同的功能如何协同工作。