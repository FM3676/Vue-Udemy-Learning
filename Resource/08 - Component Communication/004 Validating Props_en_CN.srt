1
00:00:02,320 --> 00:00:05,063
所以道具很重要，你可以说，

2
00:00:06,230 --> 00:00:09,320
到目前为止，我们正在指定这样的道具，

3
00:00:09,320 --> 00:00:12,770
作为我们期望得到的道具数组

4
00:00:12,770 --> 00:00:15,960
每个道具都只是作为字符串添加的。

5
00:00:15,960 --> 00:00:17,210
我提到这将是

6
00:00:17,210 --> 00:00:19,690
最低限度的配置。

7
00:00:19,690 --> 00:00:21,820
有了那个视图会让你知道道具

8
00:00:21,820 --> 00:00:22,980
你期望得到，

9
00:00:22,980 --> 00:00:25,743
但您没有提供任何其他信息以供查看。

10
00:00:26,840 --> 00:00:29,400
这没关系，尤其是对于简单的应用程序

11
00:00:29,400 --> 00:00:31,160
或简单的组件，

12
00:00:31,160 --> 00:00:33,360
但对于更复杂的组件，

13
00:00:33,360 --> 00:00:36,490
尤其是在团队中工作时，例如，

14
00:00:36,490 --> 00:00:38,650
您可能想分享更多信息

15
00:00:38,650 --> 00:00:40,160
关于你的道具。

16
00:00:40,160 --> 00:00:42,940
简单地说，这样视图可以让你知道

17
00:00:42,940 --> 00:00:45,800
如果您将不正确的数据传递给组件

18
00:00:45,800 --> 00:00:48,453
或者如果您忘记了一些必需的道具。

19
00:00:49,390 --> 00:00:53,720
为此，您可以替换这个道具数组，

20
00:00:53,720 --> 00:00:56,410
实际上我会复制并注释掉

21
00:00:56,410 --> 00:00:59,020
这样你仍然可以参考，

22
00:00:59,020 --> 00:01:01,410
你可以用一个对象替换它。

23
00:01:01,410 --> 00:01:03,890
在那个对象中，你现在有了你的道具

24
00:01:03,890 --> 00:01:06,860
作为 JavaScript 属性名称，

25
00:01:06,860 --> 00:01:09,480
然后是它们的某些值。

26
00:01:09,480 --> 00:01:13,210
这里是最基本的额外信息

27
00:01:13,210 --> 00:01:16,870
您可以提供的是您希望获得的数据类型。

28
00:01:16,870 --> 00:01:18,930
例如，字符串。

29
00:01:18,930 --> 00:01:22,320
明确 main prop 的值

30
00:01:22,320 --> 00:01:23,780
应该是一个字符串。

31
00:01:23,780 --> 00:01:26,730
如果改为提供一个数字，

32
00:01:26,730 --> 00:01:28,543
我们会得到一个错误。

33
00:01:29,850 --> 00:01:33,990
旁注，我说的是提供的数字类型。

34
00:01:33,990 --> 00:01:36,100
不是包含数字的文本。

35
00:01:36,100 --> 00:01:37,260
那当然没问题

36
00:01:37,260 --> 00:01:39,090
因为这将是一个字符串。

37
00:01:39,090 --> 00:01:41,270
所以我们可以这样做，

38
00:01:41,270 --> 00:01:43,470
现在明确说明我们所有的数据，

39
00:01:43,470 --> 00:01:44,940
目前，至少，

40
00:01:44,940 --> 00:01:48,170
正在得到这样的字符串。

41
00:01:48,170 --> 00:01:50,440
所以现在我们说这个组件

42
00:01:50,440 --> 00:01:53,860
将获得姓名、电话号码、电子邮件地址，

43
00:01:53,860 --> 00:01:55,820
和 isFavorite 道具，

44
00:01:55,820 --> 00:01:59,190
每个道具都应该得到一个字符串类型的值。

45
00:01:59,190 --> 00:02:01,230
增强当然有效

46
00:02:01,230 --> 00:02:03,403
但现在我们提供更多信息。

47
00:02:04,620 --> 00:02:07,470
但你可以比这更详细。

48
00:02:07,470 --> 00:02:10,520
不仅仅是在这里提供那种类型，

49
00:02:10,520 --> 00:02:13,540
您可以提供一个对象作为值

50
00:02:13,540 --> 00:02:16,260
对于你期望得到的道具。

51
00:02:16,260 --> 00:02:18,420
而在这个对象中，

52
00:02:18,420 --> 00:02:23,420
你现在可以添加一个类型，属性，它保存类型

53
00:02:23,610 --> 00:02:25,320
你想得到的道具，

54
00:02:25,320 --> 00:02:27,610
但您也可以添加更多属性。

55
00:02:27,610 --> 00:02:29,940
现在没有您选择的任何属性，

56
00:02:29,940 --> 00:02:33,170
相反，特定的属性视图将寻找，

57
00:02:33,170 --> 00:02:36,970
例如类型，也是必需的。

58
00:02:36,970 --> 00:02:40,490
表示是否有这个prop，这里的名字prop

59
00:02:40,490 --> 00:02:42,550
是否需要。

60
00:02:42,550 --> 00:02:45,220
这应该是真的还是假的。

61
00:02:45,220 --> 00:02:46,860
所以在这里我们可以说清楚

62
00:02:46,860 --> 00:02:50,230
这个组件，朋友联系组件，

63
00:02:50,230 --> 00:02:53,433
需要一个名称道具，这是必需的。

64
00:02:55,190 --> 00:02:57,710
当然，我们也可以对其他道具做同样的事情。

65
00:02:57,710 --> 00:03:01,403
输入字符串，电话号码也是必需的。

66
00:03:02,630 --> 00:03:04,410
以及电子邮件地址。

67
00:03:04,410 --> 00:03:06,993
我们想得到一个字符串，这是必需的。

68
00:03:08,060 --> 00:03:11,520
现在假设 isFavorite 属性也是一个类型字符串

69
00:03:11,520 --> 00:03:12,993
但这不是必需的。

70
00:03:15,280 --> 00:03:18,880
在这种情况下，如果你有一个不需要的道具，

71
00:03:18,880 --> 00:03:20,960
您可以添加默认密钥，

72
00:03:20,960 --> 00:03:23,370
在您提供默认值的地方，

73
00:03:23,370 --> 00:03:26,600
如果应该缺少道具，将使用它。

74
00:03:26,600 --> 00:03:29,770
所以这里例如，零，所以默认情况下，

75
00:03:29,770 --> 00:03:32,393
这个组件不是最喜欢的。

76
00:03:33,640 --> 00:03:36,500
顺便说一下default也可以是一个函数，

77
00:03:36,500 --> 00:03:39,910
你可以有一个更复杂的代码片段

78
00:03:39,910 --> 00:03:42,350
执行以派生默认值。

79
00:03:42,350 --> 00:03:46,223
但在这里我只是将它设置为零作为一个字符串。

80
00:03:48,150 --> 00:03:50,650
您还可以添加验证器

81
00:03:50,650 --> 00:03:52,390
它拥有一个功能，

82
00:03:52,390 --> 00:03:55,070
这应该返回真或假。

83
00:03:55,070 --> 00:03:57,530
这个验证器函数将得到

84
00:03:57,530 --> 00:04:00,160
为道具提供的价值

85
00:04:00,160 --> 00:04:03,850
然后您可以选择任何验证对象

86
00:04:03,850 --> 00:04:06,770
找出这是否是有效值。

87
00:04:06,770 --> 00:04:09,240
所以这里以 isFavorite 为例

88
00:04:09,240 --> 00:04:12,600
我们可以检查值是否等于一，

89
00:04:12,600 --> 00:04:16,329
或者如果值等于零，

90
00:04:16,329 --> 00:04:18,529
这将能够产生真正的

91
00:04:18,529 --> 00:04:20,610
如果两者中的任何一个是正确的，

92
00:04:20,610 --> 00:04:23,720
或假，如果我们得到一个完全不同的值。

93
00:04:23,720 --> 00:04:26,270
因此，我们可以确保真的只有

94
00:04:26,270 --> 00:04:29,143
这里允许值 1 和 0。

95
00:04:30,620 --> 00:04:32,970
这背后的整个想法是什么？

96
00:04:32,970 --> 00:04:36,640
好吧，有了这里更详细的配置，

97
00:04:36,640 --> 00:04:39,750
我们可以去我们使用组件的地方，

98
00:04:39,750 --> 00:04:43,100
例如省略 isFavorite，比方说，

99
00:04:43,100 --> 00:04:45,713
关于这里的第二个部分，关于朱莉。

100
00:04:47,730 --> 00:04:50,070
有了这个，应用程序仍然有效，

101
00:04:50,070 --> 00:04:55,070
因为我们使这个道具 isFavorite 不是必需的，

102
00:04:55,480 --> 00:04:59,023
它是可选的，我们有一个默认的后备值。

103
00:04:59,990 --> 00:05:04,270
另一方面，如果我在这里删除名称并保存它，

104
00:05:04,270 --> 00:05:06,300
我们这里没有错误，

105
00:05:06,300 --> 00:05:08,140
但是如果我们打开开发者工具

106
00:05:08,140 --> 00:05:10,120
和这里的 JavaScript 控制台，

107
00:05:10,120 --> 00:05:12,000
我们通过视图收到警告，

108
00:05:12,000 --> 00:05:15,040
我们缺少必需的道具名称。

109
00:05:15,040 --> 00:05:17,490
这有助于我们作为开发人员

110
00:05:17,490 --> 00:05:21,450
在开发过程中更快地发现此类错误。

111
00:05:21,450 --> 00:05:24,040
而且我们不必猜测为什么组件

112
00:05:24,040 --> 00:05:25,770
现在不再工作了。

113
00:05:25,770 --> 00:05:27,740
相反，我们得到了明确的警告。

114
00:05:27,740 --> 00:05:29,970
所以这非常有用。

115
00:05:29,970 --> 00:05:32,520
让我们把这个名字带回来。

116
00:05:32,520 --> 00:05:36,280
例如，如果我为 isFavorite 提供了无效值，

117
00:05:36,280 --> 00:05:38,570
我们收到了无效的道具警告，

118
00:05:38,570 --> 00:05:41,430
因为我们的自定义验证器检查失败。

119
00:05:41,430 --> 00:05:43,930
我们没有提供一或零，

120
00:05:43,930 --> 00:05:47,490
而是 100，这根本是无效的，

121
00:05:47,490 --> 00:05:49,530
如此处所指定。

122
00:05:49,530 --> 00:05:52,950
所以你可以有更复杂的道具定义

123
00:05:52,950 --> 00:05:56,473
以确保您的组件真正得到正确使用。

124
00:05:58,160 --> 00:06:00,840
现在最终，当然，它是你的组件，

125
00:06:00,840 --> 00:06:03,530
所以这取决于你想要多详细。

126
00:06:03,530 --> 00:06:06,950
如果你有一个完整的项目是你自己工作的，

127
00:06:06,950 --> 00:06:10,060
你可能不需要那些更详细的配置，

128
00:06:10,060 --> 00:06:12,090
因为你知道你所有的组件

129
00:06:12,090 --> 00:06:13,943
还有你所有的道具。

130
00:06:14,870 --> 00:06:17,840
但是，如果您要与其他人共享您的组件，

131
00:06:17,840 --> 00:06:19,630
作为第三方包

132
00:06:19,630 --> 00:06:21,810
或者因为你在一个团队中工作，

133
00:06:21,810 --> 00:06:23,250
你可能想提供

134
00:06:23,250 --> 00:06:25,720
如此详细的道具定义

135
00:06:25,720 --> 00:06:28,380
这样所有使用您的组件的人

136
00:06:28,380 --> 00:06:31,780
能够很快看到该组件是如何工作的，

137
00:06:31,780 --> 00:06:33,200
它需要哪个状态，

138
00:06:33,200 --> 00:06:37,120
以及何时道具有效或无效。

139
00:06:37,120 --> 00:06:38,970
在这里得到这样的额外警告

140
00:06:38,970 --> 00:06:40,550
那么真的很有帮助

141
00:06:40,550 --> 00:06:42,590
让你的开发者生活

142
00:06:42,590 --> 00:06:44,473
容易得多。

143
00:06:45,860 --> 00:06:48,810
这就是更复杂的背后的想法

144
00:06:48,810 --> 00:06:51,610
道具定义和道具验证，

145
00:06:51,610 --> 00:06:53,260
我在这里给你看了。

146
00:06:53,260 --> 00:06:55,410
现在对于大部分课程，

147
00:06:55,410 --> 00:06:58,500
我将使用更简单的定义类型，

148
00:06:58,500 --> 00:07:02,540
此数组或仅定义值类型

149
00:07:02,540 --> 00:07:04,360
但我想让你意识到这一点

150
00:07:04,360 --> 00:07:06,970
所以如果你在做一个更大的项目，

151
00:07:06,970 --> 00:07:10,920
你确实知道如何更明确地说明你的道具

152
00:07:10,920 --> 00:07:12,420
以及它们应该是什么样子。