1
00:00:02,360 --> 00:00:03,870
So that's it for this

2
00:00:03,870 --> 00:00:06,430
Component Communication module.

3
00:00:06,430 --> 00:00:08,620
Again, another big module

4
00:00:08,620 --> 00:00:11,210
with a lot of important concepts taught,

5
00:00:11,210 --> 00:00:14,380
but in the end, really just a couple of core concepts,

6
00:00:14,380 --> 00:00:16,210
which you need to keep in mind

7
00:00:16,210 --> 00:00:19,360
to let your components talk to each other.

8
00:00:19,360 --> 00:00:20,810
Now in general,

9
00:00:20,810 --> 00:00:24,240
components are used to build user interfaces

10
00:00:24,240 --> 00:00:25,570
by combining them.

11
00:00:25,570 --> 00:00:27,480
The great thing about components is

12
00:00:27,480 --> 00:00:30,910
that you can encapsulate logic in a template

13
00:00:30,910 --> 00:00:34,840
and split your code into multiple smaller pieces,

14
00:00:34,840 --> 00:00:37,390
and that you can also reuse components,

15
00:00:37,390 --> 00:00:41,630
for example, components that encapsulate list items.

16
00:00:41,630 --> 00:00:46,370
Components then form parent-child relations automatically.

17
00:00:46,370 --> 00:00:50,870
If you use component B in the template of component A

18
00:00:50,870 --> 00:00:54,820
then component A is a parent of component B,

19
00:00:54,820 --> 00:00:57,030
which would be the child in this case.

20
00:00:57,030 --> 00:00:59,010
And if you have a component C

21
00:00:59,010 --> 00:01:01,200
in the template of component B,

22
00:01:01,200 --> 00:01:06,200
C is a child of B and also kind of a child to component A.

23
00:01:06,230 --> 00:01:08,550
That is what I talked about throughout this module

24
00:01:08,550 --> 00:01:11,350
and what you saw in action as well.

25
00:01:11,350 --> 00:01:12,560
And this matters,

26
00:01:12,560 --> 00:01:16,280
because when we talk about component communication,

27
00:01:16,280 --> 00:01:17,750
you need to keep in mind

28
00:01:17,750 --> 00:01:22,750
that Vue uses unidirectional data flows for communication.

29
00:01:23,150 --> 00:01:23,983
So basically,

30
00:01:23,983 --> 00:01:27,570
that we have ways of passing data down to a component

31
00:01:27,570 --> 00:01:32,120
or also up from a component using a different concept.

32
00:01:32,120 --> 00:01:34,640
Well, and these are the concepts.

33
00:01:34,640 --> 00:01:37,750
For passing data down we have Props.

34
00:01:37,750 --> 00:01:41,830
This allows us to pass data from a parent to a child.

35
00:01:41,830 --> 00:01:43,930
So props are used for just that,

36
00:01:43,930 --> 00:01:46,786
and we should define props in advance

37
00:01:46,786 --> 00:01:50,380
in that child component which will receive them.

38
00:01:50,380 --> 00:01:53,020
You can either just specify an array

39
00:01:53,020 --> 00:01:55,960
to let you know about the props you want to receive,

40
00:01:55,960 --> 00:01:58,170
or you go into greater detail,

41
00:01:58,170 --> 00:01:59,610
and you also let Vue know

42
00:01:59,610 --> 00:02:01,700
which type of data you're expecting,

43
00:02:01,700 --> 00:02:04,480
whether a prop is required and all of that.

44
00:02:04,480 --> 00:02:06,230
You saw that in great detail

45
00:02:06,230 --> 00:02:07,963
throughout this module as well.

46
00:02:09,470 --> 00:02:11,950
If you need the other direction,

47
00:02:11,950 --> 00:02:13,870
so from child to parent,

48
00:02:13,870 --> 00:02:15,870
you need Custom Events.

49
00:02:15,870 --> 00:02:19,070
A component can emit a custom event,

50
00:02:19,070 --> 00:02:22,270
with help of the built-in dollar sign emit method,

51
00:02:22,270 --> 00:02:25,560
to let a parent component know about something

52
00:02:25,560 --> 00:02:27,230
and to trigger code

53
00:02:27,230 --> 00:02:30,123
or trigger a method in the parent component.

54
00:02:31,400 --> 00:02:33,800
Custom events also can carry data,

55
00:02:33,800 --> 00:02:35,650
as you saw throughout this module,

56
00:02:35,650 --> 00:02:39,750
so that you for example, can forward data the user entered

57
00:02:39,750 --> 00:02:41,580
into some input fields,

58
00:02:41,580 --> 00:02:44,180
the idea of something which was selected

59
00:02:44,180 --> 00:02:48,100
or whichever data you need in your use case.

60
00:02:48,100 --> 00:02:51,910
So we have parent-child and child-parent communication.

61
00:02:51,910 --> 00:02:55,820
What we don't have here is neighbor communication.

62
00:02:55,820 --> 00:02:58,950
So if we have two sibling elements.

63
00:02:58,950 --> 00:03:02,050
And I talked about this throughout the module as well.

64
00:03:02,050 --> 00:03:06,430
If you have a scenario where two neighbor components

65
00:03:06,430 --> 00:03:08,110
need to exchange data,

66
00:03:08,110 --> 00:03:08,960
you will, in the end,

67
00:03:08,960 --> 00:03:11,900
always use the common parent component

68
00:03:11,900 --> 00:03:14,010
of these two sibling components,

69
00:03:14,010 --> 00:03:15,650
store the data in there,

70
00:03:15,650 --> 00:03:18,580
and then talk to that parent from each sibling

71
00:03:18,580 --> 00:03:20,150
and pass the data down

72
00:03:20,150 --> 00:03:23,110
to the respective sibling components that need the data.

73
00:03:23,110 --> 00:03:25,640
So you always have parent-child in the end.

74
00:03:25,640 --> 00:03:29,183
You don't have sibling communication or anything like that.

75
00:03:31,070 --> 00:03:32,910
Sometimes you have the scenario

76
00:03:32,910 --> 00:03:36,210
that you have a lot of components in the way

77
00:03:36,210 --> 00:03:38,370
through which you need to pass your data

78
00:03:38,370 --> 00:03:40,050
or your custom event.

79
00:03:40,050 --> 00:03:43,260
And for that you got this Provide-Inject pattern,

80
00:03:43,260 --> 00:03:46,000
which I showed you at the end of this module.

81
00:03:46,000 --> 00:03:49,890
If your data needs to travel through a lot of components,

82
00:03:49,890 --> 00:03:53,010
which basically just pass that data through,

83
00:03:53,010 --> 00:03:55,530
with help of Props or Custom Events,

84
00:03:55,530 --> 00:03:59,000
then you might want to consider Provide-Inject.

85
00:03:59,000 --> 00:04:02,520
That allows you to provide data in a parent component

86
00:04:02,520 --> 00:04:05,810
and then inject it into any child component,

87
00:04:05,810 --> 00:04:08,390
no matter how deeply nested it is,

88
00:04:08,390 --> 00:04:09,996
without passing the data

89
00:04:09,996 --> 00:04:12,590
through multiple levels of components

90
00:04:12,590 --> 00:04:15,240
with Props or Custom Events.

91
00:04:15,240 --> 00:04:16,510
Now, as I mentioned,

92
00:04:16,510 --> 00:04:19,060
don't use Provide-Inject to replace

93
00:04:19,060 --> 00:04:21,510
all your Props or Custom Events with it.

94
00:04:21,510 --> 00:04:23,360
Instead, really only use it

95
00:04:23,360 --> 00:04:28,000
if you need this long range communication, you could say.

96
00:04:28,000 --> 00:04:29,980
And that really is all you need to know

97
00:04:29,980 --> 00:04:32,940
about Component Communication at this point.

98
00:04:32,940 --> 00:04:36,720
Make sure you understood the concepts taught in this module

99
00:04:36,720 --> 00:04:38,660
and with that let's advance

100
00:04:38,660 --> 00:04:41,943
and let's dig deeper into Vue and into components.

