1
00:00:02,120 --> 00:00:04,540
那么Vue是如何帮助我们解决的

2
00:00:04,540 --> 00:00:06,790
这样的传递问题？

3
00:00:06,790 --> 00:00:09,430
首先，了解这一点非常重要

4
00:00:09,430 --> 00:00:12,710
这不一定是问题，也不错。

5
00:00:12,710 --> 00:00:15,640
你可以像我们在这里做的那样做，

6
00:00:15,640 --> 00:00:19,040
但是为了节省编写额外的代码，

7
00:00:19,040 --> 00:00:22,890
你也可以去掉，比如说这里的道具，

8
00:00:22,890 --> 00:00:24,170
让我们从主题开始。

9
00:00:24,170 --> 00:00:25,830
你不能在这里摆脱它，

10
00:00:25,830 --> 00:00:28,610
在 KnowledgeGrid 上摆脱它。

11
00:00:28,610 --> 00:00:32,259
就目前而言，只需保留发出的事件，

12
00:00:32,259 --> 00:00:35,270
然后将主题传递给 KnowledgeGrid

13
00:00:35,270 --> 00:00:36,410
以不同的方式。

14
00:00:36,410 --> 00:00:38,590
因为我们需要话题引导。

15
00:00:38,590 --> 00:00:42,740
我们当然也需要在 App.vue 中管理它们。

16
00:00:42,740 --> 00:00:46,500
由于App.vue，是活动元素的地方，

17
00:00:46,500 --> 00:00:49,400
需要了解的主题和知识库，

18
00:00:49,400 --> 00:00:53,510
因此，最终将 KnowledgeGrid 连接起来。

19
00:00:53,510 --> 00:00:56,600
那么我们如何将主题传递给 KnowledgeGrid，

20
00:00:56,600 --> 00:00:58,120
这需要主题，

21
00:00:58,120 --> 00:01:00,763
如果我们不想通过知识库传递它们？

22
00:01:01,950 --> 00:01:03,930
好吧，首先，让我们在这里删除它们，

23
00:01:03,930 --> 00:01:07,650
让我们探索 Vue 为我们提供的另一个功能，

24
00:01:07,650 --> 00:01:11,560
也就是说，提供和注入，

25
00:01:11,560 --> 00:01:14,900
可用于提供数据的模式

26
00:01:14,900 --> 00:01:17,500
在一个地方注入它，

27
00:01:17,500 --> 00:01:21,000
这意味着在另一个地方使用它。

28
00:01:21,000 --> 00:01:23,410
现在在 App.vue 中，我们可以，例如，

29
00:01:23,410 --> 00:01:26,060
在这里提供我们的主题。

30
00:01:26,060 --> 00:01:28,680
我们通过添加提供选项来做到这一点

31
00:01:28,680 --> 00:01:32,700
到我们的冲突对象，在冲突对象的任何地方。

32
00:01:32,700 --> 00:01:36,200
在这里，我将它添加到数据和方法之间。

33
00:01:36,200 --> 00:01:39,450
然后提供可以容纳一个对象，

34
00:01:39,450 --> 00:01:43,600
例如，您在其中提供您的主题。

35
00:01:43,600 --> 00:01:48,300
所以在这里，我可以抓取这个主题数组，

36
00:01:48,300 --> 00:01:50,590
并在那里提供。

37
00:01:50,590 --> 00:01:53,083
所以现在我提供这个主题数组。

38
00:01:54,610 --> 00:01:55,850
现在这是第一步。

39
00:01:55,850 --> 00:01:58,200
现在我们正在提供这些数据，

40
00:01:58,200 --> 00:02:01,980
并且使用 Vue 内置的内部机制，

41
00:02:01,980 --> 00:02:05,200
但提供只是故事的一半。

42
00:02:05,200 --> 00:02:08,840
我们还需要听取提供的数据。

43
00:02:08,840 --> 00:02:11,940
我们需要在某处使用提供的数据，

44
00:02:11,940 --> 00:02:14,000
在我们的例子中，

45
00:02:14,000 --> 00:02:15,970
发生在知识网格中

46
00:02:15,970 --> 00:02:19,010
因为那是我们需要主题的地方。

47
00:02:19,010 --> 00:02:20,640
为此，

48
00:02:20,640 --> 00:02:24,350
而不是期望获得主题作为道具，

49
00:02:24,350 --> 00:02:28,250
我们添加另一个选项，注入选项。

50
00:02:28,250 --> 00:02:30,840
与提供一起工作。

51
00:02:30,840 --> 00:02:35,390
注入，基本上像道具一样工作，你提供一个数组，

52
00:02:35,390 --> 00:02:39,480
现在您参考所有提供的数据

53
00:02:39,480 --> 00:02:42,130
你想在这个组件中使用。

54
00:02:42,130 --> 00:02:44,430
所以目前只有一条数据

55
00:02:44,430 --> 00:02:47,830
我们正在提供，这将是主题。

56
00:02:47,830 --> 00:02:52,060
我们在 App.vue 中的关键主题下提供了它。

57
00:02:52,060 --> 00:02:57,060
所以我们可以使用该密钥，并在 KnowledgeGrid 中注入。

58
00:03:00,980 --> 00:03:02,640
这是一个重要的注意事项，

59
00:03:02,640 --> 00:03:05,960
您只能注入已提供的内容

60
00:03:05,960 --> 00:03:08,330
在更高的层次上。

61
00:03:08,330 --> 00:03:10,970
这基本上意味着，在父组件中，

62
00:03:10,970 --> 00:03:13,843
或 KnowledgeGrid 的祖先组件。

63
00:03:14,810 --> 00:03:17,290
所以我们可以在这里注入主题，

64
00:03:17,290 --> 00:03:19,800
因为是App vue中提供的，

65
00:03:19,800 --> 00:03:24,120
而App vue，终究是在KnowledgeGrid之上的吧？

66
00:03:24,120 --> 00:03:26,520
App vue 是 KnowledgeBase 的父级，

67
00:03:26,520 --> 00:03:29,140
KnowledgeBase 是一个父 KnowledgeGrid，

68
00:03:29,140 --> 00:03:33,110
因此 KnowledgeGrid 也在 App.vue 下面。

69
00:03:33,110 --> 00:03:36,623
例如，如果我们在 ActiveElement 中提供了一些东西，

70
00:03:37,610 --> 00:03:40,980
我们无法将其注入 KnowledgeGrid。

71
00:03:40,980 --> 00:03:41,813
为什么？

72
00:03:41,813 --> 00:03:45,210
因为 ActiveElement 是 Knowledgebase 的邻居，

73
00:03:45,210 --> 00:03:48,623
KnowledgeBase den 包含 KnowledgeGrid，

74
00:03:49,474 --> 00:03:52,290
因此，最终，ActiveElement 是一个邻居

75
00:03:52,290 --> 00:03:53,323
到知识网格。

76
00:03:54,380 --> 00:03:55,231
这将不起作用，提供和注入

77
00:03:55,231 --> 00:04:00,030
需要这个，父子关系。

78
00:04:00,030 --> 00:04:03,620
所以你不能在邻居之间提供和注入，

79
00:04:03,620 --> 00:04:07,180
但在这里它会起作用，因为我们提供了一个 App.vue，

80
00:04:07,180 --> 00:04:10,580
那是 KnowledgeGrid 的祖先，

81
00:04:10,580 --> 00:04:12,350
所以它在 KnowledgeGrid 之上。

82
00:04:12,350 --> 00:04:14,950
现在，如果你保存这个，

83
00:04:14,950 --> 00:04:18,470
你会看到一切仍然像以前一样工作，

84
00:04:18,470 --> 00:04:22,730
但现在数据在 KnowledgeGrid 中以不同的方式结束。

85
00:04:22,730 --> 00:04:26,960
我们正在避免这种主题的传递

86
00:04:26,960 --> 00:04:31,320
在 KnowledgeBase 中，这绝对是一个改进。

87
00:04:31,320 --> 00:04:33,380
但是，有一个问题，

88
00:04:33,380 --> 00:04:37,750
我们现在基本上创建了这个数组两次。

89
00:04:37,750 --> 00:04:41,150
我们在这里，在我们的数据中的 App.vue 中，

90
00:04:41,150 --> 00:04:44,600
然后我们在提供对象中再次拥有它。

91
00:04:44,600 --> 00:04:48,520
这在这种情况下有效，但它是代码重复。

92
00:04:48,520 --> 00:04:52,170
如果我们在这个应用程序中有任何逻辑可以改变

93
00:04:52,170 --> 00:04:54,570
这个数据存储数组，

94
00:04:54,570 --> 00:04:58,300
这种变化不会反映在提供的数据中，

95
00:04:58,300 --> 00:05:00,210
因为那是一个全新的阵列。

96
00:05:00,210 --> 00:05:03,900
这是内存中的一个全新对象。

97
00:05:03,900 --> 00:05:07,800
因此，如果我们曾经在数据中更改了他的原始数组，

98
00:05:07,800 --> 00:05:11,560
此类更改不会传递给组件

99
00:05:11,560 --> 00:05:13,913
依赖于提供的主题。

100
00:05:15,180 --> 00:05:17,640
因此，如果我们能提供会更好

101
00:05:17,640 --> 00:05:22,640
我们的数据在这里，以便最终获取更改。

102
00:05:22,750 --> 00:05:25,200
事实证明，我们可以做到这一点，

103
00:05:25,200 --> 00:05:29,850
为此，我们需要改变我们使用提供的方式。

104
00:05:29,850 --> 00:05:32,380
而不是将其设置为等于一个对象

105
00:05:32,380 --> 00:05:34,320
使用提供的数据，

106
00:05:34,320 --> 00:05:37,120
我们现在将提供转换为方法，

107
00:05:37,120 --> 00:05:40,770
所以现在提供选项到底拥有一个功能。

108
00:05:40,770 --> 00:05:43,990
在那里我们返回我们提供的对象，

109
00:05:43,990 --> 00:05:47,410
所以它现在基本上有点像数据。

110
00:05:47,410 --> 00:05:51,130
然后在这里，我们仍然可以设置我们选择的任何键

111
00:05:51,130 --> 00:05:53,110
所以我会在这里坚持主题，

112
00:05:53,110 --> 00:05:56,124
但现在我们可以使用 this 关键字来联系

113
00:05:56,124 --> 00:05:59,260
到我们的即时特定数据。

114
00:05:59,260 --> 00:06:01,010
所以有了这些话题，

115
00:06:01,010 --> 00:06:05,330
我现在接触到我们在数据中管理的主题。

116
00:06:05,330 --> 00:06:09,150
我正在使用它，在主题键下提供它

117
00:06:09,150 --> 00:06:11,713
到任何潜在的子组件。

118
00:06:12,610 --> 00:06:14,790
当然，你在这里使用的这个密钥，

119
00:06:14,790 --> 00:06:17,710
不必与您在数据中使用的相同。

120
00:06:17,710 --> 00:06:20,253
在这种情况下是这样，但不一定是这样。

121
00:06:21,440 --> 00:06:23,740
如果我现在保存，它仍然有效，

122
00:06:23,740 --> 00:06:28,160
但现在我们正在处理内存中的同一个对象。

123
00:06:28,160 --> 00:06:32,740
现在让我们在数据中模拟主题的变化

124
00:06:32,740 --> 00:06:35,490
验证这是否真的有效。

125
00:06:35,490 --> 00:06:40,490
为此，我将在此处添加已安装的生命周期挂钩，

126
00:06:43,520 --> 00:06:47,420
在那里，我将设置一个计时器，让我们说三秒。

127
00:06:47,420 --> 00:06:51,210
在这三秒之后，在这个数组函数中，

128
00:06:51,210 --> 00:06:52,460
这只是一种不同的方式

129
00:06:52,460 --> 00:06:55,040
定义一个函数 JavaScript。

130
00:06:55,040 --> 00:06:59,210
我会接触到这个话题并推送一个新话题

131
00:06:59,210--> 00:07:00,850
到数组。

132
00:07:00,850 --> 00:07:04,900
该主题将有一个事件ID，比如说，

133
00:07:04,900 --> 00:07:09,900
然后是事件的标题。

134
00:07:10,230 --> 00:07:14,990
事件的描述文本在 Vue 中很重要，

135
00:07:14,990 --> 00:07:19,990
然后是事件的全文

136
00:07:20,400 --> 00:07:24,603
允许您按需触发代码，类似的东西。

137
00:07:26,210 --> 00:07:28,270
所以我在这里有相同的结构

138
00:07:28,270 --> 00:07:30,720
就像我们最初的所有主题一样，

139
00:07:30,720 --> 00:07:32,660
但是现在下面的那个话题，

140
00:07:32,660 --> 00:07:35,870
仅在 Vue 应用程序后三秒添加

141
00:07:35,870 --> 00:07:37,663
已经渲染到屏幕上。

142
00:07:38,820 --> 00:07:42,300
现在让我们保存它，让我们看看我们的列表是否更新

143
00:07:42,300 --> 00:07:43,760
三秒后。

144
00:07:43,760 --> 00:07:46,130
确实如此，我们可以使用事件

145
00:07:46,130 --> 00:07:49,190
就像我们在这里获得的其他数据一样。

146
00:07:49,190 --> 00:07:52,940
所以这个提供注入工作的证明。

147
00:07:52,940 --> 00:07:56,830
现在提供并注入一个非常有用的模式

148
00:07:56,830 --> 00:08:00,060
如果你想避免传递组件

149
00:08:00,060 --> 00:08:03,270
和不必要的传递道具。

150
00:08:03,270 --> 00:08:04,841
现在的课程问题，

151
00:08:04,841 --> 00:08:08,700
它是否还可以帮助我们处理自定义事件，

152
00:08:08,700 --> 00:08:12,060
因为我们也在汇集我们的自定义事件

153
00:08:12,060 --> 00:08:13,713
通过几个组件。