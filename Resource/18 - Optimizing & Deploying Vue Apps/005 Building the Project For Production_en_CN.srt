1
00:00:02,260 --> 00:00:05,689
所以假设我们现在优化了我们的项目。

2
00:00:05,689 --> 00:00:09,350
我们已经修复了所有错误，我们重构了代码

3
00:00:09,350 --> 00:00:12,023
我们添加了异步组件。

4
00:00:13,100 --> 00:00:16,200
现在我们完成了我们的 Vue 项目

5
00:00:16,200 --> 00:00:19,433
我们想把它上传到一些静态主机上。

6
00:00:20,490 --> 00:00:24,100
现在我们必须区分两种项目。

7
00:00:24,100 --> 00:00:26,190
如果你有一个非常简单的项目，

8
00:00:26,190 --> 00:00:28,370
正如我们在课程开始时所做的那样

9
00:00:28,370 --> 00:00:31,530
以怪物杀手项目为例，

10
00:00:31,530 --> 00:00:33,660
我们真的只是有几个习惯

11
00:00:33,660 --> 00:00:36,850
HTML、CSS 和 JavaScript 文件。

12
00:00:36,850 --> 00:00:40,560
我们没有使用 Vue CLI 创建项目设置

13
00:00:40,560 --> 00:00:42,360
或类似的东西。

14
00:00:42,360 --> 00:00:45,140
在这种情况下，您可以抓取这些文件

15
00:00:45,140 --> 00:00:47,473
并将它们上传到服务器上。

16
00:00:48,530 --> 00:00:51,500
如果你有一个更复杂的项目，

17
00:00:51,500 --> 00:00:53,670
就像我们一直在合作的那个

18
00:00:53,670 --> 00:00:56,480
在所有最后的模块中，

19
00:00:56,480 --> 00:00:59,270
通常使用 Vue CLI 创建，

20
00:00:59,270 --> 00:01:02,320
然后你还有其他几个步骤。

21
00:01:02,320 --> 00:01:04,670
你想优化你的代码，如图所示，

22
00:01:04,670 --> 00:01:06,350
所以假设我们这样做了，

23
00:01:06,350 --> 00:01:09,650
但是你需要构建你的项目。

24
00:01:09,650 --> 00:01:12,450
然后这也将自动优化您的代码

25
00:01:12,450 --> 00:01:14,910
甚至更多，自动为您服务，

26
00:01:14,910 --> 00:01:16,993
没有你为此做任何事情。

27
00:01:17,960 --> 00:01:20,560
需要构建代码

28
00:01:20,560 --> 00:01:24,540
因为我们在这里得到的代码，以及所有那些 .vue 文件，

29
00:01:24,540 --> 00:01:28,080
那不是浏览器可以理解的代码。

30
00:01:28,080 --> 00:01:30,560
那是代码，需要转换

31
00:01:30,560 --> 00:01:33,770
首先进入常规 JavaScript 代码。

32
00:01:33,770 --> 00:01:38,070
这些 CLI 创建的项目有一个内置脚本，

33
00:01:38,070 --> 00:01:42,053
你可以执行它，它将进行转换。

34
00:01:43,120 --> 00:01:47,270
并且只有在您获得构建和优化的代码后，

35
00:01:47,270 --> 00:01:49,940
只有这样你才会有几个文件，

36
00:01:49,940 --> 00:01:51,660
为您生成的，

37
00:01:51,660 --> 00:01:55,500
然后您可以将其上传到服务器上。

38
00:01:55,500 --> 00:01:57,730
因此，这是第二部分，

39
00:01:57,730 --> 00:02:02,103
当然，我想重点关注这张幻灯片的右侧部分。

40
00:02:03,020 --> 00:02:05,373
所以现在让我们构建我们的项目。

41
00:02:06,340 --> 00:02:10,729
要构建您的项目，使用 Vue CLI 生成的项目

42
00:02:10,729 --> 00:02:13,290
将有您可以执行的脚本。

43
00:02:13,290 --> 00:02:17,710
在 package.json 中，您可以找到所有可以执行的脚本。

44
00:02:17,710 --> 00:02:21,050
到目前为止，我们一直使用服务脚本

45
00:02:21,050 --> 00:02:23,440
启动该开发服务器

46
00:02:23,440 --> 00:02:25,980
并测试我们的应用程序。

47
00:02:25,980 --> 00:02:28,293
现在我们需要构建脚本。

48
00:02:29,340 --> 00:02:31,430
这将做顾名思义，

49
00:02:31,430 --> 00:02:36,030
它构建应用程序并为生产而构建它

50
00:02:36,030 --> 00:02:38,423
并针对生产进行优化。

51
00:02:39,620 --> 00:02:42,600
我们在终端中运行这个脚本，

52
00:02:42,600 --> 00:02:45,180
导航到这个项目文件夹，

53
00:02:45,180 --> 00:02:47,543
通过运行 NPM 运行构建。

54
00:02:49,730 --> 00:02:52,380
现在这将遍历我们所有的代码，

55
00:02:52,380 --> 00:02:54,290
把它全部打包成，

56
00:02:54,290 --> 00:02:57,180
我们需要的所有文件，一个大的应用程序文件，

57
00:02:57,180 --> 00:03:00,830
然后这些较小的块文件用于异步组件，

58
00:03:00,830 --> 00:03:02,880
它会转换代码

59
00:03:02,880 --> 00:03:06,800
进入浏览器理解并优化的代码

60
00:03:06,800 --> 00:03:10,073
使其尽可能小而高效。

61
00:03:11,090 --> 00:03:13,930
而一旦这个过程完成，

62
00:03:13,930 --> 00:03:16,470
你会找到一个 dist 文件夹。

63
00:03:16,470 --> 00:03:20,640
该 dist 文件夹现在包含您的单个页面，

64
00:03:20,640 --> 00:03:22,520
索引 HTML 文件，

65
00:03:22,520 --> 00:03:27,460
然后是一个包含所有这些代码块的 JavaScript 文件夹，

66
00:03:27,460 --> 00:03:31,520
如您所知，对 JavaScript 代码进行了高度优化，

67
00:03:31,520 -->00:03:35,130
和一个包含所有生成的 CSS 文件的 CSS 文件夹

68
00:03:35,130 --> 00:03:39,170
使用 CSS 规则，全部缩小和优化

69
00:03:39,170 --> 00:03:42,570
占用尽可能少的空间。

70
00:03:42,570 --> 00:03:45,230
这是 dist 文件夹的内容，

71
00:03:45,230 --> 00:03:50,230
您现在需要将其放到静态托管服务器上。

72
00:03:50,240 --> 00:03:52,140
这就是我们接下来要做的。