1
00:00:02,450 --> 00:00:04,340
现在，部署什么

2
00:00:04,340 --> 00:00:07,170
一个视图应用程序实际上是什么意思？

3
00:00:07,170 --> 00:00:09,190
为此，请务必牢记

4
00:00:09,190 --> 00:00:11,570
Vue 应用程序在浏览器中运行。

5
00:00:11,570 --> 00:00:15,130
我的意思是，任何网站都加载了浏览器，

6
00:00:15,130 --> 00:00:19,453
但是 Vue 应用程序是由浏览器端的 JavaScript 代码驱动的。

7
00:00:20,550 --> 00:00:22,660
我们在这里写的所有代码，

8
00:00:22,660 --> 00:00:26,120
最后，被这个项目设置改造，

9
00:00:26,120 --> 00:00:29,240
然后转换成 JavaScript 代码

10
00:00:30,080 --> 00:00:32,259
我们的浏览器可以理解。

11
00:00:32,259 --> 00:00:34,310
所以我们在屏幕上看到的

12
00:00:34,310 --> 00:00:36,530
从服务器加载，

13
00:00:36,530 --> 00:00:40,280
但它是由 Vue 渲染在屏幕上的，

14
00:00:40,280 --> 00:00:42,570
通过我们编写的这段 JavaScript 代码

15
00:00:42,570 --> 00:00:46,500
这完全发生在浏览器中，

16
00:00:46,500 --> 00:00:48,820
不在某些服务器上。

17
00:00:48,820 --> 00:00:52,650
一个服务器只是在提供这个 HTML 文件，

18
00:00:52,650 --> 00:00:54,380
这个 HTML 骨架，

19
00:00:54,380 --> 00:00:57,410
然后是 JavaScript 代码，同样，

20
00:00:57,410 --> 00:00:59,430
在浏览器中丢失并执行，

21
00:00:59,430 --> 00:01:00,900
不在服务器上。

22
00:01:00,900 --> 00:01:04,190
我强调这一点，因为这会影响

23
00:01:04,190 --> 00:01:07,930
我们如何部署一个 Web 应用程序，一个网站。

24
00:01:07,930 --> 00:01:10,870
在这里，我们真的只有几个文件

25
00:01:10,870 --> 00:01:13,810
这些都是由浏览器解释的。

26
00:01:13,810 --> 00:01:18,650
我们得到了 HTML 文件，在这种情况下只有一个 HTML 文件

27
00:01:18,650 --> 00:01:21,470
因为我们正在构建一个单页应用程序。

28
00:01:21,470 --> 00:01:24,270
我们可能有 CSS 文件，

29
00:01:24,270 --> 00:01:26,350
在我们从事的项目中，

30
00:01:26,350 --> 00:01:29,280
我们没有单独的 CSS 文件。

31
00:01:29,280 --> 00:01:32,690
我们将其与组件合并，因此

32
00:01:32,690 --> 00:01:36,320
项目设置将负责提取此

33
00:01:36,320 --> 00:01:37,720
并将其添加到页面。

34
00:01:37,720 --> 00:01:40,740
我们没有单独的 CSS 文件。

35
00:01:40,740 --> 00:01:42,620
而最重要的是，

36
00:01:42,620 --> 00:01:45,080
我们有一堆 JavaScript 代码。

37
00:01:45,080 --> 00:01:47,970
例如，我们有我们的项目设置

38
00:01:47,970 --> 00:01:51,960
并且该项目设置将具有某些脚本

39
00:01:51,960 --> 00:01:54,360
用于转换我们编写的代码，

40
00:01:54,360 --> 00:01:56,820
编码浏览器理解。

41
00:01:56,820 --> 00:02:00,650
我将在整个模块中向您展示这些脚本。

42
00:02:00,650 --> 00:02:04,390
但因此，我们只有 HTML、CSS 和 JavaScript。

43
00:02:04,390 --> 00:02:08,460
我们没有可以在服务器上运行的代码。

44
00:02:08,460 --> 00:02:12,690
因此，我们有一个静态网络应用程序，一个静态网站。

45
00:02:12,690 --> 00:02:15,070
这意味着，它只是一个带有代码的网站

46
00:02:15,070 --> 00:02:16,890
由浏览器评估

47
00:02:16,890 --> 00:02:19,060
并且没有服务器端代码。

48
00:02:19,060 --> 00:02:24,060
因此，我们只需要一个静态网站托管服务提供商。

49
00:02:24,140 --> 00:02:28,330
这里的选项是 AWS 免费的，

50
00:02:28,330 --> 00:02:31,220
Firebase 托管，Netlify。

51
00:02:31,220 --> 00:02:34,130
有大量的静态托管服务提供商。

52
00:02:34,130 --> 00:02:36,940
你可以只用谷歌搜索静态托管服务提供商

53
00:02:36,940 --> 00:02:38,993
你会发现几个例子。

54
00:02:40,120 --> 00:02:41,140
所以这就是我们需要的。

55
00:02:41,140 --> 00:02:43,410
我会告诉你一个例子

56
00:02:43,410 --> 00:02:45,310
以及完整的部署过程，

57
00:02:45,310 --> 00:02:47,863
在本模块中逐步进行。