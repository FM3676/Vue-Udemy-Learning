1
00:00:02,150 --> 00:00:04,480
Let's continue with the age.

2
00:00:04,480 --> 00:00:07,673
The age input here is actually of type number.

3
00:00:08,600 --> 00:00:10,420
Now this can be confusing,

4
00:00:10,420 --> 00:00:13,630
just because it's of type number does not mean

5
00:00:13,630 --> 00:00:14,900
what you entered here

6
00:00:14,900 --> 00:00:18,300
will be treated as type number in code.

7
00:00:18,300 --> 00:00:20,020
It looks like a number

8
00:00:20,020 --> 00:00:23,670
and you won't be able to enter anything but numbers here,

9
00:00:23,670 --> 00:00:26,170
but you will not automatically,

10
00:00:26,170 --> 00:00:29,440
get a value of type number in code.

11
00:00:29,440 --> 00:00:32,320
Sounds confusing, let me show you what I mean.

12
00:00:32,320 --> 00:00:36,213
Let's add a new data property userAge, maybe.

13
00:00:37,070 --> 00:00:39,410
Let's set this to an empty string as well,

14
00:00:39,410 --> 00:00:41,860
or maybe to a number, or maybe to null.

15
00:00:41,860 --> 00:00:45,850
Let's maybe use null because I don't wanna use zero.

16
00:00:45,850 --> 00:00:47,730
I also don't wanna use an empty string

17
00:00:47,730 --> 00:00:49,320
because it should be a number.

18
00:00:49,320 --> 00:00:51,170
So I will use null to make it clear

19
00:00:51,170 --> 00:00:53,633
that we have no value yet for this.

20
00:00:55,580 --> 00:01:00,580
Now let's bind userAge to this input here, to this input.

21
00:01:02,100 --> 00:01:05,560
We can do this with v-model that works on this input

22
00:01:05,560 --> 00:01:07,570
just as it did on the first one

23
00:01:08,430 --> 00:01:10,963
and here I can point at userAge now.

24
00:01:12,560 --> 00:01:17,560
Now with that, let's go down here, whoops, to the method

25
00:01:17,730 --> 00:01:20,300
and I will console log userAge,

26
00:01:21,950 --> 00:01:25,710
and I will deliberately use two console logs now

27
00:01:25,710 --> 00:01:29,000
so that I don't concatenate the user age with a string

28
00:01:29,000 --> 00:01:33,363
to a longer string, but so that I keep the type of user age.

29
00:01:35,540 --> 00:01:39,520
Below that I will log a random number, in this case 31

30
00:01:40,950 --> 00:01:43,960
and you'll see why I'm doing this in a second.

31
00:01:43,960 --> 00:01:47,500
I can then also of course, reset it back to null thereafter

32
00:01:47,500 --> 00:01:49,693
to also reset it in the input fields.

33
00:01:51,870 --> 00:01:54,820
With all of that, if we go back,

34
00:01:54,820 --> 00:01:57,060
I can, of course still enter max here,

35
00:01:57,060 --> 00:02:01,840
but I can also enter 31, or 32, or whatever you want here.

36
00:02:01,840 --> 00:02:05,590
If I click save data, you see it was submitted

37
00:02:06,820 --> 00:02:11,143
and you will see that 32 looks just like 31.

38
00:02:13,580 --> 00:02:15,950
So what's the special thing here.

39
00:02:15,950 --> 00:02:18,000
Well, watch what happens

40
00:02:18,000 --> 00:02:21,440
if I retrieved the value not with v-model

41
00:02:21,440 --> 00:02:25,543
or not only with v-model, but if I also add a ref here,

42
00:02:26,682 --> 00:02:29,023
ageInput could be the ref identifier.

43
00:02:30,320 --> 00:02:33,980
And with that ref added, let me go back here

44
00:02:33,980 --> 00:02:36,880
and I will then console log the value

45
00:02:36,880 --> 00:02:41,623
of this ref's ageInput.value.

46
00:02:43,070 --> 00:02:45,960
So I am accessing the native dom element

47
00:02:45,960 --> 00:02:48,660
and I'm then getting access to the value property,

48
00:02:48,660 --> 00:02:50,113
and I'm outputting this here.

49
00:02:51,170 --> 00:02:55,230
If I do this and I enter 32 here,

50
00:02:55,230 --> 00:02:56,880
you'll see something interesting.

51
00:02:57,760 --> 00:03:02,620
This 32 is our internally managed data property,

52
00:03:02,620 --> 00:03:04,503
which is bound with v-model.

53
00:03:05,460 --> 00:03:09,773
This 31 is the dummy number I'm outputting here.

54
00:03:10,740 --> 00:03:14,337
The value, which I'm outputting with refs here is this 32

55
00:03:14,337 --> 00:03:16,050
and the interesting thing is that

56
00:03:16,050 --> 00:03:18,740
this is black and this is blue.

57
00:03:18,740 --> 00:03:21,430
Blue means it's of type number,

58
00:03:21,430 --> 00:03:24,620
black means it's of type string.

59
00:03:24,620 --> 00:03:26,810
So it's a different data type.

60
00:03:26,810 --> 00:03:28,430
Why does this matter?

61
00:03:28,430 --> 00:03:30,680
Well, let's say you continue working

62
00:03:30,680 --> 00:03:32,250
with that number you fetched.

63
00:03:32,250 --> 00:03:36,290
Maybe you add five, let me do this in both cases.

64
00:03:36,290 --> 00:03:38,770
For the property we're managing in our data

65
00:03:38,770 --> 00:03:41,283
and for the property we're getting with refs.

66
00:03:42,860 --> 00:03:46,450
If I am doing that and I enter 32, again,

67
00:03:46,450 --> 00:03:49,440
we get 37 for the data property

68
00:03:49,440 --> 00:03:53,373
but 325 for the ref property,

69
00:03:54,530 --> 00:03:56,460
and that's not a mathematical error.

70
00:03:56,460 --> 00:03:58,950
This is simply a concatenated string,

71
00:03:58,950 --> 00:04:02,433
32 and five combined to one string.

72
00:04:03,690 --> 00:04:07,000
So the interesting thing of what you should be aware here

73
00:04:07,000 --> 00:04:08,800
is that v-model,

74
00:04:08,800 --> 00:04:12,110
if used on an input of type number

75
00:04:12,110 --> 00:04:14,660
automatically fetches the user input

76
00:04:14,660 --> 00:04:18,123
and converts it from a string to a number of data type.

77
00:04:19,540 --> 00:04:23,250
By default, if you would be using just JavaScript

78
00:04:23,250 --> 00:04:25,250
or if you're using refs and therefore

79
00:04:25,250 --> 00:04:28,880
the native JavaScript object representing this input.

80
00:04:28,880 --> 00:04:33,493
By default, what's stored in the value is always a string.

81
00:04:34,850 --> 00:04:39,850
It's an extra feature added by Vue and v-model that it sees

82
00:04:40,300 --> 00:04:42,930
that this input is of type number

83
00:04:42,930 --> 00:04:46,600
and that it therefore converts this string value

84
00:04:46,600 --> 00:04:48,423
to a number of value for you.

85
00:04:49,890 --> 00:04:52,310
You can also force it to do that.

86
00:04:52,310 --> 00:04:55,350
For example, if you use another type here,

87
00:04:55,350 --> 00:04:57,940
you can force Vue to do that conversion

88
00:04:57,940 --> 00:05:00,750
by adding a modifier after v-model here,

89
00:05:00,750 --> 00:05:03,030
the number modifier.

90
00:05:03,030 --> 00:05:05,130
This forces this conversion,

91
00:05:05,130 --> 00:05:07,690
which v-model does automatically here

92
00:05:07,690 --> 00:05:09,283
in case of type number.

93
00:05:11,410 --> 00:05:14,440
Speaking off these modifiers, you might've seen it already,

94
00:05:14,440 --> 00:05:17,570
there are a couple of other modifiers as well.

95
00:05:17,570 --> 00:05:20,680
The lazy modifier allows you to change

96
00:05:20,680 --> 00:05:23,710
how Vue updates the bound property.

97
00:05:23,710 --> 00:05:26,500
If it does this on every keystroke

98
00:05:26,500 --> 00:05:31,500
or if for some inputs, it does this at a lower frequency.

99
00:05:31,560 --> 00:05:34,300
Trim allows you to tell Vue

100
00:05:34,300 --> 00:05:37,020
that it should remove excess white space

101
00:05:37,020 --> 00:05:40,763
at the beginning and end of the text that was entered.

102
00:05:41,810 --> 00:05:45,150
It's the equivalent to manually doing that

103
00:05:45,150 --> 00:05:49,253
with the trim method on this string here.

104
00:05:50,430 --> 00:05:54,560
So with trim added you ensure that you always get an input

105
00:05:54,560 --> 00:05:57,710
with no leading or trailing white space at the end,

106
00:05:57,710 --> 00:06:00,460
which of course is also something that could be useful.

107
00:06:01,750 --> 00:06:03,970
That was a lot of talking about v-model

108
00:06:03,970 --> 00:06:06,420
and it's modifiers and numbers,

109
00:06:06,420 --> 00:06:08,630
but this can be a common bug,

110
00:06:08,630 --> 00:06:10,750
which you add to an application.

111
00:06:10,750 --> 00:06:12,360
That you will think you've got a number

112
00:06:12,360 --> 00:06:15,130
and actually you're working with a string.

113
00:06:15,130 --> 00:06:16,270
It's especially important

114
00:06:16,270 --> 00:06:20,640
to be aware of this special behavior v-model offers to us

115
00:06:20,640 --> 00:06:23,650
because I already mentioned earlier in the course

116
00:06:23,650 --> 00:06:25,690
that you can either use v-model

117
00:06:25,690 --> 00:06:29,060
for getting access to some data or a ref.

118
00:06:29,060 --> 00:06:32,660
Well, turns out you can but behind the scenes

119
00:06:32,660 --> 00:06:35,920
these two approaches have different behaviors

120
00:06:35,920 --> 00:06:38,660
and if you use a ref, which is perfectly fine,

121
00:06:38,660 --> 00:06:41,410
you should, for example, be aware of the fact

122
00:06:41,410 --> 00:06:45,540
that no automatic type conversions take place.

123
00:06:45,540 --> 00:06:47,960
That was enough of the talking about this.

124
00:06:47,960 --> 00:06:50,410
With that, let's see how we can interact

125
00:06:50,410 --> 00:06:52,713
with all the other inputs we got on this page.

