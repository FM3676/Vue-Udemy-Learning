1
00:00:02,260 --> 00:00:05,230
为此，经常，

2
00:00:05,230 --> 00:00:09,180
您会发现附加、下载、提取的起始项目。

3
00:00:09,180 --> 00:00:11,790
运行 npm install 然后 npm run serv

4
00:00:11,790 --> 00:00:13,770
一旦你安装了所有依赖项。

5
00:00:13,770 --> 00:00:17,580
这带来了开发服务器。

6
00:00:17,580 --> 00:00:19,890
一旦启动并运行，

7
00:00:19,890 --> 00:00:22,900
这是您应该在屏幕上看到的内容。

8
00:00:22,900 --> 00:00:26,770
现在在这里我为我们准备了一个非常基本的表格。

9
00:00:26,770 --> 00:00:29,320
我们在这里得到了文本的输入字段，

10
00:00:29,320 --> 00:00:31,420
数字的输入字段。

11
00:00:31,420 --> 00:00:32,810
我们得到了一个下拉菜单，

12
00:00:32,810 --> 00:00:36,830
我们有一些复选框和一些单选按钮。

13
00:00:36,830 --> 00:00:40,090
然后还有一个按钮来提交表单。

14
00:00:40,090 --> 00:00:44,290
现在让我们首先关注如何连接视图

15
00:00:44,290 --> 00:00:45,430
所有这些输入

16
00:00:45,430 --> 00:00:48,390
并从这些输入中获取信息。

17
00:00:48,390 --> 00:00:51,110
因为这可能是你需要很多的东西

18
00:00:51,110 --> 00:00:52,720
在您正在构建的应用程序中。

19
00:00:52,720 --> 00:00:56,630
谈完表单验证之后再说吧

20
00:00:56,630 --> 00:00:59,600
以及我们如何在此处添加基本验证。

21
00:00:59,600 --> 00:01:04,489
最后，让我们构建我们自己的表单控件。

22
00:01:04,489 --> 00:01:08,310
但是一步一步，这里是 TheForm.vue 文件。

23
00:01:08,310 --> 00:01:11,420
在这里您可以看到表单的所有标记

24
00:01:11,420 --> 00:01:13,500
你在屏幕上看到这里。

25
00:01:13,500 --> 00:01:17,130
现在这个组件目前没有脚本逻辑。

26
00:01:17,130 --> 00:01:20,550
它只有一个模板和一些样式。

27
00:01:20,550 --> 00:01:24,060
所以让我们通过添加一个脚本对象来真正开始吧

28
00:01:24,060 --> 00:01:27,640
让我们从这些输入中提取一些数据开始。

29
00:01:27,640 --> 00:01:28,570
而就目前而言，

30
00:01:28,570 --> 00:01:31,680
我将简单地将该数据记录到控制台

31
00:01:31,680 --> 00:01:33,983
这样我们就可以看到提取工作了。

32
00:01:34,840 --> 00:01:37,850
所以我们当然需要一个方法，

33
00:01:37,850 --> 00:01:41,620
提交表单时触发

34
00:01:41,620 --> 00:01:44,120
我将它命名为 submitForm。

35
00:01:44,120 --> 00:01:45,480
这是我的方法名称。

36
00:01:45,480 --> 00:01:48,440
这就是我们在本课程中已经做过的事情。

37
00:01:48,440 --> 00:01:50,880
我们现在可以在这里触发这个方法

38
00:01:50,880 --> 00:01:53,980
提交此表格时。

39
00:01:53,980 --> 00:01:56,510
我们还可以添加一个点击监听器

40
00:01:56,510 --> 00:01:58,280
到我们这里的按钮。

41
00:01:58,280 --> 00:02:01,250
但是由于按钮，在表单内部，

42
00:02:01,250 --> 00:02:05,410
提交这些表单并触发提交事件，

43
00:02:05,410 --> 00:02:09,710
你通常想听那些提交事件。

44
00:02:09,710 --> 00:02:13,030
在这里，这也是你已经看到很多的东西

45
00:02:13,030 --> 00:02:13,863
在本课程中。

46
00:02:13,863 --> 00:02:17,330
在这里，您通常添加 prevent 修饰符

47
00:02:17,330 --> 00:02:20,520
确保在提交表单时，

48
00:02:20,520 --> 00:02:23,100
我们没有该浏览器默认设置。

49
00:02:23,100 --> 00:02:25,780
这将是一个请求被发送

50
00:02:25,780 --> 00:02:29,180
因此会导致页面重新加载，

51
00:02:29,180 --> 00:02:31,320
最后重新启动我们的视图应用程序

52
00:02:31,320 --> 00:02:33,970
因此，我们丢失了所有数据。

53
00:02:33,970 --> 00:02:35,753
这绝对不是我们想要的。

54
00:02:37,810 --> 00:02:41,400
所以在这里我想触发 submitForm 方法，

55
00:02:41,400 --> 00:02:44,200
现在让我们看看如何连接视图

56
00:02:44,200 --> 00:02:45,893
到那些不同的输入。

57
00:02:47,270 --> 00:02:51,430
现在让我们从这里的文本输入开始。

58
00:02:51,430 --> 00:02:56,430
我们有两种主要的方法从这样的输入中获取数据。

59
00:02:56,520 --> 00:02:59,960
选项一，是我们使用模型

60
00:02:59,960 --> 00:03:04,730
或者我们自己的自定义输入事件监听器，例如，

61
00:03:04,730 --> 00:03:07,010
聆听每一次击键

62
00:03:07,010 --> 00:03:10,780
并存储用户在某些数据属性中输入的内容

63
00:03:10,780 --> 00:03:12,063
每次击键。

64
00:03:13,050 --> 00:03:16,350
这非常好，特别有用

65
00:03:16,350 --> 00:03:19,600
如果您可能还想验证此输入

66
00:03:19,600 --> 00:03:22,400
在每次击键时显示错误消息，

67
00:03:22,400 --> 00:03:25,283
甚至在用户尝试提交之前任何事物。

68
00:03:26,630 --> 00:03:29,490
此外，如果您使用该模型，

69
00:03:29,490 --> 00:03:32,010
你当然有两种方式绑定，

70
00:03:32,010 --> 00:03:35,230
这也可以帮助重置表单。

71
00:03:35,230 --> 00:03:36,700
采用两种方式绑定，

72
00:03:36,700 --> 00:03:39,610
你不能只听用户输入的内容，

73
00:03:39,610 --> 00:03:42,500
但您也可以覆盖表格中的内容

74
00:03:42,500 --> 00:03:45,350
您可以更改存储在输入中的值。

75
00:03:45,350 --> 00:03:47,423
这也很有帮助。

76
00:03:48,690 --> 00:03:51,260
实际上这就是我将在这里做的。

77
00:03:51,260 --> 00:03:54,210
我将添加几个数据属性

78
00:03:54,210 --> 00:03:56,970
因此我们需要这个数据选项

79
00:03:56,970 --> 00:04:00,760
在我们这里的组件配置对象中，

80
00:04:00,760 --> 00:04:04,660
我将从添加数据属性开始

81
00:04:04,660 --> 00:04:09,033
对于这个名称输入，我在这里为用户名。

82
00:04:10,110 --> 00:04:14,580
所以让我们往下走，让我们添加一个用户名字段。

83
00:04:14,580 --> 00:04:16,700
这个名字当然完全取决于你。

84
00:04:16,700 --> 00:04:19,000
你可以随便起个名字

85
00:04:19,000 --> 00:04:20,209
但我将其命名为 userName

86
00:04:20,209 --> 00:04:22,490
因为我要将用户名存储在此处。

87
00:04:22,490 --> 00:04:26,093
我将从一个空字符串作为初始值开始。

88
00:04:28,210 --> 00:04:33,210
现在我们可以在此处将其与 v-model 绑定到此输入。

89
00:04:33,690 --> 00:04:36,730
这意味着视图将自动检测

90
00:04:36,730 --> 00:04:40,990
每次击键，更新存储在用户名中的值，

91
00:04:40,990 --> 00:04:43,960
但另一方面，当我们改变

92
00:04:43,960 --> 00:04:46,990
使用我们的代码存储在用户名中的内容。

93
00:04:46,990 --> 00:04:49,110
例如，当提交表单时

94
00:04:49,110 --> 00:04:51,030
然后我们重置值，

95
00:04:51,030 --> 00:04:55,263
那么我们的改变也会反映在这个输入中。

96
00:04:57,120 --> 00:04:59,000
这就是我们可以在这里测试的东西。

97
00:04:59,000 --> 00:05:00,910
我们现在将其存储在 userName 中。

98
00:05:00,910 --> 00:05:05,683
所以现在在 submitForm 中，我们当然可以控制台登录用户名。

99
00:05:07,580 --> 00:05:10,580
所以输出我们要打印用户名

100
00:05:10,580 --> 00:05:13,870
然后输出存储在用户名中的具体值。

101
00:05:13,870 --> 00:05:16,600
之后，我将设置此用户名

102
00:05:16,600 --> 00:05:18,083
返回一个空字符串。

103
00:05:19,590 --> 00:05:22,810
有效地重置用户输入的内容。

104
00:05:22,810 --> 00:05:27,160
如果我们现在保存所有这些并打开开发者工具，

105
00:05:27,160 --> 00:05:30,120
我可以在此名称字段中输入 Max。

106
00:05:30,120 --> 00:05:33,980
如果我单击保存数据，您会看到用户名 Max。

107
00:05:33,980 --> 00:05:36,680
所以使用该值有效。

108
00:05:36,680 --> 00:05:39,090
你现在看到输入字段是空的

109
00:05:39,090 --> 00:05:42,453
因为我确实在这里将用户名设置回了一个空字符串。

110
00:05:43,640 --> 00:05:46,100
这就是你已经学到的所有东西。

111
00:05:46,100 --> 00:05:47,320
我对此很清楚。

112
00:05:47,320 --> 00:05:51,210
但这是使用用户输入的基础。

113
00:05:51,210 --> 00:05:54,060
现在，让我们建立在这个基础上。

114
00:05:54,060 --> 00:05:56,200
让我们进一步了解 v-model

115
00:05:56,200 --> 00:05:58,870
让我们学习如何提取值

116
00:05:58,870 --> 00:06:01,263
从这里的这些其他控件类型。