1
00:00:02,060 --> 00:00:04,763
所以，现在我们知道如何使用 v-model 获取值了。

2
00:00:05,710 --> 00:00:09,100
我们也已经看到了一个替代方案

3
00:00:09,100 --> 00:00:10,470
可能是参考。

4
00:00:10,470 --> 00:00:11,820
Refs 的行为不同，

5
00:00:11,820 --> 00:00:14,560
但如果你只想读取一次数据，

6
00:00:14,560 --> 00:00:16,423
他们可以是一个很好的选择。

7
00:00:17,710 --> 00:00:19,870
现在我将在这里坚持使用 v-model，

8
00:00:19,870 --> 00:00:24,670
我想至少简要介绍一下输入验证。

9
00:00:24,670 --> 00:00:28,680
我们已经在上一个课程项目中进行了一些验证

10
00:00:28,680 --> 00:00:33,070
如果一个输入为空，我们会在其中显示此错误警报。

11
00:00:33,070 --> 00:00:35,570
当然，这是你可以做的。

12
00:00:35,570 --> 00:00:38,070
在您的提交方法中，您可以检查所有值

13
00:00:38,070 --> 00:00:42,350
如果某个值不满足某个条件，

14
00:00:42,350 --> 00:00:44,460
你想让它满意，

15
00:00:44,460 --> 00:00:47,643
您可以显示错误警报，这没有错。

16
00:00:49,340 --> 00:00:53,499
我们还可以在每次击键时验证某些输入

17
00:00:53,499 --> 00:00:56,300
或者每当输入模糊时。

18
00:00:56,300 --> 00:00:58,927
例如，这里的名字，

19
00:00:58,927 --> 00:01:02,200
我们可以观察模糊事件。

20
00:01:02,200 --> 00:01:05,700
所以，当输入失去焦点时，我们可以检查

21
00:01:05,700 --> 00:01:08,500
如果存储在那里的值有效。

22
00:01:08,500 --> 00:01:11,853
如果不是，我们可以向用户显示错误消息。

23
00:01:13,510 --> 00:01:15,490
以下是我们如何实现这一点。

24
00:01:15,490 --> 00:01:18,450
我们可以在输入中添加一个模糊侦听器。

25
00:01:18,450 --> 00:01:20,313
Blur 是一个内置事件，

26
00:01:21,660 --> 00:01:23,770
然后我们可以触发一个方法，

27
00:01:23,770 --> 00:01:26,383
验证输入例如，

28
00:01:28,250 --> 00:01:31,153
我们在那里添加到我们的方法中。

29
00:01:33,230 --> 00:01:37,630
在这里，我将添加一个新方法 validateInput。

30
00:01:37,630 --> 00:01:40,763
现在我们可以在这里添加一个新的数据属性，

31
00:01:41,717 --> 00:01:45,910
userNameValidity，最初让我们说

32
00:01:45,910 --> 00:01:48,820
待定，因为我们还不知道。

33
00:01:48,820 --> 00:01:51,770
用户没有机会输入任何内容。

34
00:01:51,770 --> 00:01:53,733
在 validateInput 中，

35
00:01:54,860 --> 00:01:59,010
然后我们可以检查 this.username,

36
00:01:59,010 --> 00:02:02,970
所以我们用模型更新的数据属性，

37
00:02:02,970 --> 00:02:06,990
如果 this.username，一旦我们修剪它，

38
00:02:06,990 --> 00:02:11,610
或者我们已经用 v-model 进行了修整，正如您所了解的那样。

39
00:02:11,610 --> 00:02:13,693
所以，让我们这样做吧，

40
00:02:13,693 --> 00:02:17,130
我们不需要在下面的代码中再做一次。

41
00:02:17,130 --> 00:02:20,020
所以，我们检查这个用户名是否等于一个空字符串，

42
00:02:20,020 --> 00:02:21,633
这意味着它将是无效的。

43
00:02:22,710 --> 00:02:27,483
然后我们可以将 this.usernameValidity 设置为无效。

44
00:02:28,990 --> 00:02:33,120
否则，我们将 this.usernameValidity 设置为有效。

45
00:02:33,120 --> 00:02:36,663
它不再挂起，因为现在我们知道它是有效的。

46
00:02:38,680 --> 00:02:41,110
有了这个，我们可以例如，

47
00:02:41,110 --> 00:02:42,360
再次进入输入，

48
00:02:44,690 --> 00:02:48,600
并在标记的输入下方添加一个段落

49
00:02:48,600 --> 00:02:52,233
在我们说的地方，请输入一个有效的名称。

50
00:02:53,550 --> 00:02:56,460
我们只用 if 来展示这个，

51
00:02:56,460 --> 00:03:01,460
如果 userNameValidity 等于无效。

52
00:03:01,850 --> 00:03:04,553
因此，如果它是未决的，而不是有效的，则不是。

53
00:03:07,970 --> 00:03:11,560
我们还可以在这里添加一个条件子句

54
00:03:11,560 --> 00:03:13,700
到这个表单控件。

55
00:03:13,700 --> 00:03:17,070
假设我们添加了一个无效的类

56
00:03:17,070 --> 00:03:21,010
如果 userNameValidity 等于无效。

57
00:03:21,010 --> 00:03:22,690
因此，如果结果为真，

58
00:03:22,690 --> 00:03:25,880
这个无效的类被添加到这个 div

59
00:03:27,560 --> 00:03:30,240
我们可以在我们的 CSS 代码中使用它

60
00:03:30,240 --> 00:03:32,270
在底部。

61
00:03:32,270 --> 00:03:36,400
例如这里，检查我们是否有一个表单控制 div，

62
00:03:36,400 --> 00:03:38,940
其中也有无效条款

63
00:03:40,300 --> 00:03:43,808
然后将输入元素定位在那里

64
00:03:43,808 --> 00:03:47,273
给它一个红色的边框颜色。

65
00:03:48,310 --> 00:03:52,980
也许在这里对所有目标标签重复该规则

66
00:03:52,980 --> 00:03:56,010
并给它一个红色的文本颜色，

67
00:03:56,010 -->00:03:58,133
突出显示无效输入。

68
00:04:00,780 --> 00:04:02,970
如果我们完成所有这些并重新加载，

69
00:04:02,970 --> 00:04:04,710
它最初看起来不错。

70
00:04:04,710 --> 00:04:06,430
但是如果你点击那里

71
00:04:06,430 --> 00:04:08,430
然后不要输入任何有效的东西

72
00:04:08,430 --> 00:04:11,970
然后点击那里，它会得到这个模糊事件。

73
00:04:11,970 --> 00:04:16,570
因此我们得到了我们的错误信息和我们的错误样式。

74
00:04:16,570 --> 00:04:18,500
如果我们在这里输入有效的东西

75
00:04:18,500 --> 00:04:21,980
然后再次模糊它，我们将其删除。

76
00:04:21,980 --> 00:04:23,650
如果我们进入一堆空白

77
00:04:23,650 --> 00:04:25,510
这也得到了这个造型

78
00:04:25,510 --> 00:04:27,523
因为我们有修剪修饰符。

79
00:04:28,970 --> 00:04:32,300
这只是我想给你的一个想法。

80
00:04:32,300 --> 00:04:34,290
有成千上万种不同的方式

81
00:04:34,290 --> 00:04:36,090
实施验证，

82
00:04:36,090 --> 00:04:38,210
你也绝对可以实现它

83
00:04:38,210 --> 00:04:42,140
以比我在这里更灵活和动态的方式。

84
00:04:42,140 --> 00:04:45,040
但重要的是要意识到这样的模式，

85
00:04:45,040 --> 00:04:47,276
因为这允许您构建

86
00:04:47,276 --> 00:04:51,090
用户界面和用户体验，

87
00:04:51,090 --> 00:04:54,590
您可能想提供给您的用户。

88
00:04:54,590 --> 00:04:56,900
所以，这就是现在关于验证的内容。

89
00:04:56,900 --> 00:05:00,990
添加实时验证的一种可能方式

90
00:05:00,990 --> 00:05:02,900
在提交某些东西之前，

91
00:05:02,900 --> 00:05:05,130
并不是说另一种方法是错误的，

92
00:05:05,130 --> 00:05:07,260
但也只是为了表明这一点，

93
00:05:07,260 --> 00:05:10,883
现在，让我们看看如何构建自己的表单控件。