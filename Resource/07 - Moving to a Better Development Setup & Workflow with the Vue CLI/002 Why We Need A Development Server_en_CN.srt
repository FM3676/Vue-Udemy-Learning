1
00:00:02,120 --> 00:00:04,380
在我们开始使用 Vue CLI 之前

2
00:00:04,380 --> 00:00:08,109
在我们开始创建那些更好的项目设置之前，

3
00:00:08,109 --> 00:00:09,600
我谈到了。

4
00:00:09,600 --> 00:00:12,170
让我们明白为什么

5
00:00:12,170 --> 00:00:15,050
我们可能需要这样更好的设置。

6
00:00:15,050 --> 00:00:18,110
现在这是我们将需要的一件事，例如，

7
00:00:18,110 --> 00:00:21,170
一个合适的开发网络服务器。

8
00:00:21,170 --> 00:00:22,810
现在，我的意思是什么？

9
00:00:22,810 --> 00:00:26,040
目前我们正在测试我们的 Vue 应用程序

10
00:00:26,040 --> 00:00:28,930
通过双击索引 HTML 文件，

11
00:00:28,930 --> 00:00:31,200
然后在浏览器中看到它。

12
00:00:31,200 --> 00:00:34,930
这行得通，但实际上是不现实的。

13
00:00:34,930 --> 00:00:38,930
这实际上不是我们想要测试的方式，为什么？

14
00:00:38,930 --> 00:00:40,530
因为有了这个，

15
00:00:40,530 --> 00:00:43,200
我们实际上使用文件协议

16
00:00:43,200 --> 00:00:48,200
而不是 HTTPS 协议，您可以在此处查看。

17
00:00:48,550 --> 00:00:52,590
这在浏览器中作为文件加载。

18
00:00:52,590 --> 00:00:55,103
现在，如果加载，像 google.com 这样的页面，

19
00:00:55,103 --> 00:00:58,470
这不是作为文件加载的，而是在这里，

20
00:00:58,470 --> 00:01:02,180
这是使用 HTTP 作为网站加载的

21
00:01:02,180 --> 00:01:05,830
或者实际上是 HTTPS 协议。

22
00:01:05,830 --> 00:01:09,510
那是完全不同的事情，它会影响如何

23
00:01:09,510 --> 00:01:12,610
提供的页面以及哪些功能

24
00:01:12,610 --> 00:01:14,800
在我们的代码中可用。

25
00:01:14,800 --> 00:01:18,400
那么我们可以在我们的 Java 脚本代码中使用哪些功能

26
00:01:18,400 --> 00:01:22,830
到目前为止，使用该文件协议，一切正常，

27
00:01:22,830 --> 00:01:24,710
但这不会一直这样

28
00:01:25,800 --> 00:01:29,300
因为确实某些现代 JavaScript 特性

29
00:01:29,300 --> 00:01:33,570
在该文件协议设置中不会真正起作用。

30
00:01:33,570 --> 00:01:36,100
此外，您还有一件重要的事情

31
00:01:36,100 --> 00:01:39,650
牢记您网站的用户，

32
00:01:39,650 --> 00:01:41,290
您的 Vue 网络应用程序。

33
00:01:41,290 --> 00:01:44,380
所以你想用你的应用定位的用户，

34
00:01:44,380 --> 00:01:47,670
他们到底会向导一个网站，对吧？

35
00:01:47,670 --> 00:01:49,870
你正在建立一个网站，最终

36
00:01:49,870 --> 00:01:52,270
将托管在某些服务器上。

37
00:01:52,270 --> 00:01:54,380
因此，最终的应用程序，

38
00:01:54,380 --> 00:01:58,600
您的用户看到的将由服务器托管

39
00:01:58,600 --> 00:02:02,090
因此将通过 HTTPS 提供服务，

40
00:02:02,090 --> 00:02:04,700
未连接文件协议

41
00:02:04,700 --> 00:02:08,240
该归档协议仅在本地可用

42
00:02:08,240 --> 00:02:12,250
如果您双击 HTML 文件，在您的计算机上，

43
00:02:12,250 --> 00:02:16,400
这不是提供网页后将使用的内容

44
00:02:16,400 --> 00:02:19,000
最终通过服务器发送给您的用户，

45
00:02:19,000 --> 00:02:21,960
因此你正在做一些不是真的

46
00:02:21,960 --> 00:02:26,350
很好，您正在不同的环境下测试您的 Web 应用程序

47
00:02:26,350 --> 00:02:30,200
那么你的用户最终会看到它们。

48
00:02:30,200 --> 00:02:34,160
现在我可以告诉你到目前为止这不会有什么不同。

49
00:02:34,160 --> 00:02:36,560
您在上一个模块中学到了什么

50
00:02:36,560 --> 00:02:39,500
以完全相同的方式应用

51
00:02:39,500 --> 00:02:43,620
无论 HTML 文件如何提供，

52
00:02:43,620 --> 00:02:45,150
但往前走，

53
00:02:45,150 --> 00:02:46,640
我们肯定想换

54
00:02:46,640 --> 00:02:49,270
到更现实的发展设定。

55
00:02:49,270 --> 00:02:50,750
例如，我们

56
00:02:50,750 --> 00:02:54,300
肯定想要一个开发网络服务器，

57
00:02:54,300 --> 00:02:58,640
这是在您的机器上本地运行的 Web 服务器，所以

58
00:02:58,640 --> 00:03:01,740
您现在不需要为任何服务器付费，

59
00:03:01,740 --> 00:03:05,050
您仍然可以在您的机器上本地测试所有内容，

60
00:03:05,050 --> 00:03:07,680
但有一个重要的区别，

61
00:03:07,680 --> 00:03:09,640
这个开发网络服务器，

62
00:03:09,640 --> 00:03:11,630
我将向您展示如何设置，

63
00:03:11,630 --> 00:03:13,380
这将非常容易，不用担心。

64
00:03:13,380 --> 00:03:16,580
此开发 Web 服务器将为您的 Web 应用程序提供服务，

65
00:03:16,580 --> 00:03:19,280
你的 HTML 文件，为什么是 HTTPS

66
00:03:20,150 --> 00:03:22,630
还是您机器上的 HTTP 协议？

67
00:03:22,630 --> 00:03:24,660
不是为什么 f文件协议。

68
00:03:24,660 --> 00:03:27,143
这将是一个重要的区别。