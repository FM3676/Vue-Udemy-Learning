1
00:00:02,200 --> 00:00:03,920
源文件夹包含

2
00:00:03,920 --> 00:00:07,230
我们要在其中编写代码的所有 JavaScript 文件。

3
00:00:07,230 --> 00:00:11,580
最后，源文件夹是我们的主要工作目录。

4
00:00:11,580 --> 00:00:14,350
我们将编写我们的 Vue 应用程序代码

5
00:00:14,350 --> 00:00:15,843
在那个源文件夹中。

6
00:00:16,840 --> 00:00:20,800
这里的主要 JavaScript 文件是主要入口点。

7
00:00:20,800 --> 00:00:24,060
在这里你看到我们有一个导入语法，

8
00:00:24,060 --> 00:00:26,020
到目前为止我们还没有使用过，

9
00:00:26,020 --> 00:00:28,930
但这实际上是默认的 JavaScript 代码，

10
00:00:28,930 --> 00:00:32,689
用于导入功能的现代 JavaScript 功能

11
00:00:32,689 --> 00:00:35,250
从一个文件到另一个文件。

12
00:00:35,250 --> 00:00:38,500
在这里我们导入 createApp 函数

13
00:00:38,500 --> 00:00:40,940
来自 Vue 框架。

14
00:00:40,940 --> 00:00:42,653
在我们使用 vue.createApp 之前，

15
00:00:43,806 --> 00:00:46,360
现在我们不这样做，因为现在我们没有

16
00:00:46,360 --> 00:00:48,780
一个全局可用的 Vue 对象，

17
00:00:48,780 --> 00:00:52,040
但是我们现在可以从 Vue 框架中导入

18
00:00:52,040 --> 00:00:56,030
并导入诸如 createApp 方法之类的东西。

19
00:00:56,030 --> 00:01:00,190
然后我们创建一个应用程序，其配置似乎

20
00:01:00,190 --> 00:01:03,990
来自 App.vue 文件，稍后会详细介绍，

21
00:01:03,990 --> 00:01:08,200
我们将它挂载到一个 ID 为 app 的元素上。

22
00:01:08,200 --> 00:01:11,830
这就是这个带有 ID 应用程序的 div

23
00:01:11,830 --> 00:01:14,170
在那个索引 HTML 文件中。

24
00:01:14,170 --> 00:01:16,823
这就是我们的 Vue 应用程序的最终结果。

25
00:01:18,540 --> 00:01:20,890
所以这是调用 createApp 的另一种方式

26
00:01:20,890 --> 00:01:23,270
通过使用这种导入语法，

27
00:01:23,270 --> 00:01:25,440
但我们将使用这个导入语法

28
00:01:25,440 --> 00:01:26,990
从现在开始在整个课程中，

29
00:01:26,990 --> 00:01:30,960
因为这是现代 JavaScript 的导出方式

30
00:01:30,960 --> 00:01:33,893
并将特征从一个文件导入到另一个文件。

31
00:01:35,120 --> 00:01:37,810
但是这个 App.vue 文件呢？

32
00:01:37,810 --> 00:01:41,090
我的意思是，createApp 总是拿这个对象

33
00:01:41,090 --> 00:01:42,800
与数据等。

34
00:01:42,800 --> 00:01:45,440
那么为什么我们现在要传递应用程序，

35
00:01:45,440 --> 00:01:49,820
哪个是来自 App.vue 文件的 createApp？

36
00:01:49,820 --> 00:01:52,080
好吧，让我们看看 App.vue 中有什么

37
00:01:53,527 --> 00:01:57,470
.vue 文件是一个特殊的 Vue.JS 功能

38
00:01:57,470 --> 00:02:02,470
或者一个特殊的 Vue CLI 项目功能，我可以说。

39
00:02:03,847 --> 00:02:08,847
.vue 文件允许我们正确地使用 Vue 应用程序并且准确

40
00:02:09,220 --> 00:02:13,730
Vue 组件以一种更好的方式。

41
00:02:13,730 --> 00:02:16,890
它们允许我们拆分模板，

42
00:02:16,890 --> 00:02:21,580
所以属于应用程序或组件的 HTML 代码，

43
00:02:21,580 --> 00:02:24,610
脚本部分和一些样式

44
00:02:24,610 --> 00:02:28,310
这里分为三个不同的部分。

45
00:02:28,310 --> 00:02:33,030
你看，我们在这个 Vue 文件中有一个模板标签，

46
00:02:33,030 --> 00:02:35,630
其中包含此应用程序的模板，

47
00:02:35,630 --> 00:02:39,220
一个脚本标签，实际上包含这个冲突对象

48
00:02:39,220 --> 00:02:42,410
我们以前见过，只是用不同的键，

49
00:02:42,410 --> 00:02:44,250
我们以前没见过的，

50
00:02:44,250 --> 00:02:48,230
但这确实是您添加数据的地方。

51
00:02:48,230 --> 00:02:51,890
但我们稍后会更详细地了解这一点。

52
00:02:51,890 --> 00:02:55,140
我们在这里有一个风格标签，

53
00:02:55,140 --> 00:02:59,090
它允许我们定义样式，CSS样式

54
00:02:59,090 --> 00:03:02,610
这应该在这个 Vue 应用程序中可用。

55
00:03:02,610 --> 00:03:06,040
这是一个不能像这样工作的文件

56
00:03:06,040 --> 00:03:09,990
在浏览器中，但是 Vue CLI 将转换哪个

57
00:03:09,990 --> 00:03:13,190
在幕后，一个可以工作的代码。

58
00:03:13,190 --> 00:03:16,540
因此，作为开发人员，我们有一种很好的方式来定义

59
00:03:16,540 --> 00:03:19,500
我们的 Vue 应用程序包含三个这样的部分，

60
00:03:19,500 --> 00:03:21,800
我们仍然会得到代码

61
00:03:21,800 --> 00:03:24,520
这只适用于浏览器。

62
00:03:24,520 --> 00:03:29,520
但是这究竟是如何工作的，为什么我们想要这个？

63
00:03:29,550 --> 00:03:33,500
最后，我们使用 Vue CLI 创建的项目

64
00:03:33,500 --> 00:03:36,510
使用所谓的构建工作流程。

65
00:03:36,510 --> 00:03:39,850
钍at 是我们编写的代码的一种奇特方式

66
00:03:39,850 --> 00:03:42,670
不是在浏览器中运行的代码。

67
00:03:42,670 --> 00:03:46,980
相反，我们的代码具有某些特性，例如，

68
00:03:46,980 --> 00:03:49,380
下一代 JavaScript 功能，

69
00:03:49,380 --> 00:03:52,320
还有 Vue 特定的特性和语法

70
00:03:52,320 --> 00:03:54,330
像 .vue 文件一样，

71
00:03:54,330 --> 00:03:57,093
这在浏览器中不会那样工作。

72
00:03:58,070 --> 00:04:01,160
如果您尝试加载具有结构的 .vue 文件

73
00:04:01,160 --> 00:04:04,910
您刚刚在浏览器中看到，它根本不会做任何事情

74
00:04:04,910 --> 00:04:08,910
因为浏览器不知道如何处理该代码。

75
00:04:08,910 --> 00:04:10,510
但这是最重要的。

76
00:04:10,510 --> 00:04:15,150
现在，使用 Vue CLI 生成的项目

77
00:04:15,150 --> 00:04:20,149
有很多底层工具在处理我们的代码

78
00:04:20,920 --> 00:04:25,500
在所谓的构建步骤中将该代码转换为代码

79
00:04:25,500 --> 00:04:27,110
在浏览器中工作。

80
00:04:27,110 --> 00:04:29,120
所以构建步骤只是

81
00:04:29,120 --> 00:04:32,560
对我们的代码进行了一些转换

82
00:04:32,560 --> 00:04:36,160
将该代码更改为标准 JavaScript 代码

83
00:04:36,160 --> 00:04:38,740
具有标准 JavaScript 功能

84
00:04:38,740 --> 00:04:41,120
在浏览器中工作。

85
00:04:41,120 --> 00:04:44,210
然后开发还是一个真正的web server

86
00:04:44,210 --> 00:04:48,160
托管我们的应用程序能够在屏幕上显示一些东西

87
00:04:48,160 --> 00:04:51,340
因为它只接收常规的 JavaScript 代码

88
00:04:51,340 --> 00:04:53,750
那行得通。

89
00:04:53,750 --> 00:04:56,730
而且最后我们的项目也有这样的设置

90
00:04:56,730 --> 00:04:58,350
在引擎盖下。

91
00:04:58,350 --> 00:05:00,490
最后， npm run service 脚本

92
00:05:00,490 --> 00:05:03,330
不只是启动那个开发服务器，

93
00:05:03,330 --> 00:05:05,720
还要开始这个构建过程，

94
00:05:05,720 --> 00:05:08,950
它监视我们的代码文件并转换为代码。

95
00:05:08,950 --> 00:05:11,200
这就是我在这里的代码，

96
00:05:11,200 --> 00:05:14,110
使用单独的模板、脚本和样式技术，

97
00:05:14,110 --> 00:05:17,280
最后只转换为 JavaScript 代码，

98
00:05:17,280 --> 00:05:19,233
在浏览器中运行。

99
00:05:20,630 --> 00:05:23,590
这是一件好事，因为你会看到

100
00:05:23,590 --> 00:05:27,554
在整个课程中，那些 .vue 文件

101
00:05:27,554 --> 00:05:30,480
也称为信号文件组件，

102
00:05:30,480 --> 00:05:33,060
那些单个文件组件

103
00:05:33,060 --> 00:05:37,430
是编写 Vue 组件的一种非常方便的方式

104
00:05:37,430 --> 00:05:40,000
并编写 Vue 代码。

105
00:05:40,000 --> 00:05:41,350
此刻的另一端，

106
00:05:41,350 --> 00:05:42,970
它看起来不太吸引人

107
00:05:42,970 --> 00:05:46,430
因为，好吧，我的 IDE 不明白

108
00:05:46,430 --> 00:05:48,610
这个 .vue 文件。

109
00:05:48,610 --> 00:05:52,640
它只是一堆白色文本，没有语法突出显示。

110
00:05:52,640 --> 00:05:55,020
所以目前，它并不是真的在寻找

111
00:05:55,020 --> 00:05:57,470
喜欢一种更好的编写代码的方式。

112
00:05:57,470 --> 00:06:00,670
好吧，是时候调整 IDE Visual Studio 代码了

113
00:06:00,670 --> 00:06:02,113
也有一点。