1
00:00:02,380 --> 00:00:03,550
现在，除了需要

2
00:00:03,550 --> 00:00:05,540
对于 Web 开发服务器，

3
00:00:05,540 --> 00:00:08,876
还有其他原因切换到不同的，

4
00:00:08,876 --> 00:00:12,350
更好的开发设置，

5
00:00:12,350 --> 00:00:15,170
因为你可能还没有注意到，

6
00:00:15,170 --> 00:00:19,540
但实际上你可能想要更好的开发者体验，

7
00:00:19,540 --> 00:00:23,240
到目前为止，我们编写代码的方式，它有效，

8
00:00:23,240 --> 00:00:25,550
但它有一定的缺陷。

9
00:00:25,550 --> 00:00:28,190
我们目前的编写和测试方式

10
00:00:28,190 --> 00:00:30,590
Vie App 有缺陷。

11
00:00:30,590 --> 00:00:32,850
那么让我们看看我们目前的状态是什么。

12
00:00:32,850 --> 00:00:36,490
此刻，我们总是需要重新加载页面

13
00:00:36,490 --> 00:00:39,203
每当我们对代码进行任何更改时。

14
00:00:40,410 --> 00:00:42,140
例如，在这里，

15
00:00:42,140 --> 00:00:46,600
如果我转到我的 JavaScript 文件，比方说，

16
00:00:46,600 --> 00:00:48,913
我确实在这里更改了一些数据，

17
00:00:49,770 --> 00:00:52,250
更名为曼努埃尔·洛伦佐

18
00:00:52,250 --> 00:00:53,880
当我在页面上看到这个时，

19
00:00:53,880 --> 00:00:57,930
保存 JavaScript 文件后，我需要重新加载页面。

20
00:00:57,930 --> 00:01:00,420
现在这听起来可能不是一件坏事，

21
00:01:00,420 --> 00:01:03,070
我的意思是这真的很容易而且很快，

22
00:01:03,070 --> 00:01:07,180
但是，如果您正在处理 Web 应用程序上的应用程序

23
00:01:07,180 --> 00:01:09,000
几个小时和几天

24
00:01:09,000 --> 00:01:11,058
你写了很多代码，你想测试

25
00:01:11,058 --> 00:01:12,700
很多东西，

26
00:01:12,700 --> 00:01:16,310
总是必须重新加载可能非常烦人。

27
00:01:16,310 --> 00:01:18,650
还值得注意的是，当你重新加载时，

28
00:01:18,650 --> 00:01:22,710
当然，您会丢失应用程序的所有状态。

29
00:01:22,710 --> 00:01:25,750
如果它被扩展并且你重新加载，

30
00:01:25,750 --> 00:01:28,760
你又回到了初始加载状态，

31
00:01:28,760 --> 00:01:31,130
那些微小的东西可以加起来

32
00:01:31,130 --> 00:01:34,500
实际上花费了你很多宝贵的时间

33
00:01:34,500 --> 00:01:38,010
并使开发变得不必要，更加困难，

34
00:01:38,010 --> 00:01:39,970
或者只是需要更长的时间。

35
00:01:39,970 --> 00:01:42,063
这不是你可能想要的。

36
00:01:43,460 --> 00:01:47,860
此外，目前在我们的代码编辑器中的 IDE 中，

37
00:01:47,860 --> 00:01:49,300
视觉工作室代码，

38
00:01:49,300 --> 00:01:53,830
我们通过该工具获得的支持非常有限。

39
00:01:53,830 --> 00:01:57,301
例如，自动完成功能非常有限。

40
00:01:57,301 --> 00:02:00,683
例如，如果我想调用 Vue.createApp，

41
00:02:01,580 --> 00:02:03,850
Visual Studio Code 甚至都看不懂

42
00:02:03,850 --> 00:02:06,750
有一个可用的 vue 对象。

43
00:02:06,750 --> 00:02:07,940
如果我输入一个点，

44
00:02:07,940 --> 00:02:11,230
它不知道我可以调用哪些方法。

45
00:02:11,230 --> 00:02:14,730
它建议在这里创建应用程序，因为我以前使用过它

46
00:02:14,730 --> 00:02:15,790
在那个文件中，

47
00:02:15,790 --> 00:02:19,280
但如果我不这样做，它就不会知道它的存在。

48
00:02:19,280 --> 00:02:21,380
所以这就是所有令人讨厌的事情。

49
00:02:21,380 --> 00:02:24,240
获得更好的IDE支持会更好，

50
00:02:24,240 --> 00:02:27,890
获得更多的 IDE 自动完成功能，例如，

51
00:02:27,890 --> 00:02:30,220
也得到警告和错误，

52
00:02:30,220 --> 00:02:31,730
如果我们添加一个错字。

53
00:02:31,730 --> 00:02:32,563
眼下，

54
00:02:32,563 --> 00:02:36,470
如果我这样调用 creatApp，因为我忘记了 E，

55
00:02:36,470 --> 00:02:40,230
是的，该应用程序无法运行，我们会在此处收到错误消息

56
00:02:40,230 --> 00:02:44,080
在浏览器中进入 JavaScript 控制台，

57
00:02:44,080 --> 00:02:47,290
但我们在编辑器中没有收到任何警告。

58
00:02:47,290 --> 00:02:50,200
很高兴在这里获得更好的支持

59
00:02:50,200 --> 00:02:52,440
这样我们甚至不会尝试运行代码，

60
00:02:52,440 --> 00:02:54,443
有一个简单的错字会像这样。

61
00:02:55,800 --> 00:02:57,800
现在最后但并非最不重要的到目前为止，

62
00:02:57,800 --> 00:03:02,720
我总是使用一个 HTML 和一个 JavaScript 文件，

63
00:03:02,720 --> 00:03:05,560
我们可以添加更多文件并将它们组合起来，

64
00:03:05,560 --> 00:03:09,060
但我们必须管理所有这些进口

65
00:03:09,060 --> 00:03:12,530
例如，手动使用脚本源文本。

66
00:03:12,530 --> 00:03:14,570
从多个 HTML 文件中，

67
00:03:14,570 --> 00:03:16,700
它甚至不会那么容易

68
00:03:16,700 --> 00:03:19,430
因为虽然我们可能有多个文件，

69
00:03:19,430 --> 00:03:21,210
如果我们在这些文件之间切换，

70
00:03:21,210 --> 00:03:24,010
我们最终总是会加载一个新页面

71
00:03:24,010 --> 00:03:26,290
因此失去所有状态

72
00:03:26,290 --> 00:03:28,600
可能已经保存在 JavaScript 中。

73
00:03:28,600 --> 00:03:33,100
所以计算的任何中间结果等等。

74
00:03:33,100 --> 00:03:36,610
所以目前我们对

75
00:03:36,610 --> 00:03:38,930
我们如何拆分我们的代码，

76
00:03:38,930 --> 00:03:41,123
我们如何使我们的代码更具可读性。

77
00:03:42,450 --> 00:03:44,360
当然，此刻刚刚

78
00:03:44,360 --> 00:03:46,530
一个 JavaScript 文件有效，

79
00:03:46,530 --> 00:03:48,480
我们没有那么多代码，

80
00:03:48,480 --> 00:03:51,220
但很容易想象，当我们建造

81
00:03:51,220 --> 00:03:53,780
越来越复杂的应用，

82
00:03:53,780 --> 00:03:55,320
我们有越来越多的代码，

83
00:03:55,320 --> 00:03:59,120
我们可能希望将该代码拆分到多个文件中

84
00:03:59,120 --> 00:04:02,860
使每个文件本身更具可读性。

85
00:04:02,860 --> 00:04:05,770
例如，这里的模板之类的东西，

86
00:04:05,770 --> 00:04:07,710
我们有这个组件，

87
00:04:07,710 --> 00:04:10,180
把它放在这样的字符串中有点烦人，

88
00:04:10,180 --> 00:04:12,510
但目前，这是我们所能做的。

89
00:04:12,510 --> 00:04:15,510
我们没有更好的方法来定义这个模板，

90
00:04:15,510 --> 00:04:19,810
我们不能在 HTML 文件中这样做，因为对于组件，

91
00:04:19,810 --> 00:04:24,433
我们不能像使用 Vue 应用程序那样将它们挂载到 HTML。

92
00:04:26,490 --> 00:04:29,120
所以这是另一件很棒的事情

93
00:04:29,120 --> 00:04:30,890
如果我们能摆脱它。

94
00:04:30,890 --> 00:04:33,360
因此，我们目前的状态很明显

95
00:04:33,360 --> 00:04:36,460
有一定的改进空间。

96
00:04:36,460 --> 00:04:39,200
我们想要的状态可能是这样的。

97
00:04:39,200 --> 00:04:42,470
如果保存更改会很棒。

98
00:04:42,470 --> 00:04:44,900
因此，每当我们在代码中更改某些内容时

99
00:04:44,900 --> 00:04:48,450
我们保存了这些更改将被自动检测，

100
00:04:48,450 --> 00:04:51,220
然后页面会自动重新加载，

101
00:04:51,220 --> 00:04:54,840
或者甚至比这更好，不仅仅是重新加载，

102
00:04:54,840 --> 00:04:59,300
但只需更新页面中确实发生变化的那部分

103
00:04:59,300 --> 00:05:02,470
因此保持我们所有的状态。

104
00:05:02,470 --> 00:05:05,320
那太好了，它会为我们节省很多时间。

105
00:05:05,320 --> 00:05:06,875
IDE，代码编辑器，

106
00:05:06,875 --> 00:05:10,790
我们正在使用应该提供更好的自动完成和提示

107
00:05:10,790 --> 00:05:14,620
确保我们能够更快地发现错误

108
00:05:14,620 --> 00:05:18,230
并避免编写不起作用的代码。

109
00:05:18,230 --> 00:05:21,250
如果我们能过得轻松一点就好了

110
00:05:21,250 --> 00:05:24,270
将我们的代码拆分到多个文件中，

111
00:05:24,270 --> 00:05:27,550
以更好的方式定义组件的模板，

112
00:05:27,550 --> 00:05:31,090
并使用现代 JavaScript 功能，如 ES 模块

113
00:05:31,090 --> 00:05:33,680
用于 JavaScript 代码中的导出和导入

114
00:05:33,680 --> 00:05:35,353
为此而互相投入。

115
00:05:35,353 --> 00:05:38,480
那会很好，这就是我们想要的状态。

116
00:05:38,480 --> 00:05:43,140
这正是 Vue CLI 能够帮助我们的地方。

117
00:05:43,140 --> 00:05:46,090
所以让我们找出视图 CLI 到底是什么，

118
00:05:46,090 --> 00:05:48,083
它如何帮助我们以及我们如何使用它。