1
00:00:02,110 --> 00:00:04,059
让我们回到例子

2
00:00:04,059 --> 00:00:08,860
您在课程前面看到过有关此联系人列表的内容。

3
00:00:08,860 --> 00:00:11,560
我的意思是，这就是我们开始使用组件的方式。

4
00:00:11,560 --> 00:00:14,090
所以这就是我想接的地方。

5
00:00:14,090 --> 00:00:17,130
为此，在源文件夹中，我将首先，

6
00:00:17,130 --> 00:00:22,060
创建一个全新的文件，我将其命名为 App.vue。

7
00:00:22,060 --> 00:00:24,370
您不必将其命名为 App，

8
00:00:24,370 --> 00:00:28,350
但命名你的主文件是一个约定，

9
00:00:28,350 --> 00:00:33,350
它包含您的主要 vue 应用程序配置 App.vue。

10
00:00:33,361 --> 00:00:36,160
.vue 是我将使用的扩展名

11
00:00:36,160 --> 00:00:39,950
这样我就可以使用这些信号文件组件功能

12
00:00:39,950 --> 00:00:40,980
在那个文件中。

13
00:00:40,980 --> 00:00:44,670
有一个单独的模板、脚本和样式部分，

14
00:00:44,670 --> 00:00:45,750
我非常喜欢那个。

15
00:00:45,750 --> 00:00:47,600
它帮助我拆分逻辑

16
00:00:47,600 --> 00:00:49,470
却将一切都集中在一处。

17
00:00:49,470 --> 00:00:52,440
因此，我们将使用此类 vue 文件

18
00:00:52,440 --> 00:00:55,670
在整个课程和任何 Vue 应用程序中都有很多

19
00:00:55,670 --> 00:00:57,360
你要建造。

20
00:00:57,360 --> 00:00:59,460
所以 App.vue 就是这样。

21
00:00:59,460 --> 00:01:03,480
现在在这里，我们可以创建这三个部分中的两个

22
00:01:03,480 --> 00:01:05,050
你以前见过。

23
00:01:05,050 --> 00:01:09,530
创建一个模板标签，打开和关闭，像这样

24
00:01:09,530 --> 00:01:12,840
并创建一个脚本标签，打开和关闭。

25
00:01:12,840 --> 00:01:15,040
我们暂时不需要样式标签。

26
00:01:15,040 --> 00:01:16,493
我们稍后会添加它。

27
00:01:17,820 --> 00:01:19,680
现在我要再次强调，

28
00:01:19,680 --> 00:01:23,320
这不是通常可以工作的代码。

29
00:01:23,320 --> 00:01:25,340
它也不是 JavaScript 文件。

30
00:01:25,340 --> 00:01:27,060
这是一个 DoD vue 文件。

31
00:01:27,060 --> 00:01:30,740
所以只有 vue 项目设置知道如何处理。

32
00:01:30,740 --> 00:01:34,550
而在幕后，Vue 将彻底改变这一切

33
00:01:34,550 --> 00:01:36,980
只是普通的 JavaScript 代码，

34
00:01:36,980 --> 00:01:39,260
浏览器会理解的。

35
00:01:39,260 --> 00:01:40,990
但我们将使用这个设置

36
00:01:40,990 --> 00:01:44,583
因为对于我们作为开发人员而言，这将使生活更轻松。

37
00:01:45,620 --> 00:01:48,330
现在在这些脚本标签中，

38
00:01:48,330 --> 00:01:53,030
我们在这里为我们的 Vue 应用程序提供配置。

39
00:01:53,030 --> 00:01:56,160
对于应用程序，我们想在这里挂载到这个 div

40
00:01:56,160 --> 00:01:58,063
在索引 HTML 文件中。

41
00:01:59,960 --> 00:02:04,080
所以我们在这里创建一个标准的 JavaScript 对象，

42
00:02:04,080 --> 00:02:07,130
我们也可以将它存储在一个名为 app 的常量中

43
00:02:07,130 --> 00:02:08,002
如果我们愿意。

44
00:02:10,110 --> 00:02:12,930
在这里，我们现在可以添加我们学到的东西。

45
00:02:12,930 --> 00:02:17,930
我们可以添加数据，我们可以添加方法，我们可以添加计算。

46
00:02:18,420 --> 00:02:21,593
我们可以在这个 Vue 应用程序中添加我们需要的任何内容。

47
00:02:23,850 --> 00:02:26,680
现在，我不需要方法和计算，

48
00:02:26,680 --> 00:02:27,930
但在我的主应用程序中，

49
00:02:27,930 --> 00:02:29,670
我想添加一些数据。

50
00:02:29,670 --> 00:02:32,980
因此，我们将在这里返回我们的对象，

51
00:02:32,980 --> 00:02:34,250
正如我们所了解的那样。

52
00:02:34,250 --> 00:02:36,590
里面有我的朋友，对吧？

53
00:02:36,590 --> 00:02:37,950
因为那是我们所拥有的

54
00:02:37,950 --> 00:02:40,570
在组件介绍模块中也是如此。

55
00:02:40,570 --> 00:02:43,260
我们有两个朋友元素

56
00:02:43,260 --> 00:02:47,410
其中每个元素只是一个具有 ID 的对象。

57
00:02:47,410 --> 00:02:50,610
例如，我们在这里有 Manuel 有一个名字，

58
00:02:50,610 --> 00:02:55,000
再次，可能是 Manuel Lorenz 或任何朋友的名字

59
00:02:55,000 --> 00:02:57,770
您要添加，带有电话号码

60
00:02:57,770 --> 00:03:02,770
我只是去一个随机的电话号码这里

61
00:03:03,900 --> 00:03:07,500
以及我也将输入的电子邮件

62
00:03:07,500 --> 00:03:10,490
一个虚构的电子邮件地址。

63
00:03:10,490 --> 00:03:15,040
然后我们可以复制它来拥有第二个朋友。

64
00:03:15,040 --> 00:03:17,430
我以前用过朱莉。

65
00:03:17,430 --> 00:03:19,530
所以我要重复这个名字，

66
00:03:19,530 --> 00:03:24,293
Julie Jones，这里也有一个随机电话号码。

67
00:03:25,300 --> 00:03:28,100
再说一次，这完全取决于你。

68
00:03:28,100 --> 00:03:29,933
在这里，我有 julie@localhost。

69
00:03:30,960 --> 00:03:35,190
所以现在我们在我们的应用配置对象中获得了数据。

70
00:03:35,190 --> 00:03:39,530
如果我们抛开我们如何使用这个对象，

71
00:03:39,530 --> 00:03:41,900
因为目前我们根本没有使用它，

72
00:03:41,900 --> 00:03:43,980
除了将其存储在此常量中。

73
00:03:43,980 --> 00:03:47,310
如果我们把它放在一边，这就是我们学到的，对吧？

74
00:03:47,310 --> 00:03:50,000
我们有一个带有数据方法的对象

75
00:03:50,000 --> 00:03:51,930
我们返回数据对象的地方。

76
00:03:51,930 --> 00:03:54,643
这也是我们之前学到的。

77
00:03:57,310 --> 00:04:02,020
现在这应该是我们主应用程序的配置对象。

78
00:04:02,020 --> 00:04:06,940
我们现在如何在 App.vue 文件中获取这个配置对象

79
00:04:06,940 --> 00:04:10,903
进入我们在主 JS 中的 create app 方法？

80
00:04:12,780 --> 00:04:17,029
好吧，我们将在这里使用这个导入语法，

81
00:04:17,029 --> 00:04:18,959
你已经在这里看到了。

82
00:04:18,959 --> 00:04:21,600
这是一个现代 JavaScript 功能，

83
00:04:21,600 --> 00:04:25,720
我们在 Vue CLI 中使用创建的 Vue 项目

84
00:04:25,720 --> 00:04:28,810
组合不同的 JavaScript 文件

85
00:04:28,810 --> 00:04:31,810
并在一个文件中导出功能

86
00:04:31,810 --> 00:04:32,913
并在另一个中使用它。

87
00:04:34,130 --> 00:04:39,110
为此，我们从以下位置导入一些东西，

88
00:04:39,110 --> 00:04:42,270
然后从要导入的文件中指向文件。

89
00:04:42,270 --> 00:04:45,150
在这里你应该使用相对导入

90
00:04:45,150 --> 00:04:47,200
从...开始 。/，

91
00:04:47,200 --> 00:04:50,680
这意味着它与这个文件在同一个文件夹中，

92
00:04:50,680 --> 00:04:51,720
然后是文件名。

93
00:04:51,720 --> 00:04:54,053
在这种情况下，App.vue。

94
00:04:55,520 --> 00:04:57,750
这里的导入看起来有点不同。

95
00:04:57,750 --> 00:04:59,860
这里不是 ./vue

96
00:04:59,860 --> 00:05:02,610
因为这里我们从一个包中导入

97
00:05:02,610 --> 00:05:04,610
来自这个 Vue 包。

98
00:05:04,610 --> 00:05:06,540
如果你从一个包中导入，

99
00:05:06,540 --> 00:05:08,630
您只需引用包名称。

100
00:05:08,630 --> 00:05:10,750
但如果您从自定义文件导入，

101
00:05:10,750 --> 00:05:14,983
像 App.vue 一样，您指定该文件的路径。

102
00:05:16,000 --> 00:05:19,640
现在 ... 虽然不是有效的语法。

103
00:05:19,640 --> 00:05:23,530
相反，我们可以导入一个命名的导出

104
00:05:23,530 --> 00:05:28,530
通过使用花括号或默认导出。

105
00:05:28,560 --> 00:05:30,400
现在你可能不知道有什么区别。

106
00:05:30,400 --> 00:05:33,630
在这里，我们将使用默认导出

107
00:05:33,630 --> 00:05:36,960
只需在此处提出我们选择的任何名称

108
00:05:36,960 --> 00:05:38,800
并从该文件中导入。

109
00:05:38,800 --> 00:05:41,080
而这里的这个标识符真的取决于你。

110
00:05:41,080 --> 00:05:42,360
可能是你好。

111
00:05:42,360 --> 00:05:44,410
这可能是什么。

112
00:05:44,410 --> 00:05:48,000
但通常你命名它就像文件被命名一样

113
00:05:48,000 --> 00:05:51,160
因为在那里我们有我们的主要应用程序配置。

114
00:05:51,160 --> 00:05:53,890
所以我在这里也将它命名为App。

115
00:05:53,890 --> 00:05:56,580
这就是我们现在传递给创建应用程序的内容，

116
00:05:56,580 --> 00:05:59,270
因为App，我们这里导入的

117
00:05:59,270 --> 00:06:03,140
应该只是这个 JavaScript 对象，

118
00:06:03,140 --> 00:06:06,060
这个 Vue 配置 JavaScript 对象。

119
00:06:06,060 --> 00:06:09,100
但是，目前，我们没有将其导出到这里。

120
00:06:09,100 --> 00:06:13,990
要导出它，我们不应该将它存储在常量中，

121
00:06:13,990 --> 00:06:16,700
仅在此文件中可用

122
00:06:16,700 --> 00:06:20,420
而不是在任何其他文件中，而是我们使用语法，

123
00:06:20,420 --> 00:06:24,070
这也是默认的现代 JavaScript。

124
00:06:24,070 --> 00:06:29,070
导出，导出关键字，然后是默认关键字。

125
00:06:29,520 --> 00:06:33,060
这告诉 JavaScript 这个对象在这里

126
00:06:33,060 --> 00:06:37,233
是这个 App.vue 文件的默认导出。

127
00:06:38,490 --> 00:06:41,140
这意味着每当我们像这样导入时，

128
00:06:41,140 --> 00:06:43,280
我们将导入该默认值。

129
00:06:43,280 --> 00:06:46,260
所以我们要导入那个对象。

130
00:06:46,260 --> 00:06:49,860
所以我们从 App.vue 文件中共享这个对象

131
00:06:49,860 --> 00:06:51,640
到主 JS 文件。

132
00:06:51,640 --> 00:06:52,860
因此，最后，

133
00:06:52,860 --> 00:06:57,860
我们通过此配置对象在此处创建 App。

134
00:06:58,060 --> 00:07:00,140
我们将其拆分为多个文件

135
00:07:00,140 --> 00:07:02,160
只是为了组织我们的代码

136
00:07:02,160 --> 00:07:05,680
并使每个文件都专注于特定任务

137
00:07:05,680 --> 00:07:08,560
因此，整个项目更具可读性，

138
00:07:08,560 --> 00:07:10,920
如果你正在建造更大的建筑，它真的会发光，

139
00:07:10,920 --> 00:07:12,523
更复杂的项目。

140
00:07:14,170 --> 00:07:19,170
所以现在，长话短说，我们在这里得到了我们的应用配置对象。

141
00:07:19,690 --> 00:07:21,830
现在你会注意到一件事。

142
00:07:21,830 --> 00:07:25,740
这个 Vue 应用程序，我们最后在这里创建

143
00:07:25,740 --> 00:07:27,640
没有模板。

144
00:07:27,640 --> 00:07:31,080
我们将其挂载到带有 ID 应用程序的 div 上，

145
00:07:31,080 --> 00:07:33,050
但这是一个空的 div。

146
00:07:33,050 --> 00:07:36,560
现在，如果我们有一些像 h2 标签这样的东西，

147
00:07:36,560 --> 00:07:39,340
例如，我们可以在那里使用 Vue 功能。

148
00:07:39,340 --> 00:07:40,940
这就是你学到的。

149
00:07:40,940 --> 00:07:44,160
但是在 Vue CLI 中创建了这样的项目，

150
00:07:44,160 --> 00:07:46,280
这通常不是你所做的。

151
00:07:46,280 --> 00:07:49,300
您将不理会该索引 HTML 文件。

152
00:07:49,300 --> 00:07:52,340
相反，这就是我们有这个模板部分的目的

153
00:07:52,340 --> 00:07:53,740
在 .vue 文件中。

154
00:07:53,740 --> 00:07:58,740
在这里，我们现在可以定义这个 Vue 应用程序的模板。

155
00:07:58,890 --> 00:08:03,890
所以在这里我们现在可以添加 h2，标签，

156
00:08:05,290 --> 00:08:08,193
说，我的朋友们。

157
00:08:09,610 --> 00:08:13,410
然后在其下方，例如，添加一个无序列表

158
00:08:13,410 --> 00:08:18,410
我们想在这里输出所有这些朋友。

159
00:08:21,360 --> 00:08:24,660
我们也可以将这一切包装成一个部分

160
00:08:24,660 --> 00:08:25,973
如果我们愿意。

161
00:08:28,220 --> 00:08:33,220
所以我们可以在这里为这个脚本编写我们的 HTML 代码。

162
00:08:36,400 --> 00:08:39,393
这只是常规的 HTML 标记。

163
00:08:40,820 --> 00:08:45,720
现在，如果我们保存所有内容并返回页面，

164
00:08:45,720 --> 00:08:49,210
本地主机 80:80，开发服务器启动并运行，

165
00:08:49,210 --> 00:08:53,490
此页面自动更新，无需您重新加载

166
00:08:53,490 --> 00:08:56,340
展示我们的应用内容。

167
00:08:56,340 --> 00:09:00,260
所以为了展示这个解析和渲染的模板，

168
00:09:00,260 --> 00:09:02,580
我们为我们的主应用程序定义的。

169
00:09:02,580 --> 00:09:05,810
这就是我们使用这些 .vue 文件的方式

170
00:09:05,810 --> 00:09:08,343
并设置了这样的项目。

171
00:09:09,590 --> 00:09:12,200
到目前为止，这与组件无关。

172
00:09:12,200 --> 00:09:15,100
这只是创建我们的 Vue 应用程序的不同方式。

173
00:09:15,100 --> 00:09:17,410
但重要的是要理解这一点

174
00:09:17,410 --> 00:09:21,960
因为我们将以相同的方式创建组件。

175
00:09:21,960 --> 00:09:24,240
因此，让我们将其作为下一步。

176
00:09:24,240 --> 00:09:27,040
让我们在设置中添加我们的第一个组件

177
00:09:27,040 --> 00:09:30,653
在我们真正深入研究组件通信之前。