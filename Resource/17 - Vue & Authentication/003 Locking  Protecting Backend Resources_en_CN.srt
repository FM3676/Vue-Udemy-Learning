1
00:00:02,160 --> 00:00:04,180
所以两个添加身份验证

2
00:00:04,180 --> 00:00:06,030
我将首先确保

3
00:00:06,030 --> 00:00:10,070
Firebase 不会授予对所有资源的访问权限

4
00:00:10,070 --> 00:00:11,880
目前它这样做

5
00:00:11,880 --> 00:00:15,290
因为在我们正在使用的他们的实时数据库中

6
00:00:15,290 --> 00:00:18,457
根据我们以这种测试模式开始的规则

7
00:00:18,457 --> 00:00:21,600
我们最终允许阅读和写作的地方

8
00:00:21,600 --> 00:00:24,937
到 Firebase 公开的所有资源。

9
00:00:24,937 --> 00:00:28,850
这绝对不是这里的想法

10
00:00:28,850 --> 00:00:31,430
我们绝对不想再这样做了

11
00:00:31,430 --> 00:00:36,230
相反，任何人都应该可以访问一些资源

12
00:00:36,230 --> 00:00:39,420
和其他资源应该受到保护。

13
00:00:39,420 --> 00:00:41,760
例如在我们的应用程序中，

14
00:00:41,760 --> 00:00:44,020
教练名单在这里

15
00:00:44,020 --> 00:00:46,180
并向教练发送消息

16
00:00:46,180 --> 00:00:49,940
每个人都应该可以使用

17
00:00:49,940 --> 00:00:53,900
在这里查看请求时被逮捕

18
00:00:53,900 --> 00:00:57,837
然后还报名当教练

19
00:00:57,837 --> 00:01:01,770
应该只对登录用户可用

20
00:01:01,770 --> 00:01:05,024
我们可以调整 Firebase 规则以确保

21
00:01:05,024 --> 00:01:07,950
这一切都反映在后端。

22
00:01:07,950 --> 00:01:09,960
现在，如果您不使用 Firebase，

23
00:01:09,960 --> 00:01:13,890
如果您编写了自己的 API，例如使用 note JS，

24
00:01:13,890 --> 00:01:15,100
你当然得写

25
00:01:15,100 --> 00:01:17,600
在后端自行检查的代码

26
00:01:17,600 --> 00:01:20,970
这里有 Firebase 和实时数据库，

27
00:01:20,970 --> 00:01:22,902
我们可以稍微调整一下这些规则

28
00:01:22,902 --> 00:01:27,090
控制如何授予读写访问权限。

29
00:01:27,090 --> 00:01:29,580
那么这如何与 Firebase 一起使用呢？

30
00:01:29,580 --> 00:01:32,020
在此规则对象中

31
00:01:32,020 --> 00:01:34,220
你会看到那些读写键

32
00:01:34,220 --> 00:01:36,290
然后那到底是一个值

33
00:01:36,290 --> 00:01:39,300
解析为真或假。

34
00:01:39,300 --> 00:01:42,930
现在我们可以稍微重写一下这些规则。

35
00:01:42,930 --> 00:01:46,850
为此，我将首先快速查看我的数据，

36
00:01:46,850 --> 00:01:47,990
我们必须记住

37
00:01:47,990 --> 00:01:51,691
我们现在终于有了教练和要求

38
00:01:51,691 --> 00:01:56,480
我们想让每个人都能读到教练，

39
00:01:56,480 --> 00:01:58,100
但救了一位新教练

40
00:01:58,100 --> 00:02:02,110
这对每个人来说都不应该是可能的

41
00:02:02,110 --> 00:02:05,330
对于发送的请求

42
00:02:05,330 --> 00:02:08,650
所以保存新请求应该对每个人都可用，

43
00:02:08,650 --> 00:02:10,900
但阅读应该受到限制。

44
00:02:10,900 --> 00:02:12,750
所以这里的规则努力，

45
00:02:12,750 --> 00:02:16,110
我们可以深入研究规则对象，

46
00:02:16,110 --> 00:02:19,100
在这里我们实际上可以添加教练

47
00:02:20,410 --> 00:02:23,950
因为我们的数据库中有一个名为 coaches 的数据节点

48
00:02:23,950 --> 00:02:25,960
现在我们可以设置读写规则了

49
00:02:25,960 --> 00:02:27,600
对于数据库的那一部分。

50
00:02:27,600 --> 00:02:31,490
我们可以在这里为请求做同样的事情

51
00:02:31,490 --> 00:02:34,800
为请求设置读写规则

52
00:02:34,800 --> 00:02:37,100
然后我们可以有一般的读写规则

53
00:02:37,100 --> 00:02:40,233
这适用于我们数据库的其余部分。

54
00:02:41,860 --> 00:02:45,510
那么，我想在这里有哪些共享规则？

55
00:02:45,510 --> 00:02:48,300
对于教练，我想确保

56
00:02:48,300 --> 00:02:50,117
该数据说明中的任何数据

57
00:02:50,117 --> 00:02:53,040
任何人都可以阅读

58
00:02:53,040 --> 00:02:57,140
为此，我们将此处的点读取规则设置为 true。

59
00:02:57,140 --> 00:03:00,990
这样可以确保每个人都有完全的读取权限，

60
00:03:00,990 --> 00:03:04,920
但是写，点写应该被限制

61
00:03:04,920 --> 00:03:06,250
我们可以将其设置为 false

62
00:03:06,250 --> 00:03:09,260
然后没有人会写，

63
00:03:09,260 --> 00:03:12,210
但我实际上会将它设置为一个字符串

64
00:03:12,210 --> 00:03:16,793
我在哪里检查 off 是否不等于 null。

65
00:03:18,410 --> 00:03:20,940
现在 off 是一个特殊的变量

66
00:03:20,940 --> 00:03:25,040
在不为空的 Firebase 规则中可用

67
00:03:25,040 --> 00:03:28,060
如果我们在请求中添加了一个有效的令牌，

68
00:03:28,060 --> 00:03:31,900
只要我们不发送任何令牌，它将为空。

69
00:03:31,900 --> 00:03:34,703
那么这是空的，然后写入将被拒绝。

70
00:03:36,560 --> 00:03:38,320
现在，我只是在这里向您展示这些规则

71
00:03:38,320 --> 00:03:39,995
因为这不是 Firebase 课程

72
00:03:39,995 --> 00:03:43,410
如果您打算在自己的项目中使用 Firebase，

73
00:03:43,410 --> 00:03:45,740
您可以深入了解 Firebase 官方讲座

74
00:03:45,740 --> 00:03:47,463
了解所有这些规则。

75
00:03:49,130​​ --> 00:03:51,870
现在对于请求，我们正好相反

76
00:03:51,870 --> 00:03:55,565
如果我们未通过身份验证，读取将被拒绝，

77
00:03:55,565 --> 00:04:00,565
但实际上每个人都可以写作。

78
00:04:04,040 --> 00:04:06,280
这些都是非常简单的琐碎规则

79
00:04:06,280 --> 00:04:08,743
你肯定可以再改进一点。

80
00:04:09,680 --> 00:04:12,700
现在我们可以摆脱这些通用的读写规则了

81
00:04:12,700 --> 00:04:15,923
在这里然后发布我们的新规则。

82
00:04:17,329 --> 00:04:20,160
如果我们这样做并返回我们的应用程序，

83
00:04:20,160 --> 00:04:23,120
我们可以重新加载教练页面，这很有效，

84
00:04:23,120 --> 00:04:25,660
但是在请求我们现在得到一个错误

85
00:04:25,660 --> 00:04:28,200
因为我们无法获取我们的请求

86
00:04:28,200 --> 00:04:31,357
我们得到一个四零一的错误

87
00:04:31,357 --> 00:04:36,357
未经授权，因为现在 Firebase 阻止了此处的访问。

88
00:04:36,810 --> 00:04:39,490
它不允许我们获取请求

89
00:04:39,490 --> 00:04:41,700
因为我们的新规则。

90
00:04:41,700 --> 00:04:45,590
如果我们尝试注册成为教练，也会发生同样的情况，

91
00:04:45,590 --> 00:04:48,863
如果我在这里发送一些数据，

92
00:04:52,504 --> 00:04:55,750
你看，我们在这里也得到了四个 0 一的响应

93
00:04:55,750 --> 00:04:57,650
我们在应用程序中没有错误处理

94
00:04:57,650 --> 00:04:59,750
这就是为什么我们在这里看不到模态，

95
00:04:59,750 --> 00:05:02,093
但该请求显然失败了。

96
00:05:03,900 --> 00:05:06,360
现在我们在前端更新它到日期，

97
00:05:06,360 --> 00:05:08,190
因为这就是我们的应用程序当前的工作方式

98
00:05:08,190 --> 00:05:11,090
但是，如果我重新加载，您会发现数据实际上并不存在。

99
00:05:11,090 --> 00:05:12,860
现在当然这些都是

100
00:05:12,860 --> 00:05:15,080
我们将在整个模块中进行修复。

101
00:05:15,080 --> 00:05:17,800
现在最后但并非最不重要的是，如果我尝试发送消息

102
00:05:18,670 --> 00:05:20,743
那应该成功，

103
00:05:21,980 --> 00:05:26,980
如果我们去请求，我们可以在 Firebase 的数据中查看它

104
00:05:27,200 --> 00:05:29,370
我们看到那里有一条新信息，

105
00:05:29,370 --> 00:05:30,630
我刚刚发送的消息

106
00:05:30,630 --> 00:05:33,910
因为我们允许写两条消息。

107
00:05:33,910 --> 00:05:36,500
因此，我们调整了 Firebase

108
00:05:36,500 --> 00:05:38,580
现在我们需要这样一个令牌。

109
00:05:38,580 --> 00:05:40,280
为此，我们首先

110
00:05:40,280 --> 00:05:43,710
需要一种让用户登录和注册的方法。

111
00:05:43,710 --> 00:05:46,860
所以让我们添加一个注册和登录页面

112
00:05:46,860 --> 00:05:51,130
然后将当天发送到 Firebase 以换取令牌。

113
00:05:51,130 --> 00:05:53,563
然后使用该令牌。