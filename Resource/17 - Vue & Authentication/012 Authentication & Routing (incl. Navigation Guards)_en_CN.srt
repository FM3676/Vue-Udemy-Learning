1
00:00:02,240 --> 00:00:03,860
所以，让我们解决路由问题。

2
00:00:03,860 --> 00:00:06,140
如前所述，很高兴被重定向

3
00:00:06,140 --> 00:00:09,470
登录后或注销后。

4
00:00:09,470 --> 00:00:13,000
所以，这样做的简单方法是愚蠢的：

5
00:00:13,000 --> 00:00:18,000
完成登录后，在 Auth 页面上，

6
00:00:18,090 --> 00:00:21,590
所以在 try 插件里面，如果我们失败了，

7
00:00:21,590 --> 00:00:23,190
但不是尝试。

8
00:00:23,190 --> 00:00:26,680
所以，如果我们没有收到错误并且这些操作已经完成，

9
00:00:26,680 --> 00:00:31,630
然后我们可以联系这个路由器并使用replaced

10
00:00:31,630 --> 00:00:34,960
导航离开，替换而不是推送

11
00:00:34,960 --> 00:00:38,210
这样我们就无法返回，因为如果我们只是登录

12
00:00:38,210 --> 00:00:41,760
返回登录页面没有多大意义。

13
00:00:41,760 --> 00:00:45,160
然后在这里我们可以去 /coaches 例如。

14
00:00:45,160 --> 00:00:47,220
现在，可以做类似的事情

15
00:00:47,220 --> 00:00:48,480
当我们注销时。

16
00:00:48,480 --> 00:00:52,260
当我们点击注销时在此处的标题中

17
00:00:52,260 --> 00:00:57,110
除了调度，我们还可以重定向到 /coaches

18
00:00:58,640 --> 00:01:01,290
或 /auth 你想去的任何地方。

19
00:01:01,290 --> 00:01:03,420
我会去找教练。

20
00:01:03,420 --> 00:01:05,379
现在，这是一种简单的重定向方式。

21
00:01:05,379 --> 00:01:07,353
现在，如果我在这里登录，

22
00:01:10,162 --> 00:01:11,570
我将登录，

23
00:01:11,570 --> 00:01:13,990
我在所有教练页面上，如果注销

24
00:01:13,990 --> 00:01:18,530
假设我先去请求；我也去找教练。

25
00:01:18,530 --> 00:01:21,370
好的，这样就可以了，但这只是简单的方法

26
00:01:21,370 --> 00:01:25,260
这样做是因为如果我拜访所有教练会怎样，

27
00:01:25,260 --> 00:01:28,880
我没有登录，我在这里点击这个登录按钮？

28
00:01:28,880 --> 00:01:31,140
现在，实际上，我想在这里做什么

29
00:01:31,140 --> 00:01:34,490
可能是注册为教练。

30
00:01:34,490 --> 00:01:38,860
我们可以通过前往教练名单来澄清这一点

31
00:01:38,860 --> 00:01:43,753
说，登录注册成为教练，

32
00:01:45,080 --> 00:01:46,953
用按钮上的文字，

33
00:01:48,770 --> 00:01:52,380
如果我重新加载它应该很清楚我们想在这里做什么。

34
00:01:52,380 --> 00:01:56,060
所以，在这里登录后我可能想重定向

35
00:01:56,060 --> 00:02:00,530
不是所有教练页面，而是注册页面，

36
00:02:00,530 --> 00:02:04,570
这也是我们可以通过视图轻松实现的东西。

37
00:02:04,570 --> 00:02:08,840
对于这个教练名单在这里

38
00:02:08,840 --> 00:02:11,570
当我们链接到日志上的离页时

39
00:02:11,570 --> 00:02:15,610
进入注册按钮，我们可以添加一个查询参数。

40
00:02:15,610 --> 00:02:18,535
我们可以在本地 URL 上执行此操作，

41
00:02:18,535 --> 00:02:21,340
这也由视图路由器解决。

42
00:02:21,340 --> 00:02:24,330
例如，添加一个重定向键

43
00:02:24,330 --> 00:02:26,000
虽然这把钥匙完全取决于你。

44
00:02:26,000 --> 00:02:27,740
它也可以只是红色

45
00:02:27,740 --> 00:02:29,890
我们将在一分钟内解析它，

46
00:02:29,890 --> 00:02:31,310
所以，这取决于你。

47
00:02:31,310 --> 00:02:35,513
因此，我将其命名为重定向并说，在此处注册。

48
00:02:36,610 --> 00:02:40,560
现在，如果我点击这个按钮，用那个设置，

49
00:02:40,560 --> 00:02:44,093
你可以看到，现在我们在 URL 中有这个查询参数，

50
00:02:45,040 --> 00:02:46,490
现在在 Auth 页面上，

51
00:02:46,490 --> 00:02:48,870
我们可以检查这个查询参数。

52
00:02:48,870 --> 00:02:50,410
如果我们确实拥有它，

53
00:02:50,410 --> 00:02:52,300
我们可以将用户重定向到其他地方

54
00:02:52,300 --> 00:02:54,523
然后是我们的默认值，即教练。

55
00:02:56,170 --> 00:02:59,960
所以，在这里，一旦我们登录或注册，

56
00:02:59,960 --> 00:03:04,880
我们可以通过访问这个路由来获取我们的重定向 URL

57
00:03:04,880 --> 00:03:09,540
查询是我们可以访问那里重定向的字段。

58
00:03:09,540 --> 00:03:14,130
现在在这里，您在查询时访问的这个属性

59
00:03:14,130 --> 00:03:18,080
必须是您在此处使用的查询参数。

60
00:03:18,080 --> 00:03:19,690
我在这里使用重定向，

61
00:03:19,690 --> 00:03:21,370
所以，我想在这里访问重定向

62
00:03:22,340 --> 00:03:24,253
那是我的重定向网址。

63
00:03:25,370 --> 00:03:30,370
实际上，我会在前面添加一个斜杠，

64
00:03:30,617 --> 00:03:32,830
所以我去斜线，

65
00:03:32,830 --> 00:03:34,750
然后存储在重定向中的任何内容，

66
00:03:34,750 --> 00:03:37,003
在我的情况下是注册，

67
00:03:39,470--> 00:03:40,860
那应该会导致

68
00:03:42,930 --> 00:03:45,333
到这个注册路线，这是我的想法。

69
00:03:47,040 --> 00:03:47,950
现在，实际上，当然，

70
00:03:47,950 --> 00:03:51,420
我们可能并不总是有一个重定向 URL

71
00:03:51,420 --> 00:03:54,380
因此在这里我将把它简单地用括号括起来

72
00:03:54,380 --> 00:03:56,480
或者你

73
00:03:57,610 --> 00:04:00,960
或使用教练。

74
00:04:00,960 --> 00:04:04,270
所以，这行代码会构造一个字符串

75
00:04:04,270 --> 00:04:07,470
这是斜线和存储的任何内容

76
00:04:07,470 --> 00:04:11,990
在重定向查询参数或 /coaches 中。

77
00:04:11,990 --> 00:04:15,070
然后在这里我们可以重定向到我们的重定向 URL，

78
00:04:15,070 --> 00:04:17,213
我们是这样构造的。

79
00:04:18,279 --> 00:04:20,300
有了这个，如果我们现在保存这个，

80
00:04:20,300 --> 00:04:23,623
如果我确实使用该查询参数集登录，

81
00:04:24,720 --> 00:04:27,765
你看我之后去注册页面。

82
00:04:27,765 --> 00:04:30,320
另一方面，如果我点击了登录

83
00:04:30,320 --> 00:04:32,863
因此我没有查询参数。

84
00:04:35,630 --> 00:04:37,197
我去教练页面

85
00:04:37,197 --> 00:04:39,630
我认为至少有一点

86
00:04:39,630 --> 00:04:41,463
的更好的用户体验。

87
00:04:42,600 --> 00:04:44,600
现在，这不是我唯一想做的事

88
00:04:44,600 --> 00:04:46,740
但是，当涉及到路由时，

89
00:04:46,740 --> 00:04:50,030
因为重定向很好，但我们有一个问题。

90
00:04:50,030 --> 00:04:54,390
如果我没有登录，我无法进入注册页面

91
00:04:54,390 --> 00:04:57,180
没有按钮可以带我去那里，但当然

92
00:04:57,180 --> 00:05:01,360
我们可以手动输入斜线寄存器并最终到达那里。

93
00:05:01,360 --> 00:05:04,790
当然，我们将无法在这里提交数据，

94
00:05:04,790 --> 00:05:07,860
但最好不要让用户离开

95
00:05:07,860 --> 00:05:10,970
如果您是，请访问此页面，她未通过身份验证

96
00:05:12,070 --> 00:05:16,110
我们可以使用导航守卫来防止这种情况。

97
00:05:16,110 --> 00:05:19,470
你可能还记得我谈到过导航守卫

98
00:05:19,470 --> 00:05:21,360
在路由模块中。

99
00:05:21,360 --> 00:05:24,170
现在，我们实际上在这个具体项目中需要它们

100
00:05:24,170 --> 00:05:26,173
以提升用户体验。

101
00:05:27,060 --> 00:05:32,060
在router js中，我们可以注册一个全局导航守卫

102
00:05:32,600 --> 00:05:36,110
在任何导航之前触发。

103
00:05:36,110 --> 00:05:39,640
我们可以将导航守卫附加到各个路线。

104
00:05:39,640 --> 00:05:42,450
我们也可以将它们附加到组件上。

105
00:05:42,450 --> 00:05:45,560
我在本课程的路由模块中谈到，

106
00:05:45,560 --> 00:05:47,773
因此，请查看以获取更多详细信息。

107
00:05:48,880 --> 00:05:53,050
在这里，我将使用我认为相当优雅的方法

108
00:05:53,050 --> 00:05:55,290
使用全局导航守卫

109
00:05:55,290 --> 00:05:59,573
这仍然只影响某些路线和组件。

110
00:05:59,573 --> 00:06:03,440
现在，要创建这样一个全局导航守卫，

111
00:06:03,440 --> 00:06:08,440
我们使用我们的路由器，然后在这里我们可以在每个之前调用

112
00:06:08,710 --> 00:06:11,400
并定义一个执行的函数

113
00:06:11,400 --> 00:06:13,460
在每次导航之前。

114
00:06:13,460 --> 00:06:16,890
在这里，我们从下一件事中得到了这个工具，

115
00:06:16,890 --> 00:06:18,593
我们得到了这些免费参数。

116
00:06:20,460 --> 00:06:22,920
现在，我将使用路线元数据，

117
00:06:22,920 --> 00:06:25,480
也包含在路由模块中

118
00:06:25,480 --> 00:06:28,210
添加特殊元数据更可爱的路线

119
00:06:28,210 --> 00:06:30,210
应该受到保护的，

120
00:06:30,210 --> 00:06:34,603
那将是此处的注册和请求路由。

121
00:06:35,510 --> 00:06:38,300
实际上，还有 auth 路线，因为在这里，

122
00:06:38,300 --> 00:06:41,000
我想确保我们不能访问它

123
00:06:41,000 --> 00:06:43,310
如果我们登录，

124
00:06:43,310 --> 00:06:46,010
因为如果我们登录到 Auth 页面

125
00:06:46,010 --> 00:06:47,223
没有意义。

126
00:06:48,350 --> 00:06:52,620
所以，我们可以将这个元键添加到这些路由冲突中

127
00:06:52,620 --> 00:06:55,450
然后添加我们选择的任何数据。

128
00:06:55,450 --> 00:06:57,190
在这个对象中

129
00:06:57,190 --> 00:07:00,703
我将 requiresAuth 设置为 true，

130
00:07:01,880 --> 00:07:06,400
我将在这里为请求路由做同样的事情。

131
00:07:06,400 --> 00:07:09,160
在整个过程中，我将添加

132
00:07:09,160 --> 00:07:13,313
一个 requiresUnauth 密钥

133
00:07:14,830 --> 00:07:16,350
并将其设置为 true。

134
00:07:16,350 --> 00:07:18,490
现在，这些键名完全由你决定，

135
00:07:18,490 --> 00:07:20,600
这些只是我将使用的名称。

136
00:07:20,600 --> 00:07:23,480
其他路线没有附加元数据。

137
00:07:23,480 --> 00:07:26,163
他们没有 requireAuth 或 requiresUauth。

138
00:07:27,930 --> 00:07:29,410
现在，我们可以使用该元数据

139
00:07:29,410 --> 00:07:31,750
在这个全球导航卫士中，

140
00:07:31,750 --> 00:07:35,770
因为现在我们可以简单地分析我们要去的路线

141
00:07:35,770 --> 00:07:39,260
并检查它是否有特殊的元数据，

142
00:07:39,260 --> 00:07:42,480
然后，当我进行额外检查时。

143
00:07:42,480 --> 00:07:46,630
所以，我们可以检查我们要去的路线

144
00:07:46,630 --> 00:07:49,473
在其元字段上有 requiresAuth。

145
00:07:51,280 --> 00:07:54,330
如果是这种情况，我还想检查第二个条件

146
00:07:54,330 --> 00:07:56,290
与第一个结合。

147
00:07:56,290 --> 00:07:59,140
我想检查用户是否登录。

148
00:07:59,140 --> 00:08:01,560
现在，为此我们需要访问我们的商店

149
00:08:01,560 --> 00:08:05,030
我们的视图 X 商店，因为我们有

150
00:08:05,030 --> 00:08:07,993
是商店中经过身份验证的信息。

151
00:08:09,090 --> 00:08:11,470
好吧，好在我们不能只访问

152
00:08:11,470 --> 00:08:13,170
存储在组件中，

153
00:08:13,170 --> 00:08:16,970
我们也可以在任何其他 JavaScript 文件中使用它。

154
00:08:16,970 --> 00:08:20,520
我们要做的就是导入它。

155
00:08:20,520 --> 00:08:25,520
我们可以从 store 文件夹中导入我们的商店

156
00:08:25,550 --> 00:08:27,363
并在 index.js 文件中。

157
00:08:29,760 --> 00:08:31,853
然后在这家店里，

158
00:08:34,179 --> 00:08:36,429
我们可以访问 getter

159
00:08:36,429 --> 00:08:39,793
并检查 isAuthenticated getter，就像这样。

160
00:08:41,159 --> 00:08:44,120
如果用户通过身份验证，这将产生 true。

161
00:08:44,120 --> 00:08:46,150
所以，如果我们需要Auth

162
00:08:46,150 --> 00:08:49,940
我们通过了身份验证，我们将执行此代码。

163
00:08:49,940 --> 00:08:51,430
现在，这当然意味着这里

164
00:08:51,430 --> 00:08:54,660
我想打电话给下一个，因为如果我们需要Auth

165
00:08:54,660 --> 00:08:58,490
我们通过了身份验证，一切都很好。

166
00:08:58,490 --> 00:09:00,330
更有趣的是场景

167
00:09:00,330 --> 00:09:04,930
我们 requireAuth 并且我们没有经过身份验证，

168
00:09:04,930 --> 00:09:08,540
因此散点前面的感叹号。

169
00:09:08,540 --> 00:09:10,770
现在，我不想像这样调用下一个，

170
00:09:10,770 --> 00:09:13,350
但相反，我想重定向用户。

171
00:09:13,350 --> 00:09:15,020
我想拒绝这个导航

172
00:09:15,020 --> 00:09:17,830
因为我们可以将 false 传递给下一个，

173
00:09:17,830 --> 00:09:22,830
然后导航被取消或者我们传递一个新的 URL，

174
00:09:23,050 --> 00:09:26,050
一个新的位置对象到下一个。

175
00:09:26,050 --> 00:09:30,350
例如，/auth 将用户重定向到 auth 页面

176
00:09:30,350 --> 00:09:33,750
如果他或她未通过身份验证

177
00:09:33,750 --> 00:09:37,613
并想要访问需要身份验证的页面。

178
00:09:39,730 --> 00:09:42,070
现在，这只是我要检查的一个条件。

179
00:09:42,070 --> 00:09:47,010
如果我们想去的页面是 else 的另一个条件

180
00:09:47,010 --> 00:09:50,790
有 requiresUnauth 字段，

181
00:09:50,790 --> 00:09:53,470
auth 路由就是这种情况。

182
00:09:53,470 --> 00:09:58,470
如果我们通过了身份验证，那么我们就会遇到问题。

183
00:09:58,820 --> 00:10:00,380
所以，如果现在是真的，

184
00:10:00,380 --> 00:10:02,620
如果我们不应该被认证，

185
00:10:02,620 --> 00:10:07,350
但我们是然后我想去，

186
00:10:07,350 --> 00:10:10,433
比方说，/coaches 而不是 /auth。

187
00:10:12,000 --> 00:10:13,770
只有在其他情况下，

188
00:10:13,770 --> 00:10:17,523
我们允许导航并按计划继续。

189
00:10:18,460 --> 00:10:21,020
现在，我们有一个全球导航守卫，

190
00:10:21,020 --> 00:10:24,363
这仍然会考虑特定于路线的设置。

191
00:10:25,440 --> 00:10:27,450
现在，我没有在这里使用 from 参数，

192
00:10:27,450 --> 00:10:30,080
所以，我将用下划线替换它。

193
00:10:30,080 --> 00:10:32,620
如果我们现在保存它，我们可以试一试。

194
00:10:32,620 --> 00:10:35,080
如果我在有效的身份验证页面上重新加载。

195
00:10:35,080 --> 00:10:37,820
如果我尝试访问 Vue 注册页面，

196
00:10:37,820 --> 00:10:40,088
我被重定向到 Auth。

197
00:10:40,088 --> 00:10:43,790
如果我尝试访问 /coaches 就可以了。

198
00:10:43,790 --> 00:10:46,060
如果我尝试 vi坐/请求

199
00:10:46,060 --> 00:10:48,500
那不起作用，我又回到了身份验证上。

200
00:10:49,520 --> 00:10:51,433
现在，如果我在这里进行身份验证，

201
00:10:54,050 --> 00:10:56,910
现在，我们可以四处走动，

202
00:10:56,910 --> 00:11:00,260
但我无法真正测试身份验证案例，

203
00:11:00,260 --> 00:11:03,350
所以，这是经过身份验证的，我想访问 /auth

204
00:11:03,350 --> 00:11:07,140
因为如果我们此时在 URL 中手动输入，

205
00:11:07,140 --> 00:11:10,320
无论如何，我们都会丢失所有存储的身份验证状态，

206
00:11:10,320 --> 00:11:12,934
因此我们被认为是被锁定的

207
00:11:12,934 --> 00:11:16,320
因为目前我只存储身份验证信息

208
00:11:16,320 --> 00:11:20,210
在 UX 中，每当我们在 URL 中输入内容时，

209
00:11:20,210 --> 00:11:23,190
然后按 Enter 我们最后重新启动 Vue 应用程序，

210
00:11:23,190 --> 00:11:25,380
这会清除所有 UX 数据。

211
00:11:25,380 --> 00:11:29,692
所以，我们不能在这种情况下，但我们看到注册

212
00:11:29,692 --> 00:11:33,030
对于请求，我们被重定向。

213
00:11:33,030 --> 00:11:36,930
所以，我们这里的逻辑似乎按预期工作

214
00:11:36,930 --> 00:11:38,983
这是一个正在行动的导航守卫。