1
00:00:02,070 --> 00:00:04,000
现在，让我们从行动开始。

2
00:00:04,000 --> 00:00:06,603
在这里，我将添加一个登录操作，

3
00:00:07,550 --> 00:00:09,790
并且已经是一个注册操作。

4
00:00:10,735 --> 00:00:12,870
我们必须从注册开始，当然，

5
00:00:12,870 --> 00:00:17,130
因为我们首先需要创建一个用户才能登录。

6
00:00:17,130 --> 00:00:19,933
在这里，我们得到了这个上下文、对象和一个有效负载。

7
00:00:21,860 --> 00:00:24,640
现在在这里，我想发送一个 HTTP 请求

8
00:00:24,640 --> 00:00:27,600
排队作为 Firebase 关闭 REST API，

9
00:00:27,600 --> 00:00:29,560
使用电子邮件和密码注册。

10
00:00:29,560 --> 00:00:31,553
所以到这个网址。

11
00:00:32,910 --> 00:00:37,910
所以让我们在这里抓取这个 URL 并使用 fetch 函数

12
00:00:38,140 --> 00:00:40,163
向该 URL 发送请求。

13
00:00:43,770 --> 00:00:47,780
实际上，这个 URL 需要一个 API 密钥，

14
00:00:47,780 --> 00:00:51,050
这是每个 Firebase 应用程序唯一的。

15
00:00:51,050 --> 00:00:53,210
所以在你的 Firebase 项目中，你可以点击

16
00:00:53,210 --> 00:00:56,140
这个齿轮图标，项目设置

17
00:00:56,140 --> 00:00:58,513
然后获取此 Web API 密钥。

18
00:00:59,630 --> 00:01:01,760
现在你不能使用我的，因为这个项目

19
00:01:01,760 --> 00:01:05,040
在您查看此内容时已被禁用，

20
00:01:05,040 --> 00:01:07,433
但是在你的项目中抓住你的钥匙。

21
00:01:09,230 --> 00:01:11,710
一旦你得到它，请在此处输入

22
00:01:11,710 --> 00:01:14,763
这个方括号，API key 方括号的东西。

23
00:01:16,110 --> 00:01:19,230
这是请求稍后成功所必需的。

24
00:01:19,230 --> 00:01:22,470
现在这会发送一个注册新用户的请求。

25
00:01:22,470 --> 00:01:25,820
但是，就像这样，它会发送一个获取请求。

26
00:01:25,820 --> 00:01:27,980
如果我们看一下我们看到的文档

27
00:01:27,980 --> 00:01:29,910
它应该是一个发布请求。

28
00:01:29,910 --> 00:01:32,180
我们还看到需要添加哪些数据

29
00:01:32,180 --> 00:01:34,510
到请求电子邮件和密码

30
00:01:34,510 --> 00:01:37,460
然后这个 returnSecureToken 密钥，

31
00:01:37,460 --> 00:01:39,900
这应该总是正确的。

32
00:01:39,900 --> 00:01:42,920
好的，让我们添加第二个参数，

33
00:01:42,920 --> 00:01:45,300
请求的这个配置对象。

34
00:01:45,300 --> 00:01:49,468
将方法设置为 POST 并设置正文

35
00:01:49,468 --> 00:01:54,468
到具有电子邮件字段的相邻字符串化对象，

36
00:01:58,380 --> 00:02:02,830
我们应该从我们的有效负载中获取它，一个密码字段，

37
00:02:02,830 --> 00:02:06,870
我也希望得到有效载荷

38
00:02:06,870 --> 00:02:10,490
而这个 returnSecureToken 字段，

39
00:02:10,490 --> 00:02:11,890
这应该总是正确的。

40
00:02:12,920 --> 00:02:16,630
这应该发送一个创建新用户的请求。

41
00:02:16,630 --> 00:02:19,040
现在像往常一样获取回报，一个承诺，

42
00:02:19,040 --> 00:02:23,210
因此，我们可以使用 then 并定义代码

43
00:02:23,210 --> 00:02:25,950
我们想在函数中完成后执行

44
00:02:25,950 --> 00:02:29,080
我们传递给 then，或者我们使用这种替代方式

45
00:02:29,080 --> 00:02:33,070
使用异步等待，我在这里做

46
00:02:33,070 --> 00:02:36,420
这样我们就可以等待响应。

47
00:02:36,420 --> 00:02:38,310
然后下一行只执行

48
00:02:38,310 --> 00:02:40,063
一旦有回应，

49
00:02:40,970 --> 00:02:43,570
在这里我得到了 responseData

50
00:02:43,570 --> 00:02:46,900
通过等待 response.json。

51
00:02:46,900 --> 00:02:49,080
然后我们还可以检查响应是否

52
00:02:49,080 --> 00:02:54,080
可能不行，在这种情况下我想构造一个错误，

53
00:02:54,160 --> 00:02:58,260
一个新错误，我在其中查看我的响应数据

54
00:02:58,260 --> 00:03:00,003
看看我那里有没有消息。

55
00:03:01,120 --> 00:03:05,343
否则我会将其设置为身份验证失败。

56
00:03:06,920 --> 00:03:08,533
然后我抛出这个错误。

57
00:03:09,400 --> 00:03:11,250
如果我们通过了这个如果检查，

58
00:03:11,250 --> 00:03:13,980
我们应该有一个有效的响应和身份验证

59
00:03:13,980 --> 00:03:15,083
应该成功了。

60
00:03:16,010 --> 00:03:20,040
其实我这里也会console.log响应数据

61
00:03:20,040 --> 00:03:23,330
这样我们就可以看到响应中的内容，如果不合适，

62
00:03:23,330 --> 00:03:26,063
那么我们从 Firebase 中获取哪些类型的数据。

63
00:03:27,280 --> 00:03:29,260
所以如果我们通过这个 if 检查，

64
00:03:29,260 --> 00:03:32,090
我们成功了，现在我们想看看

65
00:03:32,090 --> 00:03:36,350
成功案例的响应数据中有什么。

66
00:03:36,350 --> 00:03:39,300
其实我们也不需要猜测，因为我们在这里看到

67
00:03:39,300 --> 00:03:42,110
在响应有效负载文档中。

68
00:03:42,110 --> 00:03:45,070
我们会取回一个 ID 令牌，也就是这个令牌

69
00:03:45,070 --> 00:03:46,700
我在幻灯片上提到过。

70
00:03:46,700 --> 00:03:49,020
我们收到一封电子邮件，一个 refreshToken，

71
00:03:49,020 --> 00:03:50,210
我们在这里不需要，

72
00:03:50,210 --> 00:03:52,960
有关该令牌何时到期的信息。

73
00:03:52,960 --> 00:03:56,300
出于安全原因，它不会永远存在。

74
00:03:56,300 --> 00:03:58,570
你可以用 refreshToken 刷新它，

75
00:03:58,570 --> 00:04:01,600
但这是先进的，我们不打算在这里介绍。

76
00:04:01,600 --> 00:04:04,900
然后你得到本地 ID，也就是用户 ID

77
00:04:04,900 --> 00:04:06,313
新交易的用户。

78
00:04:07,310 --> 00:04:10,020
并且至少有三个有趣的部分

79
00:04:10,020 --> 00:04:13,740
这里的信息，令牌，我们稍后需要

80
00:04:13,740 --> 00:04:17,100
发送请求，限制资源，

81
00:04:17,100 --> 00:04:19,040
过期信息

82
00:04:19,040 --> 00:04:21,990
以便我们知道该令牌的有效期

83
00:04:21,990 --> 00:04:23,403
和用户 ID。

84
00:04:24,360 --> 00:04:27,333
所以在我们应该在这里创建的突变中，

85
00:04:28,480 --> 00:04:32,720
我想将所有这些数据存储在 UX 中。

86
00:04:32,720 --> 00:04:34,763
我将突变命名为 setUser，

87
00:04:34,763 --> 00:04:37,940
因为它与注册或登录无关。

88
00:04:37,940 --> 00:04:40,940
在这里，我们取回用于注册的数据。

89
00:04:40,940 --> 00:04:43,890
但是如果我们检查登录，那么如果我们正在登录，

90
00:04:43,890 --> 00:04:46,253
我们看到它几乎是相同的信息。

91
00:04:47,410 --> 00:04:50,780
因此，我将有相同的突变。

92
00:04:50,780 --> 00:04:55,080
在这里，我得到了我的状态和有效载荷。

93
00:04:55,080 --> 00:05:00,023
我想将 state.token 设置为等于 payload.token。

94
00:05:01,000 --> 00:05:05,543
设置 state.userId 等于 payload.userId

95
00:05:07,290 --> 00:05:11,580
并设置 state.tokenExpiration

96
00:05:11,580 --> 00:05:14,453
等于payload.tokenExpiration。

97
00:05:16,360 --> 00:05:18,170
所以这假设我们得到一个有效载荷

98
00:05:18,170 --> 00:05:22,883
提交此突变时具有这三个字段。

99
00:05:24,400 --> 00:05:28,970
现在我们想在我们的操作中提交 setUser 。

100
00:05:28,970 --> 00:05:30,790
在那里，通过上下文提交，

101
00:05:30,790 --> 00:05:32,620
我们要提交 setUser，

102
00:05:32,620 --> 00:05:35,993
现在我们需要传递一个适当的有效载荷对象，

103
00:05:37,090 --> 00:05:42,090
其中有 token.UserId 和 tokenExpiration 字段。

104
00:05:42,660 --> 00:05:45,750
所以回到我们在这个物体上的动作，

105
00:05:45,750 --> 00:05:49,510
我将令牌设置为 responseData.IdToken

106
00:05:52,513 --> 00:05:55,910
因为它是响应中的 IdToken 字段

107
00:05:55,910 --> 00:05:58,330
持有该令牌。

108
00:05:58,330 --> 00:06:00,750
它是用户 ID 的本地 ID。

109
00:06:00,750 --> 00:06:03,860
因此，我将在有效负载上设置 userId 字段

110
00:06:03,860 --> 00:06:07,293
被传递给 responseData.localId 的突变。

111
00:06:08,880 --> 00:06:11,127
现在关于tokenExpiration，

112
00:06:12,520 --> 00:06:14,360
目前，我将设置这个

113
00:06:14,360 --> 00:06:19,077
到 responseData.expiresIn，但我们稍后会更改它。

114
00:06:20,980 --> 00:06:22,800
我们以后只需要这个。

115
00:06:22,800 --> 00:06:25,113
所以目前来说，这并不重要。

116
00:06:26,810 --> 00:06:31,220
现在，我们在这个突变中设置这三个字段

117
00:06:31,220 --> 00:06:32,810
因此，在初始状态下，

118
00:06:32,810 --> 00:06:34,420
我也想设置它们。

119
00:06:34,420 --> 00:06:37,200
最初，假设 userId 为空。

120
00:06:37,200 --> 00:06:42,200
Token 为 null，并且 tokenExpiration 也为 null。

121
00:06:43,650 --> 00:06:47,140
现在，我们准备了动作和突变。

122
00:06:47,140 --> 00:06:49,520
现在我们可以回到 UserAuth 页面

123
00:06:49,520 --> 00:06:53,330
并在提交此表单时发送此操作

124
00:06:53,330 --> 00:06:56,950
我们在这里有有效的输入。

125
00:06:56,950 --> 00:07:01,950
那么我想检查这个模式是否等于登录，

126
00:07:03,300 --> 00:07:06,130
在这种情况下，应该分派登录操作，

127
00:07:06,130 --> 00:07:07,740
我们还不支持，

128
00:07:07,740 --> 00:07:10,000
但除此之外，我们有注册模式。

129
00:07:10,000 --> 00:07:15,000
我想通过发送注册发送 this.$store。

130
00:07:15,890 --> 00:07:18,260
由于模块没有命名空间，

131
00:07:18,260 --> 00:07:21,010
我们不需要在这里添加任何命名空间.

132
00:07:21,010 --> 00:07:22,910
这将发送到注册操作。

133
00:07:22,910 --> 00:07:26,520
而且，当然，我们需要将一些有效载荷传递给这个动作

134
00:07:26,520 --> 00:07:29,470
因为在此操作中，我们希望收到电子邮件

135
00:07:29,470 --> 00:07:31,523
和有效载荷上的密码。

136
00:07:32,570 --> 00:07:36,590
因此，这里我们应该设置 email 等于 this.email，

137
00:07:36,590 --> 00:07:40,274
到此组件中输入的电子邮件和密码

138
00:07:40,274 --> 00:07:42,113
到 this.password。

139
00:07:43,870 --> 00:07:46,893
好的，如果我们现在保存它并返回。

140
00:07:48,380 --> 00:07:52,470
如果我们去注册，然后我们尝试提交这个

141
00:07:52,470 --> 00:07:54,840
以一种空洞的方式，我们得到了我们的错误。

142
00:07:54,840 --> 00:07:57,900
另外，如果我们只是缺少密码，

143
00:07:57,900 --> 00:07:59,610
但是如果这里的数据是有效的

144
00:08:00,850 --> 00:08:03,630
我们试试这个，我们没有得到任何视觉反馈

145
00:08:03,630 --> 00:08:05,800
此刻，但我们得到了这个回应，

146
00:08:05,800 --> 00:08:07,940
看起来不错。

147
00:08:07,940 --> 00:08:11,170
这是一个包含我描述的所有数据的对象，

148
00:08:11,170 --> 00:08:13,420
与 localId 等等。

149
00:08:13,420 --> 00:08:17,900
在 Firebase 上，如果我们刷新这个用户的页面

150
00:08:17,900 --> 00:08:21,203
在身份验证下，我们还应该在此处看到该用户，

151
00:08:23,430 --> 00:08:25,770
现在，如果我再次尝试创建同一个用户，

152
00:08:25,770 --> 00:08:28,260
我们会看到我们得到一个错误

153
00:08:28,260 --> 00:08:31,330
这就是我们从 Firebase 得到的响应数据

154
00:08:31,330 --> 00:08:35,770
在我们有嵌套错误对象的错误情况下

155
00:08:35,770 --> 00:08:38,453
带有 EMAIL_EXISTS 的消息。

156
00:08:40,440 --> 00:08:43,480
我们可以在我们的操作中利用它来更好地处理错误

157
00:08:43,480 --> 00:08:46,270
此后，但这实际上是下一步

158
00:08:46,270 --> 00:08:48,450
因为我还想展示一个加载微调器

159
00:08:48,450 --> 00:08:51,190
例如，当我们提交时，

160
00:08:51,190 --> 00:08:54,860
但主要的收获是它通常有效。

161
00:08:54,860 --> 00:08:57,800
所以现在让我们处理我们给用户的反馈

162
00:08:57,800 --> 00:09:00,090
在我们采取接下来的步骤之前

163
00:09:00,090 --> 00:09:03,763
并进行登录工作，然后使用该令牌。