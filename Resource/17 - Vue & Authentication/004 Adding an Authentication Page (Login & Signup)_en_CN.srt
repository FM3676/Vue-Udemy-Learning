1
00:00:02,190 --> 00:00:05,070
所以是时候添加一个注册页面了。

2
00:00:05,070 --> 00:00:07,350
为此，在页面下，

3
00:00:07,350 --> 00:00:10,890
我将添加一个新的子文件夹 auth。

4
00:00:10,890 --> 00:00:14,900
并在其中添加 UserAuth.vue 文件，

5
00:00:14,900 --> 00:00:19,720
它将保存我们的用户身份验证表单。

6
00:00:19,720 --> 00:00:20,880
正如我刚才所说，

7
00:00:20,880 --> 00:00:22,553
在这里，我想要一个表格。

8
00:00:23,540 --> 00:00:25,670
一个非常简单的表格

9
00:00:25,670 --> 00:00:30,120
我们可能有一个带有表单控件类的 div。

10
00:00:30,120 --> 00:00:31,650
然后在那个div里面，

11
00:00:31,650 --> 00:00:35,410
我们有一个电子邮件字段的标签

12
00:00:35,410 --> 00:00:37,280
我们说电子邮件的地方

13
00:00:38,310 --> 00:00:41,140
在此之下，我们有一个电子邮件类型的输入

14
00:00:41,140 --> 00:00:44,160
用户应在其中输入他或她的电子邮件地址。

15
00:00:44,160 --> 00:00:46,283
所以我在这里有一个电子邮件ID。

16
00:00:47,260 --> 00:00:52,250
然后我们可以复制它以对密码执行相同的操作。

17
00:00:52,250 --> 00:00:55,700
所以这里我们输入密码，id=password

18
00:00:55,700 --> 00:00:58,573
我们在标签上说密码。

19
00:00:59,900 --> 00:01:02,070
在此之下，我们有基本按钮

20
00:01:02,070 --> 00:01:04,450
我们说登录的地方。

21
00:01:04,450 --> 00:01:06,680
这个按钮的标题应该改变，

22
00:01:06,680 --> 00:01:08,970
取决于我们是否要登录

23
00:01:08,970 --> 00:01:11,830
因为我会在这里添加第二个按钮

24
00:01:11,830 --> 00:01:13,680
我将类型设置为按钮

25
00:01:13,680 --> 00:01:17,730
这样这个按钮就不会提交周围的表单

26
00:01:17,730 --> 00:01:20,500
我说注册的地方。

27
00:01:20,500 --> 00:01:23,780
我将模式设置为平坦。

28
00:01:23,780 --> 00:01:25,940
这将确保这允许我们

29
00:01:25,940 --> 00:01:28,253
在注册和登录之间切换。

30
00:01:29,220 --> 00:01:30,710
现在，对于一些造型，

31
00:01:30,710 --> 00:01:35,710
我认为我们可以重用我们在另一个页面上找到的样式，

32
00:01:36,000 --> 00:01:37,923
ContactCoach 页面。

33
00:01:38,840 --> 00:01:43,623
在这里，我们可以获取此处定义的样式。

34
00:01:46,880 --> 00:01:48,530
我不抓住错误

35
00:01:48,530 --> 00:01:49,970
不要抓住动作

36
00:01:49,970 --> 00:01:51,570
因为我没有在这里使用它。

37
00:01:53,880 --> 00:01:57,520
现在只需为这个组件添加样式

38
00:01:57,520 --> 00:01:59,940
是的，我们可以尝试设置它

39
00:01:59,940 --> 00:02:02,100
作为一般应用程序范围的样式

40
00:02:02,100 --> 00:02:05,450
或创建单独的组件并保持输入

41
00:02:05,450 --> 00:02:07,720
但我会在这里复制这些样式

42
00:02:07,720 --> 00:02:10,769
并稍微重复一下样式代码。

43
00:02:10,769 --> 00:02:13,220
还有一件事我忘记了，

44
00:02:13,220 --> 00:02:18,220
我也想把所有这些都放在一个基卡组件中

45
00:02:19,140 --> 00:02:21,333
一些漂亮的造型。

46
00:02:22,780 --> 00:02:23,760
好的。

47
00:02:23,760 --> 00:02:27,870
现在，这是基本的 UserAuth 页面。

48
00:02:27,870 --> 00:02:29,590
现在让我们把它带到屏幕上

49
00:02:29,590 --> 00:02:31,400
这样我们就可以微调它。

50
00:02:31,400 --> 00:02:33,310
它应该作为路线加载。

51
00:02:33,310 --> 00:02:35,330
所以在 router.js 文件中，

52
00:02:35,330 --> 00:02:37,830
我们可以注册一条新路线。

53
00:02:37,830 --> 00:02:40,880
也许就在我们赶上所有路线之前，

54
00:02:40,880 --> 00:02:44,100
这是 /auth 让我们说

55
00:02:44,100 --> 00:02:47,480
其中组件就是这个新添加的组件。

56
00:02:47,480 --> 00:02:52,480
所以我们从 ./pages/auth/UserAuth.vue 导入 UserAuth。

57
00:02:55,810 --> 00:02:59,850
这就是我们刚刚在此处添加的组件。

58
00:02:59,850 --> 00:03:02,320
现在，UserAuth 是组件

59
00:03:02,320 --> 00:03:05,533
当我们访问 /.auth 时应该加载它。

60
00:03:06,980 --> 00:03:08,220
所以加上这个，

61
00:03:08,220 --> 00:03:11,190
如果我们现在输入 /auth，

62
00:03:11,190 --> 00:03:13,460
当然，我们很快就会添加导航选项

63
00:03:13,460 --> 00:03:16,183
到达那里，这是这个组件。

64
00:03:17,470 --> 00:03:20,240
现在，我想在造型上改变一件事，

65
00:03:20,240 --> 00:03:23,060
表格不应该有这个边框，

66
00:03:23,060 --> 00:03:25,070
不需要边界半径。

67
00:03:25,070 --> 00:03:26,640
我们可以摆脱它。

68
00:03:26,640 --> 00:03:28,140
现在这看起来更好了。

69
00:03:28,140 --> 00:03:31,010
实际上，我也会交换这个

70
00:03:31,010 --> 00:03:33,870
并将表格移动到基卡中

71
00:03:33,870 --> 00:03:35,320
而不是相反。

72
00:03:37,270 --> 00:03:39,250
是的，现在看起来更好呃。

73
00:03:39,250 --> 00:03:41,230
所以现在我们有了这个表格。

74
00:03:41,230 --> 00:03:43,140
此按钮将提交表单。

75
00:03:43,140 --> 00:03:45,559
这个按钮稍后会帮助我们切换

76
00:03:45,559 --> 00:03:47,930
在注册和登录之间

77
00:03:47,930 --> 00:03:49,700
因为当然，这种形式应该可以

78
00:03:49,700 --> 00:03:50,763
处理两者。

79
00:03:51,620 --> 00:03:53,180
说到这个，

80
00:03:53,180 --> 00:03:55,850
让我们马上继续这个表格

81
00:03:55,850 --> 00:03:59,600
并确保我们确实收集了一些用户数据

82
00:03:59,600 --> 00:04:02,990
并且我们会在之后将其发送到 Firebase。

83
00:04:02,990 --> 00:04:05,620
因此，回到 UserAuth 组件中，

84
00:04:05,620 --> 00:04:07,170
我们当然需要一个脚本

85
00:04:07,170 --> 00:04:09,490
我们有一些我们想在这里管理的数据

86
00:04:09,490 --> 00:04:12,930
因为例如，我们想要管理用户输入。

87
00:04:12,930 --> 00:04:14,740
那将是一个电子邮件地址

88
00:04:14,740 --> 00:04:17,880
那将是一个密码。

89
00:04:17,880 --> 00:04:21,142
现在，您还可以添加更复杂的验证

90
00:04:21,142 --> 00:04:24,990
正如我们在 CoachRegistration 组件中所做的那样，

91
00:04:24,990 --> 00:04:27,430
准确地说是在 CoachForm 中。

92
00:04:27,430 --> 00:04:29,580
您可以在 UserAuth 中执行此操作

93
00:04:29,580 --> 00:04:31,630
但我们之前练习过。

94
00:04:31,630 --> 00:04:34,850
在这里，我只想专注于身份验证，

95
00:04:34,850 --> 00:04:37,553
所以我将在这里只添加非常基本的验证。

96
00:04:38,620 --> 00:04:41,280
例如，我将添加一个 formIsValid 键，

97
00:04:41,280 --> 00:04:42,860
最初是正确的。

98
00:04:42,860 --> 00:04:44,820
我们将其设置为 false

99
00:04:44,820 --> 00:04:46,550
如果用户提交表单

100
00:04:46,550 --> 00:04:49,720
并且电子邮件或密码应该是无效的。

101
00:04:49,720 --> 00:04:51,040
我们还需要能够

102
00:04:51,040 --> 00:04:53,730
在注册和登录模式之间切换

103
00:04:53,730 --> 00:04:56,520
因为那会改变哪个动作

104
00:04:56,520 --> 00:04:57,820
稍后发货，

105
00:04:57,820 --> 00:05:00,530
应该发送哪个 HTTP 请求。

106
00:05:00,530 --> 00:05:04,660
因此，我还要在这里添加一个模式数据属性

107
00:05:04,660 --> 00:05:07,050
并将其设置为最初登录

108
00:05:07,050 --> 00:05:09,340
但这也可以是注册

109
00:05:09,340 --> 00:05:11,480
一旦我们添加了逻辑。

110
00:05:11,480 --> 00:05:12,770
这就是接下来的事情。

111
00:05:12,770 --> 00:05:14,130
让我们添加一些方法。

112
00:05:14,130 --> 00:05:17,613
submitForm 是一种方法。

113
00:05:17,613 --> 00:05:20,553
SwitchAuthMode 是另一种方法。

114
00:05:22,210 --> 00:05:23,940
submitForm，好吧，你猜对了，

115
00:05:23,940 --> 00:05:26,766
应该在提交表单时触发。

116
00:05:26,766 --> 00:05:28,740
switchAuthMode 应该被触发

117
00:05:28,740 --> 00:05:31,723
单击此处的此切换按钮时。

118
00:05:33,160 --> 00:05:35,080
所以我们已经可以把它连接起来了。

119
00:05:35,080 --> 00:05:36,590
连接第二个按钮

120
00:05:36,590 --> 00:05:39,150
并指向switchAuthMode。

121
00:05:39,150 --> 00:05:43,640
在表单上，​​添加提交事件处理程序

122
00:05:43,640 --> 00:05:45,320
使用 prevent 修饰符

123
00:05:46,290 --> 00:05:48,080
并指向 submitForm。

124
00:05:49,450 --> 00:05:53,110
此外，将输入与 v-model 连接

125
00:05:53,110 --> 00:05:55,120
并将这个连接到电子邮件

126
00:05:55,120 --> 00:05:57,313
第二个是密码。

127
00:05:59,720 --> 00:06:03,600
完成后，我们可以从 submitForm 开始

128
00:06:03,600 --> 00:06:07,910
并检查 this.email 是否为空

129
00:06:08,760 --> 00:06:09,900
实际上，因此，

130
00:06:09,900 --> 00:06:12,010
我想再次使用修剪修饰符

131
00:06:12,010 --> 00:06:14,233
修剪任何多余的空白。

132
00:06:15,600 --> 00:06:18,290
因此，请检查电子邮件是否为空。

133
00:06:18,290 --> 00:06:23,180
或者如果不是 this.email.includes 一个@符号，

134
00:06:23,180 --> 00:06:25,600
这是一个非常微不足道的验证

135
00:06:25,600 --> 00:06:27,750
我们是否有电子邮件地址。

136
00:06:28,680 --> 00:06:33,500
或者如果 this.password.length

137
00:06:33,500 --> 00:06:37,560
小于六个字符。

138
00:06:37,560 --> 00:06:40,310
我认为这是 Firebase 真正想要的最低要求，

139
00:06:40,310 --> 00:06:42,230
如果满足这些条件中的任何一个，

140
00:06:42,230 --> 00:06:44,900
然后我们将 formIsValid 设置为 false

141
00:06:44,900 --> 00:06:48,163
然后我们返回，以便没有其他代码执行。

142
00:06:49,330 --> 00:06:51,760
我们最初将 formIsValid 设置为 true

143
00:06:51,760 --> 00:06:54,640
提交表单以清除任何错误时144
00:06:54,640 --> 00:06:56,420
我们可能会展示

145
00:06:56,420 --> 00:06:58,880
因为我们现在可以使用 formIsValid

146
00:06:58,880 --> 00:07:02,610
显示错误消息，可能在段落中

147
00:07:02,610 --> 00:07:06,780
使用 v-id，检查 formIsValid。

148
00:07:06,780 --> 00:07:10,150
或者如果准确地说是无效的

149
00:07:10,150 --> 00:07:11,690
然后显示一条消息

150
00:07:11,690 --> 00:07:15,633
请输入有效的电子邮件和密码。

151
00:07:17,000 --> 00:07:21,670
长度必须至少为六个字符。

152
00:07:23,780 --> 00:07:25,210
所以现在我们也有了这个。

153
00:07:25,210 --> 00:07:27,833
这就是我想在这里做的基本验证。

154
00:07:29,570 --> 00:07:32,040
现在，如果我们通过这个 if 检查，

155
00:07:32,040 --> 00:07:35,990
然后我们将发送一个适当的 http 请求

156
00:07:35,990 --> 00:07:37,750
登录或唱歌

157
00:07:37,750 --> 00:07:40,030
但这将是下一步。

158
00:07:40,030 --> 00:07:42,284
首先，让我们处理 AuthMode

159
00:07:42,284 --> 00:07:45,210
在这里我想检查一下 this.mode

160
00:07:45,210 --> 00:07:47,280
等于登录，

161
00:07:47,280 --> 00:07:49,890
所以如果我们当前处于登录模式，

162
00:07:49,890 --> 00:07:52,247
在这种情况下，我会将模式设置为注册。

163
00:07:53,680 --> 00:07:55,480
否则，如果我们正在注册，

164
00:07:55,480 --> 00:07:58,093
我将模式设置为登录。

165
00:07:59,460 --> 00:08:02,220
现在我们可以使用这个模式数据属性

166
00:08:03,350 --> 00:08:06,950
控制此处按钮上显示的内容作为标题

167
00:08:06,950 --> 00:08:09,770
但也，以后改哪一种

168
00:08:09,770 --> 00:08:11,813
的 HTTP 请求在此处发送。

169
00:08:12,720 --> 00:08:14,640
现在，要更改按钮标题，

170
00:08:14,640 --> 00:08:16,300
我将使用计算属性

171
00:08:16,300 --> 00:08:18,820
在此处的脚本中保留该逻辑。

172
00:08:18,820 --> 00:08:21,890
在这里，我将有 submitButtonCaption

173
00:08:23,180 --> 00:08:27,347
和 switchModeButtonCaption 计算属性。

174
00:08:29,640 --> 00:08:31,430
在提交按钮上，

175
00:08:31,430 --> 00:08:36,179
我想检查 this.mode 是否等于登录。

176
00:08:36,179 --> 00:08:40,873
如果是这样，我将返回 Login 的标题。

177
00:08:42,610 --> 00:08:45,370
否则我们处于注册模式。

178
00:08:45,370 --> 00:08:46,653
我会说注册。

179
00:08:48,520 --> 00:08:50,640
而对于 switchModeButton，

180
00:08:50,640 --> 00:08:52,520
我基本上也会这样做。

181
00:08:52,520 --> 00:08:54,870
我还将检查我们处于哪种模式。

182
00:08:54,870 --> 00:08:56,710
如果我们处于登录模式，

183
00:08:56,710 --> 00:08:58,780
我会说注册

184
00:08:58,780 --> 00:09:01,970
因为这是这个按钮应该切换的新模式。

185
00:09:01,970 --> 00:09:03,800
如果我们是注册模式，

186
00:09:03,800 --> 00:09:05,603
我会说登录。

187
00:09:06,820 --> 00:09:09,520
现在我们可以在这里使用这些计算属性。

188
00:09:09,520 --> 00:09:11,880
所以在提交按钮上，

189
00:09:11,880 --> 00:09:13,920
我输出了我的 submitButtonCaption

190
00:09:13,920 --> 00:09:18,800
带插值，这里是开关按钮，

191
00:09:18,800 --> 00:09:20,423
我输出了我的 switchModeButtonCaption。

192
00:09:27,100 --> 00:09:27,933
好的。

193
00:09:30,810 --> 00:09:33,400
现在我们可以点击切换按钮

194
00:09:33,400 --> 00:09:35,610
我们在这些模式之间切换

195
00:09:35,610 --> 00:09:36,730
但目前，这当然，

196
00:09:36,730 --> 00:09:38,710
只影响我们在屏幕上看到的内容

197
00:09:38,710 --> 00:09:40,600
但这总比没有好。

198
00:09:40,600 --> 00:09:42,180
现在，作为下一步，

199
00:09:42,180 --> 00:09:45,660
我们需要真正获得用户输入

200
00:09:45,660 --> 00:09:48,430
然后将该数据发送到 Firebase

201
00:09:48,430 --> 00:09:50,150
把它换成代币

202
00:09:50,150 --> 00:09:52,793
或创建一个新用户开始。