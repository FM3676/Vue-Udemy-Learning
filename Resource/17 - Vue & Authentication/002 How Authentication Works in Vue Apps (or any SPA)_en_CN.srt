1
00:00:02,070 --> 00:00:03,750
在我们编写任何代码之前，

2
00:00:03,750 --> 00:00:08,530
我们必须了解身份验证在 Vue 应用程序中是如何工作的

3
00:00:08,530 --> 00:00:13,380
或者更准确地说，在任何单页应用程序中。

4
00:00:13,380 --> 00:00:15,120
因为有点不一样

5
00:00:15,120 --> 00:00:18,990
比您可能知道的传统身份验证

6
00:00:18,990 --> 00:00:21,870
来自网站和网络应用程序

7
00:00:21,870 --> 00:00:24,570
您使用一些服务器端语言的地方。

8
00:00:24,570 --> 00:00:25,710
我们不在这里这样做。

9
00:00:25,710 --> 00:00:27,260
Vue 在浏览器中运行，

10
00:00:27,260 --> 00:00:30,020
因此，这会有所不同。

11
00:00:30,020 --> 00:00:34,210
所以，我们有我们的 Vue 应用程序或任何单页应用程序

12
00:00:34,210 --> 00:00:38,080
使用任何库或框架，不必是 Vue，

13
00:00:38,080 --> 00:00:40,210
我们得到了我们的后端服务器。

14
00:00:40,210 --> 00:00:43,120
在我们的例子中，这就是 Firebase，但它可能是

15
00:00:43,120 --> 00:00:46,730
我们向其发送请求的任何 HTTP 服务器。

16
00:00:46,730 --> 00:00:51,040
任何 REST API 或 GraphQL API。

17
00:00:51,040 --> 00:00:54,290
现在，问题是在这台服务器上，

18
00:00:54,290 --> 00:00:56,800
我们有一定的公共资源

19
00:00:56,800 --> 00:00:59,600
但也有一些受限资源。

20
00:00:59,600 --> 00:01:02,340
例如，在我们的课程项目中，

21
00:01:02,340 --> 00:01:04,900
我们也许可以请到教练

22
00:01:04,900 --> 00:01:08,950
并在未登录的情况下向教练发送消息，

23
00:01:08,950 --> 00:01:12,610
所以这将是公共数据和公共资源，

24
00:01:12,610 --> 00:01:17,420
该网页的任何访问者都应该可以访问，

25
00:01:17,420 --> 00:01:20,450
无论您是否登录。

26
00:01:20,450 --> 00:01:23,670
但是，我们也得到了一些资源，一些数据，

27
00:01:23,670 --> 00:01:26,870
一些应该被限制的请求。

28
00:01:26,870 --> 00:01:31,180
例如，您应该只能注册为教练

29
00:01:31,180 --> 00:01:34,910
因此，如果您已登录，请创建一个新教练。

30
00:01:34,910 --> 00:01:38,710
获取请求、获取消息也是如此

31
00:01:38,710 --> 00:01:40,570
你作为教练收到了。

32
00:01:40,570 --> 00:01:43,233
当然，您需要登录才能执行此操作。

33
00:01:44,920 --> 00:01:47,250
所以我们在我们的服务器上得到了混合数据

34
00:01:47,250 --> 00:01:50,530
这是大多数网站的典型场景，

35
00:01:50,530 --> 00:01:53,830
您将拥有一些任何人都可以访问的数据

36
00:01:53,830 --> 00:01:56,400
以及一些受限制的数据。

37
00:01:56,400 --> 00:01:59,190
现在，问题在于这个设置

38
00:01:59,190 --> 00:02:02,850
我们的网络应用程序，我们的网站

39
00:02:02,850 --> 00:02:05,110
有点脱离后端，

40
00:02:05,110 --> 00:02:08,820
它不是由同一台服务器提供服务的，而且，

41
00:02:08,820 --> 00:02:11,860
后端并不真正了解前端。

42
00:02:11,860 --> 00:02:15,460
在这种情况下，服务器真的不在乎

43
00:02:15,460 --> 00:02:18,350
关于客户端，关于 Vue 应用程序

44
00:02:18,350 --> 00:02:20,040
在这种情况下。

45
00:02:20,040 --> 00:02:23,460
服务器，在我们的例子中，是 Firebase，但同样，

46
00:02:23,460 --> 00:02:27,020
你可以使用任何 API，真的不在乎

47
00:02:27,020 --> 00:02:28,010
关于我们的 Vue 应用程序。

48
00:02:28,010 --> 00:02:31,160
它不存储有关该应用程序的任何信息。

49
00:02:31,160 --> 00:02:35,670
它不存储此应用实例的用户是否

50
00:02:35,670 --> 00:02:37,693
是否实际登录。

51
00:02:38,760 --> 00:02:43,150
因此，我们必须找到一种仍然保持跟踪的方法，

52
00:02:43,150 --> 00:02:45,100
网页的访问者是否

53
00:02:45,100 --> 00:02:48,940
当前使用该网站的人是否已登录。

54
00:02:48,940 --> 00:02:53,170
当然，这一切都是从一些登录数据开始的

55
00:02:53,170 --> 00:02:55,810
从 Vue 应用程序发送到服务器。

56
00:02:55,810 --> 00:02:58,180
我们的 Vue 应用程序中有一些登录页面

57
00:02:58,180 --> 00:03:01,610
一旦用户输入了电子邮件和密码，

58
00:03:01,610 --> 00:03:04,040
该数据被发送到服务器

59
00:03:04,040 --> 00:03:07,970
创建用户或登录用户。

60
00:03:07,970 --> 00:03:10,980
而现在在传统网站上，

61
00:03:10,980 --> 00:03:14,680
服务器基本上会存储一个会话，

62
00:03:14,680 --> 00:03:17,720
它将存储有关该用户的信息

63
00:03:17,720 --> 00:03:21,470
只需将会话 ID 发送到前端，

64
00:03:21,470 --> 00:03:24,210
到浏览器，以便建立连接

65
00:03:24,210 --> 00:03:26,760
在使用网站的用户和浏览器之间

66
00:03:26,760 --> 00:03:29,500
并且服务器知道该用户。

67
00:03:29,500 --> 00:03:31,820
但是，这不是它在这里的工作方式

68
00:03:31,820 --> 00:03:35,750
当您有一个单页应用程序与 API 通信时。

69
00:03:35,750 --> 00:03:40,100
取而代之的是，服务器不存储任何信息

70
00:03:40,100 --> 00:03:42,070
它会做其他事情。

71
00:03:42,070 --> 00:03:46,140
它会将令牌发回前端，

72
00:03:46,140 --> 00:03:48,250
回到单页应用程序，

73
00:03:48,250 --> 00:03:50,440
在我们的例子中，回到 Vue 应用程序，

74
00:03:50,440 --> 00:03:54,950
一旦登录数据得到验证和验证。

75
00:03:54,950 --> 00:03:58,170
因此，如果它是一个有效的用户试图登录，

76
00:03:58,170 --> 00:04:00,970
如果服务器可以确认该数据，

77
00:04:00,970 --> 00:04:03,930
服务器最终生成一个令牌，

78
00:04:03,930 --> 00:04:07,940
只是一个很长的字符串，它被发送回客户端。

79
00:04:07,940 --> 00:04:11,540
现在，关于这个令牌的事情是它是这样创建的

80
00:04:11,540 --> 00:04:15,760
只有服务器能够验证它。

81
00:04:15,760 --> 00:04:18,560
只有服务器才能告诉

82
00:04:18,560 --> 00:04:22,260
令牌是否有效，因为它是生成的

83
00:04:22,260 --> 00:04:26,390
使用某个只有服务器知道的密钥。

84
00:04:26,390 --> 00:04:29,210
所以这个令牌是不能伪造的。

85
00:04:29,210 --> 00:04:31,430
然后将令牌发送回客户端

86
00:04:31,430 --> 00:04:33,260
在那里，我们可以存储它。

87
00:04:33,260 --> 00:04:37,420
我们可以将它存储在 Vuex 或者更永久的地方

88
00:04:37,420 --> 00:04:39,270
比如本地存储。

89
00:04:39,270 --> 00:04:43,780
现在这个令牌的问题是它可以附加

90
00:04:43,780 --> 00:04:47,770
对这些传出请求限制资源。

91
00:04:47,770 --> 00:04:49,840
如果附加了该令牌，

92
00:04:49,840 --> 00:04:53,150
因为只有服务器能够验证令牌，

93
00:04:53,150 --> 00:04:55,760
如果服务器收到请求

94
00:04:55,760 --> 00:04:59,120
到具有有效令牌的受限资源，

95
00:04:59,120 --> 00:05:01,170
服务器将授予访问权限

96
00:05:01,170 --> 00:05:04,040
并返回相应的数据。

97
00:05:04,040 --> 00:05:08,330
如果令牌无效或丢失，则拒绝访问。

98
00:05:08,330 --> 00:05:10,770
这就是身份验证的工作原理

99
00:05:10,770 --> 00:05:14,250
在与 API 通信的单页应用程序中

100
00:05:14,250 --> 00:05:16,620
这正是我们在这里的设置

101
00:05:16,620 --> 00:05:18,460
以及您将拥有的确切设置

102
00:05:18,460 --> 00:05:21,650
在您要构建的大多数 Vue 应用程序中。

103
00:05:21,650 --> 00:05:23,220
因此，这是场景

104
00:05:23,220 --> 00:05:26,290
我们将在这个模块中看看。

105
00:05:26,290 --> 00:05:27,660
现在当然在我们的应用程序中，

106
00:05:27,660 --> 00:05:30,650
我们还希望对用户产生一些影响

107
00:05:30,650 --> 00:05:34,080
登录或未登录我们的网页本身，

108
00:05:34,080 --> 00:05:37,290
不仅仅是正在发送的请求。

109
00:05:37,290 --> 00:05:39,920
例如，这请求菜单项

110
00:05:39,920 --> 00:05:43,970
只有在用户登录时才应该是可点击的。

111
00:05:43,970 --> 00:05:46,660
我们应该只能注册为教练

112
00:05:46,660 --> 00:05:49,490
带有有时在此处可见的按钮

113
00:05:49,490 --> 00:05:51,400
如果我们登录了。

114
00:05:51,400 --> 00:05:55,200
否则，我们想为用户提供一个登录按钮。

115
00:05:55,200 --> 00:05:58,260
因此，这些也是身份验证的含义

116
00:05:58,260 --> 00:06:00,050
被添加到应用程序中。

117
00:06:00,050 --> 00:06:02,160
有了这个理论，

118
00:06:02,160 --> 00:06:05,440
现在让我们逐步添加身份验证

119
00:06:05,440 --> 00:06:07,663
并看到所有这些在行动。