1
00:00:02,210 --> 00:00:04,810
Now, whilst we implemented Navigation guards,

2
00:00:04,810 --> 00:00:06,980
I already brought up one problem.

3
00:00:06,980 --> 00:00:09,760
Whenever we manually enter a URL,

4
00:00:09,760 --> 00:00:13,130
we lose all our authentication data.

5
00:00:13,130 --> 00:00:15,320
That of course also means that if we leave this page

6
00:00:15,320 --> 00:00:16,810
and we come back later,

7
00:00:16,810 --> 00:00:19,090
even if we logged in five minutes ago,

8
00:00:19,090 --> 00:00:21,060
we will have to log in again.

9
00:00:21,060 --> 00:00:23,780
Because every time this page is reloaded,

10
00:00:23,780 --> 00:00:28,480
we start a new Vue application with a new Vue X store

11
00:00:28,480 --> 00:00:30,040
and therefore all the data we had

12
00:00:30,040 --> 00:00:32,850
in the Vue X store before is lost.

13
00:00:32,850 --> 00:00:36,120
That's just how the browser and JavaScript works.

14
00:00:36,120 --> 00:00:40,130
But that does not mean that we can't store data,

15
00:00:40,130 --> 00:00:42,810
which survives browser reloads.

16
00:00:42,810 --> 00:00:44,820
And therefore, that's the next thing I want to do.

17
00:00:44,820 --> 00:00:48,720
I want to ensure that users can stay logged in.

18
00:00:48,720 --> 00:00:50,410
For that, we first of all,

19
00:00:50,410 --> 00:00:53,480
need to go to our auth action

20
00:00:53,480 --> 00:00:56,300
and restructured a code here a little bit.

21
00:00:56,300 --> 00:00:59,270
We've got the log in and the sign up actions

22
00:00:59,270 --> 00:01:01,050
and the log out actions.

23
00:01:01,050 --> 00:01:05,300
I will add a new action auth, which gets a context,

24
00:01:05,300 --> 00:01:09,060
and now I will actually refactor the other two actions

25
00:01:10,051 --> 00:01:12,840
so that we don't have as much code duplication

26
00:01:12,840 --> 00:01:15,180
because I will now add even more code

27
00:01:15,180 --> 00:01:17,213
that it would be duplicated otherwise.

28
00:01:18,100 --> 00:01:22,150
So I will wrap this code from login and copy it

29
00:01:22,150 --> 00:01:26,043
and add it here in the new auth action,

30
00:01:27,600 --> 00:01:28,930
get rid of console log,

31
00:01:28,930 --> 00:01:30,393
we don't need that anymore.

32
00:01:32,610 --> 00:01:35,260
And here, I now just expect that on the payload,

33
00:01:35,260 --> 00:01:40,260
which I get here, I also get the mode log in or a sign up.

34
00:01:40,520 --> 00:01:42,823
So maybe a mode key on the payload.

35
00:01:43,870 --> 00:01:46,820
And then we've got the URL, which is a variable,

36
00:01:46,820 --> 00:01:51,453
which by default, let's say, is that log in URL here.

37
00:01:53,770 --> 00:01:56,720
But if mode is equal to sign up,

38
00:01:56,720 --> 00:02:00,730
then I want to replace URL

39
00:02:00,730 --> 00:02:02,660
with the sign up URL,

40
00:02:02,660 --> 00:02:05,333
which we can grab here from the signup action.

41
00:02:06,460 --> 00:02:09,023
Copy it and add it here.

42
00:02:11,100 --> 00:02:15,740
And the idea here is that we now simply can use URL here

43
00:02:15,740 --> 00:02:17,610
in the actual fetch function

44
00:02:17,610 --> 00:02:20,320
and reset URL appropriately before

45
00:02:21,580 --> 00:02:24,100
and the rest of the code then it's the same anyways.

46
00:02:24,100 --> 00:02:26,863
So here we don't really need to differentiate.

47
00:02:28,560 --> 00:02:31,540
Now, I also want to use async here

48
00:02:31,540 --> 00:02:34,530
so that this still returns a promise

49
00:02:34,530 --> 00:02:36,510
and we can use the await keyword,

50
00:02:36,510 --> 00:02:38,293
so auth should be async.

51
00:02:40,490 --> 00:02:43,000
And now we can go to the log in action

52
00:02:43,970 --> 00:02:47,140
and get rid of all that code

53
00:02:47,140 --> 00:02:49,460
and instead use context dispatch

54
00:02:49,460 --> 00:02:52,090
to dispatch the auth action

55
00:02:52,090 --> 00:02:54,580
here from inside the log in action

56
00:02:54,580 --> 00:02:56,290
and pass on an object

57
00:02:57,300 --> 00:02:58,540
where I, first of all,

58
00:02:58,540 --> 00:03:01,970
copy existing payload by using the Spread operator,

59
00:03:01,970 --> 00:03:06,110
hence spreading copying all the key value pairs off payload

60
00:03:06,110 --> 00:03:08,040
into this new object,

61
00:03:08,040 --> 00:03:11,000
which has passed as a payload to the auth action.

62
00:03:11,000 --> 00:03:13,680
And then I add mode and set this to log in here

63
00:03:13,680 --> 00:03:16,433
because we need that mode key in the auth action.

64
00:03:17,550 --> 00:03:20,813
And then we can copy that and do the same for signup

65
00:03:22,930 --> 00:03:24,873
and here set mode to sign up.

66
00:03:27,380 --> 00:03:31,980
Now important, we want to return to result of dispatching

67
00:03:31,980 --> 00:03:35,100
so that this promise, which is returned by auth,

68
00:03:35,100 --> 00:03:37,860
isn't the end all returned by log in and sign up

69
00:03:37,860 --> 00:03:41,910
so that our components can still keep track of

70
00:03:41,910 --> 00:03:44,660
whether we are still waiting for a response,

71
00:03:44,660 --> 00:03:47,760
whether we got an error and so on.

72
00:03:47,760 --> 00:03:51,280
With that changed, if I go to log in,

73
00:03:51,280 --> 00:03:53,013
let's quickly test this.

74
00:03:54,290 --> 00:03:55,950
This is still looking good.

75
00:03:55,950 --> 00:04:00,950
So looks like we still are able to send these requests.

76
00:04:02,290 --> 00:04:04,510
Yeah, that's looking good.

77
00:04:04,510 --> 00:04:07,463
Signing up with a user that already exists fails.

78
00:04:08,380 --> 00:04:10,110
So now I refactored to this

79
00:04:10,110 --> 00:04:12,200
and I did this for a very good reason

80
00:04:12,200 --> 00:04:15,360
because now we have to store that data,

81
00:04:15,360 --> 00:04:19,600
the token, the local ID, and now, or at least soon,

82
00:04:19,600 --> 00:04:23,430
also the expiration not just in UX,

83
00:04:23,430 --> 00:04:25,840
we do need it there but not just,

84
00:04:25,840 --> 00:04:30,840
but also in some storage that survives page reloads.

85
00:04:31,750 --> 00:04:34,960
And a great example here would be local storage,

86
00:04:34,960 --> 00:04:38,100
which is an API built into the browser.

87
00:04:38,100 --> 00:04:39,780
So it's some browser storage,

88
00:04:39,780 --> 00:04:42,293
which we can access from inside JavaScript.

89
00:04:43,600 --> 00:04:46,253
For that here, before I commit sets user,

90
00:04:47,710 --> 00:04:51,300
I will access local storage just like this,

91
00:04:51,300 --> 00:04:53,600
it's available in the browser,

92
00:04:53,600 --> 00:04:56,970
and then call set item to store in new data

93
00:04:56,970 --> 00:04:58,253
in local storage.

94
00:04:59,800 --> 00:05:02,593
And here in the end, I want to store my token,

95
00:05:03,520 --> 00:05:07,853
which I get from response data.id token.

96
00:05:09,520 --> 00:05:13,030
And I also want to store the user ID,

97
00:05:13,030 --> 00:05:16,500
which I get from response data, local ID.

98
00:05:16,500 --> 00:05:18,870
So now we don't just commit it to UX,

99
00:05:18,870 --> 00:05:22,130
but we also store it in the browser storage.

100
00:05:22,130 --> 00:05:25,950
And I'm doing this so that we then also can add an action

101
00:05:25,950 --> 00:05:29,260
where we check for this data when the app starts

102
00:05:29,260 --> 00:05:31,240
and when that data is available,

103
00:05:31,240 --> 00:05:34,330
we automatically log the user in.

104
00:05:34,330 --> 00:05:36,490
Because at the moment, if I save that,

105
00:05:36,490 --> 00:05:38,270
if we reload this app,

106
00:05:38,270 --> 00:05:40,130
if I log in,

107
00:05:40,130 --> 00:05:42,410
it still works as before.

108
00:05:42,410 --> 00:05:45,300
And when I reload that state is lost.

109
00:05:45,300 --> 00:05:48,370
But now if you go to the Def tools of your browser

110
00:05:48,370 --> 00:05:51,800
and there to your application in Chrome at least,

111
00:05:51,800 --> 00:05:53,550
you can visit the local storage,

112
00:05:53,550 --> 00:05:54,990
you can view that,

113
00:05:54,990 --> 00:05:58,770
and in here you will see a user ID and a token field,

114
00:05:58,770 --> 00:06:00,920
and that's that data which I'd just stored.

115
00:06:02,090 --> 00:06:05,520
And now we can use that to log the user in.

116
00:06:05,520 --> 00:06:08,630
By the way, we can view that data, but it's also our data.

117
00:06:08,630 --> 00:06:10,110
So that's no problem.

118
00:06:10,110 --> 00:06:11,913
It belongs to us as a user.

119
00:06:13,380 --> 00:06:15,570
So now we can add a new action

120
00:06:16,610 --> 00:06:21,610
auto log in or try log in whatever you want to name it,

121
00:06:22,060 --> 00:06:23,720
where we do just that.

122
00:06:23,720 --> 00:06:25,910
We check whether that data exists

123
00:06:25,910 --> 00:06:28,933
and if it does, we set a user, if it doesn't, we don't.

124
00:06:29,980 --> 00:06:32,690
So here we also get context.

125
00:06:32,690 --> 00:06:35,650
And then we can access local storage

126
00:06:35,650 --> 00:06:38,353
and get an item, the token,

127
00:06:39,230 --> 00:06:41,630
stored at in a token constant,

128
00:06:41,630 --> 00:06:43,733
also gets the user ID,

129
00:06:46,470 --> 00:06:51,470
and then check if we got a token and a user ID, let's say,

130
00:06:51,670 --> 00:06:55,313
then I want to context commit,

131
00:06:56,540 --> 00:07:00,900
set user and pass that data on.

132
00:07:00,900 --> 00:07:03,700
So here past that payload to set user,

133
00:07:03,700 --> 00:07:06,570
where I set the token to the token we extracted

134
00:07:06,570 --> 00:07:09,370
from local storage and set the user ID

135
00:07:09,370 --> 00:07:12,310
to the user ID we extracted from local storage

136
00:07:13,240 --> 00:07:16,900
and set token expiration to null at the moment

137
00:07:16,900 --> 00:07:18,670
because we're not using it yet.

138
00:07:18,670 --> 00:07:19,973
That will change soon.

139
00:07:21,260 --> 00:07:25,000
And if we don't have a token or we don't have a user ID,

140
00:07:25,000 --> 00:07:29,470
this will not be committed and we will not set the user.

141
00:07:29,470 --> 00:07:32,563
We will not log the user in automatically so to say.

142
00:07:33,690 --> 00:07:37,390
With that, however, we now need to dispatch this action

143
00:07:37,390 --> 00:07:40,150
whenever our app starts to check

144
00:07:40,150 --> 00:07:42,773
whether we can log the user in automatically.

145
00:07:43,810 --> 00:07:47,260
And the best place to do that is the App Vue file

146
00:07:47,260 --> 00:07:49,420
because that is our root component.

147
00:07:49,420 --> 00:07:52,933
This gets created first when the entire app starts up.

148
00:07:54,200 --> 00:07:59,080
So here we can add the created lifecycle hook,

149
00:07:59,080 --> 00:08:01,850
which has fired when this component is created.

150
00:08:01,850 --> 00:08:04,800
And there we can then reach out to our store

151
00:08:04,800 --> 00:08:08,943
and dispatch the try log in action.

152
00:08:10,950 --> 00:08:13,430
And with that, if we save this,

153
00:08:13,430 --> 00:08:15,940
you see if I now reload,

154
00:08:15,940 --> 00:08:18,393
I actually end up in logged in mode.

155
00:08:20,720 --> 00:08:24,840
And I can even reload on requests and we stay on that page.

156
00:08:24,840 --> 00:08:28,323
So now logging the user in automatically works.

157
00:08:29,160 --> 00:08:31,560
The only thing we now got to take care of

158
00:08:31,560 --> 00:08:34,409
is that we cleared the data if we log out,

159
00:08:34,409 --> 00:08:37,610
because at the moment if I then reload, I'm logged in again,

160
00:08:37,610 --> 00:08:40,580
because I don't clear the data in local storage.

161
00:08:40,580 --> 00:08:44,220
And we also should log the user out automatically

162
00:08:44,220 --> 00:08:45,950
when the token expires,

163
00:08:45,950 --> 00:08:49,360
because it turns out that the token has a limited lifetime

164
00:08:49,360 --> 00:08:50,853
for security reasons.

