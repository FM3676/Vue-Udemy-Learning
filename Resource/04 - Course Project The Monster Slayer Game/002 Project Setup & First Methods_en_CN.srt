1
00:00:02,290 --> 00:00:03,660
所以让我们开始吧。

2
00:00:03,660 --> 00:00:07,330
附加到这个讲座，你会发现这个起始项目，

3
00:00:07,330 --> 00:00:12,040
这是具有基本骨架的索引 HTML 文件

4
00:00:12,040 --> 00:00:13,720
对于我们的应用程序。

5
00:00:13,720 --> 00:00:18,280
还没有 Vue 逻辑，它实际上只是 HTML。

6
00:00:18,280 --> 00:00:21,070
您必须使用一些基本样式来设置 CSS 文件的样式

7
00:00:21,070 --> 00:00:22,910
我们将在整个模块中使用

8
00:00:22,910 --> 00:00:24,660
所以在这个应用程序中。

9
00:00:24,660 --> 00:00:27,910
你有一个空的应用程序 JS 文件，因为我们要

10
00:00:27,910 --> 00:00:31,163
一步一步把所有的Vue逻辑写在一起。

11
00:00:32,630 --> 00:00:34,680
现在，正如我在上一堂课中所说，

12
00:00:34,680 --> 00:00:37,810
我们将构建一个简单的怪物杀手游戏

13
00:00:37,810 --> 00:00:40,800
我们有一个怪物健康和我们的健康。

14
00:00:40,800 --> 00:00:43,660
我们有多种攻击方式，

15
00:00:43,660 --> 00:00:45,240
发动特殊攻击，

16
00:00:45,240 --> 00:00:47,260
治愈自己或投降

17
00:00:47,260 --> 00:00:50,360
我们想用 Vue 实现所有这些

18
00:00:50,360 --> 00:00:53,860
这样我们就有了这个基于浏览器的游戏，

19
00:00:53,860 --> 00:00:56,720
我们可以用 JavaScript 完全控制

20
00:00:56,720 --> 00:00:59,850
但当然不仅仅是 JavaScript，

21
00:00:59,850 --> 00:01:03,660
而是使用 Vue 和 JavaScript。

22
00:01:03,660 --> 00:01:07,070
为此，显然我们要开始

23
00:01:07,070 --> 00:01:09,980
通过使用 Vue 来控制它。

24
00:01:09,980 --> 00:01:14,760
因此，通过使用 Vue 接管一些 HTML 代码

25
00:01:14,760 --> 00:01:17,740
这样我们就可以在这里使用 Vue 的特性了。

26
00:01:17,740 --> 00:01:20,940
你可能会注意到我已经准备好了这个 div

27
00:01:20,940 --> 00:01:25,410
这里有一个ID游戏，看起来很诱人。

28
00:01:25,410 --> 00:01:27,080
确实这是 div

29
00:01:27,080 --> 00:01:29,060
我们将使用 Vue 进行控制，

30
00:01:29,060 --> 00:01:32,450
因为事实证明在那个div里面，

31
00:01:32,450 --> 00:01:35,590
我们得到了整个游戏的 HTML 代码。

32
00:01:35,590 --> 00:01:37,850
标题在 div 之外

33
00:01:37,850 --> 00:01:41,330
但是标题不是我们需要用 Vue 控制的。

34
00:01:41,330 --> 00:01:44,840
我们不会在那里使用任何 Vue 功能。

35
00:01:44,840 --> 00:01:48,840
因此在 app JS 中，就像我们之前多次做的那样

36
00:01:48,840 --> 00:01:53,010
我们可以通过调用 Vue.createApp 创建一个 Vue 应用程序

37
00:01:53,010 --> 00:01:55,350
我们可以将其存储为常数

38
00:01:55,350 --> 00:02:00,350
然后将我们的应用程序挂载到这个游戏 div。

39
00:02:00,460 --> 00:02:03,650
所以对于这个带有 ID 游戏的 div，因此，

40
00:02:03,650 --> 00:02:07,350
我们在这里使用 ID 游戏选择器。

41
00:02:07,350 --> 00:02:10,300
所以现在我们有一个连接到这个 div 的 Vue 应用程序

42
00:02:10,300 --> 00:02:14,423
现在的问题是我们要从哪些部分开始？

43
00:02:15,260 --> 00:02:18,460
当然不只有一种可能的路线

44
00:02:18,460 --> 00:02:21,090
你可以走，有多条路线，

45
00:02:21,090 --> 00:02:22,960
像往常一样在编程中，

46
00:02:22,960 --> 00:02:25,030
但我建议我们直接开始

47
00:02:25,030 --> 00:02:26,830
与攻击按钮。

48
00:02:26,830 --> 00:02:30,200
所以我们基本上从上到下实现功能。

49
00:02:30,200 --> 00:02:34,190
所以这里的攻击按钮当然应该按下

50
00:02:34,190 --> 00:02:37,600
降低怪物的生命值，但同时，

51
00:02:37,600 --> 00:02:40,030
然后怪物也应该反击

52
00:02:40,030 --> 00:02:42,790
使我们的健康也降低了。

53
00:02:42,790 --> 00:02:47,790
而且我们可能不想使用单个硬编码值

54
00:02:48,080 --> 00:02:50,030
我们通过它减少健康，

55
00:02:50,030 --> 00:02:52,200
但我们想使用一些随机性

56
00:02:52,200 --> 00:02:55,210
这样我们的游戏就不太容易预测了。

57
00:02:55,210 --> 00:02:57,710
因此在应用 JS 中，

58
00:02:57,710 --> 00:03:00,870
我将从管理一些数据开始。

59
00:03:00,870 --> 00:03:04,550
你现在已经在上次的讲座中看到了

60
00:03:04,550 --> 00:03:05,520
和模块，

61
00:03:05,520 --> 00:03:10,520
数据当然是一个核心概念，Vue 应用中的核心东西

62
00:03:11,070 --> 00:03:14,260
因为几乎所有你要构建的应用程序

63
00:03:14,260 --> 00:03:15,950
需要一些数据，

64
00:03:15,950 --> 00:03:18,050
无论你在那里管理什么，

65
00:03:18,050 --> 00:03:20,790
但你需要一些数据。

66
00:03:20,790 --> 00:03:23,110
将数据视为您需要的变量

67
00:03:23,110 --> 00:03:25,870
在您的常规 JavaScript 代码中

68
00:03:25,870 --> 00:03:28,950
我们需要数据是很有意义的。

69
00:03:28,950 --> 00:03:30,960
例如，在这个游戏中，

70
00:03:30,960 --> 00:03:33,940
我们需要在这里管理哪种数据

71
00:03:33,940 --> 00:03:37,670
让任何事情真正发挥作用？

72
00:03:37,670 --> 00:03:41,850
那么，玩家和怪物的健康状况如何？

73
00:03:41,850 --> 00:03:44,000
我们需要管理这些数据，

74
00:03:44,000 --> 00:03:46,380
我们需要管理这些健康数据

75
00:03:46,380 --> 00:03:50,280
因为我们要改变它并改变健康

76
00:03:50,280 --> 00:03:54,270
当然，应该稍后反映在 UI 上

77
00:03:54,270 --> 00:03:57,580
从而减少这些健康条。

78
00:03:57,580 --> 00:04:00,820
所以我们需要数据，我们需要这个数据选项

79
00:04:00,820 --> 00:04:03,550
在我们的 Vue 应用程序配置对象中。

80
00:04:03,550 --> 00:04:07,520
正如你在这个数据方法中学到的那样，它应该是，

81
00:04:07,520 --> 00:04:11,550
我们返回了保存我们实际数据的对象。

82
00:04:11,550 --> 00:04:16,540
正如我刚刚解释的，我有两个主要数据点

83
00:04:16,540 --> 00:04:18,870
那就是球员的健康。

84
00:04:18,870 --> 00:04:22,380
假设我们从这里的值 100 开始，

85
00:04:22,380 --> 00:04:25,830
当然你可以选择任何你想要的值

86
00:04:25,830 --> 00:04:28,140
我们需要一个怪物健康。

87
00:04:28,140 --> 00:04:31,440
现在我们可以说怪物有或多或少的健康，

88
00:04:31,440 --> 00:04:34,363
但我总是将怪物的生命值设置为 100。

89
00:04:35,520 --> 00:04:39,890
所以现在我们得到了这两个健康值，它们可以让我们

90
00:04:39,890 --> 00:04:44,620
管理我们两个游戏参与者的健康。

91
00:04:44,620 --> 00:04:46,830
但仅靠健康是不够的。

92
00:04:46,830 --> 00:04:49,580
当然，我们也需要改变健康的方法，

93
00:04:49,580 --> 00:04:52,280
例如，当发起攻击时。

94
00:04:52,280 --> 00:04:57,120
所以这需要方法，因为方法本质上是

95
00:04:57,120 --> 00:05:01,270
我们在 Vue 应用程序中支持的操作。

96
00:05:01,270 --> 00:05:04,120
例如，当点击攻击按钮时，

97
00:05:04,120 --> 00:05:08,650
我们想触发一个降低怪物生命值的方法。

98
00:05:08,650 --> 00:05:12,940
因此我将把这个方法命名为attackMonster，

99
00:05:12,940 --> 00:05:14,260
因为这就是我们正在做的事情。

100
00:05:14,260 --> 00:05:16,373
我们正在攻击怪物。

101
00:05:17,600 --> 00:05:20,330
现在，我们应该在这个方法里面做什么呢？

102
00:05:20,330 --> 00:05:23,525
应该发生什么而不是attackMonster？

103
00:05:23,525 --> 00:05:27,290
好吧，我们想计算我们正在造成的伤害

104
00:05:27,290 --> 00:05:29,500
然后我们想降低怪物的生命值

105
00:05:29,500 --> 00:05:31,290
受那伤害。

106
00:05:31,290 --> 00:05:35,520
正如我之前所说，我想在这里使用一个随机值。

107
00:05:35,520 --> 00:05:38,690
当然，您可以始终扣除相同的金额

108
00:05:38,690 --> 00:05:40,080
来自怪物健康

109
00:05:40,080 --> 00:05:43,150
但那时你的比赛将是相当可预测的。

110
00:05:43,150 --> 00:05:45,490
所以要计算一个随机值，

111
00:05:45,490 --> 00:05:48,310
我们可以使用数学随机函数，

112
00:05:48,310 --> 00:05:51,780
这给了我们一个介于零和一之间的随机数。

113
00:05:51,780 --> 00:05:54,960
现在，我不想要介于零和一之间的值。

114
00:05:54,960 --> 00:05:58,480
相反，由于我们使用的是 100 的生命值，

115
00:05:58,480 --> 00:06:00,980
我们可能想要一个更高的数字。

116
00:06:00,980 --> 00:06:05,310
例如，我们可以说我们想要

117
00:06:05,310 --> 00:06:09,090
获取最小值和最大值之间的随机数。

118
00:06:09,090 --> 00:06:11,500
假设在 5 到 12 之间，

119
00:06:11,500 --> 00:06:14,220
我们要造成至少五点伤害

120
00:06:14,220 --> 00:06:17,360
但不超过12点伤害。

121
00:06:17,360 --> 00:06:20,700
以及计算这个的公式

122
00:06:20,700 --> 00:06:24,360
是乘以数学随机

123
00:06:24,360 --> 00:06:28,770
与最大值的差异，正如我刚刚解释的那样，它是 12

124
00:06:28,770 --> 00:06:33,250
减去最小值，例如应该是 5。

125
00:06:33,250 --> 00:06:38,250
然后我们采取行动将其四舍五入

126
00:06:38,310 --> 00:06:41,660
这样我们就没有带小数位的数字

127
00:06:41,660 --> 00:06:43,700
但是我们有一个整数，

128
00:06:43,700 --> 00:06:46,130
我们再次添加最小值。

129
00:06:46,130 --> 00:06:49,500
这是一个计算随机数的公式

130
00:06:49,500 --> 00:06:51,143
五点到十二点之间。

131
00:06:52,530 --> 00:06:57,530
所以这会给我我的攻击值让我们说

132
00:06:58,700 --> 00:07:00,963
我想通过它减少怪物的健康。

133
00:07:04,530 --> 00:07:06,660
所以在这里，

134
00:07:06,660 --> 00:07:10,510
我想接触这个怪物的健康

135
00:07:10,510 --> 00:07:14,680
我解释说我们可以访问所有数据属性

136
00:07:14,680 --> 00:07:17,772
在您的方法中通过 this 关键字，因为

137
00:07:17,772 --> 00:07:22,640
Vue 会将你所有的数据属性合并到这个对象中

138
00:07:22,640 --> 00:07:26,720
变成一个全局的幕后管理对象

139
00:07:26,720 --> 00:07:30,120
这就是为什么我们可以在一个方法中使用它

140
00:07:30,120 --> 00:07:32,890
并获得这个怪物的健康

141
00:07:32,890 --> 00:07:35,200
我们想要获得怪物的健康

142
00:07:35,200 --> 00:07:37,290
这样我们就可以设置怪物的生命值

143
00:07:37,290 --> 00:07:39,520
等于这个怪物的生命值

144
00:07:39,520 --> 00:07:43,300
减去我们刚刚得出的攻击值。

145
00:07:43,300 --> 00:07:45,640
我们也可以用更短的方式来写这个。

146
00:07:45,640 --> 00:07:47,900
我们可以在这里使用 JavaScript 快捷方式，

147
00:07:47,900 --> 00:07:52,900
简写符号并使用负等于攻击值。

148
00:07:54,370 --> 00:07:56,270
这完全是在做同样的事情

149
00:07:56,270 --> 00:07:58,930
我们正在减少怪物的生命值

150
00:07:58,930 --> 00:08:02,003
由我们在这里得出的攻击值。

151
00:08:03,100 --> 00:08:05,360
现在这是等式的一部分。

152
00:08:05,360 --> 00:08:08,120
我们希望能够攻击怪物，

153
00:08:08,120 --> 00:08:11,270
但当然怪物也应该能够

154
00:08:11,270 --> 00:08:13,430
攻击我们作为玩家。

155
00:08:13,430 --> 00:08:17,440
比方说，每当我们攻击怪物时

156
00:08:17,440 --> 00:08:19,500
结果，在那之后，

157
00:08:19,500 --> 00:08:21,910
怪物应该反击。

158
00:08:21,910 --> 00:08:23,700
所以我们可以添加第二种方法，

159
00:08:23,700 --> 00:08:27,110
可以说，我们游戏的第二个动作，

160
00:08:27,110 --> 00:08:29,110
这是攻击玩家。

161
00:08:29,110 --> 00:08:32,630
这就是作为玩家攻击我们的怪物。

162
00:08:32,630 --> 00:08:35,179
在这里，我们想做基本上相同的事情。

163
00:08:35,179 --> 00:08:40,179
我们想得到一个随机计算的攻击值，

164
00:08:40,650 --> 00:08:45,160
但是让我们说怪物实际上击中了一点

165
00:08:45,160 --> 00:08:47,370
所以最大伤害是15

166
00:08:47,370 --> 00:08:50,720
假设最小伤害是八而不是五。

167
00:08:50,720 --> 00:08:54,080
因此，通过一直发送垃圾邮件攻击，

168
00:08:54,080 --> 00:08:58,003
我们可能不会赢，因为怪物对我们的打击更大。

169
00:08:59,720 --> 00:09:02,660
然后我们取这个计算出来的攻击值

170
00:09:02,660 --> 00:09:07,660
并像这样从玩家的健康中扣除。

171
00:09:08,830 --> 00:09:10,900
现在因为我有相同的公式

172
00:09:10,900 --> 00:09:13,000
用于计算随机数，

173
00:09:13,000 --> 00:09:16,470
我实际上会将其外包给一个单独的功能

174
00:09:16,470 --> 00:09:19,470
在这里我将使用我们的常规 JavaScript 函数

175
00:09:19,470 --> 00:09:23,140
而不是 Vue 方法，因为这将是一个函数

176
00:09:23,140 --> 00:09:26,400
我只从我的 JavaScript 代码中调用，

177
00:09:26,400 --> 00:09:31,060
不会使用任何 Vue 控制的数据属性

178
00:09:31,060 --> 00:09:32,480
或类似的东西

179
00:09:32,480 --> 00:09:35,890
并且不会从我们的模板内部调用

180
00:09:35,890 --> 00:09:38,053
所以从我们的 HTML 代码中。

181
00:09:38,970 --> 00:09:40,620
如果这一切都是这样的话，

182
00:09:40,620 --> 00:09:43,730
如果您不需要访问 Vue 控制的属性，

183
00:09:43,730 --> 00:09:47,180
如果您没有从 HTML 内部调用该函数

184
00:09:47,180 --> 00:09:50,600
你只能在 JavaScript 代码中使用它，

185
00:09:50,600 --> 00:09:53,480
然后你可以写一个普通的 JavaScript 函数

186
00:09:53,480 --> 00:09:56,333
我将其命名为 getRandomValue。

187
00:09:56,333 --> 00:10:00,380
我想在这里得到一个最小和一个最大边界

188
00:10:01,510 --> 00:10:06,510
然后只是包装那个公式，把它剪下来然后放在这里

189
00:10:07,260 --> 00:10:12,260
并将 12 替换为最大值，将 5 替换为最小值。

190
00:10:13,170 --> 00:10:16,740
这样做的好处是我们现在可以简单地调用，

191
00:10:16,740 --> 00:10:21,170
在此处获取随机值并传入 5 和 12

192
00:10:21,170 --> 00:10:26,140
然后在下面做同样的事情，然后通过 8 和 15。

193
00:10:26,140 --> 00:10:27,880
这样我们就节省了一些代码

194
00:10:27,880 --> 00:10:31,283
一个我们只是将其外包给了一个单独的功能。

195
00:10:33,680 --> 00:10:36,010
因此，我们得到了两个动作。

196
00:10:36,010 --> 00:10:38,600
这些方法中缺少一件事

197
00:10:38,600 --> 00:10:39,800
然后当然

198
00:10:39,800 --> 00:10:42,836
我们还需要将其连接到 HTML 代码。

199
00:10:42,836 --> 00:10:47,070
但是这里缺少的当然是那个攻击玩家

200
00:10:47,070 --> 00:10:50,760
应该在我们攻击怪物时触发。

201
00:10:50,760 --> 00:10:53,230
所以在这里攻击怪物之后，

202
00:10:53,230 --> 00:10:58,050
我将联系attackPlayer 并在此处调用此方法。

203
00:10:58,050 --> 00:11:00,810
这是我们迄今为止还没有做过的事情

204
00:11:00,810 --> 00:11:02,750
在前面的模块中。

205
00:11:02,750 --> 00:11:05,300
但就像我们可以访问数据属性一样

206
00:11:05,300 --> 00:11:07,560
通过这个关键词，

207
00:11:07,560 --> 00:11:11,660
我们也可以通过 this 关键字访问方法

208
00:11:11,660 --> 00:11:15,800
在此处的 Vue 实例配置对象内部。

209
00:11:15,800 --> 00:11:16,730
以及这样做的原因

210
00:11:16,730 --> 00:11:19,700
与数据属性相同。

211
00:11:19,700 --> 00:11:22,900
我提到这些数据将被合并

212
00:11:22,900 --> 00:11:26,480
进入幕后管理的全局对象

213
00:11:26,480 --> 00:11:30,820
对于方法和计算属性也是如此。

214
00:11:30,820 --> 00:11:32,930
所有这些都在合并

215
00:11:32,930 --> 00:11:36,580
进入幕后控制的全局对象。

216
00:11:36,580 --> 00:11:39,800
因此就像我们可以访问数据属性一样

217
00:11:39,800 --> 00:11:42,500
通过方法内部的 this 关键字，

218
00:11:42,500 --> 00:11:45,573
我们也可以在那里访问我们的方法并调用它们。

219
00:11:46,560 --> 00:11:48,910
所以我们可以在这里调用attackPlayer

220
00:11:48,910 --> 00:11:52,120
从attackMonster 内部确保

221
00:11:52,120 --> 00:11:56,550
此方法在此方法执行后立即执行。

222
00:11:56,550 --> 00:11:59,870
至此，我们现在就完成了 JavaScript 代码。

223
00:11:59,870 --> 00:12:01,690
但当然我们也

224
00:12:01,690 --> 00:12:05,970
现在需要将其连接到我们的 HTML 内容。

225
00:12:05,970 --> 00:12:09,200
我们需要确保在我们的 HTML 代码中，

226
00:12:09,200 --> 00:12:12,470
我们现在也触发了攻击怪物

227
00:12:12,470 --> 00:12:14,240
单击攻击按钮时

228
00:12:14,240 --> 00:12:17,100
并且我们更新了那些健康栏

229
00:12:17,100 --> 00:12:18,930
所以让我们接下来继续努力。

230
00:12:18,930 --> 00:12:22,370
当然，您可以先自己尝试一下

231
00:12:22,370 --> 00:12:25,203
然后我们一起继续下一节课。