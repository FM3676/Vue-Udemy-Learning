1
00:00:02,210 --> 00:00:05,090
那么，我们现在如何检查谁赢了

2
00:00:05,090 --> 00:00:06,393
谁输了？

3
00:00:07,270 --> 00:00:12,000
为此，我们需要基本上检查健康值，

4
00:00:12,000 --> 00:00:14,800
玩家和怪物的健康。

5
00:00:14,800 --> 00:00:16,960
这对我们来说很重要。

6
00:00:16,960 --> 00:00:21,960
因此我们可以在攻击后在这里添加 if 检查

7
00:00:22,094 --> 00:00:24,149
玩家，所以在两个怪物之后

8
00:00:24,149 --> 00:00:25,642
并且玩家受到了攻击。

9
00:00:25,642 --> 00:00:27,648
在这里，我们可以检查这个玩家是否健康

10
00:00:27,648 --> 00:00:31,981
小于零，在这种情况下玩家输了。

11
00:00:32,990 --> 00:00:35,656
我们可以检查是否所有的怪物健康

12
00:00:35,656 --> 00:00:38,058
低于零，依此类推。

13
00:00:38,058 --> 00:00:41,200
但是我们必须重复这个检查。

14
00:00:41,200 --> 00:00:43,310
我们将不得不重复此检查

15
00:00:43,310 --> 00:00:45,670
在特殊攻击怪物功能中，

16
00:00:45,670 --> 00:00:48,090
以及在治疗玩家功能中，

17
00:00:48,090 --> 00:00:50,110
因为也许我们治愈了自己，

18
00:00:50,110 --> 00:00:52,750
但是怪物还是造成了太多的伤害

19
00:00:52,750 --> 00:00:54,053
我们还是死了。

20
00:00:54,900 --> 00:00:57,820
所以在所有这些地方重复相同的代码。

21
00:00:57,820 --> 00:01:00,790
那不是我想做的，因为重复代码

22
00:01:00,790 --> 00:01:01,950
从来都不是好事。

23
00:01:01,950 --> 00:01:04,390
如果我们决定改变某事，

24
00:01:04,390 --> 00:01:07,270
我们需要在很多不同的地方改变它。

25
00:01:07,270 --> 00:01:10,150
因此我们想避免这种情况。

26
00:01:10,150 --> 00:01:13,680
取而代之的是视图，我们有一个更好的方法来跟踪

27
00:01:13,680 --> 00:01:18,130
做某事而不是对此做出反应。

28
00:01:18,130 --> 00:01:20,163
我们可以添加一个观察者。

29
00:01:21,020 --> 00:01:26,020
所以我将通过添加 watch 选项在这里添加观察者

30
00:01:26,520 --> 00:01:28,480
到配置对象。

31
00:01:28,480 --> 00:01:32,980
在这里，我想看两个属性，玩家健康

32
00:01:32,980 --> 00:01:34,630
和怪物的健康。

33
00:01:34,630 --> 00:01:37,900
所以我们为玩家的健康属性添加了一个观察者。

34
00:01:37,900 --> 00:01:41,410
正如你所了解的，这个名字现在不取决于你，

35
00:01:41,410 --> 00:01:44,180
相反，它必须是属性的名称

36
00:01:44,180 --> 00:01:47,050
你想看，你想看

37
00:01:47,050 --> 00:01:48,723
这个玩家的健康属性。

38
00:01:50,920 --> 00:01:53,320
因此，我将添加第二个观察者，

39
00:01:53,320 --> 00:01:56,123
我像这样看怪物健康的地方。

40
00:01:57,950 --> 00:02:00,530
你们都知道我们当时得到了价值观

41
00:02:00,530 --> 00:02:04,220
每当观看您的触发器时，这些观看的值。

42
00:02:04,220 --> 00:02:08,070
因此，现在让我们从玩家健康观察者开始。

43
00:02:08,070 --> 00:02:11,600
在那里，我们需要一个常规的 if 检查我们检查的地方

44
00:02:11,600 --> 00:02:15,350
如果是值，那么玩家的生命值会更小

45
00:02:15,350 --> 00:02:17,410
或等于零。

46
00:02:17,410 --> 00:02:22,150
如果让我们说怪物的健康也更小

47
00:02:22,150 --> 00:02:23,630
或等于零。

48
00:02:23,630 --> 00:02:26,120
在这种情况下，我们会有平局

49
00:02:26,120 --> 00:02:30,170
因为两个参与者都低于零。

50
00:02:30,170 --> 00:02:35,000
现在，另一种情况是，如果只是价值

51
00:02:35,000 --> 00:02:37,380
小于或等于零。

52
00:02:37,380 --> 00:02:40,530
所以第一个条件不是满足，而是值。

53
00:02:40,530 --> 00:02:44,930
所以玩家的生命值低于零或等于零。

54
00:02:44,930 --> 00:02:47,690
然后我们知道玩家输了。

55
00:02:47,690 --> 00:02:50,670
我们不需要检查怪物的生命值变小了

56
00:02:50,670 --> 00:02:53,200
这里比零，因为我们要这样做

57
00:02:53,200 --> 00:02:55,670
在怪物健康观察者中。

58
00:02:55,670 --> 00:03:00,400
确实，我想检查一下价值。

59
00:03:00,400 --> 00:03:04,750
所以现在怪物的生命值小于或等于零。

60
00:03:04,750 --> 00:03:09,313
如果玩家健康小于或等于零。

61
00:03:10,250 --> 00:03:12,943
在这种情况下，如前所述，我们有平局，

62
00:03:13,980 --> 00:03:17,330
否则，如果只是怪物的价值

63
00:03:17,330 --> 00:03:20,853
小于零，则怪物输了。

64
00:03:22,550 --> 00:03:25,870
现在当然，我知道

65
00:03:25,870 --> 00:03:30,040
如果我们把怪物带到零以下然后打我们

66
00:03:30,040 --> 00:03:33,900
把我们带到零以下，两个观察者都开火，

67
00:03:33,900 --> 00:03:36,110
因为两种健康状况都发生了变化

68
00:03:36,110 --> 00:03:38,650
因此 if 检查运行两次。

69
00:03:38,650 --> 00:03:41,780
我们会发现我们有两次平局。

70
00:03:41,780 --> 00:03:45,130
然而，这不会是一个问题，因为你会看到

71
00:03:45,130 --> 00:03:46,810
我们如何处理这些信息。

72
00:03:46,810 --> 00:03:49,080
我们只是要在屏幕上显示一些东西

73
00:03:49,080 --> 00:03:51,290
它只会在那里出现一次。

74
00:03:51,290 --> 00:03:53,840
所以发现我们有两次平局

75
00:03:53,840 --> 00:03:55,313
不会有问题。

76
00:03:56,210 --> 00:03:58,590
如果我们有平局，我们想做什么，

77
00:03:58,590 --> 00:04:01,720
或者当玩家输了或怪物输了？

78
00:04:01,720 --> 00:04:06,193
好吧，我们可能会在屏幕上关闭这个地方消息。

79
00:04:07,540 --> 00:04:11,230
为此，让我们转到索引 HTML 文件。

80
00:04:11,230 --> 00:04:13,890
在控件上方，

81
00:04:13,890 --> 00:04:16,519
但在健康栏部分下方，

82
00:04:16,519 --> 00:04:18,603
我将添加一个新的部分 null。

83
00:04:19,519 --> 00:04:22,263
给那个部分，一个容器类，

84
00:04:23,540 --> 00:04:26,500
这只会给它一些默认样式。

85
00:04:26,500 --> 00:04:31,500
现在在那个部分里面，我想说游戏结束

86
00:04:32,320 --> 00:04:37,320
然后要么说你输了，要么你赢了，要么是平局

87
00:04:38,380 --> 00:04:42,340
并提供一个按钮来开始新游戏。

88
00:04:42,340 --> 00:04:45,460
那是为了什么而尖叫？

89
00:04:45,460 --> 00:04:49,770
对于 v if，因为现在我们有了条件内容。

90
00:04:49,770 --> 00:04:52,720
首先，整个容器

91
00:04:52,720 --> 00:04:55,810
只应显示游戏结束消息

92
00:04:55,810 --> 00:04:57,740
如果游戏真的结束了。

93
00:04:57,740 --> 00:05:01,860
因此，如果我们有赢家或平局。

94
00:05:01,860 --> 00:05:05,210
然后是下面的消息，比如

95
00:05:07,220 --> 00:05:12,220
你在h3标签中输了，或者你赢了，或者是平局。

96
00:05:15,830 --> 00:05:20,140
那些 h3 标签也应该有条件地显示

97
00:05:20,140 --> 00:05:22,973
取决于谁赢了谁输了。

98
00:05:24,330 --> 00:05:29,250
因此我们不仅需要检查这些值，

99
00:05:29,250 --> 00:05:32,520
但也要改变一些我们可以反映的东西

100
00:05:32,520 --> 00:05:34,470
在 HTML 代码中。

101
00:05:34,470 --> 00:05:37,250
这反对对数据属性的尖叫。

102
00:05:37,250 --> 00:05:39,410
在这里，我们可以存储获胜者

103
00:05:39,410 --> 00:05:42,990
并最初将其设置为 null 因为最初

104
00:05:42,990 --> 00:05:45,913
比赛开始时，我们当然没有赢家，

105
00:05:48,120 --> 00:05:51,040
但是在这里，如果我们有平局，

106
00:05:51,040 --> 00:05:55,250
我想设置这个赢家等于平局，比方说。

107
00:05:55,250 --> 00:05:58,260
所以对于一个说draw的字符串。

108
00:05:58,260 --> 00:06:00,510
如果玩家输了，

109
00:06:00,510 --> 00:06:03,500
我想设置这个赢家等于怪物。

110
00:06:03,500 --> 00:06:06,900
因为玩家输了，怪物赢了。

111
00:06:06,900 --> 00:06:11,900
在这里，这是赢家，又是平局。

112
00:06:12,720 --> 00:06:15,963
如果怪物失去了这个赢家，

113
00:06:17,870 --> 00:06:20,033
当然等于玩家。

114
00:06:22,110 --> 00:06:24,340
所以现在我们有了获胜者数据属性，

115
00:06:24,340 --> 00:06:27,010
要么为空，要么不为空，

116
00:06:27,010 --> 00:06:31,380
持有一串平局怪物或玩家。

117
00:06:31,380 --> 00:06:34,950
我们可以将它与 v if 结合使用

118
00:06:34,950 --> 00:06:38,940
有条件地通过容器展示整个游戏，

119
00:06:38,940 --> 00:06:42,100
但后来也不同的消息。

120
00:06:42,100 --> 00:06:46,010
整个容器可以用 v 显示，如果

121
00:06:46,010 --> 00:06:50,230
如果确实赢家是真的。

122
00:06:50,230 --> 00:06:54,030
开头默认为null，

123
00:06:54,030 --> 00:06:58,680
这在 JavaScript 中被视为虚假值。

124
00:06:58,680 --> 00:07:02,270
所以如果我说 v 如果获胜者和获胜者为空，

125
00:07:02,270 --> 00:07:04,920
此部分不会显示，因为 null

126
00:07:04,920 --> 00:07:06,823
被解释为假。

127
00:07:09,060 --> 00:07:13,640
如果是像draw这样的字符串或怪物或玩家，

128
00:07:13,640 --> 00:07:17,110
具体值无所谓，那么这是真的

129
00:07:17,110 --> 00:07:19,403
他们在本节中确实出现了。

130
00:07:20,680 --> 00:07:23,840
现在在部分内部，我们还需要 v if

131
00:07:23,840 --> 00:07:26,380
这里是 h3 元素。

132
00:07:26,380 --> 00:07:31,380
如果赢家是平等的，我想告诉你输了哦怪物。

133
00:07:34,700 --> 00:07:39,700
Else if，为此我们可以使用 v else if 指令，

134
00:07:40,020 --> 00:07:45,020
如果获胜者等于玩家，我想显示第二个 h3 标签

135
00:07:46,510 --> 00:07:50,150
因为如果玩家赢了，我想告诉你赢了。

136
00:07:50,150 --> 00:07:54,750
最后但同样重要的是，使用 v else，我们可以证明这是平局。

137
00:07:54,750 --> 00:07:57,610
我们也可以使用 v else if 来检查获胜者

138
00:07:57,610 --> 00:08:00,150
等于画，但既然我们知道

139
00:08:00,150 --> 00:08:02,670
我们只有这三个选项，

140
00:08:02,670 --> 00:08:04,973
我总是可以使用 v else。

141
00:08:06,890 --> 00:08:10,460
加上这个，如果我们现在重新加载，

142
00:08:10,460 --> 00:08:12,580
你看最初我们这里什么都没有。

143
00:08:12,580 --> 00:08:15,000
顺便说一句，当游戏加载时，您会简要地看到

144
00:08:15,000 --> 00:08:17,890
我们的内容会一直显示到视图框架

145
00:08:17,890 --> 00:08:18,900
已下载。

146
00:08:18,900 --> 00:08:21,610
这是我们以后总会解决的问题

147
00:08:21,610 --> 00:08:22,443
在课堂中。

148
00:08:22,443 --> 00:08:24,490
稍后，我们将有不同的设置

149
00:08:24,490 --> 00:08:27,120
初始闪烁不可见

150
00:08:27,120 --> 00:08:28,810
只是作为旁注。

151
00:08:28,810 --> 00:08:31,100
但这是我们现在的开始设置。

152
00:08:31,100 --> 00:08:34,659
现在让我们尝试结束游戏。

153
00:08:34,659 --> 00:08:36,793
让我们看看谁会赢。

154
00:08:37,950 --> 00:08:39,799
好吧，看来我们输了。

155
00:08:39,799 --> 00:08:43,100
健康栏没有反映这一点

156
00:08:43,100 --> 00:08:46,500
因为他们基本上不会陷入那种消极状态。

157
00:08:46,500 --> 00:08:47,820
他们没有达到零，

158
00:08:47,820 --> 00:08:50,240
但我们看到您丢失了消息。

159
00:08:50,240 --> 00:08:52,460
现在让我们重新加载，让我们尝试取胜。

160
00:08:52,460 --> 00:08:55,700
所以为此，我们需要使用特殊攻击

161
00:08:55,700 --> 00:08:58,243
也在这里治愈自己一点。

162
00:08:59,550 --> 00:09:03,810
特殊攻击，攻击，治愈自己，也许，

163
00:09:03,810 --> 00:09:06,300
特攻，我们赢了。

164
00:09:06,300 --> 00:09:09,453
让我们看看我们是否可以在这里取得平局。

165
00:09:12,410 --> 00:09:17,150
我不确定，我又赢了，就在这里。

166
00:09:17,150 --> 00:09:19,730
我也取得了平局。

167
00:09:19,730 --> 00:09:20,690
所以这似乎有效，

168
00:09:20,690 --> 00:09:22,810
我们在这里显示正确的信息。

169
00:09:22,810 --> 00:09:26,210
现在让我们确保之后我们也重新启动游戏

170
00:09:26,210 --> 00:09:30,630
如果我们确实有这样的平局，我们也许也更新一下

171
00:09:30,630 --> 00:09:33,070
健康栏正确，真正拥有

172
00:09:33,070 --> 00:09:35,823
如果游戏结束，则为空的健康栏。