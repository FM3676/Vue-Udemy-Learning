1
00:00:02,180 --> 00:00:04,110
现在是攻击键

2
00:00:04,110 --> 00:00:06,610
并且攻击动作正在起作用，

3
00:00:06,610 --> 00:00:08,710
让我们执行下一个动作

4
00:00:08,710 --> 00:00:10,340
我们想支持这场比赛。

5
00:00:10,340 --> 00:00:12,630
那就是特殊攻击动作

6
00:00:12,630 --> 00:00:15,513
因此应该可以使用特殊攻击按钮。

7
00:00:16,430 --> 00:00:19,830
这里的想法相对简单。

8
00:00:19,830 --> 00:00:23,080
我想和攻击怪物一样，

9
00:00:23,080 --> 00:00:26,140
但我们应该造成更多的伤害。

10
00:00:26,140 --> 00:00:29,670
另一方面，为了不让它太强大，

11
00:00:29,670 --> 00:00:31,560
因此，特殊攻击应该

12
00:00:31,560 --> 00:00:33,590
不是一直可用

13
00:00:33,590 --> 00:00:36,630
但只有每三轮。

14
00:00:36,630 --> 00:00:39,480
因此，让我们从添加此方法开始。

15
00:00:39,480 --> 00:00:41,803
我将它命名为specialAttackMonster。

16
00:00:43,170 --> 00:00:48,170
在这里我想计算一个攻击值

17
00:00:48,840 --> 00:00:53,840
但是假设在 10 到 25 个伤害点之间。

18
00:00:53,930 --> 00:00:57,363
所以我们有可能造成相当大的损害。

19
00:00:58,760 --> 00:01:00,590
当然，和以前一样，

20
00:01:00,590 --> 00:01:03,160
然后我们联系monsterHealth

21
00:01:03,160 --> 00:01:05,823
并从中扣除攻击值。

22
00:01:07,860 --> 00:01:09,760
而且和以前一样，

23
00:01:09,760 --> 00:01:13,570
之后怪物应该还会攻击我们。

24
00:01:13,570 --> 00:01:17,730
如果我们发动普通攻击，它不仅会反击，

25
00:01:17,730 --> 00:01:21,410
如果我们使用特殊攻击，它也会反击。

26
00:01:21,410 --> 00:01:24,819
所以这里我们称之为attackPlayer，此后，

27
00:01:24,819 --> 00:01:27,088
确保我们作为玩家

28
00:01:27,088 --> 00:01:27,921
在我们发动特殊攻击后被攻击。

29
00:01:32,070 --> 00:01:33,510
现在，有了这个，

30
00:01:33,510 --> 00:01:37,360
我们可以在这里连接这个特殊的攻击按钮。

31
00:01:37,360 --> 00:01:40,300
同样，通过添加点击监听器

32
00:01:40,300 --> 00:01:44,600
然后通过指向 specialAttackMonster 方法

33
00:01:44,600 --> 00:01:45,763
我们刚刚添加。

34
00:01:46,990 --> 00:01:48,380
如果我们保存了它

35
00:01:48,380 --> 00:01:51,430
并保存 JavaScript 文件并重新加载。

36
00:01:51,430 --> 00:01:55,040
如果我点击特殊攻击，我会造成很多伤害

37
00:01:55,040 --> 00:01:58,450
对怪物来说，你可以从它的迅速缩小中看出

38
00:01:58,450 --> 00:02:00,230
怪物健康栏。

39
00:02:00,230 --> 00:02:04,160
但问题是，现在我们可以向这种攻击发送垃圾邮件。

40
00:02:04,160 --> 00:02:07,520
所以获胜不会太难

41
00:02:07,520 --> 00:02:11,980
因为我们可以一遍又一遍地按下同一个按钮。

42
00:02:11,980 --> 00:02:15,230
因此，我想限制这种强大的攻击。

43
00:02:15,230 --> 00:02:18,990
它应该仅每三轮可用一次。

44
00:02:18,990 --> 00:02:21,330
而当它不可用时，

45
00:02:21,330 --> 00:02:23,793
因此应禁用此按钮。

46
00:02:24,790 --> 00:02:26,140
那么我们如何实现呢？

47
00:02:26,140 --> 00:02:29,163
我们如何确保这是它的工作方式？

48
00:02:30,380 --> 00:02:32,280
好吧，我们可以跟踪

49
00:02:32,280 --> 00:02:36,150
游戏已经持续的回合数。

50
00:02:36,150 --> 00:02:38,620
为此，我们可以添加一个新的数据属性

51
00:02:38,620 --> 00:02:40,400
因为我们得到了一条新数据

52
00:02:40,400 --> 00:02:44,080
我们想要改变和更新并意识到

53
00:02:44,080 --> 00:02:46,720
我将其命名为 currentRound。

54
00:02:46,720 --> 00:02:49,160
我将在此处将其添加到数据属性中

55
00:02:49,160 --> 00:02:53,240
而不是将其添加为常规 JavaScript 变量，

56
00:02:53,240 --> 00:02:56,530
例如，因为我们需要访问它

57
00:02:56,530 --> 00:02:58,360
从视图实例内部

58
00:02:58,360 --> 00:03:01,750
并且视图需要知道它何时发生变化。

59
00:03:01,750 --> 00:03:03,040
就是这样

60
00:03:03,040 --> 00:03:06,093
如果某些东西是视图应用程序中的数据属性。

61
00:03:07,150 --> 00:03:08,710
所以现在我们得到了当前的回合，

62
00:03:08,710 --> 00:03:12,590
我们从零开始，我想增加那一轮，

63
00:03:12,590 --> 00:03:15,560
当然，每当我们做任何事情时。

64
00:03:15,560 --> 00:03:17,440
所以每当我们攻击等等。

65
00:03:17,440 --> 00:03:20,623
每当发生这种情况时，这一轮就应该改变。

66
00:03:21,480 --> 00:03:24,290
因此，例如，当我们攻击怪物时，

67
00:03:24,290 --> 00:03:26,770
我将设置这一轮，加上加，

68
00:03:26,770 --> 00:03:28,920
将其加一。

69
00:03:28,920 --> 00:03:30,840
当怪物袭击我们时，

70
00:03:30,840 --> 00:03:32,120
我不会做

71
00:03:32,120 --> 00:03:34,880
因为那仍然是同一轮，对吧？

72
00:03:34,880 --> 00:03:37,860
每当我们做某事时，怪物就会攻击我们，

73
00:03:37,860 --> 00:03:40,110
所以我们不需要再次改变回合

74
00:03:40,110 --> 00:03:41,560
当这种情况发生时。

75
00:03:41,560 --> 00:03:43,010
但我们需要改变它

76
00:03:43,010 --> 00:03:46,140
当我们发动特殊攻击时，当然。

77
00:03:46,140 --> 00:03:48,670
所以现在我们得到了这一轮，

78
00:03:48,670 --> 00:03:52,163
我们现在如何使用它来控制特殊攻击按钮？

79
00:03:53,370 --> 00:03:56,440
好吧，我们可以回到 index.html

80
00:03:56,440 --> 00:04:00,360
如果当前回合禁用按钮

81
00:04:00,360 --> 00:04:03,233
不能被三整除。

82
00:04:04,100 --> 00:04:07,890
这确保我们只能每三轮使用一次。

83
00:04:07,890 --> 00:04:11,900
为此，我们可以设置 disabled 属性

84
00:04:11,900 --> 00:04:14,300
一个按钮，但当然不是那样的

85
00:04:14,300 --> 00:04:17,110
但改为动态值

86
00:04:17,110 --> 00:04:19,920
正如你所学，我们可以在属性上做到这一点

87
00:04:19,920 --> 00:04:24,920
使用 v-bind 或再次使用 :disabled 的简写。

88
00:04:26,230 --> 00:04:29,400
我想将其设置为真或假。

89
00:04:29,400 --> 00:04:32,180
并且应该导出真假

90
00:04:32,180 --> 00:04:34,310
根据当前回合。

91
00:04:34,310 --> 00:04:36,570
所以在这里我们可以访问当前回合，

92
00:04:36,570 --> 00:04:40,557
所以我们添加了这个当前回合数据属性。

93
00:04:40,557 --> 00:04:44,430
并使用模运算符，

94
00:04:44,430 --> 00:04:46,290
我们在 JavaScript 中拥有的，

95
00:04:46,290 --> 00:04:48,420
将其除以三并找出

96
00:04:48,420 --> 00:04:52,370
这个部门的其余部分是什么。

97
00:04:52,370 --> 00:04:56,510
我们知道如果余数不为零，

98
00:04:56,510 --> 00:04:59,900
那么这不能被三整除

99
00:04:59,900 --> 00:05:01,940
因此我们知道我们当然不是

100
00:05:01,940 --> 00:05:04,990
在第三或第六或第九轮。

101
00:05:04,990 --> 00:05:08,120
我们只想在这些回合中启用按钮。

102
00:05:08,120 --> 00:05:11,150
因此，如果除以三，我们将禁用它

103
00:05:11,150 --> 00:05:13,683
不会留下零余数。

104
00:05:16,900 --> 00:05:18,590
如果我们保存并重新加载，

105
00:05:18,590 --> 00:05:20,370
特殊攻击可用

106
00:05:20,370 --> 00:05:23,770
但是一旦我点击它，你会看到它变成了灰色。

107
00:05:23,770 --> 00:05:27,430
现在我需要再做两次普通攻击

108
00:05:27,430 --> 00:05:29,380
在它再次启用之前。

109
00:05:29,380 --> 00:05:31,810
所以这现在正在以它应该的方式工作。

110
00:05:31,810 --> 00:05:36,360
但像往常一样，我不一定想要那种逻辑

111
00:05:36,360 --> 00:05:40,240
在我的 HTML 代码中，因此我会在这里剪掉它，

112
00:05:40,240 --> 00:05:44,230
返回 app.js 并添加一个新的计算属性

113
00:05:44,230 --> 00:05:47,307
我们可以将其命名为 mayUseSpecialAttack

114
00:05:49,850 --> 00:05:53,720
在这里我们简单地返回这个计算

115
00:05:53,720 --> 00:05:55,520
现在使用 this 关键字，

116
00:05:55,520 --> 00:05:58,120
因为我们在视图实例中。

117
00:05:58,120 --> 00:06:01,750
有了这个，我们可以使用 mayUseSpecialAttack

118
00:06:01,750 --> 00:06:05,040
这里的计算属性，就像那样，

119
00:06:05,040 --> 00:06:07,640
确保按钮被禁用

120
00:06:07,640 --> 00:06:10,020
什么时候应该禁用它。

121
00:06:10,020 --> 00:06:11,490
所以现在可以了

122
00:06:11,490 --> 00:06:12,860
并且我们确保

123
00:06:12,860 --> 00:06:15,470
我们只能使用特殊攻击

124
00:06:15,470 --> 00:06:17,173
每三轮。

125
00:06:18,270 --> 00:06:21,333
这就是实现的特殊攻击功能。