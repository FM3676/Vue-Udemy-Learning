1
00:00:02,220 --> 00:00:03,520
现在到这一步，

2
00:00:03,520 --> 00:00:07,320
我总是在这里使用我的主要 Vue 应用程序。

3
00:00:07,320 --> 00:00:09,810
当然，通常情况下，您有多个组件。

4
00:00:09,810 --> 00:00:11,780
假设我们有一个单独的组件

5
00:00:11,780 --> 00:00:13,700
对于此处的用户数据，

6
00:00:13,700 --> 00:00:16,505
所以我们可以创建一个组件文件夹，

7
00:00:16,505 --> 00:00:19,890
里面有一个 UserData.vue 文件。

8
00:00:19,890 --> 00:00:21,570
在模板中，

9
00:00:21,570 --> 00:00:26,477
我想用我的用户名标记我的两岁。

10
00:00:30,360 --> 00:00:35,360
我想用我的年龄来标记我的年龄。

11
00:00:40,030 --> 00:00:42,020
现在我们可以在这里添加一个脚本

12
00:00:42,020 --> 00:00:44,030
我们可以在这里期待一些道具

13
00:00:44,030 --> 00:00:46,810
因为这些数据应该来自外部，

14
00:00:46,810 --> 00:00:48,100
用户名和年龄。

15
00:00:48,100 --> 00:00:52,573
所以我们可以在这里添加一个用户名和年龄属性，

16
00:00:53,480 --> 00:00:57,050
现在回到 App.vue

17
00:00:57,050 --> 00:01:00,250
并导入此用户数据组件

18
00:01:00,250 --> 00:01:05,250
来自 ./components/UserData.vue，

19
00:01:09,480 --> 00:01:13,130
并使用 components 选项注册它。

20
00:01:13,130 --> 00:01:16,460
正如我之前提到的，你仍然有这个选择，

21
00:01:16,460 --> 00:01:18,530
这不会进入设置方法，

22
00:01:18,530 --> 00:01:20,580
你把你的选择留在这里。

23
00:01:20,580 --> 00:01:23,750
所以我们在这里注册UserData，这个新组件，

24
00:01:23,750 --> 00:01:26,320
然后我们可以在这里使用它，

25
00:01:26,320 --> 00:01:30,490
用户数据，打开和关闭，

26
00:01:30,490 --> 00:01:33,610
并绑定这些道具，用户名和年龄。

27
00:01:38,110 --> 00:01:43,110
我会将 userName 绑定到我的 userName 计算参考，

28
00:01:44,150 --> 00:01:48,060
在返回对象中暴露在这里

29
00:01:48,060 --> 00:01:52,870
到模板，并将年龄绑定到这个年龄参考，

30
00:01:52,870 --> 00:01:54,263
我们也暴露了。

31
00:01:55,730 --> 00:01:59,823
因此，正如你所知道的，这一切都是有效的。

32
00:02:02,460 --> 00:02:06,300
但是，也许我们想在这个组件中做更多的事情。

33
00:02:06,300 --> 00:02:10,669
也许在这里我们也想使用设置方法，

34
00:02:10,669 --> 00:02:13,500
因为也许我们没有得到这样的用户名，

35
00:02:13,500 --> 00:02:18,340
但是我们将名字和姓氏分开，

36
00:02:18,340 --> 00:02:21,000
我们想在 setup 方法中计算它。

37
00:02:21,000 --> 00:02:24,410
好吧，首先，我们也许不使用 setup 方法，

38
00:02:24,410 --> 00:02:26,980
但是一个很好的旧计算选项。

39
00:02:26,980 --> 00:02:30,050
所以让我们在这里使用 Options API。

40
00:02:30,050 --> 00:02:33,170
然后我们可以有一个 userName 计算属性，

41
00:02:33,170 --> 00:02:35,510
因为这就是我在模板中使用的，

42
00:02:35,510 --> 00:02:39,827
并简单地返回这个点名+空白，

43
00:02:39,827 --> 00:02:44,180
+ 这个点姓氏，对吗？

44
00:02:44,180 --> 00:02:45,680
这就是我们如何做到这一点

45
00:02:45,680 --> 00:02:49,040
在常规组件中，使用 Options API，

46
00:02:49,040 --> 00:02:51,600
如果我们得到两个道具，我们想合并它

47
00:02:51,600 --> 00:02:53,063
到一个计算的道具中。

48
00:02:54,470 --> 00:02:57,720
现在，我们只需要绑定名字和姓氏。

49
00:02:57,720 --> 00:03:02,720
所以在 App.vue 中，我现在绑定名字和姓氏，

50
00:03:04,130 --> 00:03:08,240
并且这里的值应该是我的 firstName ref

51
00:03:08,240 --> 00:03:10,970
和我的姓氏参考。

52
00:03:10,970 --> 00:03:13,610
我们现在需要确保两者都暴露

53
00:03:13,610 --> 00:03:14,930
到模板。

54
00:03:14,930 --> 00:03:17,770
firsName ref 已经是，

55
00:03:17,770 --> 00:03:20,250
但lastName ref 不再存在。

56
00:03:20,250 --> 00:03:23,230
所以让我们重新将 lastName 添加到对象中，

57
00:03:23,230 --> 00:03:25,330
我们在设置中返回，

58
00:03:25,330 --> 00:03:27,803
以便在模板中可用。

59
00:03:28,890 --> 00:03:33,890
现在 firstName 和 lastName 被转发给用户数据。

60
00:03:34,310 --> 00:03:39,130
如果我保存了它，那就行得通，

61
00:03:39,130​​ --> 00:03:41,800
这可能会也可能不会令人惊讶，

62
00:03:41,800 --> 00:03:44,140
但这里有一个非常重要的信息。

63
00:03:44,140 --> 00:03:49,140
您完全可以混合使用 Options 和 Composition API。

64
00:03:49,160 --> 00:03:52,820
App.vue 使用 Composition API。

65
00:03:52,820 --> 00:03:55,820
UserData.vue 使用 Options API，

66
00:03:55,820 --> 00:03:59,570
它没有任何问题，绝对没有。

67
00:03:59,570 --> 00:04:03,540
只是因为您在一个组件，

68
00:04:03,540 --> 00:04:05,560
并不意味着你必须使用它

69
00:04:05,560 --> 00:04:08,080
在所有组件中，它都是可选的。

70
00:04:08,080 --> 00:04:11,800
您可以在任何对您有意义的地方使用它。

71
00:04:11,800 --> 00:04:15,700
所以，使用 Options API 绝对没问题

72
00:04:15,700 --> 00:04:19,072
因此这里是计算选项，在 UserData 中。

73
00:04:20,470 --> 00:04:23,210
你会看到那些 ref 值

74
00:04:23,210 --> 00:04:25,440
被 Vue 正确提取，

75
00:04:25,440 --> 00:04:29,733
并作为名字和姓氏道具的值转发。

76
00:04:30,710 --> 00:04:33,270
尽管如此，即使我们不必这样做，

77
00:04:33,270 --> 00:04:36,800
假设我们想迁移到 Composition API

78
00:04:36,800 --> 00:04:38,820
UserData 内部也是如此。

79
00:04:38,820 --> 00:04:41,400
所以，而不是在这里使用计算，

80
00:04:41,400 --> 00:04:46,400
我们像这样从 Vue 框架导入计算，

81
00:04:47,760 --> 00:04:50,463
然后我们添加我们的设置方法。

82
00:04:51,460 --> 00:04:55,720
在这里，我们得到了我们的 uName，比方说，

83
00:04:55,720 --> 00:04:57,640
当然，这个名字取决于你。

84
00:04:57,640 --> 00:05:00,900
我们通过调用计算得到它

85
00:05:00,900 --> 00:05:03,350
并将函数传递给计算，

86
00:05:03,350 --> 00:05:07,660
我们现在返回的地方，以及返回什么？

87
00:05:07,660 --> 00:05:09,980
我们想在这里访问我们的道具，

88
00:05:09,980 --> 00:05:11,587
名字和姓氏。

89
00:05:12,570 --> 00:05:15,810
在计算选项中，我们使用 this 关键字来实现，

90
00:05:15,810 --> 00:05:18,950
但我可以告诉你，我之前告诉过你，

91
00:05:18,950 --> 00:05:22,040
这不会像那样工作。

92
00:05:22,040 --> 00:05:24,640
所以如果我们尝试使用, this, 关键字

93
00:05:24,640 --> 00:05:28,150
并在此处访问我们的道具，这是行不通的。

94
00:05:28,150 --> 00:05:29,710
我们仍然可以试一试。

95
00:05:29,710 --> 00:05:33,420
让我们在这里将用户名作为对象返回，

96
00:05:33,420 --> 00:05:36,120
并指向计算出的 uName 属性，

97
00:05:36,120 --> 00:05:39,806
以便在模板中，用户名可用，

98
00:05:39,806 --> 00:05:42,500
让我们保存它。

99
00:05:42,500 --> 00:05:46,090
你会注意到我可以重新加载并得到一个错误，

100
00:05:46,090 --> 00:05:50,120
无法读取未定义的属性 firstName。

101
00:05:50,120 --> 00:05:53,660
因此，尝试在此访问 firstName 失败，

102
00:05:53,660 --> 00:05:57,243
因为此时这是未定义的，

103
00:05:58,230 --> 00:06:01,810
因为安装程序基本上被 Vue 调用得太早了。

104
00:06:01,810 --> 00:06:03,030
在这个时间点，

105
00:06:03,030 --> 00:06:05,573
Vue 实例对象，还不存在。

106
00:06:07,470 --> 00:06:10,040
所以我们无法使用这样的道具。

107
00:06:10,040 --> 00:06:12,720
当然，我们仍然可以使用道具

108
00:06:12,720 --> 00:06:15,322
因为 setup 实际上是一种方法

109
00:06:15,322 --> 00:06:18,990
接受两个参数。

110
00:06:18,990 --> 00:06:23,170
我们在这里得到的第一个参数是 props 参数。

111
00:06:23,170 --> 00:06:25,530
这是一个装满道具的物体

112
00:06:25,530 --> 00:06:27,180
你正在进入这个组件。

113
00:06:28,020 --> 00:06:31,523
因此，您可以简单地访问 props.firstName，

114
00:06:31,523 --> 00:06:34,546
和 props.lastName，像这样。

115
00:06:34,546 --> 00:06:37,300
现在你可以随意命名这个参数，

116
00:06:37,300 --> 00:06:39,110
顺便说一句，这是你的方法。

117
00:06:39,110 --> 00:06:42,060
所以你选择的任何名字都可以，

118
00:06:42,060 --> 00:06:43,370
但我会去，道具，

119
00:06:43,370 --> 00:06:46,760
我会在整个课程中坚持使用道具。

120
00:06:46,760 --> 00:06:49,080
有了这个，如果我们保存它并重新加载，

121
00:06:49,080 --> 00:06:53,573
现在它又开始工作了，正如你所知道的。

122
00:06:55,330 --> 00:06:58,700
所以，设置方法接收这个 props 参数

123
00:06:58,700 --> 00:07:01,560
由 Vue 自动传入。

124
00:07:01,560 --> 00:07:03,930
如果你的组件没有得到任何道具，

125
00:07:03,930 --> 00:07:05,560
它只是一个空对象。

126
00:07:05,560 --> 00:07:07,480
你总会得到这个道具的东西，

127
00:07:07,480 --> 00:07:10,830
但如果你没有任何道具，它可以是空的。

128
00:07:10,830 --> 00:07:12,627
这里我们确实有三个道具，

129
00:07:12,627 --> 00:07:16,320
因此它们都是这个 props 对象的一部分。

130
00:07:16,320 --> 00:07:19,320
每当道具应该从外面改变时，

131
00:07:19,320 --> 00:07:23,260
此更改在此处全部传播到 setup 方法

132
00:07:23,260 --> 00:07:25,920
和计算，例如，将拿起

133
00:07:25,920 --> 00:07:29,710
那个道具改变了，并且会重新计算uName。

134
00:07:29,710 --> 00:07:34,710
如您所知，如果我在这里输入，它会在此处更新，

135
00:07:34,710 --> 00:07:36,970
这是在那个不同的组件中。

136
00:07:36,970 --> 00:07:40,130
因此，默认情况下，道具是反应式的，

137
00:07:40,130 --> 00:07:42,420
不是那里的个人价值观，

138
00:07:42,420 --> 00:07:44,610
但道具对象是一个整体。

139
00:07:44,610 --> 00:07:47,680
所以每当道具对象作为一个整体发生变化时，

140
00:07:47,680 --> 00:07:50,300
只要其中一个道具发生变化，就会发生这种情况，

141
00:07:50,300 --> 00:07:53,650
Vue 会注意到这一点，并将重新运行任何代码

142
00:07:53,650 --> 00:07:55,603
这取决于道具。