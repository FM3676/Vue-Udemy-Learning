1
00:00:02,100 --> 00:00:04,130
所以让我们继续下一个组件。

2
00:00:04,130 --> 00:00:05,760
假设是 UserItem。

3
00:00:05,760 --> 00:00:07,300
这是一个简单的组件。

4
00:00:07,300 --> 00:00:09,730
里面没有太多逻辑

5
00:00:09,730 --> 00:00:12,580
只是道具，自定义事件，然后是一种方法。

6
00:00:12,580 --> 00:00:13,900
所以我们当然可以

7
00:00:13,900 --> 00:00:17,630
绝对将选项 API 保留在这里，你知道吗？

8
00:00:17,630 --> 00:00:19,290
我真的会这样做，就这样。

9
00:00:19,290 --> 00:00:21,820
我想明确表示组合 API

10
00:00:21,820 --> 00:00:24,480
不是必须使用的，它很好

11
00:00:24,480 --> 00:00:26,312
使用混合和匹配组件

12
00:00:26,312 --> 00:00:29,720
同一个项目中的不同 API。

13
00:00:29,720 --> 00:00:34,040
您也可能有理由移动每个组件

14
00:00:34,040 --> 00:00:37,390
在整个项目中采用某种方法。

15
00:00:37,390 --> 00:00:38,223
但另一方面，

16
00:00:38,223 --> 00:00:40,570
你也可以争辩说没有错

17
00:00:40,570 --> 00:00:43,820
在这样一个简单的组件中使用选项 API。

18
00:00:43,820 --> 00:00:45,750
所以我会把它留在这里，但当然，

19
00:00:45,750 --> 00:00:49,200
请注意，将其迁移到组合 API

20
00:00:49,200 --> 00:00:50,493
也可以。

21
00:00:51,370 --> 00:00:53,420
但这样一来，我就完成了用户。

22
00:00:53,420 --> 00:00:55,160
让我们继续讨论 UI。

23
00:00:55,160 --> 00:00:58,800
在 BaseSearch 中，我们得到了另一个简单的组件

24
00:00:58,800 --> 00:01:00,180
和以前一样的原因

25
00:01:00,180 --> 00:01:03,220
我将在此处保留选项 API 方法。

26
00:01:03,220 --> 00:01:04,620
但是，正如我刚才所说，

27
00:01:04,620 --> 00:01:07,810
你也可以简单地迁移

28
00:01:07,810 --> 00:01:11,743
在给定项目中使用相同 API 的所有组件。

29
00:01:13,020 --> 00:01:16,390
BaseContainer 甚至没有任何脚本逻辑。

30
00:01:16,390 --> 00:01:20,260
ProjectItem.vue 也没有任何东西

31
00:01:20,260 --> 00:01:23,680
只是得到一个标题道具，所以这里没有什么要迁移的。

32
00:01:23,680 --> 00:01:27,113
这给我们留下了 ProjectList 组件。

33
00:01:27,970 --> 00:01:30,790
在这里，就像 UserList 组件一样，

34
00:01:30,790 --> 00:01:32,100
我们得到一堆逻辑，

35
00:01:32,100 --> 00:01:33,890
所以这将是最后一个组件

36
00:01:33,890 --> 00:01:38,040
我现在从选项迁移到组合 API。

37
00:01:38,040 --> 00:01:41,077
所以，像以前那样做，

38
00:01:41,077 --> 00:01:44,120
让我们在这里添加设置方法

39
00:01:44,120 --> 00:01:46,510
让我们从数据开始。

40
00:01:46,510 --> 00:01:49,300
您可能会注意到 SearchTerm 的事情。

41
00:01:49,300 --> 00:01:52,470
这基本上就是我们在 UserList.vue 文件中所做的。

42
00:01:52,470 --> 00:01:56,280
因此，我们将重复我们在那里所做的。

43
00:01:56,280 --> 00:02:01,280
我将从 Vue 导入，我将在此处导入 ref

44
00:02:01,820 --> 00:02:05,420
管理两个裁判，然后创建

45
00:02:05,420 --> 00:02:08,470
输入的SearchTerm ref，

46
00:02:08,470 --> 00:02:12,250
这是一个空字符串和 activeSearchTerm，

47
00:02:12,250 --> 00:02:14,863
这是一个最初带有空字符串的 ref。

48
00:02:16,070 --> 00:02:20,053
然后我们当然可以注释掉数据或删除它。

49
00:02:20,900 --> 00:02:22,650
现在进行计算。

50
00:02:22,650 --> 00:02:25,810
在那里，我得到了一个 hasProjects 计算属性，

51
00:02:25,810 --> 00:02:28,910
这基本上只是检查该用户是否

52
00:02:28,910 --> 00:02:30,730
有任何项目，

53
00:02:30,730 --> 00:02:34,240
我们得到了 availableProjects 计算属性。

54
00:02:34,240 --> 00:02:35,520
现在我将从

55
00:02:35,520 --> 00:02:38,380
availableProjects 计算属性。

56
00:02:38,380 --> 00:02:40,930
所以让我在这里使用计算，

57
00:02:40,930 --> 00:02:45,163
在这里导入计算和调用计算，

58
00:02:46,310 --> 00:02:51,210
将结果存储在 availableProjects 常量中

59
00:02:51,210 --> 00:02:55,150
保留该名称，然后从此处复制逻辑

60
00:02:56,570 --> 00:02:59,840
到我们传递给计算的函数中，

61
00:02:59,840 --> 00:03:03,620
我在哪里检查 activeSearchTerm 值。

62
00:03:03,620 --> 00:03:05,890
然后我想再次使用道具，

63
00:03:05,890 --> 00:03:09,240
所以我们应该再次接受这里的道具作为我们的论点，

64
00:03:09,240 --> 00:03:11,570
作为设置方法中的参数，

65
00:03:11,570 --> 00:03:15,780
这样我们就可以访问 props,user.projects。

66
00:03:15,780 --> 00:03:20,270
然后再次在这里，使用 activeSearchTerm.value

67
00:03:20,270 --> 00:03:23,460
再次，props.user.projects。

6
8
00:03:23,460 --> 00:03:26,960
有了这个，我迁移了计算属性

69
00:03:26,960 --> 00:03:29,083
到这个新的计算属性。

70
00:03:30,830 --> 00:03:33,530
所以，现在让我们继续使用 hasProjects

71
00:03:33,530 --> 00:03:36,100
与第二个计算属性。

72
00:03:36,100 --> 00:03:39,920
我已经复制了逻辑，然后简单地创建

73
00:03:39,920 --> 00:03:44,920
通过调用计算一个新的 hasProjects 计算属性，

74
00:03:47,060 --> 00:03:50,830
在我们在这里传递的函数中，

75
00:03:50,830 --> 00:03:54,230
我返回 props.user.projects，

76
00:03:54,230 --> 00:03:58,867
和 availableProjects.value.length 现在。

77
00:03:58,867 --> 00:04:02,190
.value 因为 availableProject 是一个计算属性，

78
00:04:02,190 --> 00:04:03,920
因此现在是一个裁判，

79
00:04:03,920 --> 00:04:07,083
因此我们通过访问 .value 来获取值。

80
00:04:09,330 --> 00:04:12,310
现在两个计算机属性都已迁移

81
00:04:12,310 --> 00:04:14,233
我们也可以将其注释掉。

82
00:04:15,145 --> 00:04:17,339
updateSearch 是我们必须添加的功能

83
00:04:17,339 --> 00:04:20,220
所以这应该很简单，

84
00:04:20,220 --> 00:04:22,980
功能，更新搜索，

85
00:04:22,980 --> 00:04:26,560
我只是更新输入的SearchTerm.value

86
00:04:26,560 --> 00:04:28,750
并将其设置为等于 val。

87
00:04:28,750 --> 00:04:30,720
最后但并非最不重要的一点是，

88
00:04:30,720 --> 00:04:35,720
我在这里有我的观察者，我将再次复制这个逻辑。

89
00:04:40,170 --> 00:04:42,010
之后我也有了第二个守望者，

90
00:04:42,010 --> 00:04:43,420
但我将从第一个开始。

91
00:04:43,420 --> 00:04:48,180
所以复制那个逻辑，从 Vue 导入 watch

92
00:04:50,290 --> 00:04:54,120
然后在这里添加观察者

93
00:04:54,120 --> 00:04:55,843
低于计算的属性。

94
00:04:57,130 --> 00:04:59,090
添加这个观察者，

95
00:04:59,090 --> 00:05:03,360
使用该观察者逻辑添加此功能

96
00:05:03,360 --> 00:05:06,273
并将输入的SearchTerm 添加为依赖项，

97
00:05:07,570 --> 00:05:08,460
因为最后，

98
00:05:08,460 --> 00:05:10,390
它是输入的SearchTerm 的值

99
00:05:10,390 --> 00:05:15,350
我们感兴趣，在这里我想比较一下 newValue

100
00:05:17,440 --> 00:05:19,253
到我输入的SearchTerm 值。

101
00:05:20,310 --> 00:05:23,150
所以和 UserList 组件的逻辑是一样的

102
00:05:23,150 --> 00:05:28,150
并在更改时更新 activeSearchTerm 值。

103
00:05:29,670 --> 00:05:31,150
以防万一你想知道，

104
00:05:31,150 --> 00:05:33,790
activeSearchTerm 不是这里的依赖项

105
00:05:33,790 --> 00:05:35,940
因为 changes 是一个 activeSearchTerm

106
00:05:35,940 --> 00:05:37,763
不应该触发这个观察者。

107
00:05:39,400 --> 00:05:41,820
然后我在这里有了第二个观察者。

108
00:05:41,820 --> 00:05:46,070
这个我基本上重置了输入的SearchTerm

109
00:05:46,070 --> 00:05:47,710
每当我们有新用户时。

110
00:05:47,710 --> 00:05:49,693
所以在这里，我在看用户道具。

111
00:05:50,800 --> 00:05:52,240
我这样做是为了如果我

112
00:05:52,240 --> 00:05:55,080
刚刚在这里搜索，比方说，我切换用户，

113
00:05:55,080 --> 00:05:57,240
我重置它并显示所有项目

114
00:05:57,240 --> 00:05:58,863
新选择的用户。

115
00:06:00,360 --> 00:06:02,640
所以这就是为什么我有这个观察者，

116
00:06:02,640 --> 00:06:05,410
因此，我将复制那个观察者逻辑

117
00:06:05,410 --> 00:06:10,360
并在此处添加一个新的观察者功能。

118
00:06:10,360 --> 00:06:14,280
当然，watcher 函数持有这个逻辑，

119
00:06:14,280 --> 00:06:16,960
我在哪里设置了enteredSearchTerm.value。

120
00:06:16,960 --> 00:06:20,470
但是现在依赖当然是没有进入SearchTerm，

121
00:06:20,470 --> 00:06:23,423
但和以前一样，我的用户道具。

122
00:06:25,030 --> 00:06:28,380
现在在这里，你可以做 props.user，

123
00:06:28,380 --> 00:06:30,780
但这不会像你看到的那样工作。

124
00:06:30,780 --> 00:06:33,140
但是让我们先试试这个，然后我会解释

125
00:06:33,140 --> 00:06:34,363
为什么这行不通。

126
00:06:36,150 --> 00:06:39,600
现在让我们注释掉观察者，

127
00:06:39,600 --> 00:06:42,390
并保存一切，当然，现在，

128
00:06:42,390 --> 00:06:44,880
暴露并返回模板

129
00:06:44,880 --> 00:06:46,220
我们在模板中需要什么。

130
00:06:46,220 --> 00:06:47,610
因为现在我们遇到了一个错误

131
00:06:47,610 --> 00:06:51,270
有些东西丢失或没有被使用。

132
00:06:51,270 --> 00:06:56,270
现在在模板中我们绝对需要我们的用户，

133
00:06:56,700 --> 00:06:59,900
这个用户道具，它将自动可用。

134
00:06:59,900 --> 00:07:01,980
我们不需要暴露它，因为道具，

135
00:07:01,980 --> 00:07:03,420
你会在这里分配，

136
00:07:03,420 --> 00:07:06,200
在模板中自动可用。

137
00:07:06,200 --> 00:07:07,960
这个逻辑不会改变。

138
00:07:07,960 --> 00:07:10,670
所以这里不需要暴露道具，

139
00:07:10,670 --> 00:07:13,780
但是我们需要暴露hasProjects，

140
00:07:13,780 --> 00:07:15,543
updateSearchFunction、enteredSearchTerm、

141
00:07:18,094 --> 00:07:20,570
可用的项目。

142
00:07:20,570 --> 00:07:23,550
是的，这应该是我们需要暴露的东西。

143
00:07:23,550 --> 00:07:27,960
所以输入的SearchTerm，availableProjects，

144
00:07:27,960 --> 00:07:31,467
hasProjects 和 updateSearch。

145
00:07:34,83​​0 --> 00:07:38,350
有了这个我得到 val 没有定义

146
00:07:38,350 --> 00:07:43,350
和一个不必要的分号，是的，在这个观察者中。

147
00:07:44,420 --> 00:07:47,000
我将参数重命名为 newValue，

148
00:07:47,000 --> 00:07:49,190
一些你不必做的事，但既然我做了，

149
00:07:49,190 --> 00:07:51,450
我也应该在这里重命名，

150
00:07:51,450 --> 00:07:54,190
重新格式化所有内容以摆脱多余的分号，

151
00:07:54,190 --> 00:07:55,490
我在某个地方。

152
00:07:55,490 --> 00:07:58,050
现在有负载，

153
00:07:58,050 --> 00:08:00,320
但现在我在这里收到错误或警告，

154
00:08:00,320 --> 00:08:02,623
无效的监视源，null。

155
00:08:04,860 --> 00:08:08,553
这来自我观察我的用户的观察者。

156
00:08:09,930 --> 00:08:12,080
我提到这行不通。

157
00:08:12,080 --> 00:08:15,880
在此处钻取道具以访问用户的问题

158
00:08:15,880 --> 00:08:19,230
是我们基本上是在钻入一个反应对象

159
00:08:19,230 --> 00:08:22,710
然后观察一个非反应值。

160
00:08:22,710 --> 00:08:24,090
最初用户为空

161
00:08:24,090 --> 00:08:26,283
因为最初没有选择用户。

162
00:08:27,290 --> 00:08:31,300
现在我们正在观看 null，这对 Vue 来说毫无意义。

163
00:08:31,300 --> 00:08:34,200
相反，我们需要观察一些反应性的东西。

164
00:08:34,200 --> 00:08:36,980
一个 ref 或一个反应对象。

165
00:08:36,980 --> 00:08:39,059
Props 是一个反应对象，

166
00:08:39,059 --> 00:08:41,659
但就像我们之前在模块中一样，

167
00:08:41,659 --> 00:08:46,050
props 内部的值不是响应式的，也不是 refs。

168
00:08:46,050 --> 00:08:49,770
因此，我们应该在这里整体观看道具。

169
00:08:49,770 --> 00:08:54,073
如果我们这样做并重新加载，现在就可以了。

170
00:08:55,180 --> 00:08:56,643
现在当然，这很好

171
00:08:56,643 --> 00:08:58,810
因为我们只有一个道具，

172
00:08:58,810 --> 00:09:02,264
但如果你有多个道具，它们可以改变，

173
00:09:02,264 --> 00:09:05,600
你会遇到的问题是你的观察者

174
00:09:05,600 --> 00:09:09,673
每当任何道具更改时运行，而不仅仅是用户道具。

175
00:09:10,770 --> 00:09:13,040
所以如果你想处理这个，

176
00:09:13,040 --> 00:09:14,930
这在这里又是不必要的，

177
00:09:14,930 --> 00:09:16,530
因为我们只有一个道具，

178
00:09:16,530 --> 00:09:18,490
但如果你想确定只有

179
00:09:18,490 --> 00:09:21,540
用户的变化触发了这个观察者，

180
00:09:21,540 --> 00:09:25,010
您可以使用 Vue 提供的功能。

181
00:09:25,010 --> 00:09:27,750
我们可以使用两个 refs 函数，

182
00:09:27,750 --> 00:09:30,790
我们在本模块前面也看到了，

183
00:09:30,790 --> 00:09:35,163
在这个可选的、深潜、反应性、深潜讲座中，

184
00:09:37,230 --> 00:09:41,160
我们可以在 props 上调用两个 refs。

185
00:09:41,160 --> 00:09:46,160
现在我们得到了带有 refs 对象的道具，你可以说，

186
00:09:46,520 --> 00:09:50,627
从那里我们可以像这样提取我们的用户，

187
00:09:52,990 --> 00:09:57,990
或者使用更现代、更短的语法，

188
00:09:58,490 --> 00:10:01,527
像这样使用对象解构，

189
00:10:04,950 --> 00:10:09,410
这将从该道具对象中提取用户密钥。

190
00:10:09,410 --> 00:10:11,323
现在因为有两个裁判，

191
00:10:11,323 --> 00:10:14,030
那将是一个参考，然后将其存储

192
00:10:14,030 --> 00:10:15,570
在同名常量中。

193
00:10:15,570 --> 00:10:18,220
现在我们可以在这里添加用户作为依赖项，

194
00:10:18,220 --> 00:10:22,193
现在多亏了两个裁判，这将是一个裁判。

195
00:10:23,230 --> 00:10:25,620
如果您不想看，这是另一种选择

196
00:10:25,620 --> 00:10:28,100
所有道具，但只有一个道具。

197
00:10:28,100 --> 00:10:29,210
有点高级，

198
00:10:29,210 --> 00:10:31,503
但我希望很清楚我们为什么要这样做。

199
00:10:32,600 --> 00:10:35,280
有了这个，如果我重新加载，这有效。

200
00:10:35,280 --> 00:10:37,570我可以切换到不同的用户。
201

00:10:37,570 --> 00:10:39,100
在这里搜索有效。

202
00:10:39,100 --> 00:10:41,913
重置，如果我切换了用户所有的作品，

203
00:10:44,040 --> 00:10:46,440
总的来说，

204
00:10:46,440 --> 00:10:49,430
看起来我们能够

205
00:10:49,430 --> 00:10:51,440
好吧，让这个应用程序工作。

206
00:10:51,440 --> 00:10:54,791
看起来我们成功迁移了这个应用程序

207
00:10:54,791 --> 00:10:59,440
从选项 API 队列到组合 API。

208
00:10:59,440 --> 00:11:01,850
希望这不仅仅是向您展示

209
00:11:01,850 --> 00:11:04,830
为什么组合 API 可能会更好，

210
00:11:04,830 --> 00:11:07,670
特别是对于像 userList 这样的大型组件，

211
00:11:07,670 --> 00:11:10,580
但它也希望现在能帮助你理解

212
00:11:10,580 --> 00:11:12,870
组合 API 的工作原理

213
00:11:12,870 --> 00:11:16,913
以及如何在您的下一个项目中使用它（如果您愿意）。

214
00:11:17,990 --> 00:11:20,760
我只想快点回到一件事上，

215
00:11:20,760 --> 00:11:22,880
这就是第二个论点

216
00:11:22,880 --> 00:11:25,290
用于使用组合 API。

217
00:11:25,290 --> 00:11:28,760
我提到跨组件重用逻辑

218
00:11:28,760 --> 00:11:32,130
可能很棘手或繁琐，可能更容易

219
00:11:32,130 --> 00:11:34,280
使用组合 API 时。

220
00:11:34,280 --> 00:11:36,960
好吧，这是我们不打算看的东西

221
00:11:36,960 --> 00:11:40,310
在这个模块中，而是在下一个模块中，

222
00:11:40,310 --> 00:11:44,430
一般而言，这将是关于重用代码和逻辑，

223
00:11:44,430 --> 00:11:46,570
不仅仅是组合 API，

224
00:11:46,570 --> 00:11:49,100
但仍然使用选项 API，

225
00:11:49,100 --> 00:11:52,380
因为组合 API 只是一种选择，

226
00:11:52,380 --> 00:11:54,023
不是必须使用。