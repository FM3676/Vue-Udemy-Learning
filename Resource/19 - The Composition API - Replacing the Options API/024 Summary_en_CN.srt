1
00:00:02,240 --> 00:00:03,640
现在就是这样

2
00:00:03,640 --> 00:00:05,320
这个非常彻底的介绍

3
00:00:05,320 --> 00:00:07,020
到组合 API。

4
00:00:07,020 --> 00:00:08,180
我们会看到更多

5
00:00:08,180 --> 00:00:09,680
在整个课程的其余部分

6
00:00:09,680 --> 00:00:11,430
但是有了这个模块，你应该有

7
00:00:11,430 --> 00:00:16,309
对 Composition API 的第一个全面了解。

8
00:00:16,309 --> 00:00:19,280
好吧，它是关于什么的，我们为什么拥有它？

9
00:00:19,280 --> 00:00:21,410
首先，正如我多次强调的，

10
00:00:21,410 --> 00:00:22,350
在整个模块中，

11
00:00:22,350 --> 00:00:24,680
它是选项 API 的替代方案。

12
00:00:24,680 --> 00:00:26,920
如果你不喜欢它，你不必使用它

13
00:00:26,920 --> 00:00:29,870
或者如果它对您的项目没有意义

14
00:00:29,870 --> 00:00:31,260
但你可以使用它，

15
00:00:31,260 --> 00:00:34,310
然后你将使用你看到的设置方法，

16
00:00:34,310 --> 00:00:37,720
向模板公开逻辑和数据

17
00:00:37,720 --> 00:00:40,250
以及 Composition API 背后的理念

18
00:00:40,250 --> 00:00:42,270
是它基于功能。

19
00:00:42,270 --> 00:00:45,140
您拥有从 Vue 导入的所有功能，

20
00:00:45,140 --> 00:00:48,040
比如 ref、react、compute 等等。

21
00:00:48,040 --> 00:00:50,160
全部用于该设置方法，

22
00:00:50,160 --> 00:00:52,440
这可以让你保留代码

23
00:00:52,440 --> 00:00:55,790
合乎逻辑地聚集在一个地方

24
00:00:55,790 --> 00:00:58,793
而不是将其拆分为多个选项。

25
00:00:59,750 --> 00:01:01,610
当然，数据和反应性，

26
00:01:01,610 --> 00:01:04,660
总的来说是Vue中的一个重要概念

27
00:01:04,660 --> 00:01:08,400
当然，它们也可以在 Composition API 中找到

28
00:01:08,400 --> 00:01:11,250
在这里我们可以将数据作为 refs 进行管理。

29
00:01:11,250 --> 00:01:14,970
因此，作为单个值或在 ref 中的对象，

30
00:01:14,970 --> 00:01:17,160
或者我们使用反应函数

31
00:01:17,160 --> 00:01:19,340
创建反应对象。

32
00:01:19,340 --> 00:01:20,990
我谈到了差异

33
00:01:20,990 --> 00:01:22,580
以及如何使用这些值

34
00:01:22,580 --> 00:01:25,113
在本模块中深入了解。

35
00:01:26,140 --> 00:01:28,410
反应性是一个关键概念

36
00:01:28,410 --> 00:01:30,570
和最重要的收获之一

37
00:01:30,570 --> 00:01:34,465
真的是你可以创建反应式引用或对象

38
00:01:34,465 --> 00:01:37,370
但是它们的嵌套属性

39
00:01:37,370 --> 00:01:39,870
不一定是反应性的。

40
00:01:39,870 --> 00:01:42,743
正如我在整个模块中所强调的那样。

41
00:01:44,830 --> 00:01:46,930
现在数据和反应性是一个关键概念

42
00:01:46,930 --> 00:01:48,350
但当然，不是一切。

43
00:01:48,350 --> 00:01:51,060
我们也有方法，计算和观察者，

44
00:01:51,060 --> 00:01:53,000
使用选项 API 时，

45
00:01:53,000 --> 00:01:54,610
在组合 API 中，

46
00:01:54,610 --> 00:01:56,700
方法成为常规函数

47
00:01:56,700 --> 00:01:58,550
您在设置方法中定义的

48
00:01:58,550 --> 00:02:00,770
然后您可以将其暴露给模板

49
00:02:00,770 --> 00:02:03,466
通过在您返回的那个对象中返回它

50
00:02:03,466 --> 00:02:05,640
在设置方法中，

51
00:02:05,640 --> 00:02:08,770
然后你也有计算属性和观察者

52
00:02:08,770 --> 00:02:12,020
用这些导入的函数定义的

53
00:02:12,020 --> 00:02:14,123
您从 Vue 框架导入的。

54
00:02:15,430 --> 00:02:18,780
现在，如果我们仔细看看这个设置函数

55
00:02:18,780 --> 00:02:21,340
或我们定义的设置方法

56
00:02:21,340 --> 00:02:23,652
我们的组件冲突对象，

57
00:02:23,652 --> 00:02:26,850
这个设置函数，或者这个设置方法，

58
00:02:26,850 --> 00:02:30,400
由 Vue 调用，当组件创建时，

59
00:02:30,400 --> 00:02:34,000
并在那里定义所有数据和逻辑

60
00:02:34,000 --> 00:02:35,230
对于这个组件，

61
00:02:35,230 --> 00:02:37,910
最重要的是模板。

62
00:02:37,910 --> 00:02:39,660
所以你在设置中返回的

63
00:02:39,660 --> 00:02:42,830
如您所学，在模板中可用。

64
00:02:42,830 --> 00:02:45,830
在 setup 本身中，所有的都接收两个参数

65
00:02:45,830 --> 00:02:48,460
由 Vue 自动传递

66
00:02:48,460 --> 00:02:50,630
当它为您调用设置时，

67
00:02:50,630 --> 00:02:53,720
那就是反应性道具对象

68
00:02:53,720 --> 00:02:56,640
使用您为此组件获得的所有道具

69
00:02:56,640 --> 00:03:00,450
和这个上下文 obj等通过道具坠落，

70
00:03:00,450 --> 00:03:03,550
那些带有槽数据的属性，

71
00:03:03,550 --> 00:03:05,320
并使用此发射功能

72
00:03:05,320 --> 00:03:07,933
您可以使用它来发出自定义事件。