1
00:00:02,070 --> 00:00:03,380
现在在我们深入挖掘之前

2
00:00:03,380 --> 00:00:05,010
进入组合 API，

3
00:00:05,010 --> 00:00:07,930
这是一个可选的讲座

4
00:00:07,930 --> 00:00:10,870
我真的想强调这一点，它是可选的。

5
00:00:10,870 --> 00:00:12,830
你现在可以跳过这个讲座，

6
00:00:12,830 --> 00:00:14,020
继续其余的

7
00:00:14,020 --> 00:00:15,683
稍后再回来。

8
00:00:16,580 --> 00:00:20,060
我想进一步探索这个反应性概念

9
00:00:20,060 --> 00:00:22,070
确保我们都在同一个页面上

10
00:00:22,070 --> 00:00:25,280
这里没有未解决的问题。

11
00:00:25,280 --> 00:00:26,800
我希望我能说清楚，

12
00:00:26,800 --> 00:00:28,600
ref 和 reactive 是如何工作的，

13
00:00:28,600 --> 00:00:30,080
他们非常相似

14
00:00:30,080 --> 00:00:31,600
但我也可以说清楚

15
00:00:31,600 --> 00:00:33,380
有什么区别。

16
00:00:33,380 --> 00:00:35,620
我将两者都锁定到控制台

17
00:00:35,620 --> 00:00:37,490
我会在这里再做一次

18
00:00:37,490 --> 00:00:40,200
以这里的年龄为例

19
00:00:40,200 --> 00:00:43,210
以便我们再次看到差异。

20
00:00:43,210 --> 00:00:44,860
所以我正在记录 uAge

21
00:00:44,860 --> 00:00:45,920
这是一个参考

22
00:00:45,920 --> 00:00:48,280
和作为反应对象的用户

23
00:00:50,770 --> 00:00:53,940
我需要为此再次导入 ref

24
00:00:54,920 --> 00:00:55,790
如果我这样做，

25
00:00:55,790 --> 00:00:57,010
如果我保存这个

26
00:00:58,110 --> 00:00:59,840
我重新加载，

27
00:00:59,840 --> 00:01:01,200
这是我们的日志。

28
00:01:01,200 --> 00:01:02,320
这里的第一个，

29
00:01:02,320 --> 00:01:03,660
那是我们的参考，

30
00:01:03,660 --> 00:01:05,970
你会看到它是一个带有 value 属性的对象

31
00:01:05,970 --> 00:01:07,220
在那个价值道具中

32
00:01:07,220 --> 00:01:08,520
号码已存储

33
00:01:09,720 --> 00:01:11,880
我们有 getter 和 setter。

34
00:01:11,880 --> 00:01:13,710
对象，反应对象

35
00:01:13,710 --> 00:01:16,500
是一个包裹在我们对象周围的代理

36
00:01:16,500 --> 00:01:18,570
它有那些额外的处理程序

37
00:01:18,570 --> 00:01:20,950
用于处理数据更改

38
00:01:20,950 --> 00:01:22,603
以便 vue 知道它们。

39
00:01:24,450 --> 00:01:26,700
现在一个常见的错误

40
00:01:26,700 --> 00:01:29,880
或者一些难以理解的东西，

41
00:01:29,880 --> 00:01:32,910
是这些物体，

42
00:01:32,910 --> 00:01:33,910
参考对象

43
00:01:33,910 --> 00:01:37,200
并且反应对象是反应的

44
00:01:37,200 --> 00:01:39,860
但不是存储在其中的值

45
00:01:39,860 --> 00:01:41,460
这就是为什么我们必须通过

46
00:01:41,460 --> 00:01:43,560
这里的整个用户对象

47
00:01:43,560 --> 00:01:47,170
而不是名字和年龄分开的。

48
00:01:47,170 --> 00:01:48,870
再次说明这一点，

49
00:01:48,870 --> 00:01:51,720
如果我会通过用户，名称

50
00:01:51,720 --> 00:01:54,210
和模板这样的年龄，

51
00:01:54,210 --> 00:01:56,680
所以如果我在这里钻取用户对象

52
00:01:56,680 --> 00:01:59,730
我在姓名和年龄键上提供，

53
00:01:59,730 --> 00:02:01,220
如果我们这样做

54
00:02:01,220 --> 00:02:04,230
然后尝试在这里输出姓名和年龄，

55
00:02:04,230 --> 00:02:06,080
那会起作用的，

56
00:02:06,080 --> 00:02:07,610
如你所知

57
00:02:07,610 --> 00:02:09,009
但两秒钟后

58
00:02:09,009 --> 00:02:10,590
它不会更新。

59
00:02:10,590 --> 00:02:13,900
它总是留在马克西米利安 31

60
00:02:13,900 --> 00:02:16,330
以及这里所做的那些改变

61
00:02:16,330 --> 00:02:17,400
没有被捡起

62
00:02:18,310 --> 00:02:19,390
以及这样做的原因

63
00:02:19,390 --> 00:02:21,830
是整个对象是反应性的

64
00:02:21,830 --> 00:02:24,700
但这些属性中的值不是

65
00:02:24,700 --> 00:02:27,740
如果我们将这些值暴露给模板

66
00:02:27,740 --> 00:02:30,300
vue 认为只有价值观很重要

67
00:02:30,300 --> 00:02:31,890
而不是整个对象

68
00:02:31,890 --> 00:02:35,170
因此它只对这些值的更改感兴趣

69
00:02:35,170 --> 00:02:38,460
并且因为这些值不是反应对象

70
00:02:38,460 --> 00:02:39,890
而不是裁判，

71
00:02:39,890 --> 00:02:42,310
它永远不会知道这些变化。

72
00:02:42,310 --> 00:02:45,350
这就是为什么我们必须采取不同的做法

73
00:02:45,350 --> 00:02:49,340
因此我正在扭转这个回到旧代码

74
00:02:49,340 --> 00:02:51,240
我暴露整个用户的地方

75
00:02:51,240 --> 00:02:52,800
并在模板中访问它

76
00:02:54,560 --> 00:02:57,440
但现在回到这个控制台日志语句。

77
00:02:57,440 --> 00:03:00,120
到这里我们基本可以看出问题了。

78
00:03:00,120 --> 00:03:04,390
如果我控制台日志 uAge.value

79
00:03:04,390 --> 00:03:06,950
我还控制台日志 user.name

80
00:03:06,950 --> 00:03:08,273
和用户年龄。

81
00:03:09,680 --> 00:03:12,640
如果我在这里记录这三件事，

82
00:03:12,640 --> 00:03:13,690
如果我重新加载，

83
00:03:13,690 --> 00:03:15,750
你看 31 马克西米利安

84
00:03:15,750 --> 00:03:18,180
和 31 在控制台中

85
00:03:18,180 --> 00:03:21,940
这些是普通的 JavaScript 值。

86
00:03:21,940 --> 00:03:23,810
这些不是特殊对象

87
00:03:23,810 --> 00:03:28,220
因此，它们没有附加手表机制。

88
00:03:28,220 --> 00:03:31,280
这就是模板中的内容

89
00:03:31,280 --> 00:03:33,900
如果我们只返回 user.name

90
00:03:33,900 --> 00:03:36,860
或此对象中的 user.age ，

91
00:03:36,860 --> 00:03:38,150
我一秒钟前做了什么

92
00:03:39,320 --> 00:03:41,630
然后希望很清楚，

93
00:03:41,630 --> 00:03:43,520
这永远不会更改为 vue。

94
00:03:43,520 --> 00:03:44,610
这只是一个字符串，

95
00:03:44,610 --> 00:03:45,443
只是一个数字。

96
00:03:45,443 --> 00:03:46,760
它永远不会改变。

97
00:03:46,760 --> 00:03:49,870
是的，我从中提取这些值的对象，

98
00:03:49,870 --> 00:03:51,730
那个对象改变了

99
00:03:51,730 --> 00:03:54,370
但我拍了这些价值观的快照

100
00:03:54,370 --> 00:03:55,810
在改变发生之前，

101
00:03:55,810 --> 00:03:57,630
这基本上就是我在这里所做的

102
00:03:57,630 --> 00:03:58,883
这就是问题所在。

103
00:04:00,440 --> 00:04:02,740
现在 vue 这里有辅助方法

104
00:04:02,740 --> 00:04:04,580
这可以帮助我们理解

105
00:04:04,580 --> 00:04:06,400
什么是反应性的，什么不是。

106
00:04:06,400 --> 00:04:08,170
它有 isReactive

107
00:04:08,170 --> 00:04:10,540
那就是 ref 函数

108
00:04:10,540 --> 00:04:12,600
每当有反应的时候

109
00:04:12,600 --> 00:04:13,670
或者是一个参考

110
00:04:13,670 --> 00:04:15,690
当您将其暴露给模板时

111
00:04:15,690 --> 00:04:17,360
更新将被拾取。

112
00:04:17,360 --> 00:04:18,890
只要不是这样，

113
00:04:18,890 --> 00:04:20,930
不会获取更新。

114
00:04:20,930 --> 00:04:24,920
所以在这里我们可以检查 uAge.value 是否是一个 ref

115
00:04:24,920 --> 00:04:28,960
我们可以检查用户名，

116
00:04:28,960 --> 00:04:31,990
user.name 我的意思是反应

117
00:04:31,990 --> 00:04:33,330
如果我这样做，

118
00:04:33,330 --> 00:04:35,460
保存并重新加载，

119
00:04:35,460 --> 00:04:37,200
我错了两次

120
00:04:38,040 --> 00:04:39,960
这就是我一直在谈论的

121
00:04:39,960 --> 00:04:41,623
在最后几分钟左右。

122
00:04:42,810 --> 00:04:43,643
另一方面，

123
00:04:43,643 --> 00:04:45,480
如果我检查整个 uAge

124
00:04:45,480 --> 00:04:47,283
和整个用户对象，

125
00:04:48,170 --> 00:04:51,400
而不是嵌套的属性，

126
00:04:51,400 --> 00:04:53,470
我两次得到真实。

127
00:04:53,470 --> 00:04:56,080
所以每当我们暴露整个 ref

128
00:04:56,080 --> 00:04:58,030
或整个反应对象

129
00:04:58,030 --> 00:05:00,100
通过在此处返回模板

130
00:05:00,100 --> 00:05:01,800
更改将被拾取

131
00:05:01,800 --> 00:05:03,480
并反映在模板中。

132
00:05:03,480 --> 00:05:04,953
就这么简单。

133
00:05:06,690 --> 00:05:09,150
现在我将在这里删除

134
00:05:09,150 --> 00:05:11,930
但了解这些辅助方法会很有帮助

135
00:05:11,930 --> 00:05:13,294
如果你想知道

136
00:05:13,294 --> 00:05:15,263
某事是否是反应性的。

137
00:05:17,320 --> 00:05:19,850
现在其实也有办法

138
00:05:19,850 --> 00:05:22,860
制作嵌套值

139
00:05:22,860 --> 00:05:25,090
在反应对象内部

140
00:05:25,090 --> 00:05:26,530
反应性的

141
00:05:26,530 --> 00:05:29,650
或将它们转换为精确的参考。

142
00:05:29,650 --> 00:05:34,500
有一个 toRefs 函数

143
00:05:34,500 --> 00:05:36,140
您可以从 vue 导入

144
00:05:37,680 --> 00:05:40,690
而 toRefs 是一个非常简单的函数，

145
00:05:40,690 --> 00:05:42,170
你给它一个对象

146
00:05:42,170 --> 00:05:43,710
然后它会自动

147
00:05:43,710 --> 00:05:47,320
将所有属性值转换为 refs。

148
00:05:47,320 --> 00:05:49,070
因此，

149
00:05:49,070 --> 00:05:51,180
我们可以得到我们的用户参考

150
00:05:51,180 --> 00:05:52,390
通过调用 toRefs

151
00:05:53,900 --> 00:05:56,470
和传递用户，

152
00:05:56,470 --> 00:05:59,300
所以我们对它的反应对象，

153
00:05:59,300 --> 00:06:01,560
你可以顺便传入任何对象

154
00:06:02,910 --> 00:06:04,250
有了这个，

155
00:06:04,250 --> 00:06:06,040
你拿回一个对象

156
00:06:06,040 --> 00:06:07,360
哪个h 现在有了名字

157
00:06:07,360 --> 00:06:08,660
和年龄属性

158
00:06:08,660 --> 00:06:12,320
但现在那里的值将是参考。

159
00:06:12,320 --> 00:06:15,660
所以现在我可以公开 userName

160
00:06:15,660 --> 00:06:18,840
通过访问 userRefs.name

161
00:06:18,840 --> 00:06:23,090
通过访问 userRefs.age 和年龄

162
00:06:23,090 --> 00:06:24,770
我们可以使用用户名

163
00:06:24,770 --> 00:06:26,483
现在模板中的年龄，

164
00:06:27,810 --> 00:06:32,260
喜欢这个用户名和年龄

165
00:06:33,170 --> 00:06:34,710
如果我保存这个

166
00:06:34,710 --> 00:06:37,070
我收到与 uAge 相关的错误

167
00:06:38,170 --> 00:06:39,910
我不再使用

168
00:06:39,910 --> 00:06:42,270
所以如果在这里评论 uAge 真的很快

169
00:06:44,000 --> 00:06:45,890
并且 ref 现在也在使用中

170
00:06:45,890 --> 00:06:48,290
我摆脱了 ref 导入，

171
00:06:48,290 --> 00:06:50,410
它现在编译

172
00:06:50,410 --> 00:06:51,470
现在如果我重新加载

173
00:06:51,470 --> 00:06:53,410
并等待两秒钟，

174
00:06:53,410 --> 00:06:55,120
更新已反映

175
00:06:55,120 --> 00:06:58,870
因为现在不仅对象是反应性的

176
00:06:58,870 --> 00:06:59,703
但使用 toRefs

177
00:07:00,550 --> 00:07:04,480
我们还将嵌套属性包装到 refs 中

178
00:07:04,480 --> 00:07:07,590
所以现在我们也可以传递这些属性，

179
00:07:07,590 --> 00:07:10,880
这些属性值直接传递给模板

180
00:07:10,880 --> 00:07:13,430
因为现在他们是裁判

181
00:07:13,430 --> 00:07:14,600
正如我提到的

182
00:07:14,600 --> 00:07:16,630
如果你传递一个反应对象

183
00:07:16,630 --> 00:07:18,570
或模板的参考，

184
00:07:18,570 --> 00:07:21,960
然后将拾取对该值的更改

185
00:07:21,960 --> 00:07:23,800
并反映在模板中，

186
00:07:23,800 --> 00:07:25,243
否则他们不会。

187
00:07:26,910 --> 00:07:30,510
现在那是很多额外的深入研究。

188
00:07:30,510 --> 00:07:31,343
就像我说的，

189
00:07:31,343 --> 00:07:33,300
这是一个可选的讲座

190
00:07:33,300 --> 00:07:35,420
你可以稍后再回来

191
00:07:35,420 --> 00:07:37,700
如果不完全清楚，

192
00:07:37,700 --> 00:07:40,750
你不会一直需要所有这些。

193
00:07:40,750 --> 00:07:43,450
我只是一个彻底教东西的粉丝

194
00:07:43,450 --> 00:07:45,760
并深入探讨一个话题

195
00:07:45,760 --> 00:07:48,710
给你一个充分了解的机会

196
00:07:48,710 --> 00:07:50,420
幕后发生了什么

197
00:07:50,420 --> 00:07:54,330
以及为什么我们以某种方式做某事。

198
00:07:54,330 --> 00:07:55,820
然而，有了这个，

199
00:07:55,820 --> 00:07:59,040
我将在这里恢复所有代码

200
00:07:59,040 --> 00:08:00,580
因为这不重要

201
00:08:00,580 --> 00:08:02,670
为接下来的讲座

202
00:08:02,670 --> 00:08:05,180
我不想让你和它混淆

203
00:08:05,180 --> 00:08:07,433
所以让我摆脱所有这些。

204
00:08:08,300 --> 00:08:10,150
摆脱 toRefs 导入

205
00:08:10,150 --> 00:08:11,990
并返回到 user.name

206
00:08:11,990 --> 00:08:14,320
和 user.age 在模板中

207
00:08:15,570 --> 00:08:16,430
现在有了这个，

208
00:08:16,430 --> 00:08:18,100
让我们离开这个深潜

209
00:08:18,100 --> 00:08:19,720
而是看看我们能做什么

210
00:08:19,720 --> 00:08:21,463
超越数据管理。