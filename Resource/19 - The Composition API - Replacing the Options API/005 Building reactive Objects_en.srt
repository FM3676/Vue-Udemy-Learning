1
00:00:02,420 --> 00:00:04,059
So now we introduced the ref,

2
00:00:04,059 --> 00:00:06,420
which creates reactive values.

3
00:00:06,420 --> 00:00:10,140
Which are values watched by Vue where changes are picked up

4
00:00:10,140 --> 00:00:12,710
to be reflected in the template.

5
00:00:12,710 --> 00:00:14,870
Now, let's add a second value.

6
00:00:14,870 --> 00:00:16,960
Let's say, besides the username,

7
00:00:16,960 --> 00:00:19,833
we also wanna output the age year.

8
00:00:21,710 --> 00:00:25,190
So for that, we can simply create a uAge constant,

9
00:00:25,190 --> 00:00:30,190
for example, and a second ref, with a number, for example.

10
00:00:30,420 --> 00:00:35,420
And now here, I also expose age here in my object

11
00:00:36,150 --> 00:00:37,580
and I'm using age as a key

12
00:00:37,580 --> 00:00:39,983
because I'm using age here in the template.

13
00:00:40,840 --> 00:00:42,093
And the value for age is uAge.

14
00:00:44,110 --> 00:00:48,462
And if we do that, we also see the age here.

15
00:00:48,462 --> 00:00:51,410
And of course we could now also change the age year

16
00:00:51,410 --> 00:00:53,870
in our timer if we want to.

17
00:00:53,870 --> 00:00:57,640
We can assign a new value after two seconds

18
00:00:57,640 --> 00:01:00,170
so that if we reload after two seconds

19
00:01:00,170 --> 00:01:02,863
both the name and the age change.

20
00:01:04,769 --> 00:01:07,810
Now since we have two pieces of data,

21
00:01:07,810 --> 00:01:11,230
name and age, which kind of belong together,

22
00:01:11,230 --> 00:01:14,550
we could also consider grouping them together.

23
00:01:14,550 --> 00:01:18,400
So here, instead of creating two refs

24
00:01:18,400 --> 00:01:22,970
with two individual values, we could create a user,

25
00:01:22,970 --> 00:01:27,010
constant, and create a ref here which holds an object.

26
00:01:27,010 --> 00:01:30,390
And in an object we have a name, Maximilian

27
00:01:30,390 --> 00:01:32,613
and we have a age, 31.

28
00:01:33,700 --> 00:01:35,910
So now we still have a reactive value,

29
00:01:35,910 --> 00:01:39,000
but now it's a object where we grouped the data together

30
00:01:39,000 --> 00:01:41,243
instead of having two separate values.

31
00:01:42,700 --> 00:01:45,440
Now we could expose the username

32
00:01:45,440 --> 00:01:50,280
by getting it from user.value.name.

33
00:01:50,280 --> 00:01:52,840
Keep in mind, user is a ref therefore

34
00:01:52,840 --> 00:01:54,310
it has a value property

35
00:01:54,310 --> 00:01:57,190
and the value holds the actual value we stored here

36
00:01:57,190 --> 00:01:59,660
so the object with the name property.

37
00:01:59,660 --> 00:02:02,220
And here we have user.dot.value.age

38
00:02:03,210 --> 00:02:05,070
and here in setTimeout,

39
00:02:05,070 --> 00:02:08,100
instead of changing these two individual values,

40
00:02:08,100 --> 00:02:13,100
we now set user.value.name equal to Max

41
00:02:13,530 --> 00:02:16,683
and set user.value.age equal to 32.

42
00:02:17,900 --> 00:02:22,320
And if we save that and reload, we see Maximilian and 31,

43
00:02:22,320 --> 00:02:26,510
but after two seconds, nothing happens.

44
00:02:26,510 --> 00:02:28,503
The data doesn't update here.

45
00:02:30,180 --> 00:02:32,600
Well, there is a reason for that.

46
00:02:32,600 --> 00:02:36,650
When you create a ref with the ref function,

47
00:02:36,650 --> 00:02:39,670
you get an object, Vue gives you an object.

48
00:02:39,670 --> 00:02:44,670
We can see this if we console.log it here with console log,

49
00:02:45,320 --> 00:02:48,390
if I reload, that's our ref object

50
00:02:48,390 --> 00:02:50,940
and there we got this value property

51
00:02:50,940 --> 00:02:53,310
in which we actually got such a proxy.

52
00:02:53,310 --> 00:02:56,670
You might note this proxy from the behind the scenes module

53
00:02:56,670 --> 00:02:58,313
we had earlier in the course.

54
00:02:59,400 --> 00:03:01,740
We also have a getter and a setter

55
00:03:01,740 --> 00:03:04,340
on this entire ref object.

56
00:03:04,340 --> 00:03:08,160
With those, Vue keeps track of read and write access

57
00:03:08,160 --> 00:03:12,220
to the value property so that if you, for example,

58
00:03:12,220 --> 00:03:16,410
access user.value and you assign a brand new object

59
00:03:16,410 --> 00:03:18,753
Vue is able to pick up this change.

60
00:03:19,970 --> 00:03:24,970
But in addition, if you pass an object as a value to ref

61
00:03:25,360 --> 00:03:30,080
that object is also wrapped by a proxy so that Vue is

62
00:03:30,080 --> 00:03:35,080
even able to keep track of internal changes in that object.

63
00:03:35,330 --> 00:03:38,930
So for example here, when you drill into the object

64
00:03:38,930 --> 00:03:42,123
and you assign a new name and age, as we're doing it here.

65
00:03:43,580 --> 00:03:45,610
Nonetheless, as you also could see

66
00:03:45,610 --> 00:03:48,870
Vue was not able to update the screen,

67
00:03:48,870 --> 00:03:50,480
even though I'm just telling you

68
00:03:50,480 --> 00:03:53,200
that it would pick up those changes.

69
00:03:53,200 --> 00:03:57,960
The problem is, how we pass that to our template.

70
00:03:57,960 --> 00:04:01,810
Here we also drill deeply into this object

71
00:04:01,810 --> 00:04:06,010
with user dot value, we access the object stored in our ref

72
00:04:06,010 --> 00:04:08,990
and then the name and the age properties.

73
00:04:08,990 --> 00:04:11,430
And that's the problem we'll have here

74
00:04:11,430 --> 00:04:14,550
name and age, these properties in there,

75
00:04:14,550 --> 00:04:18,459
the values of name and age so all of those properties

76
00:04:18,459 --> 00:04:21,600
are just regular strings and numbers.

77
00:04:21,600 --> 00:04:25,840
These are not reactive values.

78
00:04:25,840 --> 00:04:29,720
So therefore, whilst Vue will indeed theoretically

79
00:04:29,720 --> 00:04:33,220
be possible to tell that something changed about user,

80
00:04:33,220 --> 00:04:37,800
it does not understand that we're in the end exposing user

81
00:04:37,800 --> 00:04:42,050
to our template because we're drilling into user like this.

82
00:04:42,050 --> 00:04:46,710
So all it sees is that we expose a string and a number.

83
00:04:46,710 --> 00:04:50,300
And since it doesn't track those specific values,

84
00:04:50,300 --> 00:04:52,613
it's not detecting any changes there.

85
00:04:54,470 --> 00:04:59,470
Now one thing we could do here, is we could provide

86
00:04:59,470 --> 00:05:03,330
the entire user object here.

87
00:05:03,330 --> 00:05:07,800
So our user ref under a user key to the template

88
00:05:07,800 --> 00:05:09,853
and output that there.

89
00:05:11,070 --> 00:05:15,080
If I for example add a paragraph here temporarily,

90
00:05:15,080 --> 00:05:18,600
I can output user now because we're exposing

91
00:05:18,600 --> 00:05:22,790
this user key here and if I do so,

92
00:05:22,790 --> 00:05:25,330
indeed you will see my object here and you'll see

93
00:05:25,330 --> 00:05:28,030
it also changed after two seconds.

94
00:05:28,030 --> 00:05:28,973
Here you go.

95
00:05:31,050 --> 00:05:35,997
And therefore, we could of course also output user.name

96
00:05:36,910 --> 00:05:39,490
or user.age here.

97
00:05:39,490 --> 00:05:42,900
So drill into this object here in the template

98
00:05:42,900 --> 00:05:45,160
and now it would work if I reload,

99
00:05:45,160 --> 00:05:47,200
after two seconds it updates.

100
00:05:47,200 --> 00:05:49,840
Because now I still drill into this,

101
00:05:49,840 --> 00:05:54,480
but only in the template, I pass the raw object,

102
00:05:54,480 --> 00:05:58,020
the raw ref object to the template here

103
00:05:58,020 --> 00:06:00,893
in my return statement of the setup function.

104
00:06:01,820 --> 00:06:03,940
And that is what matters to Vue.

105
00:06:03,940 --> 00:06:07,630
With that it gets this raw ref object.

106
00:06:07,630 --> 00:06:12,120
It has all the reactivity that's in this object and it knows

107
00:06:12,120 --> 00:06:14,810
when we assign a new value and it knows

108
00:06:14,810 --> 00:06:16,620
that we're using this in a template

109
00:06:16,620 --> 00:06:20,330
so then it goes ahead, finds the places in the template

110
00:06:20,330 --> 00:06:24,053
where we use this object and updates that code.

111
00:06:26,710 --> 00:06:30,020
And that is how we would use ref correctly

112
00:06:30,020 --> 00:06:34,303
with an object instead of separate values.

113
00:06:35,580 --> 00:06:38,700
But if you are working with an object,

114
00:06:38,700 --> 00:06:41,870
there actually is a better alternative to ref.

115
00:06:41,870 --> 00:06:45,460
Instead of using ref, which you could use like this.

116
00:06:45,460 --> 00:06:48,890
And of course, by the way, you could now delete all of that.

117
00:06:48,890 --> 00:06:51,660
Exposing just the user would be enough,

118
00:06:51,660 --> 00:06:56,090
but instead of using ref, you can now also import

119
00:06:56,090 --> 00:07:00,703
the reactive function, which is all provided by Vue.

120
00:07:02,070 --> 00:07:05,000
Reactive is a bit like ref,

121
00:07:05,000 --> 00:07:08,240
but it's explicitly made for objects.

122
00:07:08,240 --> 00:07:12,170
So now instead of ref, we call reactive

123
00:07:12,170 --> 00:07:15,473
and you still pass your object to reactive.

124
00:07:16,725 --> 00:07:21,490
But where ref worked with any kind of value, strings,

125
00:07:21,490 --> 00:07:26,490
numbers and objects, reactive only works with objects here.

126
00:07:27,050 --> 00:07:30,173
So you must pass an object to reactive.

127
00:07:31,320 --> 00:07:34,190
And now reactive does one important thing.

128
00:07:34,190 --> 00:07:37,270
It doesn't wrap this with an extra object

129
00:07:37,270 --> 00:07:41,010
which has a value prop, which then points at your value.

130
00:07:41,010 --> 00:07:44,710
Instead it makes this object which you passed to reactive,

131
00:07:44,710 --> 00:07:48,010
reactive by wrapping it into a proxy

132
00:07:48,010 --> 00:07:50,860
so that you can still work with this object

133
00:07:50,860 --> 00:07:55,040
as if you would have just that object without any wrapper.

134
00:07:55,040 --> 00:07:58,440
We can also see this soon when we see this console log,

135
00:07:58,440 --> 00:08:00,900
but that means that instead of accessing

136
00:08:00,900 --> 00:08:04,900
user dot value dot name and user dot value dot age,

137
00:08:04,900 --> 00:08:09,900
you now access just user dot name and user dot age.

138
00:08:12,250 --> 00:08:14,740
So we can skip this dot value step

139
00:08:14,740 --> 00:08:18,200
because there is no wrapping object with a value property.

140
00:08:18,200 --> 00:08:20,170
Since we already have an object here

141
00:08:20,170 --> 00:08:21,683
and we're using reactive.

142
00:08:22,670 --> 00:08:25,700
Now when it comes to exposing, we still expose it

143
00:08:25,700 --> 00:08:27,480
as we did it with the ref though,

144
00:08:27,480 --> 00:08:31,480
we expose the entire object, we don't drill into it

145
00:08:31,480 --> 00:08:34,789
to give Vue the entire reactive object.

146
00:08:34,789 --> 00:08:38,020
And we can now delete those other properties

147
00:08:38,020 --> 00:08:42,020
we're sharing here, and then we can use user dot name

148
00:08:42,020 --> 00:08:43,120
and user dot age.

149
00:08:43,120 --> 00:08:46,050
So just as before, the key difference is

150
00:08:46,050 --> 00:08:49,450
that we now don't have this extra wrapper object

151
00:08:49,450 --> 00:08:51,830
with the dot value property.

152
00:08:51,830 --> 00:08:54,390
So just to bring this back as a comparison

153
00:08:54,390 --> 00:08:58,930
before with those individual value refs,

154
00:08:58,930 --> 00:09:02,530
we had uName.value equal Max

155
00:09:02,530 --> 00:09:06,143
and we had uAge.value equal 32.

156
00:09:07,370 --> 00:09:11,220
Now we directly work with our object as if it would be

157
00:09:11,220 --> 00:09:15,610
a regular JavaScript object, but it's actually reactive.

158
00:09:15,610 --> 00:09:18,223
So if you save that and reload,

159
00:09:19,340 --> 00:09:22,690
we still see that it changes after two seconds.

160
00:09:22,690 --> 00:09:25,520
Now one note about our console log here,

161
00:09:25,520 --> 00:09:30,000
where I'm logging user, before it was this ref object

162
00:09:30,000 --> 00:09:31,600
with the value property

163
00:09:31,600 --> 00:09:34,240
and the getters and setters for value.

164
00:09:34,240 --> 00:09:36,840
Now it's this proxy object here instead,

165
00:09:36,840 --> 00:09:39,880
which wraps our object and which simply has

166
00:09:39,880 --> 00:09:43,800
these internal listeners to changes to our properties.

167
00:09:43,800 --> 00:09:45,400
Basically what I already covered

168
00:09:45,400 --> 00:09:47,113
in the behind the scenes module.

169
00:09:48,500 --> 00:09:51,600
And with that, I'll delete this console log

170
00:09:51,600 --> 00:09:54,620
and leave that code because that's it for now,

171
00:09:54,620 --> 00:09:57,880
when we talk about managing reactive data.

172
00:09:57,880 --> 00:10:02,880
You got refs and reactive, reactive is there for objects,

173
00:10:03,470 --> 00:10:08,080
refs are there for all kinds of values, including objects

174
00:10:08,080 --> 00:10:11,323
if you're fine with this extra dot value access.

175
00:10:12,280 --> 00:10:14,310
It's up to you which one you prefer.

176
00:10:14,310 --> 00:10:16,600
If you're dealing with an object you have the choice

177
00:10:16,600 --> 00:10:19,470
between reactive and refs, if you have anything

178
00:10:19,470 --> 00:10:23,620
but an object, like a string or a number, it's always a ref.

179
00:10:23,620 --> 00:10:26,290
It's always up to you whether you wanna group data

180
00:10:26,290 --> 00:10:29,510
together into an object or manage data stand alone

181
00:10:29,510 --> 00:10:30,980
as we did it before.

182
00:10:30,980 --> 00:10:33,710
There is no wrong or right way here,

183
00:10:33,710 --> 00:10:37,360
it depends on your preferences, the kind of data,

184
00:10:37,360 --> 00:10:39,050
what the rest of your team says

185
00:10:39,050 --> 00:10:41,563
and in general, your application of course.

186
00:10:42,400 --> 00:10:44,390
Now you know these two important

187
00:10:44,390 --> 00:10:46,440
data management concepts though,

188
00:10:46,440 --> 00:10:49,580
for reactive data, ref and reactive.

189
00:10:49,580 --> 00:10:51,730
And with that, let's dig deeper

190
00:10:51,730 --> 00:10:55,003
and let's see what else we can do with the Composition API.

