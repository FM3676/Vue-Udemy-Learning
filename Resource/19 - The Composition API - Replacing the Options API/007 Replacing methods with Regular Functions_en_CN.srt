1
00:00:02,150 --> 00:00:05,270
所以我们必须查看 ref 的单个值

2
00:00:05,270 --> 00:00:10,070
如果我们想将值组合在一起，则对对象进行反应

3
00:00:10,070 --> 00:00:12,960
并希望确保我们可以编辑属性

4
00:00:12,960 --> 00:00:16,293
就这样，仍然保持反应性。

5
00:00:17,400 --> 00:00:19,730
现在，关于 ref 和响应式已经足够了。

6
00:00:19,730 --> 00:00:21,650
我们会看到更多

7
00:00:21,650 --> 00:00:25,490
随着我们使用 Composition API 编写更多代码。

8
00:00:25,490 --> 00:00:29,250
但现在让我们回到这个简单的幻灯片。

9
00:00:29,250 --> 00:00:33,810
我们了解到使用数据选项管理的数据

10
00:00:33,810 --> 00:00:37,380
可以用 ref 和 reactive 替换。

11
00:00:37,380 --> 00:00:39,860
现在我们也有计算方法

12
00:00:39,860 --> 00:00:42,460
我提到的手表将被更换。

13
00:00:42,460 --> 00:00:45,810
所以现在让我们继续讨论这里的方法。

14
00:00:45,810 --> 00:00:50,270
为此，假设我们在此页面上有一个按钮，

15
00:00:50,270 --> 00:00:53,740
它将是一个没有特定样式的简单按钮。

16
00:00:53,740 --> 00:00:56,110
我会说改变年龄。

17
00:00:56,110 --> 00:01:00,400
当我们点击它时，我想在这里改变我的年龄。

18
00:01:00,400 --> 00:01:03,400
因此，当然，我们可以添加一个点击监听器。

19
00:01:03,400 --> 00:01:07,280
现在，通常使用 Options API，

20
00:01:07,280 --> 00:01:09,760
我们将在这里指出一种方法。

21
00:01:09,760 --> 00:01:14,760
我们会将我们的方法选项添加到这个配置对象中，

22
00:01:14,930 --> 00:01:18,540
然后设置新时代之类的东西，

23
00:01:18,540 --> 00:01:20,020
或任何这样的名字。

24
00:01:20,020 --> 00:01:25,020
如果我们在这里有年龄数据属性，

25
00:01:25,520 --> 00:01:26,960
像 31 岁一样，最初，

26
00:01:26,960 --> 00:01:31,630
例如，我们会将这个年龄设置为 32。

27
00:01:31,630 --> 00:01:34,300
这就是我们使用 Options API 的方式，

28
00:01:34,300 --> 00:01:36,843
数据和方法相结合。

29
00:01:38,010 --> 00:01:40,550
现在我们使用 Composition API，

30
00:01:40,550 --> 00:01:42,450
因此我们没有数据，

31
00:01:42,450 --> 00:01:44,340
我们不会有方法。

32
00:01:44,340 --> 00:01:47,610
但是我们怎样才能调用一个函数，

33
00:01:47,610 --> 00:01:52,080
当事件发生时调用一些要执行的代码？

34
00:01:52,080 --> 00:01:54,243
我们如何绑定点击这里？

35
00:01:55,210 --> 00:01:56,921
嗯，当然，

36
00:01:56,921 --> 00:02:00,130
我们可以访问用户年龄，

37
00:02:00,130 --> 00:02:02,180
并在此处设置一个新值。

38
00:02:02,180 --> 00:02:05,320
你可能还记得简单的 JavaScript 表达式

39
00:02:05,320 --> 00:02:09,120
像这样，是允许的，因此我们可以这样做。

40
00:02:09,120 --> 00:02:12,940
所以如果我保留这段代码，实际上删除了这个计时器，

41
00:02:12,940 --> 00:02:16,410
因为我不想再用那个来更新名字和年龄，

42
00:02:16,410 --> 00:02:18,140
所以让我们删除计时器。

43
00:02:18,140 --> 00:02:19,793
所以如果我现在保存它，

44
00:02:20,970 --> 00:02:23,610
我们有按钮，它可以工作。

45
00:02:23,610 --> 00:02:26,130
但是运行所有应该运行的代码

46
00:02:26,130 --> 00:02:29,180
在按钮点击和表单提交时，

47
00:02:29,180 --> 00:02:30,730
在这样的模板中，

48
00:02:30,730 --> 00:02:33,730
绝对不是我们想做的。

49
00:02:33,730 --> 00:02:36,870
不写太多逻辑是个好习惯

50
00:02:36,870 --> 00:02:37,910
进入模板。

51
00:02:37,910 --> 00:02:41,120
如果你考虑更复杂的例子

52
00:02:41,120 --> 00:02:42,750
比如表单提交，

53
00:02:42,750 --> 00:02:45,510
您还想验证用户输入的地方，

54
00:02:45,510 --> 00:02:47,710
并且可能显示警报等等，

55
00:02:47,710 --> 00:02:50,383
那么这绝对不是一个选择。

56
00:02:51,600 --> 00:02:54,370
相反，解决方案其实很简单，

57
00:02:54,370 --> 00:02:58,620
虽然当你第一次看到它时它可能看起来很奇怪。

58
00:02:58,620 --> 00:02:59,980
这里的设置方法，

59
00:02:59,980 --> 00:03:03,940
在 Vue 设置此组件时调用。

60
00:03:03,940 --> 00:03:06,160
它只被调用一次。

61
00:03:06,160 --> 00:03:09,960
在这个设置方法中，你基本上定义了数据，

62
00:03:09,960 --> 00:03:12,620
这应该在您的模板中可用。

63
00:03:12,620 --> 00:03:15,850
好吧，你不能只在这里定义你的数据，

64
00:03:15,850 --> 00:03:17,900
您还可以定义函数

65
00:03:17,900 --> 00:03:20,073
这应该可用于您的模板。

66
00:03:20,920 --> 00:03:22,470
我们可以在这里添加一个函数，

67
00:03:22,470 --> 00:03:24,840
设置新数据可以是名称，

68
00:03:24,840 --> 00:03:27,653
一个d 我们也可以将它暴露给模板。

69
00:03:28,520 --> 00:03:31,292
我们定义一个函数可能看起来很奇怪

70
00:03:31,292 --> 00:03:32,680
（模糊）一种方法，

71
00:03:32,680 --> 00:03:35,280
但这是常规的 JavaScript 代码。

72
00:03:35,280 --> 00:03:38,700
我们可以在函数内部创建函数。

73
00:03:38,700 --> 00:03:40,780
这绝对没问题。

74
00:03:40,780 --> 00:03:43,690
实际上，我们之前已经设置了超时，

75
00:03:43,690 --> 00:03:45,220
我们没有做任何不同的事情。

76
00:03:45,220 --> 00:03:47,590
我们还有一个函数，

77
00:03:47,590 --> 00:03:49,790
我们在这里即时创建的，

78
00:03:49,790 --> 00:03:51,690
这也只是一个功能

79
00:03:51,690 --> 00:03:53,740
找到（模糊）的设置方法。

80
00:03:54,950 --> 00:03:57,490
所以在这里定义一个函数就可以了，

81
00:03:57,490 --> 00:04:01,593
然后这个函数，我们可以设置用户年龄等于 32。

82
00:04:02,490 --> 00:04:06,260
现在的问题是，我们如何公开这个函数，

83
00:04:06,260 --> 00:04:09,513
到模板，以便我们可以将它绑定到这个点击事件？

84
00:04:10,770 --> 00:04:13,330
好吧，就像我们公开数据一样，

85
00:04:13,330 --> 00:04:15,810
我们可以添加一个新的键值对，

86
00:04:15,810 --> 00:04:19,589
到我们在 setup 方法中返回的这个对象

87
00:04:19,589 --> 00:04:22,130
并且，例如，有一个设置的 H 键，

88
00:04:22,130 --> 00:04:25,030
并指向设置新数据。

89
00:04:25,030 --> 00:04:29,963
或者设置新时代，也可以在这里更改名称。

90
00:04:31,440 --> 00:04:33,830
而且我没有在这里执行该功能，

91
00:04:33,830 --> 00:04:35,170
我只是指着它。

92
00:04:35,170 --> 00:04:38,740
所以我在这个函数上存储了一个指针，

93
00:04:38,740 --> 00:04:43,110
在此返回的对象中设置年龄属性。

94
00:04:43,110 --> 00:04:44,670
而这个返回的对象

95
00:04:44,670 --> 00:04:49,400
简单地保存您可以在模板中使用的所有内容。

96
00:04:49,400 --> 00:04:52,410
那可能是数据，比如我们的用户对象，

97
00:04:52,410 --> 00:04:55,073
但它也可能是函数的指针。

98
00:04:56,150 --> 00:04:58,370
所以现在我们将 H 设置为这里的键，

99
00:04:58,370 --> 00:05:03,263
因此，我们可以在这里绑定或点击事件来设置年龄。

100
00:05:04,630 --> 00:05:08,490
然后这将触发 set new age 功能

101
00:05:08,490 --> 00:05:10,673
我们指向设定的年龄。

102
00:05:11,650 --> 00:05:15,020
因此，如果我保存它并重新加载，

103
00:05:15,020 --> 00:05:17,300
我们仍然可以改变年龄，

104
00:05:17,300 --> 00:05:19,740
但现在有了这个暴露的功能。

105
00:05:19,740 --> 00:05:21,020
这真的很简单，

106
00:05:21,020 --> 00:05:24,560
但这就是你公开函数的方式

107
00:05:24,560 --> 00:05:26,860
您通常绑定到点击事件，

108
00:05:26,860 --> 00:05:30,130
但你也可以执行，就像那样，

109
00:05:30,130 --> 00:05:32,900
例如插值之间。

110
00:05:32,900 --> 00:05:36,330
这就是您将它们暴露给您的模板的方式。

111
00:05:36,330 --> 00:05:40,010
您在设置中定义它们并将它们返回到您的对象中。

112
00:05:40,010 --> 00:05:42,710
最终，这就是你对方法的替代品，

113
00:05:42,710 --> 00:05:44,670
就那么简单。

114
00:05:44,670 --> 00:05:48,250
当然，它不仅仅适用于响应式对象，

115
00:05:48,250 --> 00:05:51,810
但如果我们回到使用 refs，

116
00:05:51,810 --> 00:05:53,760
所以如果我扭转这一切

117
00:05:53,760 --> 00:05:56,240
我回到你的名字和你的年龄

118
00:05:56,240 --> 00:05:59,180
并且有两个 refs 而不是一个对象，

119
00:05:59,180 --> 00:06:04,180
那么当然我们也可以在这里更新我们的数据。

120
00:06:04,200 --> 00:06:07,713
例如，U 年龄值等于 33。

121
00:06:08,600 --> 00:06:10,450
现在我们只需要改变

122
00:06:10,450 --> 00:06:12,129
我们暴露给模板的代码，

123
00:06:12,129 --> 00:06:15,990
因为我回到使用两个单独的值。

124
00:06:15,990 --> 00:06:17,580
所以现在我们可以再次暴露，

125
00:06:17,580 --> 00:06:21,003
让我们说一个用户名和一个年龄，就像这样。

126
00:06:22,470 --> 00:06:26,000
暴露这里定义的这两个 refs，

127
00:06:26,000 --> 00:06:27,710
其中一个在这里发生了变化，

128
00:06:27,710 --> 00:06:29,450
通过 value 属性，

129
00:06:29,450 --> 00:06:31,510
正如您所了解的，Vue 正在观看。

130
00:06:31,510 --> 00:06:34,370
然后在模板中，我们可以使用用户名，

131
00:06:34,370 --> 00:06:37,220
和年龄来输出两者。

132
00:06:37,220 --> 00:06:39,340
所以用户名，

133
00:06:39,340 --> 00:06:41,173
和这里的年龄。

134
00:06:42,350 --> 00:06:43,910
有了这个，

135
00:06:43,910 --> 00:06:47,150
如果我们保存它，它仍然有效，

136
00:06:47,150 --> 00:06:49,253
一个nd更新也仍然有效。

137
00:06:50,200 --> 00:06:52,710
这就是我们可以替换方法的方式。

138
00:06:52,710 --> 00:06:57,040
当然你可以定义和返回尽可能多的函数

139
00:06:57,040 --> 00:06:59,803
正如您的组件在模板中可能需要的那样。