1
00:00:02,220 --> 00:00:04,500
所以现在我们开始使用 ReFS

2
00:00:04,500 --> 00:00:08,443
反应式和替换方法的功能。

3
00:00:09,370 --> 00:00:11,520
计算属性呢？

4
00:00:11,520 --> 00:00:13,880
我们怎样才能取代那些？

5
00:00:13,880 --> 00:00:17,450
再一次，让我们在这里稍微扩展一下我们的示例。

6
00:00:17,450 --> 00:00:21,660
假设我们实际上不仅要更改年龄按钮，

7
00:00:21,660 --> 00:00:25,530
但我们在更改年龄按钮下方有一个 div。

8
00:00:25,530 --> 00:00:28,780
在那里我们有两个输入。

9
00:00:28,780 --> 00:00:30,603
这里的第一个输入，

10
00:00:32,290 --> 00:00:35,090
是名字。

11
00:00:35,090 --> 00:00:39,070
第二个输入是姓氏。

12
00:00:39,070 --> 00:00:43,150
我想使用这里输入的值

13
00:00:43,150 --> 00:00:44,700
输出我的用户名。

14
00:00:44,700 --> 00:00:46,230
应该结合哪个

15
00:00:46,230 --> 00:00:48,710
从名字和姓氏。

16
00:00:48,710 --> 00:00:51,170
现在让我们看看如何实现这一点。

17
00:00:51,170 --> 00:00:54,400
首先，我将在这里添加两个 ReFS。

18
00:00:54,400 --> 00:00:58,000
我将添加一个名字，参考，

19
00:00:58,000 --> 00:00:59,803
最初是一个空字符串。

20
00:01:01,480 --> 00:01:05,170
还有一个姓氏参考，最初也是空的。

21
00:01:05,170 --> 00:01:07,830
当然你可以有不同的默认值，

22
00:01:07,830 --> 00:01:09,773
但我将从空字符串开始。

23
00:01:11,600 --> 00:01:14,810
现在我想更新 firstName

24
00:01:14,810 --> 00:01:17,120
每当我们输入这个输入时，

25
00:01:17,120 --> 00:01:20,600
和姓氏，每当我们输入此输入时。

26
00:01:20,600 --> 00:01:22,440
我们将看看双向绑定

27
00:01:22,440 --> 00:01:24,210
和V模型在一秒钟内，

28
00:01:24,210 --> 00:01:25,870
目前我会手动完成

29
00:01:25,870 --> 00:01:29,300
通过听，在输入。

30
00:01:29,300 --> 00:01:31,223
所以通过监听输入事件。

31
00:01:32,270 --> 00:01:35,800
现在我想在这个事件发生时触发一些代码

32
00:01:35,800 --> 00:01:38,350
因此我实际上会添加一个新功能

33
00:01:39,289 --> 00:01:44,289
setFirstName 我得到默认事件对象的地方。

34
00:01:44,330 --> 00:01:47,550
然后我想在哪里 setFirstName 点值，

35
00:01:47,550 --> 00:01:50,320
所以 firstName ref 的值

36
00:01:50,320 --> 00:01:52,453
等于事件目标值。

37
00:01:54,010 --> 00:01:57,060
并为 lastName 做同样的事情

38
00:01:57,060 --> 00:02:00,060
setLastName 获取事件

39
00:02:00,060 --> 00:02:02,260
并设置姓氏点值

40
00:02:02,260 --> 00:02:04,653
等于事件目标值。

41
00:02:06,860 --> 00:02:09,759
现在我们可以公开这两个函数

42
00:02:09,759 --> 00:02:11,773
通过这个对象到模板。

43
00:02:14,562 --> 00:02:18,210
SetFirstName 指向 setFirstName。

44
00:02:18,210 --> 00:02:20,690
在这里，我使用相同的名称作为密钥

45
00:02:20,690 --> 00:02:24,330
就像我对保存函数的变量所做的那样。

46
00:02:24,330 --> 00:02:27,780
因此我们可以使用现代 JavaScript 速记，

47
00:02:27,780 --> 00:02:29,700
只用一次这个名字，

48
00:02:29,700 --> 00:02:31,950
这将自动展开

49
00:02:31,950 --> 00:02:34,410
JavaScript 的这种更长的语法。

50
00:02:34,410 --> 00:02:38,290
这只是为我们节省了一些我们不必输入的代码

51
00:02:38,290 --> 00:02:40,330
和 setLastName 一样。

52
00:02:40,330 --> 00:02:42,945
所以现在这些函数 setFirstName

53
00:02:42,945 --> 00:02:44,460
和 setLastName 被暴露

54
00:02:44,460 --> 00:02:46,873
在模板的这些标识符下。

55
00:02:48,380 --> 00:02:51,270
所以我们可以在这里绑定它们

56
00:02:51,270 --> 00:02:54,440
在第一个输入我们在 setFirstName 的点上，

57
00:02:54,440 --> 00:02:56,690
在第二个中，我将指向 setLastName。

58
00:02:59,160 --> 00:03:02,120
调用这些函数就像你学到的一样

59
00:03:02,120 --> 00:03:03,840
您可以手动调用它们，

60
00:03:03,840 --> 00:03:06,540
您可以手动转发事件对象，

61
00:03:06,540 --> 00:03:08,580
或者你只是指着他们，

62
00:03:08,580 --> 00:03:11,380
并让视图为您执行这些功能

63
00:03:11,380 --> 00:03:14,470
为您传递默认事件对象

64
00:03:14,470 --> 00:03:16,200
当这些事件发生时。

65
00:03:16,200 --> 00:03:19,470
所以关于事件监听和你如何调用函数

66
00:03:19,470 --> 00:03:20,913
没有改变。

67
00:03:22,490 --> 00:03:24,720
但是现在我们有了这两个输入，

68
00:03:24,720 --> 00:03:26,634
我们正在更新 firstName

69
00:03:26,634 --> 00:03:28,950
和 lastName 每次击键。

70
00:03:28,950 --> 00:03:31,550
不w，我不再需要 uName，

71
00:03:31,550 --> 00:03:35,010
相反，现在我想要一个计算的用户名，

72
00:03:35,010 --> 00:03:37,740
这是基于名字和姓氏

73
00:03:37,740 --> 00:03:40,510
因此应该首先更新

74
00:03:40,510 --> 00:03:42,910
和姓氏更改。

75
00:03:42,910 --> 00:03:44,500
现在，你可能猜到了，

76
00:03:44,500 --> 00:03:48,440
我们不会通过添加计算选项来做到这一点。

77
00:03:48,440 --> 00:03:51,060
这就像我们过去会做的那样，

78
00:03:51,060 --> 00:03:53,700
但这不是我们将要这样做的方式了。

79
00:03:53,700 --> 00:03:56,240
相反，我们将编写更多代码

80
00:03:56,240 --> 00:03:58,180
在设置方法中。

81
00:03:58,180 --> 00:03:59,163
但是哪个代码？

82
00:04:00,040 --> 00:04:02,030
嗯，还有一个功能

83
00:04:02,030 --> 00:04:04,570
我们可以从视图框架中导入。

84
00:04:04,570 --> 00:04:07,830
这就是计算函数。

85
00:04:07,830 --> 00:04:11,683
它已经清楚地暗示了我们会做什么。

86
00:04:12,520 --> 00:04:17,110
您在设置函数中调用计算，

87
00:04:17,110 --> 00:04:20,560
然后计算一次函数

88
00:04:21,610 --> 00:04:23,380
作为论据。

89
00:04:23,380 --> 00:04:26,310
它是保存计算逻辑的函数。

90
00:04:26,310 --> 00:04:27,780
所以基本上你有什么

91
00:04:27,780 --> 00:04:30,800
在之前的计算属性中，

92
00:04:30,800 --> 00:04:34,990
使用选项 API 计算的属性是方法

93
00:04:34,990 --> 00:04:37,860
您返回计算值的位置。

94
00:04:37,860 --> 00:04:40,220
我们在这个函数中做同样的事情

95
00:04:40,220 --> 00:04:42,740
我们在这里传递给计算调用，

96
00:04:42,740 --> 00:04:44,960
我们返回我们的计算值。

97
00:04:44,960 --> 00:04:49,793
例如，firstName 加上一个空格加上 lastName。

98
00:04:50,794 --> 00:04:52,800
而不是这个名字，

99
00:04:52,800 --> 00:04:55,050
因为我们不是指财产，

100
00:04:55,050 --> 00:04:58,370
我只是指这个名字，参考这里

101
00:04:58,370 --> 00:05:00,183
和这个姓氏，参考。

102
00:05:01,320 --> 00:05:04,310
好吧，实际上，因为我指的是 ReFS，

103
00:05:04,310 --> 00:05:06,190
我们应该使用点值，

104
00:05:06,190 --> 00:05:08,740
因为你学到了 ref 是一个对象

105
00:05:08,740 --> 00:05:13,280
具有值属性和管理的实际值，

106
00:05:13,280 --> 00:05:15,863
存储在该值属性中。

107
00:05:17,060 --> 00:05:20,240
这也是我们在这里设置 value 属性的原因

108
00:05:20,240 --> 00:05:22,740
首先设置并设置姓氏。

109
00:05:22,740 --> 00:05:26,330
你只能省略 value 属性，

110
00:05:26,330 --> 00:05:29,610
如果您在模板中使用此参考。

111
00:05:29,610 --> 00:05:32,160
如果你在 JavaScript 代码的任何地方使用它，

112
00:05:32,160 --> 00:05:34,620
并且您想读取或写入该值，

113
00:05:34,620 --> 00:05:36,823
那么你必须访问点值。

114
00:05:38,150 --> 00:05:42,090
但是我们将这个值作为计算属性返回。

115
00:05:42,090 --> 00:05:44,710
这个计算函数只是确保

116
00:05:44,710 --> 00:05:48,550
我们传递给它的这个函数被重新执行

117
00:05:48,550 --> 00:05:51,130
每当依赖项之一。

118
00:05:51,130 --> 00:05:55,860
因此，在这种情况下，每当 firstName 或 lastName 更改时。

119
00:05:55,860 --> 00:05:59,500
并且视图会自动潜入这个功能

120
00:05:59,500 --> 00:06:03,520
并跟踪那里指定的所有依赖项。

121
00:06:03,520 --> 00:06:07,620
它会看到你在这里使用 firstName 和 lastName

122
00:06:07,620 --> 00:06:10,510
因此，它会自动跟踪那些

123
00:06:10,510 --> 00:06:13,410
ReFS 并更新计算的属性

124
00:06:13,410 --> 00:06:15,933
每当两个 ReFS 之一发生更改时。

125
00:06:17,260 --> 00:06:20,010
现在当然计算一个值很好，

126
00:06:20,010 --> 00:06:22,410
但仅当我们将其保存在某处时才有用。

127
00:06:22,410 --> 00:06:24,373
所以在这里我有我的，

128
00:06:25,382 --> 00:06:27,040
你的名字，

129
00:06:27,040 --> 00:06:29,690
我注释掉了旧的uName。

130
00:06:29,690 --> 00:06:33,860
所以现在我有了新的 uName，它是一个计算属性。

131
00:06:33,860 --> 00:06:38,356
引擎盖下的计算属性也只是一个参考。

132
00:06:38,356 --> 00:06:41,730
所以在 uname 上，你可以访问一个值，

133
00:06:41,730 --> 00:06:43,870
但是，这很重要

134
00:06:43,870 --> 00:06:47,270
但它是一个只读的 ref。

135
00:06:47,270 --> 00:06:50,650
普通 ReFS，例如 firstName 和 lastName 和 Age

136
00:06:50,650 --> 00:06:52,430
是读写的。

137
00:06:52,430 --> 00:06:57,253
我们可以在不同的地方设置新的值。

138
00:06:58,410 --> 00:07:02,490
计算的属性，计算的 ReFS 是只读的。

139
00:07:02,490 --> 00:07:05,930
像我在这里做的那样设置值

140
00:07:05,930 --> 00:07:07,780
不是你应该做的事

141
00:07:07,780 --> 00:07:09,630
不是允许的。

142
00:07:09,630 --> 00:07:11,003
不过读书还行。

143
00:07:12,660 --> 00:07:13,860
有了这个，

144
00:07:13,860 --> 00:07:16,650
我们返回我们的用户名

145
00:07:16,650 --> 00:07:21,650
仍然指向 uName，它现在是这个新的计算参考。

146
00:07:21,720 --> 00:07:24,710
并且应该在此处输出该用户名。

147
00:07:24,710 --> 00:07:29,070
每当我们输入这些输入时，它都应该更新。

148
00:07:29,070 --> 00:07:32,970
所以如果我们保存这个，你最初看不到上面的名字，

149
00:07:32,970 --> 00:07:37,020
但如果我开始打字，你会看到那个名字

150
00:07:37,020 --> 00:07:38,820
越来越长。

151
00:07:38,820 --> 00:07:42,180
那是因为我们使用的是计算属性

152
00:07:42,180 --> 00:07:45,490
我们暴露给模板的计算参考，

153
00:07:45,490 --> 00:07:48,970
我们通过更新我们的第一个来更新

154
00:07:48,970 --> 00:07:50,453
和姓氏参考文献。