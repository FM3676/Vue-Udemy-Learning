1
00:00:02,200 --> 00:00:03,550
你成功了吗？

2
00:00:03,550 --> 00:00:05,130
如果你自己尝试这个

3
00:00:05,130 --> 00:00:06,990
你成功了，干得好。

4
00:00:06,990 --> 00:00:08,760
如果您遇到一些问题，

5
00:00:08,760 --> 00:00:11,040
好吧，这完全没有问题。

6
00:00:11,040 --> 00:00:13,860
我们刚刚开始使用 Composition API。

7
00:00:13,860 --> 00:00:15,500
所以这是绝对正常的

8
00:00:15,500 --> 00:00:17,940
你可能不是 100% 确定

9
00:00:17,940 --> 00:00:19,813
关于所有的概念。

10
00:00:20,910 --> 00:00:25,590
现在我们将一起迁移这个 QD 组合 API。

11
00:00:25,590 --> 00:00:28,970
我将从 App Vue 开始。

12
00:00:28,970 --> 00:00:31,530
App Vue 是一个非常简单的组件，

13
00:00:31,530 --> 00:00:33,340
它有一个非常简单的模板，

14
00:00:33,340 --> 00:00:36,560
我最终只使用整体组件

15
00:00:36,560 --> 00:00:39,260
并将数据传递给这些组件。

16
00:00:39,260 --> 00:00:42,330
然后我们在这里得到了两条数据，

17
00:00:42,330 --> 00:00:44,409
当前选中的用户，

18
00:00:44,409 --> 00:00:47,390
当我们在这里选择用户查看项目时

19
00:00:47,390 --> 00:00:49,550
和活动用户，

20
00:00:49,550 --> 00:00:53,220
这只是我们想要显示的用户。

21
00:00:53,220 --> 00:00:57,980
并且 activeUsers 填充了一些虚拟的 User_Data，

22
00:00:57,980 --> 00:01:00,910
它来自虚拟数据 JavaScript 文件，

23
00:01:00,910 --> 00:01:03,660
在那里，我只是导出一个长数组，

24
00:01:03,660 --> 00:01:06,570
我只是把它外包到一个单独的文件中

25
00:01:06,570 --> 00:01:09,020
这样我就不必那么长的数组

26
00:01:09,020 --> 00:01:10,740
在我的 App Vue 文件中。

27
00:01:10,740 --> 00:01:12,240
当然，这可能是数据

28
00:01:12,240 --> 00:01:13,680
从服务器获取，

29
00:01:13,680 --> 00:01:17,217
实际上，这里只是这个虚拟的 User_Data。

30
00:01:18,340 --> 00:01:21,410
所以为了迁移这个组件

31
00:01:21,410 --> 00:01:23,200
到组合 API，

32
00:01:23,200 --> 00:01:25,300
最后，我们将替换数据

33
00:01:25,300 --> 00:01:29,480
以及带有新设置选项的方法选项，

34
00:01:29,480 --> 00:01:31,860
因为这就是你在这个模块中学到的。

35
00:01:31,860 --> 00:01:33,310
设置选项，

36
00:01:33,310 --> 00:01:37,600
这个设置方法是使用 Composition API 的关键，

37
00:01:37,600 --> 00:01:41,230
因为在那里你设置了你的组件，

38
00:01:41,230 --> 00:01:44,160
您希望能够在模板中使用的数据，

39
00:01:44,160 --> 00:01:46,950
以及所有应该可以调用的函数

40
00:01:46,950 --> 00:01:47,853
等等。

41
00:01:49,090 --> 00:01:51,120
这里我们得到了两条数据，

42
00:01:51,120 --> 00:01:54,350
我们的 activeUsers 和我们的 selectedUser。

43
00:01:54,350 --> 00:01:57,290
所以现在我们可以做出第一个决定

44
00:01:57,290 --> 00:01:59,550
关于我们希望如何管理这些数据。

45
00:01:59,550 --> 00:02:02,140
我们可以在一个对象中管理这些数据，

46
00:02:02,140 --> 00:02:04,480
然后我们可以创建那个对象

47
00:02:04,480 --> 00:02:08,009
作为参考或具有反应功能

48
00:02:08,009 --> 00:02:09,169
正如你所了解的，

49
00:02:09,169 --> 00:02:12,985
或者我们管理两个独立的数据，

50
00:02:12,985 --> 00:02:15,913
selectedUser 和这个 User_Data 数组。

51
00:02:16,770 --> 00:02:18,710
这取决于你，你想做什么，

52
00:02:18,710 --> 00:02:21,570
我实际上会继续进行分离的数据。

53
00:02:21,570 --> 00:02:24,600
所以我会从 Vue 导入

54
00:02:24,600 --> 00:02:27,580
我将导入的是 ref 函数，

55
00:02:27,580 --> 00:02:30,890
因为我想在这里创建两个单独的参考。

56
00:02:30,890 --> 00:02:32,660
再次，这只是想接近，

57
00:02:32,660 --> 00:02:36,270
如果你想用反应式管理一个对象，

58
00:02:36,270 --> 00:02:38,330
这也很好。

59
00:02:38,330 --> 00:02:40,880
但我会继续前进是参考这里

60
00:02:40,880 --> 00:02:42,360
或者对于这两个裁判，

61
00:02:42,360 --> 00:02:45,363
然后我们必须在这里选择用户，

62
00:02:46,230 --> 00:02:50,110
我在其中创建了一个初始值为 null 的新 ref，

63
00:02:50,110 --> 00:02:54,260
然后我们还有 activeUsers 参考，

64
00:02:54,260 --> 00:02:56,537
我在哪里传递我的 User_Data。

65
00:02:58,070 --> 00:02:59,700
现在实际上，顺便说一句，

66
00:02:59,700 --> 00:03:03,210
User_Data，这不需要是一个参考，

67
00:03:03,210 --> 00:03:04,910
因为在这整个组件中

68
00:03:04,910 --> 00:03:08,970
我没有更改 activeUsers 的逻辑。

69
00:03:08,970 --> 00:03:10,760
如果你从不改变数据，

70
00:03:10,760 --> 00:03:13,050
这可能不需要重新F

71
00:03:13,050 --> 00:03:16,130
因为 Vue 不需要知道任何变化

72
00:03:16,130 --> 00:03:18,020
如果没有变化。

73
00:03:18,020 --> 00:03:22,410
所以实际上，activeUsers 也可以被管理

74
00:03:22,410 --> 00:03:24,750
像这样的常规数据，

75
00:03:24,750 --> 00:03:27,123
因为它是永远不会改变的数据。

76
00:03:28,180 --> 00:03:30,440
所以我什至不会把它变成一个参考

77
00:03:30,440 --> 00:03:33,870
清楚地表明我们在这里不需要参考。

78
00:03:33,870 --> 00:03:37,820
好吧，然后我们想把它暴露给我们的模板。

79
00:03:37,820 --> 00:03:40,500
所以我们在 setup 方法中作为对象返回，

80
00:03:40,500 --> 00:03:42,070
这是一个关键概念。

81
00:03:42,070 --> 00:03:44,700
您总是在设置中返回对象

82
00:03:44,700 --> 00:03:48,090
告诉 Vue 你可以说哪些功能，

83
00:03:48,090 --> 00:03:50,540
哪些常量、变量和函数

84
00:03:50,540 --> 00:03:53,720
从内部到设置方法应该可用

85
00:03:53,720 --> 00:03:55,240
在模板中。

86
00:03:55,240 --> 00:03:58,033
在这里，我想公开 selectedUser

87
00:03:59,330 --> 00:04:01,500
使用这个 JavaScript 速记，

88
00:04:01,500 --> 00:04:03,460
而不是写这个，

89
00:04:03,460 --> 00:04:07,183
我写了这个，我暴露了我的 activeUsers。

90
00:04:08,917 --> 00:04:10,810
ActiveUsers 不能改变

91
00:04:10,810 --> 00:04:14,400
或者 Vue 不会注意到任何变化，因为它不是参考。

92
00:04:14,400 --> 00:04:16,310
但这当然并不意味着

93
00:04:16,310 --> 00:04:18,399
我们不能将它暴露给模板。

94
00:04:18,399 --> 00:04:19,663
我们绝对可以。

95
00:04:22,150 --> 00:04:24,850
是我们可以摆脱这里的数据方法吗

96
00:04:24,850 --> 00:04:26,300
我会在这里删除它。

97
00:04:26,300 --> 00:04:28,010
当然，您可以将所有注释掉

98
00:04:28,010 --> 00:04:30,600
如果你想比较一下。

99
00:04:30,600 --> 00:04:34,110
现在，我们迁移了数据。

100
00:04:34,110 --> 00:04:36,230
现在我们都想迁移方法

101
00:04:36,230 --> 00:04:38,570
因为现在这种方法行不通。

102
00:04:38,570 --> 00:04:41,590
我们尝试使用这个 selectedUser

103
00:04:41,590 --> 00:04:44,040
而且这个属性不存在了

104
00:04:44,040 --> 00:04:46,290
因为我刚刚删除了数据。

105
00:04:46,290 --> 00:04:48,400
作为旁注，理论上，

106
00:04:48,400 --> 00:04:52,050
您可以使用数据方法并并排设置，

107
00:04:52,050 --> 00:04:53,480
如果有一些数据

108
00:04:53,480 --> 00:04:55,440
和您想要管理的功能

109
00:04:55,440 --> 00:04:56,890
使用组合 API，

110
00:04:56,890 --> 00:04:59,200
和其他数据和功能

111
00:04:59,200 --> 00:05:02,100
您想使用选项 API 进行管理。

112
00:05:02,100 --> 00:05:04,430
所以即使在同一个组件内部，

113
00:05:04,430 --> 00:05:06,710
你可以混合这些概念。

114
00:05:06,710 --> 00:05:09,900
实际上，我会说您通常会迁移

115
00:05:09,900 --> 00:05:12,920
组合 API 的整个组件

116
00:05:12,920 --> 00:05:16,410
或者坚持使用 options API 而不是混合使用，

117
00:05:16,410 --> 00:05:18,433
但理论上，你可以混合使用。

118
00:05:19,440 --> 00:05:22,030
无论如何，我想在这里迁移所有内容。

119
00:05:22,030 --> 00:05:24,920
因此，在设置中，我们可以定义一个函数，

120
00:05:24,920 --> 00:05:27,390
也许保留名称 selectUser，

121
00:05:27,390 --> 00:05:31,010
期望在这里获取用户 ID 作为参数，

122
00:05:31,010 --> 00:05:36,010
然后设置 selectedUser.value 等于，

123
00:05:37,560 --> 00:05:39,230
嗯，基本上就是这个逻辑。

124
00:05:39,230 --> 00:05:42,310
所以我可以复制这个，除了这个关键字，

125
00:05:42,310 --> 00:05:45,680
并在我的 activeUsers 中找到具有该 ID 的用户

126
00:05:45,680 --> 00:05:48,523
并将我的 selectedUser 设置为等于该用户。

127
00:05:49,960 --> 00:05:52,670
现在我们也可以去掉这里的方法

128
00:05:52,670 --> 00:05:56,203
并公开selectUser，没有这样的selectUser

129
00:05:58,310 --> 00:05:59,890
模板也是如此。

130
00:05:59,890 --> 00:06:02,390
我们这里的事件绑定也是如此，

131
00:06:02,390 --> 00:06:04,730
在这里抱歉，仍然有效。

132
00:06:04,730 --> 00:06:06,200
这应该就是全部了。

133
00:06:06,200 --> 00:06:08,650
如果我们保存并重新加载，

134
00:06:08,650 --> 00:06:12,650
这个应用程序和以前一样工作，

135
00:06:12,650 --> 00:06:15,340
因为正如我在整个模块中提到的，

136
00:06:15,340 --> 00:06:18,270
你绝对可以组合组件

137
00:06:18,270 --> 00:06:20,160
使用选项 API，

138
00:06:20,160 --> 00:06:23,030
在这种情况下，这是我们所有的组件

139
00:06:23,030 --> 00:06:26,120
和组件t 使用组合 API，

140
00:06:26,120 --> 00:06:28,120
在这种情况下，App Vue 组件。

141
00:06:28,120 --> 00:06:29,840
这是绝对可能的

142
00:06:29,840 --> 00:06:31,890
这正是我们在这里所做的。

143
00:06:33,090 --> 00:06:36,320
因此，我们迁移了我们的第一个组件，

144
00:06:36,320 --> 00:06:38,503
现在让我们继续下一个。