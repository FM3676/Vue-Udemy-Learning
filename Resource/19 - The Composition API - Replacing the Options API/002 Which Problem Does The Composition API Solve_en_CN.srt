1
00:00:02,240 --> 00:00:06,070
组合 API 到底是什么？

2
00:00:06,070 --> 00:00:10,080
好吧，让我们从到目前为止我们学到的东西开始。

3
00:00:10,080 --> 00:00:13,760
在构建 Vue 应用程序和 Vue 组件时，

4
00:00:13,760 --> 00:00:18,760
到目前为止，我们使用了所谓的 Options API。

5
00:00:19,040 --> 00:00:22,560
我们创建了这个配置对象，

6
00:00:22,560 --> 00:00:26,270
在那里我们配置了各种选项，

7
00:00:26,270 --> 00:00:28,550
例如，数据选项，

8
00:00:28,550 --> 00:00:33,550
方法选项，但也可能是计算或观察者。

9
00:00:34,290 --> 00:00:36,850
所以我们有了这个配置对象

10
00:00:36,850 --> 00:00:40,070
我们在哪里设置我们的数据，我们的方法。

11
00:00:40,070 --> 00:00:42,210
所以要编码，我们可以在事件上运行，

12
00:00:42,210 --> 00:00:44,600
例如，等等。

13
00:00:44,600 --> 00:00:46,820
我将再次强调，

14
00:00:46,820 --> 00:00:50,900
这种方法绝对没问题，你可以坚持下去。

15
00:00:50,900 --> 00:00:54,910
这还不错，它不是第二好的选择。

16
00:00:54,910 --> 00:00:57,060
绝对没问题。

17
00:00:57,060 --> 00:01:00,090
知道这实际上是一个要求

18
00:01:00,090 --> 00:01:03,573
为了理解 Composition API，我想说。

19
00:01:04,690 --> 00:01:07,100
但是，Composition API 是什么？

20
00:01:07,100 --> 00:01:09,220
这是选项 API。

21
00:01:09,220 --> 00:01:12,970
组合 API 是另一种方式

22
00:01:12,970 --> 00:01:16,340
编写组件背后的逻辑。

23
00:01:16,340 --> 00:01:20,100
引入它是因为我们可能，

24
00:01:20,100 --> 00:01:25,100
我是说可能面临两个主要限制或问题

25
00:01:26,150 --> 00:01:29,310
在构建更大的 Vue 应用程序时。

26
00:01:29,310 --> 00:01:31,740
在中小型应用程序中，

27
00:01:31,740 --> 00:01:35,110
我们很可能永远不会面对这些问题，

28
00:01:35,110 --> 00:01:38,430
但在更大的应用程序中，我们可能会遇到它们。

29
00:01:38,430 --> 00:01:41,220
第一个问题是代码

30
00:01:41,220 --> 00:01:43,460
逻辑上属于一起的

31
00:01:43,460 --> 00:01:47,000
实际上分为多个选项，

32
00:01:47,000 --> 00:01:50,410
例如，数据、方法、计算。

33
00:01:50,410 --> 00:01:52,950
我在这里有一个小示例项目。

34
00:01:52,950 --> 00:01:54,760
你没有发现它附在这里

35
00:01:54,760 --> 00:01:56,670
因为我们不打算在这里使用它。

36
00:01:56,670 --> 00:01:58,820
我只是想给你看。

37
00:01:58,820 --> 00:02:00,900
现在，在这个演示应用程序中，

38
00:02:00,900 --> 00:02:02,950
这把它带到了屏幕上

39
00:02:02,950 --> 00:02:05,470
我们可以对各种用户进行排序，

40
00:02:05,470 --> 00:02:10,470
过滤用户，查看我们用户的项目，

41
00:02:10,500 --> 00:02:13,380
并过滤这些项目，

42
00:02:13,380 --> 00:02:16,760
在这个应用程序中，我使用了几个不同的组件，

43
00:02:16,760 --> 00:02:20,240
它们共同构成了这个用户界面。

44
00:02:20,240 --> 00:02:23,730
这个应用程序是用我们学到的功能构建的

45
00:02:23,730 --> 00:02:26,640
在本课程的最后一个模块中。

46
00:02:26,640 --> 00:02:30,110
在所有这些组件中，我正在管理数据，

47
00:02:30,110 --> 00:02:32,120
我可能会得到一些道具，

48
00:02:32,120 --> 00:02:35,440
我可能正在注册更多本地组件。

49
00:02:35,440 --> 00:02:37,400
我们得到一些计算属性，

50
00:02:37,400 --> 00:02:39,480
一些方法，一些观察者。

51
00:02:39,480 --> 00:02:42,420
这不仅仅是在这个组件中的情况，

52
00:02:42,420 --> 00:02:44,493
但在多个组件中。

53
00:02:45,900 --> 00:02:48,630
现在，回到第一个问题，

54
00:02:48,630 --> 00:02:50,283
我在这里提出了那个代码

55
00:02:50,283 --> 00:02:52,830
在逻辑上可能属于一起

56
00:02:52,830 --> 00:02:56,290
跨数据方法拆分并计算，

57
00:02:56,290 --> 00:02:58,910
所以跨越这些不同的选择。

58
00:02:58,910 --> 00:03:03,180
我们可以在这个演示应用程序中看到这一点。

59
00:03:03,180 --> 00:03:06,100
在这里的用户列表组件中，例如，

60
00:03:06,100 --> 00:03:09,640
我有一些与搜索相关的数据

61
00:03:09,640 --> 00:03:12,833
和其他与排序相关的数据。

62
00:03:14,270 --> 00:03:17,220
我有一个处理搜索的计算属性

63
00:03:17,220 --> 00:03:19,503
然后是处理排序的一个。

64
00:03:20,870 --> 00:03:23,100
我有一个处理搜索的方法，

65
00:03:23,100 --> 00:03:24,940
处理排序的一种。

66
00:03:24,940 --> 00:03:28,080
有一个处理搜索等的观察者。

67
00:03:28,080 --> 00:03:31,800
这就是我对属于一起的功能的意思

68
00:03:31,800 --> 00:03:34,770
分为这些不同的选项。

69
00:03:34,770 --> 00:03:37,380
现在，这绝对不是一个可怕的问题，

70
00:03:37,380 --> 00:03:41,470
这绝对不是一个超级庞大的应用程序，

71
00:03:41,470 --> 00:03:43,250
但它是一个应用程序

72
00:03:43,250 --> 00:03:46,770
这个组件已经可以成为的地方

73
00:03:46,770 --> 00:03:48,560
管理起来有点烦人。

74
00:03:48,560 --> 00:03:51,300
因为如果你改变一些关于搜索的东西，

75
00:03:51,300 --> 00:03:53,710
您可能需要在数据中更改它

76
00:03:53,710 --> 00:03:56,640
然后在计算属性中更改某些内容，

77
00:03:56,640 --> 00:03:58,250
在方法中改变一些东西。

78
00:03:58,250 --> 00:04:00,220
而且你必须滚动很多

79
00:04:00,220 --> 00:04:02,220
并找到不同的部分

80
00:04:02,220 --> 00:04:05,700
它们共同构成了搜索功能

81
00:04:05,700 --> 00:04:07,370
因为不同的部分

82
00:04:07,370 --> 00:04:11,453
构成该功能的组件分为各种选项。

83
00:04:12,400 --> 00:04:15,840
但这不仅仅是我们可能面临的唯一问题

84
00:04:15,840 --> 00:04:18,753
使用当前构建 Vue 应用程序的方式。

85
00:04:19,769 --> 00:04:22,780
除了我刚才描述的问题，

86
00:04:22,780 --> 00:04:25,580
跨组件重用逻辑

87
00:04:25,580 --> 00:04:28,070
也可能很棘手或麻烦。

88
00:04:28,070 --> 00:04:31,240
现在，我会说有一些重用逻辑的方法，

89
00:04:31,240 --> 00:04:35,053
但它们都有其缺点，可能并不理想。

90
00:04:36,340 --> 00:04:37,470
在这个演示应用程序中，

91
00:04:37,470 --> 00:04:39,620
有可以重复使用的逻辑。

92
00:04:39,620 --> 00:04:41,230
都在用户列表中

93
00:04:41,230 --> 00:04:43,340
以及在项目列表组件中，

94
00:04:43,340 --> 00:04:46,350
我有我的搜索功能。

95
00:04:46,350 --> 00:04:51,350
而且我有类似的计算属性和类似的观察者。

96
00:04:51,840 --> 00:04:55,230
如果我们可以在这里重用一些逻辑那就太好了

97
00:04:55,230 --> 00:04:59,210
这样我们就不必编写几乎相同的代码两次

98
00:04:59,210 --> 00:05:01,610
在两个不同的组件中。

99
00:05:01,610 --> 00:05:04,700
嗯，这些是我们可能面临的问题

100
00:05:04,700 --> 00:05:09,100
在使用当前方法的更大的 Vue 应用程序中。

101
00:05:09,100 --> 00:05:13,300
不是技术问题，也许对你来说根本不是问题，

102
00:05:13,300 --> 00:05:15,870
也许你对此完全没问题，

103
00:05:15,870 --> 00:05:19,043
但也许你想摆脱的东西。

104
00:05:20,640 --> 00:05:25,313
这正是 Composition API 可以帮助我们的地方。

105
00:05:26,250 --> 00:05:28,510
而不是写这样的代码，

106
00:05:28,510 --> 00:05:32,520
我们将逻辑拆分为多个选项，

107
00:05:32,520 --> 00:05:37,060
就是这样，这个 API 被称为 Options API，

108
00:05:37,060 --> 00:05:41,540
相反，我们将我们的逻辑捆绑在一个新的设置方法中，

109
00:05:41,540 --> 00:05:44,890
我们添加到我们的组件配置对象中。

110
00:05:44,890 --> 00:05:47,950
设置方法添加在数据旁边，

111
00:05:47,950 --> 00:05:49,650
和方法等等，

112
00:05:49,650 --> 00:05:53,600
但它实际上会替换数据方法等。

113
00:05:53,600 --> 00:05:55,500
我们将管理我们的数据，

114
00:05:55,500 --> 00:05:58,050
我们的函数，我们的计算属性，

115
00:05:58,050 --> 00:06:01,770
以及我们在该设置方法中的观察者

116
00:06:01,770 --> 00:06:05,110
然后我们还将它们暴露给模板

117
00:06:05,110 --> 00:06:08,250
这样我们就可以与这些东西互动。

118
00:06:08,250 --> 00:06:09,840
顺便说一句，这很重要。

119
00:06:09,840 --> 00:06:11,760
你写的模板代码，

120
00:06:11,760 --> 00:06:14,430
VF 和数据绑定等功能，

121
00:06:14,430 --> 00:06:18,480
所有这一切都与您所学的完全一样。

122
00:06:18,480 --> 00:06:22,260
这就是我们在这个对象中设置代码的方式，

123
00:06:22,260 --> 00:06:24,540
在这个组件中，冲突对象。

124
00:06:24,540 --> 00:06:26,520
这就是会有所改变的

125
00:06:26,520 --> 00:06:29,730
当您切换到合成 API 时。

126
00:06:29,730 --> 00:06:32,100
因为我们要合并，

127
00:06:32,100 --> 00:06:36,540
你可以说这四个主要选项，数据方法，

128
00:06:36,540 --> 00:06:40,430
计算并观察到这个设置方法。

129
00:06:40,430 --> 00:06:42,920
但是有了这个，我们得到了足够的理论。

130
00:06:42,920 --> 00:06:45,210
现在让我们深入研究代码，看看

131
00:06:45,210 --> 00:06:48,593
我们如何真正开始使用 Composition API。