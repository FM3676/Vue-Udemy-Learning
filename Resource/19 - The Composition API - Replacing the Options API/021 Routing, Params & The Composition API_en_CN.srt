1
00:00:02,120 --> 00:00:05,720
分解API的基础现在应该很清楚了，

2
00:00:05,720 --> 00:00:07,430
但在整个课程中，

3
00:00:07,430 --> 00:00:11,440
我们不仅了解了数据和计算属性。

4
00:00:11,440 --> 00:00:12,400
例如，我们已经

5
00:00:12,400 --> 00:00:14,480
还了解了路由

6
00:00:14,480 --> 00:00:17,130
并附上你找到一个数字启动项目，

7
00:00:17,130 --> 00:00:19,590
他们得到了一个非常简单的应用程序

8
00:00:19,590 --> 00:00:22,157
使用为您设置的路由。

9
00:00:22,157 --> 00:00:24,470
现在如果你加载这个应用程序，

10
00:00:24,470 --> 00:00:25,540
这就是你得到的。

11
00:00:25,540 --> 00:00:28,000
你基本上有两条主要路线，

12
00:00:28,000 --> 00:00:30,200
所有产品并添加产品，

13
00:00:30,200 --> 00:00:35,050
在这里您可以很好地添加新产品，

14
00:00:35,050 --> 00:00:36,900
然后你在这里看到它。

15
00:00:36,900 --> 00:00:39,440
我们面临几个问题

16
00:00:39,440 --> 00:00:44,330
或使用组合 API 时的不确定性。

17
00:00:44,330 --> 00:00:47,600
例如，当我添加新产品时

18
00:00:47,600 --> 00:00:49,140
我点击添加产品，

19
00:00:49,140 --> 00:00:52,500
如果我能自动被重定向就好了

20
00:00:52,500 --> 00:00:54,210
到所有产品。

21
00:00:54,210 --> 00:00:56,850
另外，当我单击此处查看详细信息时，

22
00:00:56,850 --> 00:01:00,000
我想看看那个产品的细节。

23
00:01:00,000 --> 00:01:03,670
为什么分解 API 这么复杂，

24
00:01:03,670 --> 00:01:05,860
至少目前，

25
00:01:05,860 --> 00:01:08,620
因为我们不知道如何获取这些数据

26
00:01:08,620 --> 00:01:10,340
例如，在这条路线上，

27
00:01:10,340 --> 00:01:13,593
因为我们不知道如何以编程方式导航。

28
00:01:14,600 --> 00:01:16,860
无分解API

29
00:01:16,860 --> 00:01:20,620
我们知道有这个美元符号路由器

30
00:01:20,620 --> 00:01:23,110
还有这条美元符号路线。

31
00:01:23,110 --> 00:01:24,520
例如，

32
00:01:24,520 --> 00:01:27,080
它加载的产品详细信息页面

33
00:01:27,080 --> 00:01:28,750
对于斜线产品，

34
00:01:28,750 --> 00:01:30,893
然后是这个动态片段。

35
00:01:31,750 --> 00:01:35,710
现在我们在本课程的路由模块中学习

36
00:01:35,710 --> 00:01:40,230
我们可以得到这个动态段的具体值

37
00:01:40,230 --> 00:01:42,660
里面的产品细节在这里

38
00:01:42,660 --> 00:01:47,370
使用这个美元符号路由对象。

39
00:01:47,370 --> 00:01:50,100
分解API的问题

40
00:01:50,100 --> 00:01:54,210
是设置方法中没有this关键字。

41
00:01:54,210 --> 00:01:57,493
那么我们如何在这里获取我们的路由参数呢？

42
00:01:58,440 --> 00:02:02,220
好吧，有两种方法可以解决这个问题。

43
00:02:02,220 --> 00:02:05,140
当然，您可以使用一种方法，

44
00:02:05,140 --> 00:02:07,610
它向您展示了路由模块。

45
00:02:07,610 --> 00:02:10,430
您可以配置此路由，

46
00:02:10,430 --> 00:02:14,690
这样动态段作为道具传递

47
00:02:14,690 --> 00:02:17,120
进入要加载的组件，

48
00:02:17,120 --> 00:02:20,170
只需添加此道具选项

49
00:02:20,170 --> 00:02:23,233
在路由配置上并将其设置为 true。

50
00:02:24,550 --> 00:02:29,550
现在将提供 PID 产品 ID 的值

51
00:02:29,580 --> 00:02:33,270
作为产品详细信息组件中的道具。

52
00:02:33,270 --> 00:02:34,103
而且你知道，

53
00:02:34,103 --> 00:02:36,610
我们在这里得到道具作为第一个参数

54
00:02:36,610 --> 00:02:38,290
在设置方法中。

55
00:02:38,290 --> 00:02:39,460
所以现在有了这个，

56
00:02:39,460 --> 00:02:44,460
然后我们可以使用 inject 来注入产品

57
00:02:45,360 --> 00:02:48,820
我在这里管理和提供

58
00:02:48,820 --> 00:02:52,423
在应用程序视图中查看产品详细信息。

59
00:02:53,390 --> 00:02:58,340
所以在这里我们可以通过调用inject products来获取我们的产品，

60
00:02:58,340 --> 00:03:01,150
注入提供的产品

61
00:03:01,150 --> 00:03:05,670
在我们的道具上，我们会得到这个 PID 道具，

62
00:03:05,670 --> 00:03:10,670
它将值保留在 URL 中的动态段之外。

63
00:03:11,210 --> 00:03:14,520
因此，在产品详细信息中，

64
00:03:14,520 --> 00:03:19,397
然后我们可以得到我们选择的产品

65
00:03:20,590 --> 00:03:22,860
通过接触产品。

66
00:03:22,860 --> 00:03:27,270
所以注入产品并找到产品

67
00:03:27,270 --> 00:03:30,703
其中 product.id 等于 props.PID。

68
00:03:32,950 --> 00:03:35,340
PID，因为这是我在这里选择的名字

69
00:03:35,340 --> 00:03:36,647
在我的路线配置中，

70
00:03:37,830 --> 00:03:41,510
然后我们可以得到标题、价格和描述

71
00:03:41,510 --> 00:03:43,210
从该选定的产品。

72
00:03:43,210 --> 00:03:45,400
所以我们在这里甚至不需要我们的参考

73
00:03:45,400 --> 00:03:48,530
因为我不想在这里设置或更改数据。

74
00:03:48,530 --> 00:03:51,630
我只想从所选产品中提取它。

75
00:03:51,630 --> 00:03:55,443
所以我们通过选择选择product.title来获得标题，

76
00:03:56,300 --> 00:03:58,483
价格也一样。

77
00:04:00,020 --> 00:04:00,990
而且当然，

78
00:04:00,990 --> 00:04:03,930
然后也用于描述

79
00:04:03,930 --> 00:04:06,553
选定的产品描述。

80
00:04:08,100 --> 00:04:11,800
现在我们唯一要做的就是确保

81
00:04:11,800 --> 00:04:16,230
URL 中提供了不同的产品 ID

82
00:04:16,230 --> 00:04:18,510
当我们点击查看详情

83
00:04:18,510 --> 00:04:23,020
在所有设置了路由器链接的产品中，

84
00:04:23,020 --> 00:04:26,290
这当然不应该是 ID 作为文本

85
00:04:26,290 --> 00:04:31,053
相反，两个，应该动态绑定到一个字符串，

86
00:04:31,053 --> 00:04:34,860
例如，从斜线产品开始，

87
00:04:34,860 --> 00:04:37,600
但其中包括产品的 ID

88
00:04:37,600 --> 00:04:39,040
我们在这里渲染

89
00:04:39,040 --> 00:04:42,020
我们从这里的 product.id 中得到它，

90
00:04:42,020 --> 00:04:44,823
就像我在列表项上分配密钥一样。

91
00:04:46,780 --> 00:04:48,400
有了这个，

92
00:04:48,400 --> 00:04:50,280
我可以点击查看详情

93
00:04:50,280 --> 00:04:53,770
我看不出有什么原因，

94
00:04:53,770 --> 00:04:57,320
我得到一个错误产品发现不是功能。

95
00:04:57,320 --> 00:05:00,320
我们当然不能忘记产品，

96
00:05:00,320 --> 00:05:05,320
我们在这里注入的是应用程序视图中的参考

97
00:05:05,760 --> 00:05:07,050
因此，当然，

98
00:05:07,050 --> 00:05:11,270
当我们想要访问他们 DRA 中的具体值时，

99
00:05:11,270 --> 00:05:14,763
我们必须使用产品的 value 属性来做到这一点。

100
00:05:16,150 --> 00:05:17,320
而且当然，

101
00:05:17,320 --> 00:05:18,700
我们也应该让你知道

102
00:05:18,700 --> 00:05:20,940
关于我们在这里得到的道具。

103
00:05:20,940 --> 00:05:23,923
所以在这里添加 pid 作为道具。

104
00:05:27,110 --> 00:05:31,803
有了这个，我们可以查看细节，这很有效。

105
00:05:34,290 --> 00:05:37,350
现在，如果我们，无论出于何种原因，

106
00:05:37,350 --> 00:05:40,760
详细信息中有一个路由器链接，

107
00:05:40,760 --> 00:05:44,560
这总是导致产品二。

108
00:05:44,560 --> 00:05:48,830
那么链接到产品/P2的地方，

109
00:05:48,830 --> 00:05:50,763
这是产品二的想法，

110
00:05:51,650 --> 00:05:53,670
如果我在产品一的页面上

111
00:05:53,670 --> 00:05:57,310
我点击这个，这不会更新。

112
00:05:57,310 --> 00:06:01,240
我们注意到课程早期的问题

113
00:06:01,240 --> 00:06:03,000
现在有了选项 API，

114
00:06:03,000 --> 00:06:06,430
当我们使用 props 来获取我们的产品数据时，

115
00:06:06,430 --> 00:06:08,680
我们看过我们的道具数据，

116
00:06:08,680 --> 00:06:11,710
我们变化的动态参数值，

117
00:06:11,710 --> 00:06:15,040
我们需要在这里做类似的事情。

118
00:06:15,040 --> 00:06:18,173
我们可以使用计算属性，例如，

119
00:06:19,580 --> 00:06:24,440
使选定的产品成为计算属性，

120
00:06:24,440 --> 00:06:26,003
一个计算值。

121
00:06:28,360 --> 00:06:32,370
像这样，当然，现在，

122
00:06:32,370 --> 00:06:36,160
然后，我们还应该确保那些其他值，

123
00:06:36,160 --> 00:06:38,100
标题、价格和描述更新

124
00:06:38,100 --> 00:06:39,960
当我们得到一个新的选定产品时

125
00:06:39,960 --> 00:06:43,729
并且有多种方法可以做到这一点，

126
00:06:43,729 --> 00:06:45,520
绝对不是最短的，

127
00:06:45,520 --> 00:06:48,710
但一种方法是现在把那些

128
00:06:48,710 --> 00:06:51,593
也进入计算属性。

129
00:06:54,920 --> 00:06:55,753
像那样。

130
00:06:57,420 --> 00:06:58,640
如果我们这样做，

131
00:06:58,640 --> 00:07:01,510
我们当然必须在这里使用 .value

132
00:07:01,510 --> 00:07:04,070
因为选择的产品现在是参考。

133
00:07:04,070 --> 00:07:06,030
毕竟这是一个计算属性

134
00:07:08,200 --> 00:07:10,500
如果我们保存这个，

135
00:07:10,500 --> 00:07:11,760
去第一个产品

136
00:07:11,760 --> 00:07:14,780
然后点击产品二现在更新，

137
00:07:14,780 --> 00:07:17,413
这就是我们如何使用分解 API 来做到这一点，

138
00:07:18,690 --> 00:07:20,610
但这只是一种方式

139
00:07:20,610 --> 00:07:25,083
盖蒂的通过使用 props 来获取我们的动态路由参数。