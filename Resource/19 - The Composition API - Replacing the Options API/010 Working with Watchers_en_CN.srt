1
00:00:02,070 --> 00:00:05,840
所以，现在让我们看看最后一个选项

2
00:00:05,840 --> 00:00:09,570
我们想要替换，这就是 watch 选项。

3
00:00:09,570 --> 00:00:12,100
Watch 对于运行一些代码很有用，

4
00:00:12,100 --> 00:00:15,200
就像在幕后设置 HTTP 请求一样

5
00:00:15,200 --> 00:00:17,083
当一些数据发生变化时。

6
00:00:18,350 --> 00:00:21,130
当然，我不想发送那个 HTTP 请求

7
00:00:21,130 --> 00:00:22,150
在这里的简单应用程序中，

8
00:00:22,150 --> 00:00:25,400
但我仍然想向您展示手表的工作原理。

9
00:00:25,400 --> 00:00:30,400
通常，你在这里添加你的手表选项，

10
00:00:30,650 --> 00:00:32,409
哪个手表是对象，

11
00:00:32,409 --> 00:00:34,840
在那里，你可以看到年龄，

12
00:00:34,840 --> 00:00:36,890
通过添加同名方法，

13
00:00:36,890 --> 00:00:40,030
所以通过添加这样的方法来观察这个年龄属性，

14
00:00:40,030 --> 00:00:43,990
每当手表触发时，您都会获得新值，

15
00:00:43,990 --> 00:00:48,830
然后你可以在这里控制台 log val，例如。

16
00:00:48,830 --> 00:00:50,963
这就是你可以用手表做的事情。

17
00:00:52,570 --> 00:00:55,040
好吧，显然这不是我们现在正在做的，

18
00:00:55,040 --> 00:01:00,040
相反，我们从视图中导入新事物

19
00:01:00,430 --> 00:01:04,822
那是另一个功能，手表功能。

20
00:01:06,540 --> 00:01:10,100
watch 函数是 Composition API 的所有部分

21
00:01:10,100 --> 00:01:12,900
watch 功能允许我们注册

22
00:01:12,900 --> 00:01:16,300
此设置方法中的观察者。

23
00:01:16,300 --> 00:01:19,480
是的，你有很多东西是很正常的

24
00:01:19,480 --> 00:01:22,970
正如您已经知道的那样，在这种设置方法中。

25
00:01:22,970 --> 00:01:27,340
所以在这里，让我们说，例如，

26
00:01:27,340 --> 00:01:31,810
在我们定义了我们的 refs 之后，我们可以调用 watch。

27
00:01:31,810 --> 00:01:35,200
现在，watch 需要两个参数，

28
00:01:35,200 --> 00:01:40,200
第一个参数是 watch 的依赖，

29
00:01:40,420 --> 00:01:45,190
告诉 watch 什么时候应该执行 watcher 函数，

30
00:01:45,190 --> 00:01:49,020
例如，在这里我们可以传递 uAge 参考。

31
00:01:49,020 --> 00:01:52,750
所以这个 ref 现在是 watch 的依赖。

32
00:01:52,750 --> 00:01:55,810
第二个参数是实际功能

33
00:01:55,810 --> 00:01:57,900
那应该被调用。

34
00:01:57,900 --> 00:02:00,460
现在，我们需要指定这个依赖

35
00:02:00,460 --> 00:02:02,660
因为有了 Options API，

36
00:02:02,660 --> 00:02:06,840
依赖项只是 watch 方法的名称。

37
00:02:06,840 --> 00:02:09,639
现在，它只是作为一个功能的手表，

38
00:02:09,639 --> 00:02:11,830
所以还是要让手表知道

39
00:02:11,830 --> 00:02:14,200
当观察者函数应该运行时，

40
00:02:14,200 --> 00:02:17,630
我们需要先指定pendency。

41
00:02:17,630 --> 00:02:19,120
所以，这就是uAge，

42
00:02:19,120 --> 00:02:23,083
然后每当 uAge 改变时，这个函数就会被执行。

43
00:02:24,600 --> 00:02:25,500
在这个函数中，

44
00:02:25,500 --> 00:02:29,440
我们现在实际上通过 watch 自动得到两个参数，

45
00:02:29,440 --> 00:02:33,490
这就是新价值和旧价值。

46
00:02:33,490 --> 00:02:37,080
所以，我们得到 uAge 改变之前的值，

47
00:02:37,080 --> 00:02:39,193
然后在改变之后。

48
00:02:40,470 --> 00:02:45,470
在这里我们可以控制台记录年老加上旧值，

49
00:02:47,240 --> 00:02:50,830
然后还有控制台日志

50
00:02:52,790 --> 00:02:57,123
新时代加上新价值，就像这样。

51
00:02:59,310 --> 00:03:00,290
就这样。

52
00:03:00,290 --> 00:03:03,940
如果我们现在保存并重新加载，

53
00:03:03,940 --> 00:03:06,570
如您所知，这里没有打印任何内容。

54
00:03:06,570 --> 00:03:10,250
但是如果我现在点击改变年龄，它会改变年龄，

55
00:03:10,250 --> 00:03:13,010
我们看到老年，31岁，

56
00:03:13,010 --> 00:03:14,730
新时代，33，

57
00:03:14,730 --> 00:03:18,840
因为我们的手表是在我们改变年龄后执行的，

58
00:03:18,840 --> 00:03:20,493
这是我们在这里的依赖。

59
00:03:22,040 --> 00:03:26,110
实际上，您还可以指定多个依赖项，

60
00:03:26,110 --> 00:03:29,860
让您获得比手表更大的灵活性，

61
00:03:29,860 --> 00:03:34,023
Options API，通过在此处传递一系列依赖项。

62
00:03:35,440 --> 00:03:38,110
然后在这里，您可以指定 uAge，

63
00:03:39,260 --> 00:03:43,760
假设 uName 作为依赖项，

64
00:03:43,760 --> 00:03:46,870
因此，让我们将手表移到 uName 下方，

65
00:03:46,870 --> 00:03:48,903
这样我们就可以访问它。

66
00:03:49,770 --> 00:03:54,150
所以现在，无论是年龄还是计算的参考值发生变化，

67
00:03:54,150 --> 00:03:57,600
当这两个变化中的任何一个发生变化时，这个函数就会执行，

68
00:03:57,600 --> 00:03:59,320
然后我们实际上也得到了

69
00:03:59,320 --> 00:04:02,890
这里有不同类型的值，作为参数。

70
00:04:02,890 --> 00:04:07,670
我们在这里得到新的价值观和旧的价值观。

71
00:04:07,670 --> 00:04:10,180
我们现在对这两个论点都加注了

72
00:04:10,180 --> 00:04:12,230
因为我们有不止一个依赖。

73
00:04:13,340 --> 00:04:17,380
所以我们现在的老年是旧价值观，

74
00:04:17,380 --> 00:04:19,200
然后是第一个元素，

75
00:04:19,200 --> 00:04:22,170
因为年龄是我们的第一个依赖

76
00:04:22,170 --> 00:04:26,400
我们的新时代是新的价值观，然后是第一个元素。

77
00:04:26,400 --> 00:04:28,780
因为如果你有多个依赖项，

78
00:04:28,780 --> 00:04:32,090
对于这些论点，你会得到不止一个值，

79
00:04:32,090 --> 00:04:33,930
以及这里的值顺序，

80
00:04:33,930 --> 00:04:36,173
遵循您的依赖关系的顺序。

81
00:04:37,300 --> 00:04:39,680
因此，当然，如果您愿意，

82
00:04:39,680 --> 00:04:42,680
我们还可以复制那些控制台日志语句

83
00:04:42,680 --> 00:04:46,130
并输出具有旧值的旧名称，

84
00:04:46,130 --> 00:04:48,490
然后是第二个元素，

85
00:04:48,490 --> 00:04:51,620
和新名称，即新值，

86
00:04:51,620 --> 00:04:53,163
然后是第二个元素。

87
00:04:55,565 --> 00:04:59,300
现在保存了，如果我们重新加载，

88
00:04:59,300 --> 00:05:00,970
我可以改变年龄

89
00:05:00,970 --> 00:05:02,960
你会看到旧时代，新时代

90
00:05:02,960 --> 00:05:05,150
没有旧名和新名，

91
00:05:05,150 --> 00:05:07,570
因为我们没有输入任何东西。

92
00:05:07,570 --> 00:05:11,150
但是如果我现在开始在这里输入，也许只有一个字符，

93
00:05:11,150 --> 00:05:13,100
我们看到观察者再次开火，

94
00:05:13,100 --> 00:05:16,410
因为现在年龄没有变，但是名字变了。

95
00:05:16,410 --> 00:05:20,610
因此，您甚至可以通过此手表功能获得更大的灵活性，

96
00:05:20,610 --> 00:05:24,490
因为现在，与 Options API 不同，

97
00:05:24,490 --> 00:05:28,770
每个观察者总是只有一个依赖项，

98
00:05:28,770 --> 00:05:31,500
您现在可以拥有多个依赖项

99
00:05:31,500 --> 00:05:34,230
触发此观察程序功能。

100
00:05:34,230 --> 00:05:36,360
这就是你更换手表的方式

101
00:05:36,360 --> 00:05:40,333
使用合成 API 时使用此监视功能。