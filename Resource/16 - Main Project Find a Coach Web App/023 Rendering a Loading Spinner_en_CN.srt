1
00:00:02,050 --> 00:00:03,778
在我们访问 All Coaches 的那一刻，

2
00:00:03,778 --> 00:00:07,750
我们没有收到关于我们正在招募新教练的反馈，

3
00:00:07,750 --> 00:00:10,270
我们正在后台加载教练。

4
00:00:10,270 --> 00:00:13,230
此外，我们没有任何错误处理

5
00:00:13,230 --> 00:00:14,913
这也不是最优的。

6
00:00:15,790 --> 00:00:17,960
所以如果我们能两者都做就好了，

7
00:00:17,960 --> 00:00:19,590
检查当前加载状态

8
00:00:19,590 --> 00:00:21,623
并添加错误处理。

9
00:00:22,540 --> 00:00:24,550
当然，我想在组件中做到这一点

10
00:00:24,550 --> 00:00:28,190
因为那是我最终要更新 DUI 的地方，

11
00:00:28,190 --> 00:00:31,750
但是我们在 Vue X 存储中发送 HTTP 请求。

12
00:00:31,750 --> 00:00:34,220
所以就产生了这样的冲突。

13
00:00:34,220 --> 00:00:37,300
好吧，不一定，谢天谢地。

14
00:00:37,300 --> 00:00:40,300
让我们从找教练开始，

15
00:00:40,300 --> 00:00:43,643
因为目前这对我们来说是最容易测试的。

16
00:00:44,550 --> 00:00:46,230
我们想展示一个加载微调器

17
00:00:46,230 --> 00:00:48,560
在我们获取教练数据的同时，

18
00:00:48,560 --> 00:00:50,490
这样我们就没有这种闪烁

19
00:00:50,490 --> 00:00:52,183
每当我们重新加载页面时，

20
00:00:53,050 --> 00:00:56,530
因此，我们首先需要一个加载微调器。

21
00:00:56,530 --> 00:00:59,070
现在，我为你准备了一个完整的组件

22
00:00:59,070 --> 00:01:00,480
你会发现附件。

23
00:01:00,480 --> 00:01:05,480
基本微调器 zip 文件包含此基本微调器 Vue 文件，

24
00:01:05,770 --> 00:01:08,893
您可以将其复制到您的 UI 组件文件夹中。

25
00:01:10,420 --> 00:01:12,250
基本微调组件，

26
00:01:12,250 --> 00:01:15,820
最后只是在屏幕上呈现一个加载微调器。

27
00:01:15,820 --> 00:01:18,920
它是一堆标记和一堆 CSS。

28
00:01:18,920 --> 00:01:22,080
我们可以在这里使用这个基础微调器

29
00:01:22,080 --> 00:01:26,570
在我们加载时将其呈现在教练列表页面上。

30
00:01:26,570 --> 00:01:27,940
现在，谢天谢地，正如我所说，

31
00:01:27,940 --> 00:01:30,740
我们可以知道我们是否正在加载

32
00:01:30,740 --> 00:01:34,910
即使请求是在 Vue X 的帮助下发送的，

33
00:01:34,910 --> 00:01:36,730
因为当你派发一个动作时，

34
00:01:36,730 --> 00:01:39,610
有一个不错的功能，我以前没有向您展示过

35
00:01:39,610 --> 00:01:42,800
因为我们之前真的不需要它。

36
00:01:42,800 --> 00:01:45,700
这个补丁也可以返回一些东西

37
00:01:45,700 --> 00:01:48,080
到您调用它的组件。

38
00:01:48,080 --> 00:01:49,790
例如，在这里，

39
00:01:49,790 --> 00:01:52,990
当我们调度 Load Coaches 动作时，

40
00:01:52,990 --> 00:01:55,430
因为我们在这里使用 async 关键字，

41
00:01:55,430 --> 00:01:58,560
它会自动返回一个承诺

42
00:01:58,560 --> 00:02:03,060
完成所有这些步骤后，我们将解决这个问题。

43
00:02:03,060 --> 00:02:04,890
这很好，因为这意味着

44
00:02:04,890 --> 00:02:08,590
既然这个承诺在教练的名单中被返回，

45
00:02:08,590 --> 00:02:13,040
我们基本上可以监听这个promise的完成，

46
00:02:13,040 --> 00:02:15,550
我们知道，当它完成时，

47
00:02:15,550 --> 00:02:16,980
我们不再加载

48
00:02:18,490 --> 00:02:21,630
因为那时我们显然得到了回应。

49
00:02:21,630 --> 00:02:24,550
因此，我们可以添加一个新的数据属性

50
00:02:24,550 --> 00:02:28,680
在活动过滤器旁边的教练列表组件中，

51
00:02:28,680 --> 00:02:31,460
这就是 IsLoading 属性，

52
00:02:31,460 --> 00:02:33,260
假设最初是错误的。

53
00:02:34,606 --> 00:02:39,060
而IsLoading，这个数据属性，应该设置为true

54
00:02:40,330 --> 00:02:44,690
在执行此方法时的负载教练方法中。

55
00:02:44,690 --> 00:02:47,320
所以在这里它然后将其设置为true。

56
00:02:47,320 --> 00:02:52,290
然后我们调度发送请求的动作。

57
00:02:52,290 --> 00:02:53,800
一旦完成，

58
00:02:53,800 --> 00:02:57,520
一旦调度返回的这个承诺解决了，

59
00:02:57,520 --> 00:02:59,483
我们知道我们不再加载。

60
00:03:00,360 --> 00:03:03,480
因此，既然 dispatch 在这里返回了一个承诺，

61
00:03:03,480 --> 00:03:05,590
我们也可以在这里使用 Async Await

62
00:03:05,590 --> 00:03:08,090
等待这个承诺完成，

63
00:03:08,090 --> 00:03:10,963
然后将 IsLoading 设置为 false 。

64
00:03:12,680 --> 00:03:15,663
因此，一旦请求完成，这将设置为 false，

65
00:03:17,000 --> 00:03:19,763
这将允许我们显示一个加载微调器。

66
00:03:21,700 --> 00:03:25,630
也许在这里红名单，我们可以添加一个div

67
00:03:26,780 --> 00:03:30,040
如果我们正在加载，我们用 v-if 检查，

68
00:03:30,040 --> 00:03:32,750
这样只有在我们加载时才会添加。

69
00:03:32,750 --> 00:03:35,460
然后我在这里渲染我的基础微调器，

70
00:03:35,460 --> 00:03:37,873
我刚刚给你的这个加载微调器组件。

71
00:03:38,930 --> 00:03:42,530
我们现在只需要在主 JS 中注册它。

72
00:03:42,530 --> 00:03:47,530
所以在 Maine JS 中，我们导入 Base Spinner

73
00:03:47,630 --> 00:03:50,937
来自 ./components/UI/BaseSpinner.vue，

74
00:03:54,160 --> 00:03:57,420
并将其注册为全局组件

75
00:03:57,420 --> 00:04:02,083
应用程序组件指向基本微调器。

76
00:04:03,420 --> 00:04:05,830
所以现在基础微调器可用

77
00:04:05,830 --> 00:04:07,060
在教练名单中，

78
00:04:07,060 --> 00:04:09,913
如果我们正在加载，我们会在这里渲染它。

79
00:04:11,880 --> 00:04:13,130
现在，这也意味着

80
00:04:13,130 --> 00:04:18,130
我想在这里稍微调整一下我的 hasCoaches 计算属性

81
00:04:18,850 --> 00:04:22,350
因为这个列表当然应该只被渲染

82
00:04:22,350 --> 00:04:25,720
如果我们有教练并且我们目前没有加载

83
00:04:25,720 --> 00:04:28,550
这样如果我们正在加载它就会消失。

84
00:04:28,550 --> 00:04:32,390
所以在 hasCoaches 计算属性中，

85
00:04:32,390 --> 00:04:34,950
我们应该稍微调整一下

86
00:04:34,950 --> 00:04:38,430
我不只是在这里检查这个，

87
00:04:38,430 --> 00:04:42,270
但还要检查我们目前没有加载。

88
00:04:42,270 --> 00:04:44,750
所以将它添加到计算属性

89
00:04:44,750 --> 00:04:47,653
所以如果我们正在加载，我们永远不会显示列表。

90
00:04:50,541 --> 00:04:55,541
因此，如果我保存它，现在我们会看到加载微调器。

91
00:04:55,580 --> 00:04:58,450
现在它只是短暂存在，因为这一切都超级快，

92
00:04:58,450 --> 00:05:01,440
但是，嘿，至少我们简要地看到了它。

93
00:05:01,440 --> 00:05:05,640
我们还简要地看到没有找到教练

94
00:05:05,640 --> 00:05:08,820
因为我们会在列表未呈现时显示此内容。

95
00:05:08,820 --> 00:05:11,630
目前，这当然意味着

96
00:05:11,630 --> 00:05:14,720
它总是在我们加载时渲染。

97
00:05:14,720 --> 00:05:16,280
所以列表不会被渲染，

98
00:05:16,280 --> 00:05:17,970
但这并不总是呈现。

99
00:05:17,970 --> 00:05:22,170
但是我们可以通过将它从 v-if 转换为 v-else-if 来解决这个问题

100
00:05:22,170 --> 00:05:24,070
这样我们要么正在加载

101
00:05:24,070 --> 00:05:25,670
并显示加载微调器，

102
00:05:25,670 --> 00:05:28,390
或者我们有教练并展示那些，

103
00:05:28,390 --> 00:05:31,103
或者我们没有并显示此文本。

104
00:05:32,140 --> 00:05:34,683
然后我们这里只有这个微调器。

105
00:05:36,170 --> 00:05:39,580
现在我们还看到注册为教练按钮闪烁，

106
00:05:39,580 --> 00:05:41,780
当然，那个按钮也不应该出现

107
00:05:41,780 --> 00:05:43,080
如果我们正在加载。

108
00:05:43,080 --> 00:05:47,770
所以在这里，我想检查一下，不仅仅是如果我们不是教练，

109
00:05:47,770 --> 00:05:50,230
但我们也没有加载。

110
00:05:50,230 --> 00:05:51,670
只有这样才会出现。

111
00:05:51,670 --> 00:05:54,040
如果我们正在加载，它不应该出现。

112
00:05:54,040 --> 00:05:56,933
因此，如果我重新加载，此按钮不会闪烁。

113
00:05:57,990 --> 00:05:59,270
好的，完美。

114
00:05:59,270 --> 00:06:01,660
所以现在我们在这里有了这个加载微调器。

115
00:06:01,660 --> 00:06:04,160
当我刷新时，我们也看到了它。

116
00:06:04,160 --> 00:06:06,230
现在，错误处理呢？

117
00:06:06,230 --> 00:06:09,060
目前，如果出现问题，

118
00:06:09,060 --> 00:06:12,880
例如，如果我在这里引入一个故意的错误

119
00:06:12,880 --> 00:06:14,930
通过转到负载教练操作

120
00:06:14,930 --> 00:06:17,000
并在最后删除 N，

121
00:06:17,000 --> 00:06:21,670
如果我们得到一个错误，我们只会看到一个无限加载微调器

122
00:06:21,670 --> 00:06:24,060
我们在这里看到了错误，但当然，

123
00:06:24,060 --> 00:06:27,740
我们的用户通常不会打开开发人员工具。

124
00:06:27,740 --> 00:06:30,120
所以我们想在这里显示一条错误消息

125
00:06:30,120 --> 00:06:32,700
在这种情况下，对用户也是如此。

126
00:06:32,700 --> 00:06:35,993
因此，错误处理是我接下来要实现的。