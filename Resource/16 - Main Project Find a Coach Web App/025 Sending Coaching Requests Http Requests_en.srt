1
00:00:02,090 --> 00:00:04,670
So I now basically want to implement

2
00:00:04,670 --> 00:00:08,320
for requests what we already did for coaches.

3
00:00:08,320 --> 00:00:10,590
When we contact a coach,

4
00:00:10,590 --> 00:00:13,030
this data should not just be added locally

5
00:00:13,030 --> 00:00:14,700
to our Vuex store,

6
00:00:14,700 --> 00:00:17,630
but instead a request should be sent to Firebase.

7
00:00:17,630 --> 00:00:20,603
And I then also want to load data from there, of course.

8
00:00:21,790 --> 00:00:24,440
So let's start with contacting a coach.

9
00:00:24,440 --> 00:00:28,650
When we do that, I no longer want to generate a dummy ID.

10
00:00:28,650 --> 00:00:32,310
Instead, Firebase indeed will generate an ID for me.

11
00:00:32,310 --> 00:00:34,700
So I will then use that later.

12
00:00:34,700 --> 00:00:38,720
But this is the raw data which I want to send to Firebase.

13
00:00:38,720 --> 00:00:41,660
The ID of the coach to whom the request is sent,

14
00:00:41,660 --> 00:00:44,520
the user email and the message.

15
00:00:44,520 --> 00:00:47,430
So again, we can use fetch here, the fetch method,

16
00:00:47,430 --> 00:00:49,630
to send our HTTP request,

17
00:00:49,630 --> 00:00:53,770
and it will again be this Firebase URL here.

18
00:00:53,770 --> 00:00:57,820
Or at least again, that will be a part of the final URL.

19
00:00:57,820 --> 00:01:00,800
Because now I want to store all the requests

20
00:01:00,800 --> 00:01:04,700
being sent to a coach under the ID of that coach.

21
00:01:04,700 --> 00:01:08,740
So maybe we sent that to requests, slash,

22
00:01:08,740 --> 00:01:10,690
and then the ID of that coach.

23
00:01:10,690 --> 00:01:12,940
So payload.coach ID here,

24
00:01:12,940 --> 00:01:15,340
and for that I'll convert this to a template literal

25
00:01:15,340 --> 00:01:18,230
by using back ticks instead of single quotes,

26
00:01:18,230 --> 00:01:20,690
so that we can inject something into that string

27
00:01:20,690 --> 00:01:23,440
with this special syntax here.

28
00:01:23,440 --> 00:01:25,243
And add payload.coachId.

29
00:01:27,450 --> 00:01:30,463
And then .json at the end.

30
00:01:31,390 --> 00:01:34,660
And this will create a new requests node

31
00:01:34,660 --> 00:01:36,440
on this Firebase backend.

32
00:01:36,440 --> 00:01:39,420
And there a node for this coach ID.

33
00:01:39,420 --> 00:01:41,290
And then under that node,

34
00:01:41,290 --> 00:01:45,253
all the requests sent to that coach will be stored.

35
00:01:46,160 --> 00:01:48,250
Now this shouldn't be a get request though,

36
00:01:48,250 --> 00:01:51,640
so we need this second argument to configure the request,

37
00:01:51,640 --> 00:01:54,370
and set the method to post.

38
00:01:54,370 --> 00:01:56,900
This time it's a post and not a put request

39
00:01:56,900 --> 00:01:59,540
because I don't want to overwrite the existing data,

40
00:01:59,540 --> 00:02:02,320
I just want to add a new request.

41
00:02:02,320 --> 00:02:05,350
With every request that's sent, it's a brand new request

42
00:02:05,350 --> 00:02:08,220
that's being added to a list of requests,

43
00:02:08,220 --> 00:02:09,433
that's the idea here.

44
00:02:10,470 --> 00:02:12,050
And then here we need a body,

45
00:02:12,050 --> 00:02:14,660
so the data attached to the request,

46
00:02:14,660 --> 00:02:17,660
which of course should be the new request

47
00:02:17,660 --> 00:02:18,993
we're generating here.

48
00:02:20,350 --> 00:02:22,620
Now, justice, before this returns a promise,

49
00:02:22,620 --> 00:02:27,183
so we can use async await to await the response.

50
00:02:29,380 --> 00:02:32,610
And then thereafter, we can get the response data

51
00:02:32,610 --> 00:02:34,823
by awaiting response.json.

52
00:02:37,170 --> 00:02:40,710
I need that data here, because for a post request,

53
00:02:40,710 --> 00:02:45,070
Firebase will return the generated ID.

54
00:02:45,070 --> 00:02:48,260
It automatically generates a new unique ID

55
00:02:48,260 --> 00:02:51,900
for every entry that's posted, so for this new request.

56
00:02:51,900 --> 00:02:55,380
And I want to use this generated ID locally here

57
00:02:55,380 --> 00:02:56,460
in my Vue app.

58
00:02:56,460 --> 00:02:59,080
So I want to extract it from the response data

59
00:02:59,080 --> 00:03:01,403
that's being sent back from Firebase.

60
00:03:02,880 --> 00:03:07,783
We can simply set newRequest.id to responseData.name.

61
00:03:09,180 --> 00:03:13,220
Now I'm adding a new ID property to new request

62
00:03:13,220 --> 00:03:14,270
with this line.

63
00:03:14,270 --> 00:03:18,210
And the response data object, which I get back from Firebase

64
00:03:18,210 --> 00:03:19,870
will have a name field,

65
00:03:19,870 --> 00:03:23,340
which holds this automatically generated ID.

66
00:03:23,340 --> 00:03:24,770
That's something you have to know.

67
00:03:24,770 --> 00:03:28,700
You can read it into Firebase docs or simply of course,

68
00:03:28,700 --> 00:03:31,650
also console.log responseData to look into it.

69
00:03:31,650 --> 00:03:34,230
And there you will see it has this name field

70
00:03:34,230 --> 00:03:37,023
with the unique ID that was generated.

71
00:03:39,110 --> 00:03:40,870
Now just as before, we can also check

72
00:03:40,870 --> 00:03:45,870
if the response is okay, or if it's not okay.

73
00:03:47,810 --> 00:03:51,730
And if it is not okay, we could also generate a new error

74
00:03:51,730 --> 00:03:54,960
where we check if response data maybe has a message key

75
00:03:54,960 --> 00:03:56,770
that contains an error message.

76
00:03:56,770 --> 00:04:01,770
And otherwise, we add our own fallback message,

77
00:04:02,180 --> 00:04:04,830
failed to send request.

78
00:04:04,830 --> 00:04:08,403
And then we could throw this error here, if we wanted to.

79
00:04:11,410 --> 00:04:14,840
So now with that, we sent requests to Firebase

80
00:04:14,840 --> 00:04:17,839
and it's up to us how we now want to handle this

81
00:04:17,839 --> 00:04:19,353
in our front end.

82
00:04:21,070 --> 00:04:23,310
In the contact coach component,

83
00:04:23,310 --> 00:04:25,350
at the moment we dispatched this,

84
00:04:25,350 --> 00:04:28,370
and then we don't care whether that's finished or not.

85
00:04:28,370 --> 00:04:30,820
We immediately redirect and behind the scenes,

86
00:04:30,820 --> 00:04:32,350
the request will be sent,

87
00:04:32,350 --> 00:04:34,710
but we don't show the user any feedback.

88
00:04:34,710 --> 00:04:37,943
We show no error message, we show no loading spinner.

89
00:04:38,860 --> 00:04:41,290
And it's up to you whether you want this or not,

90
00:04:41,290 --> 00:04:43,520
it's up to you which experience you want to offer

91
00:04:43,520 --> 00:04:44,560
to the user.

92
00:04:44,560 --> 00:04:47,110
Maybe you don't want the user to wait

93
00:04:47,110 --> 00:04:49,130
until this request is sent,

94
00:04:49,130 --> 00:04:51,230
because for the user using the app,

95
00:04:51,230 --> 00:04:53,420
it's actually doesn't make a difference.

96
00:04:53,420 --> 00:04:55,950
But maybe you do want the user to wait.

97
00:04:55,950 --> 00:04:58,750
So this is up to you how you want to implement this.

98
00:04:58,750 --> 00:05:01,920
I will not do anything here in contact coach.

99
00:05:01,920 --> 00:05:04,230
I will just dispatch this action,

100
00:05:04,230 --> 00:05:07,080
behind the scenes the HTTP request is sent.

101
00:05:07,080 --> 00:05:11,480
And then here, I don't implement loading or error handling,

102
00:05:11,480 --> 00:05:13,770
but of course you can absolutely do this

103
00:05:13,770 --> 00:05:15,893
as an extra practice if you want to.

104
00:05:17,180 --> 00:05:19,660
But with that, if we save everything,

105
00:05:19,660 --> 00:05:22,530
we should actually have a working experience

106
00:05:22,530 --> 00:05:24,480
where we can contact a coach,

107
00:05:24,480 --> 00:05:26,263
at the moment, ourselves here.

108
00:05:29,310 --> 00:05:32,170
Send a message and don't see it here,

109
00:05:32,170 --> 00:05:34,300
or actually we do because we stored it locally.

110
00:05:34,300 --> 00:05:36,830
But this is not fetched from Firebase.

111
00:05:36,830 --> 00:05:39,610
But we do see it on Firebase as well.

112
00:05:39,610 --> 00:05:42,990
Here, requests, then the ID of that coach,

113
00:05:42,990 --> 00:05:46,793
and then here, that request that was sent.

114
00:05:48,200 --> 00:05:52,060
Actually, we could also remove coach ID from that field

115
00:05:52,060 --> 00:05:53,363
now that I think about it.

116
00:05:54,720 --> 00:05:57,500
Let's maybe do that, let's delete it here

117
00:05:57,500 --> 00:06:02,120
and let's make sure that's in the data we're sending

118
00:06:02,120 --> 00:06:07,120
in our action here we actually don't include coach ID.

119
00:06:08,550 --> 00:06:13,550
Instead, let's add the coach ID only here

120
00:06:15,410 --> 00:06:16,940
after we send the request,

121
00:06:16,940 --> 00:06:20,070
so that we have it in the local data with which we work,

122
00:06:20,070 --> 00:06:23,290
but not in the data which we sent to the server.

123
00:06:23,290 --> 00:06:26,570
So here I will still get payload.coachId.

124
00:06:29,040 --> 00:06:30,580
And add it to the local data,

125
00:06:30,580 --> 00:06:33,240
but it's now not getting sent to the server.

126
00:06:33,240 --> 00:06:34,370
Awesome.

127
00:06:34,370 --> 00:06:36,540
With that, our data will in the future

128
00:06:36,540 --> 00:06:38,670
always end up like this.

129
00:06:38,670 --> 00:06:42,033
Now we also want to fetch that data, of course.

130
00:06:43,060 --> 00:06:46,960
So here I will implement fetching just as I did it before.

131
00:06:46,960 --> 00:06:49,680
In the actions for the requests,

132
00:06:49,680 --> 00:06:53,550
we can add a fetch requests method,

133
00:06:53,550 --> 00:06:55,060
however you want to name it.

134
00:06:55,060 --> 00:06:57,580
And here, of course, we get a context.

135
00:06:57,580 --> 00:06:59,730
And I want to load all the requests

136
00:06:59,730 --> 00:07:01,930
for the currently active user.

137
00:07:01,930 --> 00:07:05,380
And that's important, only the requests that were sent

138
00:07:05,380 --> 00:07:07,880
to this currently active user.

139
00:07:07,880 --> 00:07:12,380
So therefore, we need that user ID from our global state,

140
00:07:12,380 --> 00:07:14,430
from our global getters.

141
00:07:14,430 --> 00:07:16,420
We can get this through context.

142
00:07:16,420 --> 00:07:19,940
You might remember, there we also can access rootGetters

143
00:07:19,940 --> 00:07:22,370
and then simply get our user ID.

144
00:07:22,370 --> 00:07:24,960
So that's the did have to coach

145
00:07:24,960 --> 00:07:27,773
for whom we want to fetch all the requests.

146
00:07:29,050 --> 00:07:32,450
And with that ID, fetching will be easy.

147
00:07:32,450 --> 00:07:35,940
In the end, I will just copy this line of code here

148
00:07:38,440 --> 00:07:40,800
and execute it here as well.

149
00:07:40,800 --> 00:07:44,630
But the coach ID will now be coach ID,

150
00:07:44,630 --> 00:07:46,620
which we get from our getters.

151
00:07:46,620 --> 00:07:48,530
And this will now send a get request

152
00:07:48,530 --> 00:07:52,910
and fetch all the requests that can be found

153
00:07:52,910 --> 00:07:55,213
for that coach ID on Firebase.

154
00:07:56,430 --> 00:08:00,330
Again, we can use async await to handle that promise

155
00:08:00,330 --> 00:08:04,380
in a pleasant way, get our response here,

156
00:08:04,380 --> 00:08:08,740
and get our response data by awaiting response.json.

157
00:08:11,630 --> 00:08:14,973
Check if response is not okay.

158
00:08:16,380 --> 00:08:21,240
In which case we can create an error just as before.

159
00:08:21,240 --> 00:08:23,080
So here, create an error,

160
00:08:23,080 --> 00:08:27,750
and maybe say failed to fetch requests, throw that error.

161
00:08:27,750 --> 00:08:30,540
And otherwise, if we make it past this check,

162
00:08:30,540 --> 00:08:33,320
we know we got a successful response,

163
00:08:33,320 --> 00:08:35,539
we can now use the response data.

164
00:08:35,539 --> 00:08:39,210
And the response data will now hold everything

165
00:08:39,210 --> 00:08:43,130
below that coach ID in the requests node.

166
00:08:43,130 --> 00:08:48,130
So here, we'll actually have an object full of these IDs

167
00:08:49,890 --> 00:08:51,310
as property names.

168
00:08:51,310 --> 00:08:54,170
And below these ideas, we'll find nested objects

169
00:08:54,170 --> 00:08:56,563
with the concrete request data.

170
00:08:57,750 --> 00:08:59,670
So again, we need to transform this

171
00:08:59,670 --> 00:09:02,690
so that we can work with that data locally.

172
00:09:02,690 --> 00:09:06,070
Because locally, requests should have a user email,

173
00:09:06,070 --> 00:09:10,570
a message, but then also an ID and a coach ID field.

174
00:09:10,570 --> 00:09:12,720
So we need to transform the data we're getting

175
00:09:12,720 --> 00:09:14,860
so that it looks like this.

176
00:09:14,860 --> 00:09:18,797
For this all again at a helper, constant requests.

177
00:09:18,797 --> 00:09:23,797
And then again, loop through all the keys in responseData.

178
00:09:28,820 --> 00:09:31,703
Create a request helper object here.

179
00:09:34,360 --> 00:09:37,840
And then add an ID, which is my key.

180
00:09:37,840 --> 00:09:41,250
That's the unique ID for that given request.

181
00:09:41,250 --> 00:09:45,080
Add a coach ID, which is the coach ID we get up there

182
00:09:45,080 --> 00:09:46,283
from the root getters.

183
00:09:47,580 --> 00:09:49,810
Then add a user email field,

184
00:09:49,810 --> 00:09:53,623
which is response data for that given key .userEmail,

185
00:09:55,490 --> 00:09:58,450
because it's stored under that user email field

186
00:09:58,450 --> 00:09:59,423
on the backend.

187
00:10:00,760 --> 00:10:05,450
And then also here, add a message which is responseData

188
00:10:05,450 --> 00:10:07,563
for the given key .message.

189
00:10:09,150 --> 00:10:13,533
Then we can add this to requests.

190
00:10:16,130 --> 00:10:19,023
And finally, once we're through that for loop,

191
00:10:20,190 --> 00:10:23,130
context.commit and commit a mutation

192
00:10:23,130 --> 00:10:25,370
that receives these requests.

193
00:10:25,370 --> 00:10:28,110
Now that's a mutation I have yet to create.

194
00:10:28,110 --> 00:10:30,480
I'll name it setRequests.

195
00:10:30,480 --> 00:10:32,633
Here, we get a state and a payload.

196
00:10:33,590 --> 00:10:36,570
And basically, the same as we did it for coaches,

197
00:10:36,570 --> 00:10:37,710
will be done here.

198
00:10:37,710 --> 00:10:42,060
We said state.requests equal to payload, just like that.

199
00:10:42,060 --> 00:10:46,130
And payload should be an array full of requests, therefore.

200
00:10:46,130 --> 00:10:48,980
Hence we can now commit setRequests

201
00:10:50,760 --> 00:10:53,360
and pass our requests as a payload.

202
00:10:53,360 --> 00:10:57,083
So these will be the requests our local requests are set to.

203
00:10:58,490 --> 00:11:02,770
And now we just need to dispatch fetch requests,

204
00:11:02,770 --> 00:11:05,470
well, whenever they should be fetched.

205
00:11:05,470 --> 00:11:07,900
And that of course should be the case

206
00:11:07,900 --> 00:11:12,160
on the requests received component.

207
00:11:12,160 --> 00:11:15,560
So there it'll be the same pattern as for coaches.

208
00:11:15,560 --> 00:11:19,767
We can add methods and add a loadRequests method

209
00:11:22,060 --> 00:11:24,320
where we reach out to our store

210
00:11:24,320 --> 00:11:29,320
and dispatch the requests, slash, fetchRequests action.

211
00:11:32,210 --> 00:11:35,190
And then again, this will return a promise in this case

212
00:11:35,190 --> 00:11:37,200
because we use async await in there

213
00:11:37,200 --> 00:11:39,310
and that automatically returns a promise

214
00:11:39,310 --> 00:11:41,270
in the dispatched action.

215
00:11:41,270 --> 00:11:44,320
So we can also use the isLoading approach here

216
00:11:44,320 --> 00:11:46,140
to show a loading spinner to the user

217
00:11:46,140 --> 00:11:48,983
whilst we're waiting for requests to be loaded.

218
00:11:50,030 --> 00:11:51,760
So here in requests received,

219
00:11:51,760 --> 00:11:56,760
we can add our data and return a new data object

220
00:11:57,630 --> 00:12:00,350
with isLoading, which initially is false.

221
00:12:00,350 --> 00:12:02,980
Maybe already also with an error property

222
00:12:02,980 --> 00:12:04,763
so that we can handle errors.

223
00:12:06,060 --> 00:12:09,643
And then we can set this as loading to true here.

224
00:12:11,110 --> 00:12:13,780
Add async in front of load requests

225
00:12:13,780 --> 00:12:16,510
so that we can await the promise

226
00:12:16,510 --> 00:12:20,240
returned by this action being dispatched.

227
00:12:20,240 --> 00:12:23,510
So that will then resolve once the request has been sent

228
00:12:23,510 --> 00:12:24,810
and the data is there.

229
00:12:24,810 --> 00:12:27,453
And then we set isLoading to false again.

230
00:12:29,080 --> 00:12:31,770
And we can also try catch this

231
00:12:31,770 --> 00:12:35,740
to catch any potential errors we might be getting.

232
00:12:35,740 --> 00:12:39,470
And then we can set error equal to error.message,

233
00:12:39,470 --> 00:12:43,463
or as a fallback, something failed, whatever.

234
00:12:45,300 --> 00:12:47,870
And now we can show a loading spinner if we're loading

235
00:12:47,870 --> 00:12:50,770
and show the error dialogue if we got an error.

236
00:12:50,770 --> 00:12:54,040
So in the markup of this component, in the template,

237
00:12:54,040 --> 00:12:58,840
we can add our base dialog here for error handling.

238
00:12:58,840 --> 00:13:00,660
And actually, we can copy the base dialog

239
00:13:00,660 --> 00:13:02,840
from coaches list, I guess.

240
00:13:02,840 --> 00:13:06,983
Just copy this base dialogue over two requests received.

241
00:13:09,160 --> 00:13:12,120
Of course, we now also need to add a handle error method

242
00:13:12,120 --> 00:13:15,160
to clear the error if it has been handled.

243
00:13:15,160 --> 00:13:19,730
So add handle error, where we simply set this error

244
00:13:19,730 --> 00:13:21,303
equal to null again.

245
00:13:23,080 --> 00:13:25,130
And now for the loading spinner,

246
00:13:25,130 --> 00:13:29,800
here I want to add the base spinner below the header,

247
00:13:29,800 --> 00:13:34,800
above the unordered list and show it if we are loading.

248
00:13:37,260 --> 00:13:40,330
And here, we turn this into an else if.

249
00:13:40,330 --> 00:13:45,330
And showed this if we have requests and we're not loading.

250
00:13:47,560 --> 00:13:49,260
Of course, we can also merge this

251
00:13:49,260 --> 00:13:51,810
into one computed property if we want to.

252
00:13:51,810 --> 00:13:53,343
And else, show this text.

253
00:13:54,460 --> 00:13:58,150
And if we now save that I get an error,

254
00:13:58,150 --> 00:14:03,150
because this should be this error to which I'm setting here.

255
00:14:05,420 --> 00:14:07,810
But now with that, we can save this successfully.

256
00:14:07,810 --> 00:14:10,414
And now we have to call loadRequests

257
00:14:10,414 --> 00:14:12,520
when this component is created.

258
00:14:12,520 --> 00:14:14,830
So in the created life cycle here,

259
00:14:14,830 --> 00:14:17,137
we can call this loadRequests.

260
00:14:18,390 --> 00:14:19,970
So this method will be executed

261
00:14:19,970 --> 00:14:23,433
when this requests received component is created.

262
00:14:24,510 --> 00:14:26,350
And if we now save this and be reload here,

263
00:14:26,350 --> 00:14:28,873
we see a spinner and then our data.

264
00:14:30,290 --> 00:14:34,280
And with that, we got all the functionality we need here.

265
00:14:34,280 --> 00:14:39,070
Now, if I quickly change my user ID in my main store

266
00:14:39,070 --> 00:14:42,630
from c3 to c1, let's say,

267
00:14:42,630 --> 00:14:46,090
you'll see we got no requests for this coach.

268
00:14:46,090 --> 00:14:48,750
And we can now still register as a coach,

269
00:14:48,750 --> 00:14:51,650
Manual Lorenz, let's say.

270
00:14:51,650 --> 00:14:56,390
I'm a web developer and data analyst.

271
00:14:56,390 --> 00:15:00,273
Let me help you with your career.

272
00:15:01,630 --> 00:15:05,520
Let's say we got our hourly rate, frontend and career.

273
00:15:05,520 --> 00:15:07,740
We can register this coach as well,

274
00:15:07,740 --> 00:15:10,220
because now we have a different user ID,

275
00:15:10,220 --> 00:15:12,090
which of course is some dummy data

276
00:15:12,090 --> 00:15:15,133
we're still managing here, but it is good enough for now.

277
00:15:16,600 --> 00:15:18,720
Well, and with that, of course,

278
00:15:18,720 --> 00:15:21,360
we don't see requests here for this user.

279
00:15:21,360 --> 00:15:24,870
But on the other hand, if I switch this back to c3,

280
00:15:24,870 --> 00:15:26,993
we now still have both coaches,

281
00:15:27,980 --> 00:15:32,170
but we now see the requests sent to the c3 coach.

282
00:15:32,170 --> 00:15:35,290
And that's the pretty much finished app,

283
00:15:35,290 --> 00:15:37,820
of course still with the dummy user ID.

284
00:15:37,820 --> 00:15:40,780
That's something we'll fix or change

285
00:15:40,780 --> 00:15:43,000
in the authentication module.

286
00:15:43,000 --> 00:15:45,660
And there's one other tweak I want to do first

287
00:15:45,660 --> 00:15:46,803
in this module.

