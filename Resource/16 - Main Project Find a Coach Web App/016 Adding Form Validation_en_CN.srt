1
00:00:02,240 --> 00:00:05,110
所以让我们来验证这个表单

2
00:00:05,110 --> 00:00:07,460
因为目前我们可以提交

3
00:00:07,460 --> 00:00:09,070
无需输入任何内容

4
00:00:09,070 --> 00:00:12,760
这当然不是这种形式背后的想法。

5
00:00:12,760 --> 00:00:15,250
所以在这里的教练表单组件中，

6
00:00:15,250 --> 00:00:16,360
我们正在获取输入，

7
00:00:16,360 --> 00:00:20,430
但是现在我想在提交表单时添加一个额外的步骤。

8
00:00:20,430 --> 00:00:22,350
我也想验证一下

9
00:00:22,350 --> 00:00:26,620
为此，我将添加一个单独的方法，简单地 validateForm

10
00:00:26,620 --> 00:00:28,750
将逻辑拆分为两种方法

11
00:00:28,750 --> 00:00:31,510
并且没有一种超长的方法

12
00:00:31,510 --> 00:00:35,200
并在一开始就在 submitForm 中，

13
00:00:35,200 --> 00:00:38,433
我将简单地称之为 validateForm，

14
00:00:39,500 --> 00:00:41,903
所以我们在这里添加的这个新方法。

15
00:00:43,190 --> 00:00:45,960
现在在这里我想通过所有的输入

16
00:00:45,960 --> 00:00:49,150
并检查它们是否有效，

17
00:00:49,150 --> 00:00:52,440
我将在这里添加一个整体的新数据属性

18
00:00:52,440 --> 00:00:57,310
到整个组件，formIsValid 数据组件，

19
00:00:57,310 --> 00:00:59,210
最初是真的，

20
00:00:59,210 --> 00:01:03,063
但是一旦一个输入为假，这将是假的。

21
00:01:05,370 --> 00:01:07,560
不，实际上我会进行表单验证

22
00:01:07,560 --> 00:01:10,500
甚至比这更复杂一些。

23
00:01:10,500 --> 00:01:14,510
我还想管理每个元素的有效性，

24
00:01:14,510 --> 00:01:17,580
这样我以后可以重新突出显示元素

25
00:01:17,580 --> 00:01:22,380
例如，通过将标签着色为红色，这是无效的。

26
00:01:22,380 --> 00:01:25,100
因此，这里管理的其他数据

27
00:01:25,100 --> 00:01:29,120
不再只是贬低某种财产，

28
00:01:29,120 --> 00:01:32,290
但现在这将是一个对象，

29
00:01:32,290 --> 00:01:34,590
我想要一个 val 键的地方，

30
00:01:34,590 --> 00:01:37,190
保存用户输入的值

31
00:01:37,190 --> 00:01:40,140
和一个 isValidKey 最初是真的，

32
00:01:40,140 --> 00:01:44,343
如果数据输入应该是无效的，这可能会变成假。

33
00:01:45,600 --> 00:01:48,370
所以我要在这里替换我的价值观

34
00:01:48,370 --> 00:01:50,593
有了这个新概念。

35
00:01:51,970 --> 00:01:54,660
这里 val 最初为 null，

36
00:01:54,660 --> 00:01:58,690
这里最初是一个空数组。

37
00:01:58,690 --> 00:02:01,380
所以现在数据变得有点复杂了

38
00:02:01,380 --> 00:02:03,550
现在我们需要更新 v-model

39
00:02:03,550 --> 00:02:08,530
并将其绑定到 firstName.val、lastName.val

40
00:02:08,530 --> 00:02:12,420
等等，因为现在名字，姓氏，描述，

41
00:02:12,420 --> 00:02:16,100
实际上持有我们有 val 属性的对象，

42
00:02:16,100 --> 00:02:18,980
然后保持应该绑定的值。

43
00:02:18,980 --> 00:02:21,830
所以这就是为什么我要更新我的 v-model 绑定

44
00:02:21,830 --> 00:02:23,533
对于这里的所有输入，

45
00:02:24,420 --> 00:02:28,220
当然包括这样的复选框

46
00:02:29,600 --> 00:02:34,600
现在在我们的 validateForm 方法中，

47
00:02:34,980 --> 00:02:36,620
我将通过所有这些输入，

48
00:02:36,620 --> 00:02:37,940
看看他们每个人

49
00:02:37,940 --> 00:02:39,833
看看它是否有效。

50
00:02:41,150 --> 00:02:44,550
为此，我将 thisFormIsValid 设置为 true

51
00:02:44,550 --> 00:02:47,640
以防它失效并因此落入

52
00:02:47,640 --> 00:02:49,790
自上次验证以来

53
00:02:49,790 --> 00:02:53,300
然后我将浏览所有这些输入。

54
00:02:53,300 --> 00:02:56,100
我要检查的第一个是 firstName。

55
00:02:56,100 --> 00:03:00,020
这里有一个 IF 语句，我将检查值是否为空，

56
00:03:00,020 --> 00:03:02,250
请记住，我们已经在修剪它，

57
00:03:02,250 --> 00:03:03,980
所以因此有多余的空白

58
00:03:03,980 --> 00:03:06,440
将已经被删除。

59
00:03:06,440 --> 00:03:08,990
如果它仍然是空的，它是无效的

60
00:03:08,990 --> 00:03:12,100
因此我会设置这个 firstName.isValid

61
00:03:12,100 --> 00:03:15,690
为 false 并且由于整体形式无效，

62
00:03:15,690 --> 00:03:17,940
如果至少一个输入无效，

63
00:03:17,940 --> 00:03:21,723
我将在此处将此 formIsValid 设置为 false。

64
00:03:23,250 --> 00:03:26,823
然后我们可以对 lastName 重复这个

65
00:03:27,730 --> 00:03:31,313
并在此处将此 lastName 有效设置为 false。

66
00:03:32,160 --> 00:03:35,500
再次，重复它用于描述

67
00:03:37,110 --> 00:03:40,823
并将此描述有效设置为 false。

68
00:03:42,200 --> 00:03:44,840
现在对支票的评分有点不同，

69
00:03:44,840 --> 00:03:47,380
这里我不会检查它是否为空，

70
00:03:47,380 --> 00:03:52,030
但我会检查我们是否没有费率，所以如果它是空的

71
00:03:52,030 --> 00:03:57,030
或零或类似的东西，或者即使我们确实有一个费率，

72
00:03:58,360 --> 00:04:01,980
我会检查这个比率 val 是否小于零，

73
00:04:01,980 --> 00:04:03,300
因为你不应该

74
00:04:03,300 --> 00:04:06,163
当然是负小时费率。

75
00:04:07,450 --> 00:04:11,440
所以在这些情况下，rate is valid 会变成 false。

76
00:04:11,440 --> 00:04:16,440
对于这些区域，我将检查该区域是否为 val.length

77
00:04:18,170 --> 00:04:21,050
等于零，表示没有区域

78
00:04:21,050 --> 00:04:24,530
已经添加了专业知识，这也是无效的，

79
00:04:24,530 --> 00:04:26,600
你至少需要一个区域。

80
00:04:26,600 --> 00:04:30,270
所以在这种情况下， this.areasisValid 将变为 false

81
00:04:30,270 --> 00:04:33,303
而 this.formisValid 将变为 false。

82
00:04:35,000 --> 00:04:37,120
这就是我的验证逻辑，

83
00:04:37,120 --> 00:04:40,560
这意味着在调用 this.validateForm 之后，

84
00:04:40,560 --> 00:04:44,620
如果表单无效，this.formIsValid 将为 false，

85
00:04:44,620 --> 00:04:46,910
所以因此在 submitForm 我可以检查，

86
00:04:46,910 --> 00:04:49,110
如果不是 this.formIsValid

87
00:04:50,480 --> 00:04:52,710
在这种情况下，只需返回以确保

88
00:04:52,710 --> 00:04:55,330
该方法的其余部分不执行

89
00:04:55,330 --> 00:04:58,783
因为如果表格无效，我不想继续。

90
00:05:00,520 --> 00:05:03,270
现在我们可以转到我们的模板

91
00:05:03,270 --> 00:05:07,590
如果输入，实际上会向用户显示一些反馈

92
00:05:07,590 --> 00:05:10,520
或整体形式无效。

93
00:05:10,520 --> 00:05:14,170
让我们从整体开始吧

94
00:05:14,170 --> 00:05:18,673
在基本按钮之前，我将添加一段我说的地方，

95
00:05:19,880 --> 00:05:22,820
请修复以上错误

96
00:05:22,820 --> 00:05:27,110
并再次提交或类似的东西

97
00:05:27,110 --> 00:05:31,879
我们只用 IF 显示这个，如果不是 formIsValid，

98
00:05:31,879 --> 00:05:35,613
所以如果表单无效，如果 formIsValid 为假，

99
00:05:37,340 --> 00:05:40,430
但这还不是全部，我还想强调输入

100
00:05:40,430 --> 00:05:44,410
那是无效的，所以让我们从名字开始。

101
00:05:44,410 --> 00:05:48,000
在整个 div 上，我将动态绑定一个类

102
00:05:48,940 --> 00:05:51,390
我将为此使用这个对象语法

103
00:05:51,390 --> 00:05:54,540
在这里，我想添加无效的类，

104
00:05:54,540 --> 00:05:57,210
这是在 CSS 规则中定义的

105
00:05:57,210 --> 00:06:00,200
然后更改标签颜色等等。

106
00:06:00,200 --> 00:06:04,150
我想在这里添加无效类的名字，

107
00:06:04,150 --> 00:06:09,150
如果不是firstName.isValid，那么如果它是无效的。

108
00:06:10,440 --> 00:06:13,773
然后这个无效的 CSS 类将被添加到这个 div 中。

109
00:06:14,940 --> 00:06:19,840
另外，在输入下方我会有一段，

110
00:06:19,840 --> 00:06:24,840
我说的名字不能为空

111
00:06:25,120 --> 00:06:29,883
这表明 IF not first name 是有效的。

112
00:06:31,640 --> 00:06:33,950
现在我要复制那段

113
00:06:33,950 --> 00:06:35,930
因为对于姓氏，我想说这个，

114
00:06:35,930 --> 00:06:37,900
只用姓说名字

115
00:06:37,900 --> 00:06:41,220
并检查姓氏是否无效，

116
00:06:41,220 --> 00:06:44,400
我也会复制那个课堂作业

117
00:06:44,400 --> 00:06:46,200
并将其分配在这个 divv 上

118
00:06:46,200 --> 00:06:49,780
但当然，检查姓氏是有效的

119
00:06:49,780 --> 00:06:52,483
或者准确地说是无效的。

120
00:06:55,020 --> 00:06:58,670
现在对于描述的文本区域，它是相同的，

121
00:06:58,670 --> 00:07:00,460
复制到段落并说

122
00:07:04,005 --> 00:07:06,210
描述不能为空

123
00:07:06,210 --> 00:07:10,800
并将此 CSS 类分配复制到 div

124
00:07:10,800 --> 00:07:12,900
通过检查描述是否有效

125
00:07:14,860 --> 00:07:18,750
再次，将段落复制到费率

126
00:07:18,750 --> 00:07:20,860
在这里，我当然想说

127
00:07:20,860 --> 00:07:25,860
比率必须大于零

128
00:07:27,830 --> 00:07:30,500
并在此处添加 CSS 类

129
00:07:30,500 --> 00:07:33,603
如果费率无效，则转到 div。

130
00:07:35,470 --> 00:07:38,910
再次复制段落然后进入复选框

131
00:07:38,910 --> 00:07:43,910
在所有复选框下方，我还将添加这一段

132
00:07:44,210 --> 00:07:47,140
然后说，哎呀，

133
00:07:47,140 --> 00:07:52,140
说至少必须选择一项专业知识。

134
00:07:55,150 --> 00:07:59,280
如果区域无效，当然会显示这一点，

135
00:07:59,280 --> 00:08:01,290
我在其他段落中忘记了这一点，

136
00:08:01,290 --> 00:08:03,950
在这里我应该检查汇率是否在这里无效，

137
00:08:03,950 --> 00:08:07,740
如果描述无效

138
00:08:08,660 --> 00:08:11,860
我确实更新了名字和姓氏，

139
00:08:11,860 --> 00:08:14,290
但现在我将在此处复制该课程

140
00:08:16,370 --> 00:08:19,300
并将其添加到该表单控件 div

141
00:08:19,300 --> 00:08:23,593
如果区域无效，请围绕复选框。

142
00:08:25,370 --> 00:08:27,480
有了这个，我们希望有一些验证，

143
00:08:27,480 --> 00:08:30,940
如果我现在重新加载并提交空表单，一切都是红色的，

144
00:08:30,940 --> 00:08:32,640
我们收到了这些错误信息

145
00:08:32,640 --> 00:08:35,313
我们得到了这个主窗体错误消息。

146
00:08:36,250 --> 00:08:40,679
如果再次重新加载并且我确实在此处和此处输入了一些内容，

147
00:08:40,679 --> 00:08:44,020
但我在这里有一个负利率，例如，

148
00:08:44,020 --> 00:08:47,470
只有无效值被标记为这样。

149
00:08:47,470 --> 00:08:52,470
当然，如果我们在所有字段中输入有效的内容，

150
00:08:52,560 --> 00:08:55,950
我们可以提交这个，但我们当然会得到一个错误

151
00:08:55,950 --> 00:08:58,370
因为目前我还没有提取

152
00:08:58,370 --> 00:09:01,230
我的表单数据中的值正确，

153
00:09:01,230 --> 00:09:02,880
这是我们稍后会解决的问题。

154
00:09:03,820 --> 00:09:07,000
在我们解决这个问题之前，我还想解决另一件事。

155
00:09:07,000 --> 00:09:09,290
如果这是无效的，那可能会很好，

156
00:09:09,290 --> 00:09:13,870
如果我们在此处输入有效值后它不会保持红色，

157
00:09:13,870 --> 00:09:14,950
是小事，

158
00:09:14,950 --> 00:09:18,410
但我认为如果尽快的话，用户体验会更好

159
00:09:18,410 --> 00:09:21,220
由于这是固定的，这将消失，

160
00:09:21,220 --> 00:09:23,820
这个红色和这个错误文本

161
00:09:23,820 --> 00:09:27,053
因此，这是我也想在这里添加的功能。

162
00:09:28,050 --> 00:09:31,560
为此，我们可以添加一个新方法 clearValidity

163
00:09:33,720 --> 00:09:38,720
或类似的东西，并期望在此处获得输入名称

164
00:09:38,880 --> 00:09:43,443
作为参数，然后访问此输入，

165
00:09:44,770 --> 00:09:48,730
所以对于数据属性，名字，姓氏，描述

166
00:09:48,730 --> 00:09:52,810
依此类推，其中输入了一些值。

167
00:09:52,810 --> 00:09:54,380
所以如果输入是名字，

168
00:09:54,380 --> 00:09:56,040
我们会联系这个名字。

169
00:09:56,040 --> 00:09:59,070
如果这个姓氏，我们会联系这个姓氏

170
00:09:59,070 --> 00:10:01,930
并将该输入的 isValid 设置为 true

171
00:10:03,750 --> 00:10:05,930
并且应该称为明确的有效性

172
00:10:05,930 --> 00:10:08,710
每当输入失去焦点

173
00:10:08,710 --> 00:10:11,660
对于 HTML 中的每个输入元素，

174
00:10:11,660 --> 00:10:15,370
我们得到了 blur 事件，它是一个内置事件，

175
00:10:15,370 --> 00:10:19,070
无论何时触发，都会失去焦点。

176
00:10:19,070 --> 00:10:21,250
那时我想调用明确的有效性

177
00:10:21,250 --> 00:10:24,740
在这种情况下，转发名字，

178
00:10:24,740 --> 00:10:26,903
因为那是名字输入。

179
00:10:28,530 --> 00:10:33,530
但现在在这里也对姓氏重复这一点

180
00:10:35,110 --> 00:10:38,900
也在文本区域，

181
00:10:38,900 --> 00:10:41,453
这里是描述，

182
00:10:42,430 --> 00:10:45,270
并在速率上重复此操作

183
00:10:48,960 --> 00:10:50,930
然后当然是在复选框上，

184
00:10:50,930 --> 00:10:55,930
所以在每个复选框元素中，我会清除区域，哎呀，

185
00:10:58,130 --> 00:11:01,870
将其复制到所有复选框输入。

186
00:11:01,870 --> 00:11:04,920
重新格式化以使其更易于阅读

187
00:11:04,920 --> 00:11:07,250
有了这个，如果我们现在保存这个，

188
00:11:07,250 --> 00:11:10,180
如果我提交无效的表格，它全是红色的

189
00:11:10,180 --> 00:11:12,683
但是如果我输入一个变成黑色的有效名称。

190
00:11:15,750 --> 00:11:17,690
这是一个测验。

191
00:11:17,690 --> 00:11:20,180
如果我输入无效的内容，它也会变成黑色

192
00:11:20,180 --> 00:11:22,110
因为我们必须再次验证，

193
00:11:22,110 --> 00:11:24,730
但至少它承认我们做了什么

194
00:11:24,730 --> 00:11:28,830
当我，我模糊了一些在这里它也变黑了。

195
00:11:28,830 --> 00:11:31,540
当然，如果我在这里输入无效，

196
00:11:31,540 --> 00:11:32,910
我们仍然得到一个错误，

197
00:11:32,910 --> 00:11:36,150
但至少我们给用户我们看到的反馈

198
00:11:36,150 --> 00:11:37,923
他或她改变了什么。

199
00:11:39,010 --> 00:11:42,010
有了这个，虽然我们得到了验证

200
00:11:42,010 --> 00:11:43,320
我对此很满意。

201
00:11:43,320 --> 00:11:46,400
现在，我只想确保正确提交数据

202
00:11:46,400 --> 00:11:50,570
为此，在提交表单方法中，

203
00:11:50,570 --> 00:11:53,710
我们需要深入研究 val 属性

204
00:11:53,710 --> 00:11:55,940
在我们所有的输入属性中，

205
00:11:55,940 --> 00:11:59,283
因为那是我们存储具体值的地方。

206
00:12:01,440 --> 00:12:04,510
但是，如果您重新加载，

207
00:12:04,510 --> 00:12:07,460
如果我有一些无效的东西，我们会得到一个错误

208
00:12:07,460 --> 00:12:11,463
但如果我在这里输入有效值，

209
00:12:13,270 --> 00:12:17,683
像这样，这是可提交的，我们在这里看到我们的教练。

210
00:12:18,700 --> 00:12:22,240
一切正常，下一步我们可以继续

211
00:12:22,240 --> 00:12:24,740
他们的请求功能并确保

212
00:12:24,740 --> 00:12:26,420
我们有联系表格

213
00:12:26,420 --> 00:12:29,120
当我们确实使用那个联系表格时，

214
00:12:29,120 --> 00:12:30,420
我们发送一个请求

215
00:12:30,420 --> 00:12:33,333
然后也会在请求下显示在这里。