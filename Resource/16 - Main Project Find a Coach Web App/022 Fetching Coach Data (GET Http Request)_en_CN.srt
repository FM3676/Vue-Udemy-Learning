1
00:00:02,190 --> 00:00:05,380
那么我们如何实现获取机制呢？

2
00:00:05,380 --> 00:00:07,600
很明显应该获取数据

3
00:00:07,600 --> 00:00:09,890
当我们访问这个教练页面时

4
00:00:09,890 --> 00:00:11,773
或者当我们点击刷新时。

5
00:00:12,690 --> 00:00:16,010
因此，我们要启动数据获取

6
00:00:16,010 --> 00:00:18,290
当教练列出组件时

7
00:00:18,290 --> 00:00:20,810
被加载到屏幕上。

8
00:00:20,810 --> 00:00:24,400
正确，因为这就是我们需要指导数据。

9
00:00:24,400 --> 00:00:27,280
这是真的。我们想在这里启动它，

10
00:00:27,280 --> 00:00:30,020
但发起并不意味着我们有

11
00:00:30,020 --> 00:00:32,800
做整个意义上的请求

12
00:00:32,800 --> 00:00:35,730
并在此处解析响应逻辑。

13
00:00:35,730 --> 00:00:38,320
相反，我们仍然可以利用视图 X

14
00:00:38,320 --> 00:00:40,890
为此，因为在那里，我们仍然管理

15
00:00:40,890 --> 00:00:44,520
一旦数据在我们的本地应用程序中，就可以指导数据。

16
00:00:44,520 --> 00:00:48,030
因此在这里，我们还可以添加一个动作

17
00:00:48,030 --> 00:00:49,490
用于获取数据

18
00:00:49,490 --> 00:00:52,973
然后使用获取的数据进行突变。

19
00:00:53,920 --> 00:00:55,640
这是一个很好的方法

20
00:00:55,640 --> 00:00:58,550
因为它可以让我们完成所有繁重的工作

21
00:00:58,550 --> 00:01:00,520
发送 HTTP 请求

22
00:01:00,520 --> 00:01:02,021
并解析响应

23
00:01:02,021 --> 00:01:04,620
离开组件进入视图 X。

24
00:01:04,620 --> 00:01:07,290
这使我们能够保持我们的组件精简，

25
00:01:07,290 --> 00:01:08,453
这总是好的。

26
00:01:09,820 --> 00:01:12,560
因此，我们可以添加一个新的突变

27
00:01:12,560 --> 00:01:15,230
在我们的教练突变下降，

28
00:01:15,230 --> 00:01:19,760
并且可能被命名为突变集教练，

29
00:01:19,760 --> 00:01:22,120
因为我想设置我当地的教练

30
00:01:22,120 --> 00:01:25,040
查看 X 状态队列到教练，

31
00:01:25,040 --> 00:01:28,040
我们将从 Firebase 获取。

32
00:01:28,040 --> 00:01:31,020
所以在这里我们得到了我们的状态和我们的有效载荷，

33
00:01:31,020 --> 00:01:32,510
我们可以假设

34
00:01:32,510 --> 00:01:34,770
有效载荷是教练列表。

35
00:01:34,770 --> 00:01:39,223
所以我们可以将我们的教练设置为等于有效载荷。

36
00:01:40,940 --> 00:01:43,360
现在这个动作会更有趣。

37
00:01:43,360 --> 00:01:46,890
在这里我想添加一个新动作，第二个动作，

38
00:01:46,890 --> 00:01:51,190
这是负载教练动作。

39
00:01:51,190 --> 00:01:52,400
我们在哪里获得上下文

40
00:01:52,400 --> 00:01:54,990
然后也可能是有效载荷。

41
00:01:54,990 --> 00:01:57,430
在这里我们要发送请求

42
00:01:57,430 --> 00:02:00,550
从 Firebase 加载到教练。

43
00:02:00,550 --> 00:02:02,320
并且这个动作会被派发

44
00:02:02,320 --> 00:02:04,170
从任何想要的组件

45
00:02:04,170 --> 00:02:07,030
触发此加载过程。

46
00:02:07,030 --> 00:02:08,850
所以在这里我们想发送一个请求

47
00:02:10,240 --> 00:02:13,960
与我们用于存储数据的 URL 相同。

48
00:02:13,960 --> 00:02:17,470
所以我们可以在这里复制这部分

49
00:02:17,470 --> 00:02:19,360
旧的 fetch 请求

50
00:02:19,360 --> 00:02:21,540
并在这里再次使用它。

51
00:02:21,540 --> 00:02:23,380
我们不需要第二个参数，

52
00:02:23,380 --> 00:02:26,780
因为在这里我可以接受获取请求。

53
00:02:26,780 --> 00:02:28,540
我又想使用同步等待

54
00:02:28,540 --> 00:02:31,010
而不是 then 等等。

55
00:02:31,010 --> 00:02:33,400
所以在这里我们可以调整一个等待这个

56
00:02:33,400 --> 00:02:35,763
并将响应存储在一个新的常量中。

57
00:02:38,570 --> 00:02:39,560
在下一行

58
00:02:39,560 --> 00:02:41,750
然后我们可以得到我们的响应数据。

59
00:02:41,750 --> 00:02:45,943
所以通过等待response.json来响应数据，

60
00:02:46,900 --> 00:02:49,250
一旦 stat 被解析

61
00:02:49,250 --> 00:02:51,260
我们可以再次检查是否

62
00:02:51,260 --> 00:02:53,940
反应可能不太好，

63
00:02:53,940 --> 00:02:56,210
然后进行任何类型的错误处理，

64
00:02:56,210 --> 00:02:58,390
我不会在这里再次这样做，

65
00:02:58,390 --> 00:03:00,760
但我们可以稍后实现。

66
00:03:00,760 --> 00:03:03,400
同样，让我们​​假设一切正常。

67
00:03:03,400 --> 00:03:04,380
因此现在

68
00:03:04,380 --> 00:03:07,380
我们几乎可以提交我们的突变，

69
00:03:07,380 --> 00:03:10,190
但我们必须先做另一件事。

70
00:03:10,190 --> 00:03:11,710
我们需要转型

71
00:03:11,710 --> 00:03:13,620
我们获取的数据是这样的

72
00:03:13,620 --> 00:03:15,623
它有我们在这里需要的格式。

73
00:03:16,480 --> 00:03:18,800
因为当我们从 Firebase 获取数据时，

74
00:03:18,800 --> 00:03:21,580
我们会把它当作一个大对象。

75
00:03:21,580 --> 00:03:24,920
我们宁愿拥有一批教练，

76
00:03:24,920 --> 00:03:27,050
不只是一个大对象。

77
00:03:27,050 --> 00:03:28,070
而实际上，

78
00:03:28,070 --> 00:03:29,720
我还注意到另一件事，

79
00:03:29,720 --> 00:03:32,360
我不想找教练

80
00:03:32,360 --> 00:03:34,240
只需一个用户 ID。

81
00:03:34,240 --> 00:03:36,680
相反，我想找所有教练

82
00:03:36,680 --> 00:03:38,243
从教练节点。

83
00:03:39,660 --> 00:03:41,590
所以我们把所有的教练

84
00:03:41,590 --> 00:03:45,030
我们最终有下面的教练，

85
00:03:45,030 --> 00:03:47,510
但这将是一个大目标

86
00:03:47,510 --> 00:03:50,540
我们必须将 ID 训练为属性名称

87
00:03:50,540 --> 00:03:53,480
然后使用教练数据嵌套对象。

88
00:03:53,480 --> 00:03:56,160
这不是我们需要的格式。

89
00:03:56,160 --> 00:03:58,140
所以我们需要先改造这个

90
00:03:58,140 --> 00:04:00,010
并让德比国家队帮助她

91
00:04:00,010 --> 00:04:03,100
教练们，这里是常数，这是一个 MTI 率。

92
00:04:03,100 --> 00:04:05,340
然后用一个四循环，

93
00:04:05,340 --> 00:04:08,800
我们可以查看整个响应数据，

94
00:04:08,800 --> 00:04:11,660
这将是这个充满教练的对象，

95
00:04:11,660 --> 00:04:15,660
然后我们在这里获取每个教练 ID 作为密钥，

96
00:04:15,660 --> 00:04:16,880
然后简单地构造

97
00:04:16,880 --> 00:04:19,170
这里有一个新的教练对象，

98
00:04:19,170 --> 00:04:20,737
其格式与

99
00:04:20,737 --> 00:04:22,670
我们在这里使用的教练数据

100
00:04:22,670 --> 00:04:25,310
当我们存储教练时。所以名字，姓氏

101
00:04:25,310 --> 00:04:26,630
等等。

102
00:04:26,630 --> 00:04:31,200
让我们复制它并把它带到那里。

103
00:04:31,200 --> 00:04:33,520
现在它的名字相等

104
00:04:33,520 --> 00:04:36,970
响应数据转发给定的密钥，

105
00:04:36,970 --> 00:04:38,520
转发给定的教练 ID

106
00:04:38,520 --> 00:04:40,610
我们目前正在研究的

107
00:04:40,610 --> 00:04:44,683
在这个迭代中。名字，

108
00:04:46,030 --> 00:04:48,000
访问名字属性

109
00:04:48,000 --> 00:04:49,360
嵌套对象

110
00:04:49,360 --> 00:04:51,833
对于这个 ID 的教练，

111
00:04:52,720 --> 00:04:55,500
因为每个教练都有这个名字属性

112
00:04:55,500 --> 00:04:56,443
在 Firebase 上。

113
00:04:57,680 --> 00:04:59,733
我们重复这个游戏，

114
00:05:00,940 --> 00:05:03,710
为姓

115
00:05:05,550 --> 00:05:10,550
还有这里的描述，

116
00:05:10,810 --> 00:05:15,050
当然这里是每小时费率

117
00:05:15,050 --> 00:05:19,130
以及它在 Firebase 上的每小时费率，

118
00:05:19,130​​ --> 00:05:22,573
也适用于这些地区。

119
00:05:24,190 --> 00:05:26,350
而且我们现在还需要在此处添加ID。

120
00:05:26,350 --> 00:05:29,280
这就是我们这次迭代的关键。

121
00:05:29,280 --> 00:05:32,300
正确，因为键将是此 ID。

122
00:05:32,300 --> 00:05:34,460
这是我们循环的主要对象

123
00:05:34,460 --> 00:05:35,700
所有这些钥匙。

124
00:05:35,700 --> 00:05:38,163
因此关键是我们的教练 ID。

125
00:05:39,650 --> 00:05:41,340
是的，这看起来不错。

126
00:05:41,340 --> 00:05:43,560
所以现在我们建立这个教练。

127
00:05:43,560 --> 00:05:46,490
然后我们可以联系这些教练阵列。

128
00:05:46,490 --> 00:05:48,010
这里有帮助数组

129
00:05:48,010 --> 00:05:51,360
并把这个教练推到混乱中。

130
00:05:51,360 --> 00:05:53,700
现在我们敢在拥有一个数组之后

131
00:05:53,700 --> 00:05:56,503
充满正确格式的教练。

132
00:05:57,590 --> 00:05:59,620
因此现在我们可以

133
00:05:59,620 --> 00:06:04,010
承诺集教练

134
00:06:04,010 --> 00:06:06,343
并在这里设置我们的教练。

135
00:06:08,280 --> 00:06:09,703
至于教练重装。

136
00:06:10,830 --> 00:06:12,170
我现在遇到错误

137
00:06:12,170 --> 00:06:14,510
我没有使用有效载荷，这是正确的。

138
00:06:14,510 --> 00:06:15,523
所以让我们删除它。

139
00:06:17,090 --> 00:06:19,940
现在我们必须加载教练动作

140
00:06:19,940 --> 00:06:23,020
我们现在可以在教练列表中发送这个。

141
00:06:23,020 --> 00:06:25,710
在这里我想在这个组件加载时调度它

142
00:06:25,710 --> 00:06:28,033
以及单击刷新按钮时。

143
00:06:29,020 --> 00:06:31,643
因此，我们可以在这里添加一个新方法。

144
00:06:33,060 --> 00:06:36,900
装载教练并在那里伸出援手

145
00:06:36,900 --> 00:06:38,003
到商店。

146
00:06:38,850 --> 00:06:42,677
显示tch 教练/负载教练。

147
00:06:45,670 --> 00:06:49,453
负载教练是此处定义的动作名称。

148
00:06:50,950 --> 00:06:52,300
像那样。

149
00:06:52,300 --> 00:06:53,640
并装载教练。

150
00:06:53,640 --> 00:06:55,770
现在应该触发此方法

151
00:06:55,770 --> 00:06:57,890
创建此组件时。

152
00:06:57,890 --> 00:06:59,430
所以我们可以添加

153
00:06:59,430 --> 00:07:02,220
这里创建的生命周期钩子，

154
00:07:02,220 --> 00:07:03,920
创造了生命周期的方法，

155
00:07:03,920 --> 00:07:05,270
执行哪个视图

156
00:07:05,270 --> 00:07:07,130
创建此组件时。

157
00:07:07,130 --> 00:07:09,920
在那里，我们可以指出这个负载教练

158
00:07:09,920 --> 00:07:11,023
并执行。

159
00:07:12,690 --> 00:07:14,720
另外，我想什么时候做

160
00:07:14,720 --> 00:07:16,670
按下此按钮。

161
00:07:16,670 --> 00:07:19,670
所以我们可以绑定刷新按钮，

162
00:07:19,670 --> 00:07:21,060
那里的点击事件

163
00:07:21,060 --> 00:07:22,710
加载教练，

164
00:07:22,710 --> 00:07:23,960
我们刚刚添加的方法。

165
00:07:25,140 --> 00:07:27,630
如果我们现在试一试并重新加载，

166
00:07:27,630 --> 00:07:28,720
如果它加载，

167
00:07:28,720 --> 00:07:31,250
我们简要地看到旧的虚拟数据，

168
00:07:31,250 --> 00:07:33,600
但后来我们看到了教练

169
00:07:33,600 --> 00:07:35,380
然后注册为教练按钮

170
00:07:35,380 --> 00:07:37,170
也消失了。

171
00:07:37,170 --> 00:07:38,760
现在当然在这里闪烁

172
00:07:38,760 --> 00:07:40,420
虽然不是我们想要的。

173
00:07:40,420 --> 00:07:42,110
所以下一步，

174
00:07:42,110 --> 00:07:44,740
我们可以展示一个加载微调器

175
00:07:44,740 --> 00:07:46,610
并且也许还确保

176
00:07:46,610 --> 00:07:49,383
我们以更好的方式处理错误。