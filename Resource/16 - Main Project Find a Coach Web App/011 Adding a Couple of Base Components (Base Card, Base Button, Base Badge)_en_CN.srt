1
00:00:02,150 --> 00:00:04,340
所以这是基本组件时间。

2
00:00:04,340 --> 00:00:08,290
在 components 文件夹中，我将添加一个新的 ui 文件夹。

3
00:00:08,290 --> 00:00:10,370
你也可以把它命名为base，

4
00:00:10,370 --> 00:00:11,490
但我会选择 ui

5
00:00:11,490 --> 00:00:14,610
因为我有一些核心 UI 元素。

6
00:00:14,610 --> 00:00:17,800
我将在其中添加一个 BaseCard.vue 文件，

7
00:00:17,800 --> 00:00:19,333
而且已经是一个BaseButton。

8
00:00:20,190 --> 00:00:22,490
还有，之前没提过，

9
00:00:22,490 --> 00:00:26,007
但我们也需要它，还有一个 BaseBadge，

10
00:00:26,880 --> 00:00:29,230
这基本上会呈现一个徽章。

11
00:00:29,230 --> 00:00:32,520
例如，这里的专业领域，

12
00:00:32,520 --> 00:00:34,600
我想用那个。

13
00:00:34,600 --> 00:00:36,323
但让我们从 BaseCard 开始。

14
00:00:37,780 --> 00:00:40,410
最后，这将是一个非常简单的组件。

15
00:00:40,410 --> 00:00:42,423
模板只是一个 div，

16
00:00:43,330 --> 00:00:46,990
然后是 div 内的一个插槽，

17
00:00:46,990 --> 00:00:49,980
因为我想用这张卡作为包装

18
00:00:49,980 --> 00:00:52,393
围绕您想要的任何内容。

19
00:00:53,900 --> 00:00:56,153
现在，我会给这个类的卡片，

20
00:00:57,980 --> 00:01:00,513
然后添加一些作用域的 CSS 代码。

21
00:01:01,800 --> 00:01:04,319
并附上，你会找到一个基卡 CSS 文件

22
00:01:04,319 --> 00:01:07,850
它包含您应该在此处粘贴的样式。

23
00:01:07,850 --> 00:01:10,400
这会给我们这个经典的卡片外观

24
00:01:10,400 --> 00:01:12,953
并且还限制了我们的宽度。

25
00:01:14,780 --> 00:01:16,563
这张卡已经是这样了。

26
00:01:17,620 --> 00:01:21,350
现在我们可以通过注册来使用该卡

27
00:01:21,350 --> 00:01:23,950
在 main.js 作为一个全局组件，

28
00:01:23,950 --> 00:01:26,770
因为我在应用程序的许多不同区域都使用它，

29
00:01:26,770 --> 00:01:29,220
因此，我想将其用作全局组件。

30
00:01:29,220 --> 00:01:32,075
所以在 main.js 我将导入 BaseCard

31
00:01:32,075 --> 00:01:37,023
来自 ./components/uiBaseCard.vue，

32
00:01:38,140 --> 00:01:42,120
然后在这里使用我的应用程序调用组件方法

33
00:01:42,120 --> 00:01:45,820
并注册一个基卡组件，

34
00:01:45,820 --> 00:01:49,193
指向我们正在导入的这个 BaseCard 组件。

35
00:01:51,130 --> 00:01:54,563
现在我们可以在 CoachesList 中使用它，例如，

36
00:01:55,530 --> 00:02:00,070
包装本节中的所有内容，

37
00:02:00,070 --> 00:02:03,560
所以这控制了 div 和无序列表。

38
00:02:03,560 --> 00:02:07,950
所以在这里我将使用基本卡，我的开始标签，

39
00:02:07,950 --> 00:02:11,683
然后在此 h3 标记后将其关闭。

40
00:02:13,460 --> 00:02:15,160
有了这个，如果我们保存这个，

41
00:02:15,160 --> 00:02:18,163
这看起来已经好多了。

42
00:02:19,580 --> 00:02:21,250
但是现在我们得到了所有这些按钮。

43
00:02:21,250 --> 00:02:22,659
而且，实际上，这些在这里，当然，

44
00:02:22,659 --> 00:02:25,410
是链接而不是按钮，

45
00:02:25,410 --> 00:02:28,060
但我认为它们应该看起来像按钮

46
00:02:28,060 --> 00:02:31,100
因为，虽然它们在技术上是链接，

47
00:02:31,100 --> 00:02:32,280
好吧，在这个 UI 中，

48
00:02:32,280 --> 00:02:35,130
让它们看起来像一个按钮更有意义。

49
00:02:35,130 --> 00:02:37,390
当然，我们这里也有一个按钮，例如，

50
00:02:37,390 --> 00:02:39,520
它应该看起来像一个按钮。

51
00:02:39,520 --> 00:02:42,250
所以我想构建一个 BaseButton 组件

52
00:02:42,250 --> 00:02:46,403
它支持真实的按钮和链接。

53
00:02:47,350 --> 00:02:49,030
我们可以建造这样的东西

54
00:02:49,030 --> 00:02:50,570
并应用相同的样式

55
00:02:50,570 --> 00:02:52,867
无论是链接还是按钮。

56
00:02:52,867 --> 00:02:55,867
我们将在这里的 BaseButton 组件中执行此操作。

57
00:02:56,940 --> 00:02:58,530
在这里，我们需要一个模板。

58
00:02:58,530 --> 00:03:01,770
当然，在那个模板中，我们还有一个按钮，

59
00:03:01,770 --> 00:03:05,313
常规的 HTML 按钮，它占用一个插槽。

60
00:03:06,300 --> 00:03:08,550
但它不仅有按钮，

61
00:03:08,550 --> 00:03:10,460
我们也想支持链接。

62
00:03:10,460 --> 00:03:14,430
所以我实际上也会在此处添加 router-link 作为组件，

63
00:03:14,430 --> 00:03:16,313
这需要一个插槽。

64
00:03:17,240 --> 00:03:19,920
但是，当然，应该只渲染两者中的一个

65
00:03:19,920 --> 00:03:21,003
同时。

66
00:03:22,850 --> 00:03:25,290
因此，我将添加一个脚本

67
00:03:25,290 --> 00:03:27,240
并接受一些道具。

68
00:03:27,240 --> 00:03:29,480
在这里我将实际使用对象形式

69
00:03:29,480 --> 00:03:30,700
的寻找道具，

70
00:03:30,700 --> 00:03:33,110
只是为了再次练习这个。

71
00:03:33,110 --> 00:03:35,850
大多数时候，我只使用数组形式

72
00:03:35,850 --> 00:03:37,220
因为更短，

73
00:03:37,220 --> 00:03:39,100
但是使用那个对象形式，当然，

74
00:03:39,100 --> 00:03:42,490
允许您更明确地了解您的道具。

75
00:03:42,490 --> 00:03:44,143
那么我在这里需要哪些道具？

76
00:03:45,060 --> 00:03:48,080
我想要一个链接道具。

77
00:03:48,080 --> 00:03:50,440
链接道具应该向我们发出信号

78
00:03:50,440 --> 00:03:52,630
我们是否要渲染一个按钮，

79
00:03:52,630 --> 00:03:54,610
或者如果链接为真，

80
00:03:54,610 --> 00:03:56,363
如果我们想渲染一个链接。

81
00:03:57,550 --> 00:04:02,100
所以，因此，在这里我将这里的类型设置为 Boolean

82
00:04:02,100 --> 00:04:05,340
因为我希望在这里得到一个布尔值。

83
00:04:05,340 --> 00:04:08,600
将其设置为不需要。这是可选的。

84
00:04:08,600 --> 00:04:10,290
您不必指定它。

85
00:04:10,290 --> 00:04:13,270
并将默认值设置为 false。

86
00:04:13,270 --> 00:04:16,760
因此，默认情况下，我们不渲染链接而是渲染按钮。

87
00:04:16,760 --> 00:04:19,480
我们现在可以在这里使用链接道具

88
00:04:19,480 --> 00:04:24,050
如果没有链接，则使用或呈现按钮，

89
00:04:24,050 --> 00:04:25,930
因此感叹号，

90
00:04:25,930 --> 00:04:29,770
并渲染链接，路由器链接，在其他情况下

91
00:04:29,770 --> 00:04:31,323
如果链接应该是真的。

92
00:04:32,240 --> 00:04:35,810
这允许我们从组件外部切换

93
00:04:35,810 --> 00:04:38,073
在按钮和路由器链接之间。

94
00:04:39,160 --> 00:04:41,740
我也想要一个道具在这里，

95
00:04:41,740 --> 00:04:43,960
如果设置了链接，我需要它。

96
00:04:43,960 --> 00:04:46,160
这将获得一个字符串值。

97
00:04:46,160 --> 00:04:49,233
在这里我想将其设置为不需要，

98
00:04:51,330 --> 00:04:54,970
但是将默认值设置为/，什么都没有。

99
00:04:54,970 --> 00:04:59,970
如果我们渲染一个路由器链接， to 道具是一个有用的道具

100
00:05:00,120 --> 00:05:01,600
因为在那种情况下，当然，

101
00:05:01,600 --> 00:05:05,370
我想绑定到我自己的路由器链接到道具

102
00:05:05,370 --> 00:05:06,570
我刚刚定义的

103
00:05:06,570 --> 00:05:09,133
这样我们就知道这个链接应该去哪里。

104
00:05:10,240 --> 00:05:13,230
然后还有最后一个我想支持的道具，

105
00:05:13,230 --> 00:05:15,570
这就是模式道具。

106
00:05:15,570 --> 00:05:18,980
这是一个允许我们控制样式的道具，

107
00:05:18,980 --> 00:05:21,870
从外面看这个按钮的外观。

108
00:05:21,870 --> 00:05:24,920
在这里，我只想得到一个字符串，

109
00:05:24,920 --> 00:05:27,940
这也不是必需的。

110
00:05:27,940 --> 00:05:30,410
那么，默认值只是一个空字符串

111
00:05:30,410 --> 00:05:32,580
或者为空，比方说，

112
00:05:32,580 --> 00:05:36,873
我将使用模式作为按钮上的一个类。

113
00:05:38,470 --> 00:05:40,460
当然，这在理论上允许我们

114
00:05:40,460 --> 00:05:43,510
将任何东西作为将要添加的类传递，

115
00:05:43,510 --> 00:05:46,670
但我只会支持几个特定的​​类

116
00:05:46,670 --> 00:05:49,233
在我们即将添加的 CSS 代码中。

117
00:05:50,500 --> 00:05:53,610
所以现在我们在两个按钮上添加类模式

118
00:05:53,610 --> 00:05:55,260
和路由器链接。

119
00:05:55,260 --> 00:05:58,170
现在是造型的时候了。

120
00:05:58,170 --> 00:06:02,010
所以让我们在下面添加一些作用域的 CSS 样式，

121
00:06:02,010 --> 00:06:04,850
并附上你找到一个按钮 CSS 文件

122
00:06:04,850 --> 00:06:07,203
里面有所有的按钮样式。

123
00:06:08,330 --> 00:06:11,040
在这里我设置了一个基本样式，

124
00:06:11,040 --> 00:06:14,430
我总是针对按钮和锚标签

125
00:06:14,430 --> 00:06:17,340
因为路由器链接会渲染一个锚标签

126
00:06:17,340 --> 00:06:18,940
到底。

127
00:06:18,940 --> 00:06:22,230
然后是悬停和活动样式

128
00:06:22,230 --> 00:06:25,910
以及平面和轮廓样式。

129
00:06:25,910 --> 00:06:28,560
这是我支持的两种模式

130
00:06:28,560 --> 00:06:30,780
因为这里我选择的是平课

131
00:06:30,780 --> 00:06:32,370
和大纲类，

132
00:06:32,370 --> 00:06:34,290
所以这些风格会开始

133
00:06:34,290 --> 00:06:38,000
如果将平面或大纲类添加到按钮或链接。

134
00:06:38,000 --> 00:06:41,140
这正是我们对模式所做的。

135
00:06:41,140 --> 00:06:43,210
如果模式设置为平坦，

136
00:06:43,210 --> 00:06:45,090
将添加平面类，

137
00:06:45,090 --> 00:06:48,860
因此，这些扁平风格将会发挥作用。

138
00:06:48,860 --> 00:06:50,950
这就是我的基本按钮。

139
00:06:50,950 --> 00:06:55,050
这个基本按钮现在也可以在 main.js 中定义。

140
00:06:55,050 --> 00:06:57,147
所以我们导入 BaseButton

141
00:06:59,217 --> 00:07:03,293
来自 ./components/ui/BaseButton.vue，

142
00:07:04,360 --> 00:07:09,360
然后也像这样在这里调用 app.component BaseButton 。

143
00:07:12,700 --> 00:07:14,360
现在我们可以使用 BaseButton

144
00:07:14,360 --> 00:07:16,640
在这个应用程序的各个地方。

145
00:07:16,640 --> 00:07:21,210
例如，在 CoachesList 中，我这里有这两个链接，

146
00:07:21,210 --> 00:07:23,170
或一个按钮和一个链接，

147
00:07:23,170 --> 00:07:25,260
两者都应该是基本按钮。

148
00:07:25,260 --> 00:07:29,330
所以在这里我将使用基本按钮作为我的刷新按钮。

149
00:07:29,330 --> 00:07:30,720
目前，它什么也没做，

150
00:07:30,720 --> 00:07:32,183
但这很快就会改变。

151
00:07:33,030 --> 00:07:36,860
在这里，我们可以用 base-button 替换 router-link。

152
00:07:36,860 --> 00:07:38,660
to 道具仍然存在

153
00:07:38,660 --> 00:07:43,413
因为我们将它添加到基本按钮中的路由器链接。

154
00:07:44,340 --> 00:07:46,520
但是，在这里，因为这应该是一个链接，

155
00:07:46,520 --> 00:07:49,670
我现在还设置了链接道具。

156
00:07:49,670 --> 00:07:51,080
就像这样添加它

157
00:07:51,080 --> 00:07:53,840
已经自动将其设置为true。

158
00:07:53,840 --> 00:07:56,480
因此这现在应该看起来像一个链接

159
00:07:56,480 --> 00:07:58,053
或者应该呈现一个链接。

160
00:07:59,080 --> 00:08:01,330
另一方面，对于这个刷新按钮，

161
00:08:01,330 --> 00:08:04,720
我想使用模式并将其设置为大纲

162
00:08:04,720 --> 00:08:07,220
以确保我在这里使用不同的外观。

163
00:08:08,820 --> 00:08:12,040
在 CoachItem 中，我们还有按钮，

164
00:08:12,040 --> 00:08:14,200
或链接，在这种情况下。

165
00:08:14,200 --> 00:08:16,300
不过，这些应该看起来像按钮。

166
00:08:16,300 --> 00:08:18,110
所以，这两条路由器链路，

167
00:08:18,110 --> 00:08:21,080
在这里，我还将使用基本按钮

168
00:08:21,080 --> 00:08:24,813
并用基本按钮替换路由器链接，

169
00:08:26,070 --> 00:08:29,403
然后在两者上添加链接道具。

170
00:08:31,600 --> 00:08:33,270
在第一个基本按钮上，

171
00:08:33,270 --> 00:08:36,573
我将模式设置为轮廓以及在此处使用该外观。

172
00:08:39,039 --> 00:08:42,659
我会说，如果我们保存它，它看起来会好很多。

173
00:08:42,659 --> 00:08:44,070
现在我们得到这些按钮，

174
00:08:44,070 --> 00:08:46,260
仍然充当链接，

175
00:08:46,260 --> 00:08:48,750
但看起来像按钮。

176
00:08:48,750 --> 00:08:51,570
并因此向前迈出了一大步。

177
00:08:51,570 --> 00:08:54,540
现在我想渲染这些专业领域

178
00:08:54,540 --> 00:08:55,610
以更好的方式。

179
00:08:55,610 --> 00:08:59,443
为此，我准备了这个 BaseBadge 组件。

180
00:09:00,290 --> 00:09:03,570
在这里，我们将添加一个模板

181
00:09:03,570 --> 00:09:05,760
并渲染一个跨度，比方说

182
00:09:05,760 --> 00:09:10,690
在跨度中我们简单地输出一个标题

183
00:09:10,690 --> 00:09:13,883
或文本属性，无论你想要什么。

184
00:09:14,890 --> 00:09:17,570
在跨度上，我将添加一个徽章类，

185
00:09:17,570 --> 00:09:21,193
但是，此外，动态地将类绑定到类型。

186
00:09:22,960 --> 00:09:24,290
现在这当然意味着这里

187
00:09:24,290 --> 00:09:26,160
我们也应该接受一些道具。

188
00:09:26,160 --> 00:09:27,820
我会在这里再次偷懒，

189
00:09:27,820 --> 00:09:29,970
我希望在这里得到一个类型道具

190
00:09:29,970 --> 00:09:31,893
并且，比方说，一个标题道具。

191
00:09:32,830 --> 00:09:33,780
我们这里有文字，

192
00:09:33,780 --> 00:09:36,400
但这将很快成为一个计算属性。

193
00:09:36,400 --> 00:09:39,530
现在我们可以在这里添加计算

194
00:09:39,530 --> 00:09:44,350
因为实际上我的文本计算属性在这里，

195
00:09:44,350 --> 00:09:49,350
这实际上应该是标题道具 toUpperCase。

196
00:09:51,910 --> 00:09:54,130
这只是我想要的转变。

197
00:09:54,130 --> 00:09:56,350
当然，你不必添加任何东西，

198
00:09:56,350 --> 00:09:59,480
但我想确保我们收到的标题作为道具

199
00:09:59,480 --> 00:10:01,380
全部变为大写

200
00:10:01,380 --> 00:10:02,963
然后在这里像这样输出。

201
00:10:04,870 --> 00:10:06,530
现在我们可以在这里添加一些样式，

202
00:10:06,530 --> 00:10:08,760
一些范围内的 CSS 样式，

203
00:10:08,760 --> 00:10:11,910
而且你经常会发现这些风格

204
00:10:11,910 --> 00:10:14,710
在徽章 CSS 文件中。

205
00:10:14,710 --> 00:10:17,150
我在这里有一个基本的徽章样式

206
00:10:17,150 --> 00:10:19,257
我只是给一些基础co洛斯，

207
00:10:19,257 --> 00:10:22,150
一些填充，显示内联块。

208
00:10:22,150 --> 00:10:25,330
然后我在这里得到了三种特定的班级风格

209
00:10:25,330 --> 00:10:28,110
适用于前端、后端和职业

210
00:10:29,020 --> 00:10:32,530
从本质上讲，背景颜色正在发生变化。

211
00:10:32,530 --> 00:10:34,140
这些类将被添加

212
00:10:34,140 --> 00:10:35,740
通过添加类型道具

213
00:10:35,740 --> 00:10:38,240
因为这里我们将类绑定到类型。

214
00:10:38,240 --> 00:10:40,470
所以如果我们将类型设置为前端

215
00:10:40,470 --> 00:10:42,860
当我们以后使用它时，在徽章上，

216
00:10:42,860 --> 00:10:45,550
将添加前端 CSS 类，

217
00:10:45,550 --> 00:10:48,023
因此将呈现这些样式。

218
00:10:49,430 --> 00:10:51,180
现在我们只需要注册这个

219
00:10:51,180 --> 00:10:53,660
再次作为全局组件。

220
00:10:53,660 --> 00:10:56,873
所以在 main.js 中，我将导入 BaseBadge

221
00:10:58,820 --> 00:11:03,820
来自 ./components/ui/BaseBadge.vue，

222
00:11:09,153 --> 00:11:13,227
然后像这样添加组件base-badge，BaseBadge。

223
00:11:17,150 --> 00:11:19,200
并在 CoachItem 中添加，

224
00:11:19,200 --> 00:11:21,820
我们现在可以使用这个 BaseBadge 组件了。

225
00:11:21,820 --> 00:11:26,170
所以，在那里，而不是像这样渲染一个跨度，

226
00:11:26,170 --> 00:11:29,530
我想循环浏览我的基础徽章，

227
00:11:29,530 --> 00:11:31,760
所以用那个替换span。

228
00:11:31,760 --> 00:11:35,210
我们不再在标签之间传递一些东西，

229
00:11:35,210 --> 00:11:38,300
因为这个组件没有插槽。

230
00:11:38,300 --> 00:11:40,660
相反，我们应该在这里设置一个类型

231
00:11:40,660 --> 00:11:43,690
并将其动态绑定到区域

232
00:11:43,690 --> 00:11:46,430
因为我的数据中的区域

233
00:11:46,430 --> 00:11:49,610
是前端、后端和职业，

234
00:11:49,610 --> 00:11:53,623
这些正是这里支持的 CSS 类。

235
00:11:55,030 --> 00:11:57,170
因此，顺便说一下，我们可以争论

236
00:11:57,170 --> 00:11:59,350
这是否真的是一个基本组件。

237
00:11:59,350 --> 00:12:03,730
当然，这是非常特定于教练领域的。

238
00:12:03,730 --> 00:12:05,880
但我们也有一些基本样式。

239
00:12:05,880 --> 00:12:08,270
这就是为什么我把它作为一个基本组件，

240
00:12:08,270 --> 00:12:10,100
但这只是一个旁注。

241
00:12:10,100 --> 00:12:11,750
但是，现在回到 CoachItem，

242
00:12:11,750 --> 00:12:13,050
除了设置类型，

243
00:12:13,050 --> 00:12:14,940
我们还应该绑定标题。

244
00:12:14,940 --> 00:12:17,730
这也与地区有关。

245
00:12:17,730 --> 00:12:20,960
所以这里的不同道具绑定了相同的值。

246
00:12:20,960 --> 00:12:23,460
我们理论上可以使用一个道具，

247
00:12:23,460 --> 00:12:25,780
但由于这些道具的使用方式不同

248
00:12:25,780 --> 00:12:27,310
在组件内部，

249
00:12:27,310 --> 00:12:30,770
我想明确我们在哪里使用这些道具

250
00:12:30,770 --> 00:12:32,793
通过选择不同的道具名称。

251
00:12:34,750 --> 00:12:36,510
因此，如果我们现在保存它，

252
00:12:36,510 --> 00:12:38,090
我们得到了这些漂亮的徽章

253
00:12:38,090 --> 00:12:40,020
因此这看起来已经

254
00:12:40,020 --> 00:12:43,340
好多了，好多了，我会说。

255
00:12:43,340 --> 00:12:46,070
我们为什么不确保下一步，

256
00:12:46,070 --> 00:12:48,400
我们也可以去详情页

257
00:12:48,400 --> 00:12:52,023
并查看选定教练的具体细节。