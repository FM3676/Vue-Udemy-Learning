1
00:00:02,289 --> 00:00:03,600
[Maximilian Schwarzmuller] 所以为了确保，

2
00:00:03,600 --> 00:00:07,020
我们只看到适合我们的请求。

3
00:00:07,020 --> 00:00:09,605
所以，最后对于这个userId，

4
00:00:09,605 --> 00:00:12,570
我们可以去我们的请求获取器，

5
00:00:12,570 --> 00:00:15,949
这里是我们的请求，

6
00:00:15,949 --> 00:00:17,150
获取。

7
00:00:17,150 --> 00:00:20,010
我不再想得到所有的请求，

8
00:00:20,010 --> 00:00:21,490
但我想过滤，

9
00:00:21,490 --> 00:00:26,129
对于将我们的 ID 作为 coachId 的请求。

10
00:00:26,129 --> 00:00:29,280
因此，我们可以利用在吸气剂中，

11
00:00:29,280 --> 00:00:32,659
除了状态，我们可以接受不止一个论点，

12
00:00:32,659 --> 00:00:34,640
我们可以访问我们的吸气剂，

13
00:00:34,640 --> 00:00:38,890
然后也是根状态和根吸气剂。

14
00:00:38,890 --> 00:00:41,760
根吸气剂是我在这里需要的，

15
00:00:41,760 --> 00:00:46,520
因为 userId 是根存储的一部分。

16
00:00:46,520 --> 00:00:49,930
我们已经有了一个 userId getter。

17
00:00:49,930 --> 00:00:52,890
这就是现在有用的吸气剂。

18
00:00:52,890 --> 00:00:56,040
在这里我们得到了coachId，

19
00:00:56,040 --> 00:00:58,837
通过联系 rootGetters.userId，

20
00:01:02,040 --> 00:01:04,069
那是吸气剂的名字。

21
00:01:04,069 --> 00:01:07,050
然后在这里，我们要过滤请求，

22
00:01:07,050 --> 00:01:10,380
我们得到了，并通过了所有的请求，

23
00:01:10,380 --> 00:01:13,080
并检查请求的coachId，

24
00:01:13,080 --> 00:01:17,020
等于我们这里提取的coachId。

25
00:01:17,020 --> 00:01:19,970
只有这些请求才是请求，

26
00:01:19,970 --> 00:01:21,383
在这里返回。

27
00:01:22,760 --> 00:01:25,860
这也意味着我们应该改变hasRequests，

28
00:01:25,860 --> 00:01:30,160
并且不检查我们州的所有请求，而是，

29
00:01:30,160 --> 00:01:31,700
只需使用，

30
00:01:31,700 --> 00:01:33,860
我们的, 要求,

31
00:01:33,860 --> 00:01:35,070
吸气剂在这里，

32
00:01:35,070 --> 00:01:38,400
通过联系 getters.requests，

33
00:01:38,400 --> 00:01:41,120
以便我们检查过滤后的请求，

34
00:01:41,120 --> 00:01:42,713
而不是所有的请求。

35
00:01:43,640 --> 00:01:47,050
现在和以前一样，我将替换未使用的参数，

36
00:01:47,050 --> 00:01:48,583
这里强调，

37
00:01:49,760 --> 00:01:51,370
但现在我们应该有一个设置，

38
00:01:51,370 --> 00:01:54,500
我们真的只看到向我们提出的请求，

39
00:01:54,500 --> 00:01:55,363
作为教练。

40
00:01:56,210 --> 00:01:59,240
所以如果你保存这个，如果我重新加载，

41
00:01:59,240 --> 00:02:01,910
我将请求发送给第一个教练，

42
00:02:01,910 --> 00:02:03,383
这不是我们，

43
00:02:06,460 --> 00:02:08,449
我们在这里看不到这个。

44
00:02:08,449 --> 00:02:11,163
如果我现在注册为教练，

45
00:02:14,500 --> 00:02:15,683
我是教练，

46
00:02:18,020 --> 00:02:20,370
然后我给我发信息，

47
00:02:20,370 --> 00:02:22,500
这当然没有太大意义，

48
00:02:22,500 --> 00:02:25,353
但就目前而言，这是我们能做到的唯一方法。

49
00:02:26,630 --> 00:02:31,270
如果我发送这个，我们现在应该会看到该请求。

50
00:02:31,270 --> 00:02:33,870
而我们没有，

51
00:02:33,870 --> 00:02:36,170
这个错误实际上是相当微妙的，

52
00:02:36,170 --> 00:02:40,080
有点难以发现，或者实际上很容易发现，

53
00:02:40,080 --> 00:02:42,913
一旦你控制台日志，

54
00:02:44,180 --> 00:02:46,620
所有请求，例如，

55
00:02:46,620 --> 00:02:48,180
看看里面有什么。

56
00:02:48,180 --> 00:02:51,020
如果你这样做，你会注意到一件重要的事情。

57
00:02:51,020 --> 00:02:52,603
如果你联系教练，

58
00:02:58,730 --> 00:03:01,940
然后我们检查记录的getter，

59
00:03:01,940 --> 00:03:05,080
我们看到 coachId 是未定义的。

60
00:03:05,080 --> 00:03:06,960
这就是问题所在。

61
00:03:06,960 --> 00:03:09,610
这当然可以确保我们无法过滤。

62
00:03:10,510 --> 00:03:13,370
现在它是不确定的，因为在联系教练，

63
00:03:13,370 --> 00:03:15,200
我设置为coachId的地方，

64
00:03:15,200 --> 00:03:19,474
我从路线中得到它的地方，我访问了这个 routeId。

65
00:03:19,474 --> 00:03:24,070
嗯，这是不正确的，这应该是这个 route.parans.id。

66
00:03:24,070 --> 00:03:26,453
这是访问此处的正确方法。

67
00:03:29,210 --> 00:03:31,690
所以现在完成了，

68
00:03:31,690 --> 00:03:36,690
如果我回去，我在这里发信息，

69
00:03:36,800 --> 00:03:38,680
给第一个教练。

70
00:03:38,680 --> 00:03:40,563
这是一个测验，

71
00:03:41,770 --> 00:03:45,640
它仍然没有按照应有的要求显示在此处。72
00:03:45,640 --> 00:03:48,670
但是如果我们现在再次注册为教练，

73
00:03:48,670 --> 00:03:51,693
很快我们就不必一遍又一遍地这样做了。

74
00:03:52,700 --> 00:03:54,550
很快我们将添加一个后端，

75
00:03:54,550 --> 00:03:56,950
然后数据将被永久存储。

76
00:03:56,950 --> 00:03:59,120
但目前我们必须注册，

77
00:03:59,120 --> 00:04:01,893
如果我现在在这里给自己发信息。

78
00:04:04,450 --> 00:04:05,653
这是一个测验。

79
00:04:06,590 --> 00:04:10,610
现在，我们确实看到了这条信息，而且只有这条信息，

80
00:04:10,610 --> 00:04:13,610
这里根据收到的请求。

81
00:04:13,610 --> 00:04:16,450
所以现在过滤部分也在工作，

82
00:04:16,450 --> 00:04:21,450
确实，整个应用程序已经完成了，

83
00:04:21,649 --> 00:04:24,387
但当然只是在这个假人中（喃喃自语）。

84
00:04:25,410 --> 00:04:27,680
缺少一件重要的事情。

85
00:04:27,680 --> 00:04:31,970
那是我们存储教练的真正后端，

86
00:04:31,970 --> 00:04:34,770
以及我们存储请求的位置。

87
00:04:34,770 --> 00:04:38,020
然后我们当然也从中获取数据。

88
00:04:38,020 --> 00:04:40,911
这就是我想和你一起做的事情，

89
00:04:40,911 --> 00:04:42,703
在接下来的讲座中。