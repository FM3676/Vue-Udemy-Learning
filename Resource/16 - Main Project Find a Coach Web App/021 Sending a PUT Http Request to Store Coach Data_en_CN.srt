1
00:00:02,130 --> 00:00:03,469
所以到目前为止，

2
00:00:03,469 --> 00:00:06,790
我们正在使用的所有数据都是虚拟数据。

3
00:00:06,790 --> 00:00:08,180
而且它不是永久性的。

4
00:00:08,180 --> 00:00:13,150
如果我们将自己注册为教练，一旦应用重新加载，

5
00:00:13,150 --> 00:00:14,300
它不再存在。

6
00:00:14,300 --> 00:00:15,710
数据丢失。

7
00:00:15,710 --> 00:00:19,200
此外，当然，它只存在于我们的计算机上。

8
00:00:19,200 --> 00:00:21,950
如果这是在服务器上运行的网络应用程序，

9
00:00:21,950 --> 00:00:25,320
服务于世界各地的用户，

10
00:00:25,320 --> 00:00:28,530
每个用户只会看到他或她自己的数据

11
00:00:28,530 --> 00:00:30,560
而不是其他用户的数据，

12
00:00:30,560 --> 00:00:32,810
这当然不是这个主意

13
00:00:32,810 --> 00:00:34,560
像这样的应用程序背后。

14
00:00:34,560 --> 00:00:38,883
毕竟，我想见见来自世界各地的所有教练。

15
00:00:40,300 --> 00:00:43,450
这就是为什么我们现在需要 HTTP 以及为什么我们需要后端

16
00:00:43,450 --> 00:00:45,973
以及我们可以在其上存储数据的服务器。

17
00:00:47,150 --> 00:00:49,500
为此，我将再次使用 Firebase，

18
00:00:49,500 --> 00:00:51,650
不是因为它是唯一的选择，

19
00:00:51,650 --> 00:00:54,520
但因为它不需要我们写

20
00:00:54,520 --> 00:00:56,990
任何服务器端代码，当然还有这个

21
00:00:56,990 --> 00:01:00,310
没有服务器端代码课程，所以很棒。

22
00:01:00,310 --> 00:01:03,120
因为我们可以免费开始。

23
00:01:03,120 --> 00:01:06,110
但是，如果您想将其用于实际项目，

24
00:01:06,110 --> 00:01:08,650
当然，一定要查看定价页面

25
00:01:08,650 --> 00:01:10,360
了解什么是花钱的，

26
00:01:10,360 --> 00:01:13,530
以及您可以免费获得多少。

27
00:01:13,530 --> 00:01:15,880
现在您需要使用您的 Google 帐户登录

28
00:01:15,880 --> 00:01:18,410
然后转到 Firebase 控制台，

29
00:01:18,410 --> 00:01:22,340
然后只需创建一个我所做的新项目。

30
00:01:22,340 --> 00:01:26,090
他们是，然后你应该去实时数据库

31
00:01:26,090 --> 00:01:30,283
确保您将此数据库用于您的项目。

32
00:01:31,310 --> 00:01:33,550
现在，暂时，这是空的。

33
00:01:33,550 --> 00:01:37,550
创建它时，请确保在测试模式下创建它

34
00:01:37,550 --> 00:01:40,570
并确保你的规则在那里

35
00:01:40,570 --> 00:01:42,313
看起来像这样。

36
00:01:43,330 --> 00:01:46,400
他们不应该在这里说假或类似的东西。

37
00:01:47,670 --> 00:01:50,020
相反，它们应该看起来像这样。

38
00:01:50,020 --> 00:01:53,150
完成后，我们现在可以开始了

39
00:01:53,150 --> 00:01:56,500
并将其用作我们向其发送请求的后端

40
00:01:56,500 --> 00:01:58,570
从我们的 View App 内部。

41
00:01:58,570 --> 00:02:00,470
当然，现在的问题是

42
00:02:00,470 --> 00:02:03,620
我们想在哪里发送哪个请求？

43
00:02:03,620 --> 00:02:05,700
好吧，最后，这很简单。

44
00:02:05,700 --> 00:02:09,080
在我们的应用程序中，当我们只是作为教练时，

45
00:02:09,080 --> 00:02:12,073
我们想在完成后立即发送请求。

46
00:02:13,010 --> 00:02:14,790
当我们在教练的页面上时，

47
00:02:14,790 --> 00:02:18,610
我们想把所有的教练都拿回来，然后再把他们拿回来

48
00:02:18,610 --> 00:02:20,883
每当按下他们的刷新按钮时。

49
00:02:22,440 --> 00:02:25,340
在请求时，我们想要获取所有请求

50
00:02:26,760 --> 00:02:28,650
我们想发送一个请求

51
00:02:28,650 --> 00:02:31,660
一旦提交此联系表。

52
00:02:31,660 --> 00:02:35,390
所以最后，这与我们的 Vuex 商店一致。

53
00:02:35,390 --> 00:02:39,830
在教练中，当我们有这个注册教练动作时，

54
00:02:39,830 --> 00:02:42,760
我们想发送创建教练的请求。

55
00:02:42,760 --> 00:02:46,110
在请求中，当联系教练提交时，

56
00:02:46,110 --> 00:02:49,260
我们想发送一个请求在服务器上添加这个教练，

57
00:02:49,260 --> 00:02:53,460
然后我们需要几个请求来获取数据。

58
00:02:53,460 --> 00:02:58,180
我仍然想使用 Vuex 在 View App 中管理我的数据

59
00:02:58,180 --> 00:03:01,610
我想使用 Vuex 发送这些请求。

60
00:03:01,610 --> 00:03:04,483
因此，让我们从教练开始吧。

61
00:03:05,440 --> 00:03:08,510
在注册教练的行动中，

62
00:03:08,510 --> 00:03:11,470
我们现在正在创建我们的教练数据对象，

63
00:03:11,470 --> 00:03:14,800
这就是应该发送到 Firebase 的对象。

64
00:03:14,800 --> 00:03:17,760
因此，在这里，我们要发送请求。

65
00:03:17,760 --> 00:03:20,480
我们可以使用 fetch 函数来做到这一点离子

66
00:03:20,480 --> 00:03:22,840
这是内置在浏览器中的。

67
00:03:22,840 --> 00:03:26,220
它需要一个字符串，即 URL

68
00:03:26,220 --> 00:03:28,040
请求应发送到的位置，

69
00:03:28,040 --> 00:03:31,443
这是您实时数据库中的这个 URL，

70
00:03:32,380 --> 00:03:35,070
至少这是 URL 的一部分，

71
00:03:35,070 --> 00:03:37,320
但之后您可以添加任何段

72
00:03:37,320 --> 00:03:40,870
例如，斜线教练，然后是 Firebase，

73
00:03:40,870 --> 00:03:42,950
你需要在最后添加点 json，

74
00:03:42,950 --> 00:03:46,533
但这只是 Firebase 的事情，没有专门针对 Vue。

75
00:03:48,240 --> 00:03:50,230
所以这会将请求发送到那里，

76
00:03:50,230 --> 00:03:53,520
但默认情况下，这将是一个获取请求。

77
00:03:53,520 --> 00:03:56,780
获取请求对于获取数据很有用，

78
00:03:56,780 --> 00:04:00,320
但在这里我们要存储教练数据。

79
00:04:00,320 --> 00:04:03,390
因此我们需要第二个参数，一个对象

80
00:04:03,390 --> 00:04:06,770
我们配置了我们想要发送的请求类型。

81
00:04:06,770 --> 00:04:08,340
我们可以使用方法键来做到这一点，

82
00:04:08,340 --> 00:04:10,543
我们可以将其设置为 POST，

83
00:04:11,490 --> 00:04:13,700
但我其实不想。

84
00:04:13,700 --> 00:04:16,300
因为这是我要做的一个假设。

85
00:04:16,300 --> 00:04:18,240
教练的想法

86
00:04:18,240 --> 00:04:22,240
将在我们注册为教练之前存在。

87
00:04:22,240 --> 00:04:25,700
因为稍后我们将向这个应用程序添加身份验证

88
00:04:25,700 --> 00:04:29,320
您需要先注册才能注册

89
00:04:29,320 --> 00:04:31,460
反正作为教练。

90
00:04:31,460 --> 00:04:33,980
所以你需要注册然后另外，

91
00:04:33,980 --> 00:04:36,383
如果你愿意，你也可以成为一名教练。

92
00:04:37,960 --> 00:04:42,130
因此，我假设我们已经获得了用户 ID

93
00:04:42,130 --> 00:04:43,900
谁想成为教练。

94
00:04:43,900 --> 00:04:45,260
我们有点做。

95
00:04:45,260 --> 00:04:49,070
在我们的根状态下，我们得到了这个虚拟用户 ID。

96
00:04:49,070 --> 00:04:51,820
现在稍后，一旦我们添加了身份验证，

97
00:04:51,820 --> 00:04:55,950
这将不再是一个虚拟 ID，但目前它是。

98
00:04:55,950 --> 00:04:58,880
所以暂时，我就接受这个。

99
00:04:58,880 --> 00:05:02,430
所以在这里的这个动作中，我们已经在这里得到了这个ID。

100
00:05:02,430 --> 00:05:06,380
我将不再将其添加为教练数据中的 ID 字段

101
00:05:06,380 --> 00:05:11,380
而是全部存储在一个单独的常量用户 ID 中，像这样

102
00:05:14,410 --> 00:05:18,920
然后实际上这里指向斜线教练斜线

103
00:05:19,830 --> 00:05:23,830
然后这个用户 ID 在 Firebase 上创建一个单独的条目

104
00:05:23,830 --> 00:05:25,373
只为这个用户。

105
00:05:26,520 --> 00:05:29,890
现在为了方便地将这个用户 ID 添加到这个字符串中，

106
00:05:29,890 --> 00:05:33,090
我将在这里使用反引号而不是单引号，

107
00:05:33,090 --> 00:05:36,090
这允许我们使用这个 JavaScript 功能

108
00:05:36,090 --> 00:05:38,570
将数据注入这样的字符串

109
00:05:38,570 --> 00:05:41,543
使用这个美元符号大括号语法。

110
00:05:43,430 --> 00:05:46,870
所以现在我们将请求发送给 Firebase 斜线教练

111
00:05:46,870 --> 00:05:50,120
斜线这个用户 ID 斜线 json。

112
00:05:50,120 --> 00:05:52,410
我会发送一个put请求，

113
00:05:52,410 --> 00:05:55,680
它告诉 Firebase 那里的数据将被覆盖

114
00:05:55,680 --> 00:05:59,683
如果它存在，或者如果它还不存在则将被创建。

115
00:06:00,610 --> 00:06:03,310
与 POST 的不同之处在于，使用 POST，

116
00:06:03,310 --> 00:06:06,000
会一直添加一个新条目，

117
00:06:06,000 --> 00:06:07,360
我不想在这里做。

118
00:06:07,360 --> 00:06:10,923
我只想每个用户有一个教练条目。

119
00:06:12,650 --> 00:06:14,130
现在我们仍然需要一个身体。

120
00:06:14,130 --> 00:06:15,800
我们需要附加一些数据。

121
00:06:15,800 --> 00:06:20,800
这就是我们的教练数据的 JSON 字符串化版本。

122
00:06:21,250 --> 00:06:25,740
这样就可以将此对象转换为这种 JSON 格式，

123
00:06:25,740 --> 00:06:28,373
我们需要随请求一起发送。

124
00:06:29,910 --> 00:06:33,680
因此，这将使用此数据向该 URL 发送一个 put 请求。

125
00:06:33,680 --> 00:06:35,650
现在我们当然只想继续

126
00:06:35,650 --> 00:06:38,360
完成后进行下一步。

127
00:06:38,360 --> 00:06:41,140
现在 fetch 如您所学返回一个承诺。

128
00:06:41,140 --> 00:06:44,470
所以我们可以用then来定义代码

129
00:06:44,470 --> 00:06:46,770
应该执行一次这个请求，

130
00:06:46,770 --> 00:06:48,453
一次他的诺言已经兑现。

131
00:06:49,490 --> 00:06:53,340
或者我们使用另一种更现代的语法，

132
00:06:53,340 --> 00:06:56,320
异步等待语法。

133
00:06:56,320 --> 00:06:59,640
它使您的代码看起来像普通代码

134
00:06:59,640 --> 00:07:02,490
没有承诺，尽管它仍然使用承诺

135
00:07:02,490 --> 00:07:03,400
在幕后。

136
00:07:03,400 --> 00:07:06,730
但是写起来容易一些，也许也容易理解

137
00:07:06,730 --> 00:07:10,480
所以这就是为什么我想在这里切换到不同的语法。

138
00:07:10,480 --> 00:07:13,870
要使用它，我们需要添加 async 关键字

139
00:07:13,870 --> 00:07:16,420
在我们的方法名前面，

140
00:07:16,420 --> 00:07:19,220
然后我们可以使用 await 关键字

141
00:07:19,220 --> 00:07:20,680
在我们的承诺面前。

142
00:07:20,680 --> 00:07:23,233
所以前面调用了fetch的结果。

143
00:07:24,180 --> 00:07:26,910
然后我们可以存储以产生一个常规变量

144
00:07:26,910 --> 00:07:30,310
或一个常数，它实际上只会被存储

145
00:07:30,310 --> 00:07:31,870
完成后。

146
00:07:31,870 --> 00:07:35,100
所以这有点像把它放进通风块

147
00:07:35,100 --> 00:07:38,200
我们以前见过，但现在代码是，

148
00:07:38,200 --> 00:07:40,400
没有通风块的情况下工作良好。

149
00:07:40,400 --> 00:07:42,573
但它在幕后发生了变化。

150
00:07:43,710 --> 00:07:46,290
这就是我们从请求中得到的响应。

151
00:07:46,290 --> 00:07:49,480
下一行现在只会执行

152
00:07:49,480 --> 00:07:51,140
一旦这个请求完成。

153
00:07:51,140 --> 00:07:53,350
所以在这里我们知道我们会有回应

154
00:07:53,350 --> 00:07:57,510
然后我们可以得到我们的响应数据

155
00:07:57,510 --> 00:08:00,360
通过等待 response.json，

156
00:08:00,360 --> 00:08:03,500
因为响应，这个对象有一个 JSON 方法，

157
00:08:03,500 --> 00:08:05,450
所有的回报都是一个承诺。

158
00:08:05,450 --> 00:08:06,750
所以我们等待

159
00:08:06,750 --> 00:08:09,923
然后我们最终得到了回复数据。

160
00:08:11,960 --> 00:08:16,370
然后我们可以检查响应是否不正确。

161
00:08:16,370 --> 00:08:19,080
响应对象有一个ok字段，

162
00:08:19,080 --> 00:08:21,910
这表明响应是否正常。

163
00:08:21,910 --> 00:08:26,280
然后在这里，我们有一个错误，如果它会执行，

164
00:08:26,280 --> 00:08:29,630
但我们稍后会关注错误处理。

165
00:08:29,630 --> 00:08:32,090
所以目前，我什么都不做。

166
00:08:32,090 --> 00:08:35,690
相反，我认为它总是在这一刻有效

167
00:08:35,690 --> 00:08:38,140
然后我们可以提交我们的数据。

168
00:08:38,140 --> 00:08:41,220
实际上我会提交不同类型的数据，

169
00:08:41,220 --> 00:08:45,410
我将提交一个复制教练数据的对象

170
00:08:45,410 --> 00:08:46,900
使用扩展运算符。

171
00:08:46,900 --> 00:08:49,900
所以我把教练数据中的所有键值对

172
00:08:49,900 --> 00:08:52,290
并将它们合并为一个新对象。

173
00:08:52,290 --> 00:08:57,070
但此外，我添加了一个 ID 字段，其中包含用户 ID。

174
00:08:57,070 --> 00:09:00,020
我不想把这个发送到服务器

175
00:09:00,020 --> 00:09:03,120
因为我已经将它存储在该 ID 下

176
00:09:03,120 --> 00:09:05,110
在服务器上的单独节点中。

177
00:09:05,110 --> 00:09:07,973
所以我会在那里使用 ID 两次，

178
00:09:09,530 --> 00:09:12,480
但我确实想添加它

179
00:09:12,480 --> 00:09:15,170
到我在本地提交的数据

180
00:09:15,170 --> 00:09:18,410
这样我们仍然可以快速获得教练 ID

181
00:09:18,410 --> 00:09:21,963
在我们在 Vuex 中的数据对象中。

182
00:09:23,750 --> 00:09:26,450
所以提交仍然像以前一样工作

183
00:09:26,450 --> 00:09:30,223
这只会在所有这些承诺完成后执行。

184
00:09:31,550 --> 00:09:34,610
顺便说一句，我这里没有对响应数据做任何事情，

185
00:09:34,610 --> 00:09:38,430
所以我想我们也可以删除这个或注释掉这个。

186
00:09:38,430 --> 00:09:40,850
现在数据应该存储在服务器上

187
00:09:40,850 --> 00:09:43,460
当我们注册为教练时。

188
00:09:43,460 --> 00:09:45,070
让我们试一试。

189
00:09:45,070 --> 00:09:50,070
让我们重新加载，单击注册为教练并输入您的数据。

190
00:09:51,640 --> 00:09:56,070
我是一名网络开发者在线讲师，

191
00:09:56,070 --> 00:09:58,963
我喜欢分享我的知识。

192
00:09:59,810 --> 00:10:04,810
小时费率，勾选方框，点击注册，

193
00:10:05,330 --> 00:10:07,510
我们在这里什么也看不到，

194
00:10:07,510 --> 00:10:10,370
但过了一会儿，我们看到教练出现了

195
00:10:10,370 --> 00:10:12,160
和那个亲戚d 的看起来不错。

196
00:10:12,160 --> 00:10:14,950
现在，如果我们检查 Firebase，我们会看到一个教练节点

197
00:10:14,950 --> 00:10:18,930
使用我们的虚拟教练 ID，然后在其下方显示数据

198
00:10:18,930 --> 00:10:20,543
属于那个教练的。

199
00:10:21,440 --> 00:10:24,883
所以这看起来非常好，提交数据工作。

200
00:10:25,800 --> 00:10:28,680
现在，有几个方面我们可以改进。

201
00:10:28,680 --> 00:10:33,210
例如，我们被重定向到这里

202
00:10:33,210 --> 00:10:35,640
我们只看到教练出现

203
00:10:35,640 --> 00:10:38,543
几毫秒或几秒钟后。

204
00:10:39,410 --> 00:10:41,370
但除此之外，一般来说，

205
00:10:41,370 --> 00:10:44,150
我们没有在这里获取教练数据。

206
00:10:44,150 --> 00:10:47,883
如果我重新加载这个应用程序，我仍然只能看到虚拟教练。

207
00:10:48,730 --> 00:10:51,620
现在我们至少有一位真正的教练，

208
00:10:51,620 --> 00:10:54,500
拿到那个会更好，对吧？

209
00:10:54,500 --> 00:10:56,830
所以这就是我们接下来应该做的。

210
00:10:56,830 --> 00:10:59,500
确保我们不只是存储

211
00:10:59,500 --> 00:11:01,150
后端的教练数据，

212
00:11:01,150 --> 00:11:03,023
但是我们也从那里获取它。