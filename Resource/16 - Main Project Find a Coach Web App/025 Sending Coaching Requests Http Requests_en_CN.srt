1
00:00:02,090 --> 00:00:04,670
所以我现在基本上想实现

2
00:00:04,670 --> 00:00:08,320
对于我们已经为教练所做的请求。

3
00:00:08,320 --> 00:00:10,590
当我们联系教练时，

4
00:00:10,590 --> 00:00:13,030
这些数据不应该只是在本地添加

5
00:00:13,030 --> 00:00:14,700
到我们的 Vuex 商店，

6
00:00:14,700 --> 00:00:17,630
但应该向 Firebase 发送请求。

7
00:00:17,630 --> 00:00:20,603
然后我当然也想从那里加载数据。

8
00:00:21,790 --> 00:00:24,440
因此，让我们从联系教练开始。

9
00:00:24,440 --> 00:00:28,650
当我们这样做时，我不再想生成一个虚拟 ID。

10
00:00:28,650 --> 00:00:32,310
相反，Firebase 确实会为我生成一个 ID。

11
00:00:32,310 --> 00:00:34,700
所以我稍后会使用它。

12
00:00:34,700 --> 00:00:38,720
但这是我想发送到 Firebase 的原始数据。

13
00:00:38,720 --> 00:00:41,660
向其发送请求的教练的 ID，

14
00:00:41,660 --> 00:00:44,520
用户电子邮件和消息。

15
00:00:44,520 --> 00:00:47,430
再说一次，我们可以在这里使用 fetch，即 fetch 方法，

16
00:00:47,430 --> 00:00:49,630
发送我们的 HTTP 请求，

17
00:00:49,630 --> 00:00:53,770
它将再次成为此 Firebase URL。

18
00:00:53,770 --> 00:00:57,820
或者至少再次，这将成为最终 URL 的一部分。

19
00:00:57,820 --> 00:01:00,800
因为现在我想存储所有请求

20
00:01:00,800 --> 00:01:04,700
被发送到该教练 ID 下的教练。

21
00:01:04,700 --> 00:01:08,740
所以也许我们把它发送给请求，斜线，

22
00:01:08,740 --> 00:01:10,690
然后是那个教练的ID。

23
00:01:10,690 --> 00:01:12,940
所以payload.coach ID在这里，

24
00:01:12,940 --> 00:01:15,340
为此，我将其转换为模板文字

25
00:01:15,340 --> 00:01:18,230
通过使用反引号而不是单引号，

26
00:01:18,230 --> 00:01:20,690
这样我们就可以在那个字符串中注入一些东西

27
00:01:20,690 --> 00:01:23,440
在这里使用这种特殊的语法。

28
00:01:23,440 --> 00:01:25,243
并添加payload.coachId。

29
00:01:27,450 --> 00:01:30,463
最后是 .json。

30
00:01:31,390 --> 00:01:34,660
这将创建一个新的请求节点

31
00:01:34,660 --> 00:01:36,440
在这个 Firebase 后端。

32
00:01:36,440 --> 00:01:39,420
这个教练 ID 有一个节点。

33
00:01:39,420 --> 00:01:41,290
然后在那个节点下，

34
00:01:41,290 --> 00:01:45,253
发送给该教练的所有请求都将被存储。

35
00:01:46,160 --> 00:01:48,250
现在这不应该是一个获取请求，

36
00:01:48,250 --> 00:01:51,640
所以我们需要第二个参数来配置请求，

37
00:01:51,640 --> 00:01:54,370
并将方法设置为发布。

38
00:01:54,370 --> 00:01:56,900
这次是 post 而不是 put 请求

39
00:01:56,900 --> 00:01:59,540
因为我不想覆盖现有数据，

40
00:01:59,540 --> 00:02:02,320
我只想添加一个新请求。

41
00:02:02,320 --> 00:02:05,350
每发送一个请求，都是一个全新的请求

42
00:02:05,350 --> 00:02:08,220
正在添加到请求列表中，

43
00:02:08,220 --> 00:02:09,433
这就是这里的想法。

44
00:02:10,470 --> 00:02:12,050
然后在这里我们需要一个身体，

45
00:02:12,050 --> 00:02:14,660
所以附加到请求的数据，

46
00:02:14,660 --> 00:02:17,660
这当然应该是新的请求

47
00:02:17,660 --> 00:02:18,993
我们在这里生成。

48
00:02:20,350 --> 00:02:22,620
现在，正义，在这回报一个承诺之前，

49
00:02:22,620 --> 00:02:27,183
所以我们可以使用 async await 来等待响应。

50
00:02:29,380 --> 00:02:32,610
然后，我们可以得到响应数据

51
00:02:32,610 --> 00:02:34,823
通过等待 response.json。

52
00:02:37,170 --> 00:02:40,710
我在这里需要这些数据，因为对于发布请求，

53
00:02:40,710 --> 00:02:45,070
Firebase 将返回生成的 ID。

54
00:02:45,070 --> 00:02:48,260
它会自动生成一个新的唯一 ID

55
00:02:48,260 --> 00:02:51,900
对于发布的每个条目，对于这个新请求也是如此。

56
00:02:51,900 --> 00:02:55,380
我想在这里本地使用这个生成的ID

57
00:02:55,380 --> 00:02:56,460
在我的 Vue 应用程序中。

58
00:02:56,460 --> 00:02:59,080
所以我想从响应数据中提取它

59
00:02:59,080 --> 00:03:01,403
这是从 Firebase 发回的。

60
00:03:02,880 --> 00:03:07,783
我们可以简单地将 newRequest.id 设置为 responseData.name。

61
00:03:09,180 --> 00:03:13,220
现在我正在向新请求添加一个新的 ID 属性

62
00:03:13,220 --> 00:03:14,270
用这条线。

63
00:03:14,270 --> 00:03:18,210
以及我从 Firebase 返回的响应数据对象

64
00:03:18,210 --> 00:03:19,870
将有一个名称字段，

65
00:03:19,870 --> 00:03:23,340
它保存了这个自动生成的 ID。

66
00:03:23,340 --> 00:03:24,770
这是你必须知道的。

67
00:03:24,770 --> 00:03:28,700
您可以将其读入 Firebase 文档或 simp当然，

68
00:03:28,700 --> 00:03:31,650
也 console.log responseData 来调查它。

69
00:03:31,650 --> 00:03:34,230
在那里你会看到它有这个名称字段

70
00:03:34,230 --> 00:03:37,023
使用生成的唯一 ID。

71
00:03:39,110 --> 00:03:40,870
现在和以前一样，我们也可以检查

72
00:03:40,870 --> 00:03:45,870
如果响应正常，或者不正常。

73
00:03:47,810 --> 00:03:51,730
如果不行，我们也可以生成一个新的错误

74
00:03:51,730 --> 00:03:54,960
我们检查响应数据是否有消息键

75
00:03:54,960 --> 00:03:56,770
包含错误消息。

76
00:03:56,770 --> 00:04:01,770
否则，我们添加我们自己的后备消息，

77
00:04:02,180 --> 00:04:04,830
发送请求失败。

78
00:04:04,830 --> 00:04:08,403
然后我们可以在这里抛出这个错误，如果我们愿意的话。

79
00:04:11,410 --> 00:04:14,840
所以现在有了这个，我们向 Firebase 发送了请求

80
00:04:14,840 --> 00:04:17,839
现在我们要如何处理这个问题取决于我们

81
00:04:17,839 --> 00:04:19,353
在我们的前端。

82
00:04:21,070 --> 00:04:23,310
在联系教练组件中，

83
00:04:23,310 --> 00:04:25,350
在我们发送这个的那一刻，

84
00:04:25,350 --> 00:04:28,370
然后我们不在乎这是否完成。

85
00:04:28,370 --> 00:04:30,820
我们立即重定向并在幕后，

86
00:04:30,820 --> 00:04:32,350
请求将被发送，

87
00:04:32,350 --> 00:04:34,710
但我们不会向用户显示任何反馈。

88
00:04:34,710 --> 00:04:37,943
我们没有显示错误消息，我们没有显示加载微调器。

89
00:04:38,860 --> 00:04:41,290
你要不要这个取决于你，

90
00:04:41,290 --> 00:04:43,520
您想提供哪种体验取决于您

91
00:04:43,520 --> 00:04:44,560
给用户。

92
00:04:44,560 --> 00:04:47,110
也许你不希望用户等待

93
00:04:47,110 --> 00:04:49,130
在发送此请求之前，

94
00:04:49,130​​ --> 00:04:51,230
因为对于使用该应用程序的用户，

95
00:04:51,230 --> 00:04:53,420
它实际上并没有什么不同。

96
00:04:53,420 --> 00:04:55,950
但也许您确实希望用户等待。

97
00:04:55,950 --> 00:04:58,750
所以这取决于你想如何实现它。

98
00:04:58,750 --> 00:05:01,920
我不会在这里联系教练做任何事情。

99
00:05:01,920 --> 00:05:04,230
我将发送此操作，

100
00:05:04,230 --> 00:05:07,080
在幕后发送 HTTP 请求。

101
00:05:07,080 --> 00:05:11,480
然后在这里，我没有实现加载或错误处理，

102
00:05:11,480 --> 00:05:13,770
但当然你绝对可以这样做

103
00:05:13,770 --> 00:05:15,893
如果您愿意，可以作为额外的练习。

104
00:05:17,180 --> 00:05:19,660
但有了这个，如果我们保存一切，

105
00:05:19,660 --> 00:05:22,530
我们实际上应该有工作经验

106
00:05:22,530 --> 00:05:24,480
我们可以在哪里联系教练，

107
00:05:24,480 --> 00:05:26,263
此刻，我们自己在这里。

108
00:05:29,310 --> 00:05:32,170
发个消息看不到这里

109
00:05:32,170 --> 00:05:34,300
或者实际上我们这样做是因为我们将其存储在本地。

110
00:05:34,300 --> 00:05:36,830
但这不是从 Firebase 获取的。

111
00:05:36,830 --> 00:05:39,610
但我们也确实在 Firebase 上看到了它。

112
00:05:39,610 --> 00:05:42,990
在这里，请求，然后是那个教练的 ID，

113
00:05:42,990 --> 00:05:46,793
然后在这里，发送的请求。

114
00:05:48,200 --> 00:05:52,060
实际上，我们也可以从该字段中删除教练 ID

115
00:05:52,060 --> 00:05:53,363
现在我想起来了。

116
00:05:54,720 --> 00:05:57,500
让我们这样做吧，让我们在这里删除它

117
00:05:57,500 --> 00:06:02,120
让我们确保它在我们发送的数据中

118
00:06:02,120 --> 00:06:07,120
在我们的行动中，我们实际上不包括教练 ID。

119
00:06:08,550 --> 00:06:13,550
相反，让我们仅在此处添加教练 ID

120
00:06:15,410 --> 00:06:16,940
在我们发送请求后，

121
00:06:16,940 --> 00:06:20,070
这样我们就可以在我们使用的本地数据中拥有它，

122
00:06:20,070 --> 00:06:23,290
但不在我们发送到服务器的数据中。

123
00:06:23,290 --> 00:06:26,570
所以在这里我还是会得到payload.coachId。

124
00:06:29,040 --> 00:06:30,580
并将其添加到本地数据中，

125
00:06:30,580 --> 00:06:33,240
但它现在没有被发送到服务器。

126
00:06:33,240 --> 00:06:34,370
惊人的。

127
00:06:34,370 --> 00:06:36,540
这样，我们的数据将在未来

128
00:06:36,540 --> 00:06:38,670
总是这样结束。

129
00:06:38,670 --> 00:06:42,033
当然，现在我们还想获取该数据。

130
00:06:43,060 --> 00:06:46,960
所以在这里我将像以前一样实现获取。

131
00:06:46,960 --> 00:06:49,680
在请求的操作中，

132
00:06:49,680 --> 00:06:53,550
我们可以添加一个获取请求方法，

133
00:06:53,550 --> 00:06:55,060
但是你想命名它。

134
00:06:55,060 --> 00:06:57,580
当然，在这里，我们得到了一个上下文。

135
00:06:57,580 --> 00:06:59,730
我想加载所有请求

136
00:06:59,730 --> 00:07:01,930
对于当前活跃的用户。

137
00:07:01,930 --> 00:07:05,380
这很重要，只有发送的请求

138
00:07:05,380 --> 00:07:07,880
给这个当前活跃的用户。

139
00:07:07,880 --> 00:07:12,380
因此，我们需要来自全局状态的用户 ID，

140
00:07:12,380 --> 00:07:14,430
来自我们的全球吸气剂。

141
00:07:14,430 --> 00:07:16,420
我们可以通过上下文得到这个。

142
00:07:16,420 --> 00:07:19,940
你可能还记得，在那里我们也可以访问 rootGetters

143
00:07:19,940 --> 00:07:22,370
然后简单地获取我们的用户 ID。

144
00:07:22,370 --> 00:07:24,960
所以这就是必须教练

145
00:07:24,960 --> 00:07:27,773
我们要为谁获取所有请求。

146
00:07:29,050 --> 00:07:32,450
使用该 ID，获取将很容易。

147
00:07:32,450 --> 00:07:35,940
最后，我将这行代码复制到这里

148
00:07:38,440 --> 00:07:40,800
并在这里执行它。

149
00:07:40,800 --> 00:07:44,630
但是教练 ID 现在将是教练 ID，

150
00:07:44,630 --> 00:07:46,620
我们从我们的吸气剂那里得到。

151
00:07:46,620 --> 00:07:48,530
现在这将发送一个获取请求

152
00:07:48,530 --> 00:07:52,910
并获取所有可以找到的请求

153
00:07:52,910 --> 00:07:55,213
对于 Firebase 上的教练 ID。

154
00:07:56,430 --> 00:08:00,330
同样，我们可以使用 async await 来处理该承诺

155
00:08:00,330 --> 00:08:04,380
以一种愉快的方式，在这里得到我们的回应，

156
00:08:04,380 --> 00:08:08,740
并通过等待 response.json 来获取我们的响应数据。

157
00:08:11,630 --> 00:08:14,973
检查响应是否不正常。

158
00:08:16,380 --> 00:08:21,240
在这种情况下，我们可以像以前一样创建错误。

159
00:08:21,240 --> 00:08:23,080
所以在这里，创建一个错误，

160
00:08:23,080 --> 00:08:27,750
也许说未能获取请求，抛出该错误。

161
00:08:27,750 --> 00:08:30,540
否则，如果我们通过了这个检查，

162
00:08:30,540 --> 00:08:33,320
我们知道我们得到了成功的回应，

163
00:08:33,320 --> 00:08:35,539
我们现在可以使用响应数据。

164
00:08:35,539 --> 00:08:39,210
响应数据现在将包含所有内容

165
00:08:39,210 --> 00:08:43,130
在请求节点中的该教练 ID 下方。

166
00:08:43,130 --> 00:08:48,130
所以在这里，我们实际上会有一个充满这些 ID 的对象

167
00:08:49,890 --> 00:08:51,310
作为属性名称。

168
00:08:51,310 --> 00:08:54,170
在这些想法之下，我们会发现嵌套对象

169
00:08:54,170 --> 00:08:56,563
与具体的请求数据。

170
00:08:57,750 --> 00:08:59,670
所以再一次，我们需要改变这个

171
00:08:59,670 --> 00:09:02,690
这样我们就可以在本地处理这些数据。

172
00:09:02,690 --> 00:09:06,070
因为在本地，请求应该有一个用户电子邮件，

173
00:09:06,070 --> 00:09:10,570
一条消息，然后还有一个 ID 和一个教练 ID 字段。

174
00:09:10,570 --> 00:09:12,720
所以我们需要转换我们得到的数据

175
00:09:12,720 --> 00:09:14,860
所以它看起来像这样。

176
00:09:14,860 --> 00:09:18,797
对于这一切再次在一个助手，不断的要求。

177
00:09:18,797 --> 00:09:23,797
然后再循环遍历 responseData 中的所有键。

178
00:09:28,820 --> 00:09:31,703
在此处创建一个请求助手对象。

179
00:09:34,360 --> 00:09:37,840
然后添加一个ID，这是我的钥匙。

180
00:09:37,840 --> 00:09:41,250
这是给定请求的唯一 ID。

181
00:09:41,250 --> 00:09:45,080
添加一个coach ID，也就是我们上面起的coach ID

182
00:09:45,080 --> 00:09:46,283
从根吸气剂。

183
00:09:47,580 --> 00:09:49,810
然后添加一个用户电子邮件字段，

184
00:09:49,810 --> 00:09:53,623
这是给定键 .userEmail 的响应数据，

185
00:09:55,490 --> 00:09:58,450
因为它存储在该用户电子邮件字段下

186
00:09:58,450 --> 00:09:59,423
在后端。

187
00:10:00,760 --> 00:10:05,450
然后在这里，添加一条消息，即 responseData

188
00:10:05,450 --> 00:10:07,563
对于给定的键 .message。

189
00:10:09,150 --> 00:10:13,533
然后我们可以将其添加到请求中。

190
00:10:16,130 --> 00:10:19,023
最后，一旦我们完成了 for 循环，

191
00:10:20,190 --> 00:10:23,130
context.commit 并提交一个突变

192
00:10:23,130 --> 00:10:25,370
接收这些请求。

193
00:10:25,370 --> 00:10:28,110
现在这是我尚未创建的突变。

194
00:10:28,110 --> 00:10:30,480
我将其命名为 setRequests。

195
00:10:30,480 --> 00:10:32,633
在这里，我们得到一个状态和一个有效载荷。

196
00:10:33,590 --> 00:10:36,570
基本上，就像我们为教练做的一样，

197
00:10:36,570 --> 00:10:37,710
将在这里完成。

198
00:10:37,710 --> 00:10:42,060
我们说 state.requests 等于有效载荷，就像那样。

199
00:10:42,060 --> 00:10:46,130
因此，有效负载应该是一个充满请求的数组。200
00:10:46,130 --> 00:10:48,980
因此我们现在可以提交 setRequests

201
00:10:50,760 --> 00:10:53,360
并将我们的请求作为有效负载传递。

202
00:10:53,360 --> 00:10:57,083
所以这些将是我们的本地请求设置的请求。

203
00:10:58,490 --> 00:11:02,770
现在我们只需要发送 fetch 请求，

204
00:11:02,770 --> 00:11:05,470
好吧，只要他们应该被取走。

205
00:11:05,470 --> 00:11:07,900
当然应该是这样的

206
00:11:07,900 --> 00:11:12,160
在收到的请求组件上。

207
00:11:12,160 --> 00:11:15,560
所以这将是与教练相同的模式。

208
00:11:15,560 --> 00:11:19,767
我们可以添加方法并添加一个 loadRequests 方法

209
00:11:22,060 --> 00:11:24,320
我们在哪里联系我们的商店

210
00:11:24,320 --> 00:11:29,320
并分派请求、斜线、fetchRequests 操作。

211
00:11:32,210 --> 00:11:35,190
再说一次，在这种情况下，这将返回一个承诺

212
00:11:35,190 --> 00:11:37,200
因为我们在那里使用 async await

213
00:11:37,200 --> 00:11:39,310
并自动返回一个承诺

214
00:11:39,310 --> 00:11:41,270
在调度的动作中。

215
00:11:41,270 --> 00:11:44,320
所以我们这里也可以使用isLoading的方式

216
00:11:44,320 --> 00:11:46,140
向用户显示加载微调器

217
00:11:46,140 --> 00:11:48,983
在我们等待加载请求的同时。

218
00:11:50,030 --> 00:11:51,760
所以在收到的请求中，

219
00:11:51,760 --> 00:11:56,760
我们可以添加我们的数据并返回一个新的数据对象

220
00:11:57,630 --> 00:12:00,350
使用 isLoading，最初是错误的。

221
00:12:00,350 --> 00:12:02,980
也许已经有了错误属性

222
00:12:02,980 --> 00:12:04,763
这样我们就可以处理错误。

223
00:12:06,060 --> 00:12:09,643
然后我们可以在此处将其设置为 loading 为 true。

224
00:12:11,110 --> 00:12:13,780
在加载请求前添加异步

225
00:12:13,780 --> 00:12:16,510
这样我们就可以等待承诺

226
00:12:16,510 --> 00:12:20,240
由正在调度的此操作返回。

227
00:12:20,240 --> 00:12:23,510
因此，一旦发送请求，这将解决

228
00:12:23,510 --> 00:12:24,810
数据就在那里。

229
00:12:24,810 --> 00:12:27,453
然后我们再次将 isLoading 设置为 false。

230
00:12:29,080 --> 00:12:31,770
我们也可以尝试抓住这个

231
00:12:31,770 --> 00:12:35,740
捕捉我们可能遇到的任何潜在错误。

232
00:12:35,740 --> 00:12:39,470
然后我们可以设置error等于error.message，

233
00:12:39,470 --> 00:12:43,463
或者作为后备，失败了，无论如何。

234
00:12:45,300 --> 00:12:47,870
现在我们可以在加载时显示加载微调器

235
00:12:47,870 --> 00:12:50,770
如果出现错误，则显示错误对话框。

236
00:12:50,770 --> 00:12:54,040
所以在这个组件的标记中，在模板中，

237
00:12:54,040 --> 00:12:58,840
我们可以在此处添加我们的基本对话框以进行错误处理。

238
00:12:58,840 --> 00:13:00,660
实际上，我们可以复制基本对话框

239
00:13:00,660 --> 00:13:02,840
从教练名单上，我猜。

240
00:13:02,840 --> 00:13:06,983
只需将这个基本对话复制到收到的两个请求上。

241
00:13:09,160 --> 00:13:12,120
当然，我们现在还需要添加一个处理错误的方法

242
00:13:12,120 --> 00:13:15,160
清除错误（如果已处理）。

243
00:13:15,160 --> 00:13:19,730
所以添加句柄错误，我们在这里简单地设置这个错误

244
00:13:19,730 --> 00:13:21,303
再次等于 null。

245
00:13:23,080 --> 00:13:25,130
现在对于加载微调器，

246
00:13:25,130 --> 00:13:29,800
在这里，我想在标题下方添加基本微调器，

247
00:13:29,800 --> 00:13:34,800
在无序列表上方并在我们加载时显示它。

248
00:13:37,260 --> 00:13:40,330
在这里，我们把它变成一个 else if。

249
00:13:40,330 --> 00:13:45,330
如果我们有请求并且我们没有加载，则显示这一点。

250
00:13:47,560 --> 00:13:49,260
当然我们也可以合并这个

251
00:13:49,260 --> 00:13:51,810
如果我们愿意，可以将其放入一个计算属性中。

252
00:13:51,810 --> 00:13:53,343
否则，显示此文本。

253
00:13:54,460 --> 00:13:58,150
如果我们现在保存我得到一个错误，

254
00:13:58,150 --> 00:14:03,150
因为这应该是我在这里设置的这个错误。

255
00:14:05,420 --> 00:14:07,810
但是现在有了它，我们可以成功保存它。

256
00:14:07,810 --> 00:14:10,414
现在我们必须调用 loadRequests

257
00:14:10,414 --> 00:14:12,520
创建此组件时。

258
00:14:12,520 --> 00:14:14,830
所以在这里创建的生命周期中，

259
00:14:14,830 --> 00:14:17,137
我们可以称之为 loadRequests。

260
00:14:18,390 --> 00:14:19,970
所以这个方法会被执行

261
00:14:19,970 --> 00:14:23,433
当创建此请求收到的组件时。

262
00:14:24,510 --> 00:14:26,350
如果我们现在保存并在此处重新加载，

263
00:14:26,350 --> 00:14:28,873
我们看到一个微调器，然后是我们的数据。

264
00:14:30,290 --> 00:14:34,280
有了这个，我们在这里得到了我们需要的所有功能。

265
00:14:34,280 --> 00:14:39,070
现在，如果我在我的主商店中快速更改我的用户 ID

266
00:14:39,070 --> 00:14:42,630
从 c3 到 c1，比方说，

267
00:14:42,630 --> 00:14:46,090
你会看到我们没有对这位教练提出任何要求。

268
00:14:46,090 --> 00:14:48,750
我们现在仍然可以注册为教练，

269
00:14:48,750 --> 00:14:51,650
比方说，手动洛伦兹。

270
00:14:51,650 --> 00:14:56,390
我是一名网络开发人员和数据分析师。

271
00:14:56,390 --> 00:15:00,273
让我帮助你的职业生涯。

272
00:15:01,630 --> 00:15:05,520
假设我们得到了我们的时薪、前端和职业。

273
00:15:05,520 --> 00:15:07,740
我们也可以注册这个教练，

274
00:15:07,740 --> 00:15:10,220
因为现在我们有了不同的用户 ID，

275
00:15:10,220 --> 00:15:12,090
这当然是一些虚拟数据

276
00:15:12,090 --> 00:15:15,133
我们仍然在这里管理，但现在已经足够了。

277
00:15:16,600 --> 00:15:18,720
好吧，当然，有了这个，

278
00:15:18,720 --> 00:15:21,360
我们在这里看不到此用户的请求。

279
00:15:21,360 --> 00:15:24,870
但另一方面，如果我把它切换回 c3，

280
00:15:24,870 --> 00:15:26,993
我们现在还有两位教练，

281
00:15:27,980 --> 00:15:32,170
但我们现在看到发送给 c3 教练的请求。

282
00:15:32,170 --> 00:15:35,290
这就是几乎完成的应用程序，

283
00:15:35,290 --> 00:15:37,820
当然仍然使用虚拟用户 ID。

284
00:15:37,820 --> 00:15:40,780
这是我们将修复或改变的东西

285
00:15:40,780 --> 00:15:43,000
在认证模块中。

286
00:15:43,000 --> 00:15:45,660
还有一个我想先做的调整

287
00:15:45,660 --> 00:15:46,803
在这个模块中。