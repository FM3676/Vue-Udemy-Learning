1
00:00:02,050 --> 00:00:05,070
我们正在检查响应是否正常。

2
00:00:05,070 --> 00:00:08,340
但除此之外，我们还可能遇到技术错误。

3
00:00:08,340 --> 00:00:11,370
在这两种情况下，我都想抛出一个错误，

4
00:00:11,370 --> 00:00:13,720
然后我可以在组件中处理

5
00:00:13,720 --> 00:00:16,170
发送了这个动作。

6
00:00:16,170 --> 00:00:17,970
现在，如果我们遇到技术错误，

7
00:00:17,970 --> 00:00:21,000
将自动抛出错误对象，

8
00:00:21,000 --> 00:00:23,480
但除此之外我想手动扔一个。

9
00:00:23,480 --> 00:00:26,350
所以在这里，当我得到一个错误

10
00:00:26,350 --> 00:00:30,270
或创建一个新错误并在此错误对象中，

11
00:00:30,270 --> 00:00:31,720
我也想设置消息

12
00:00:31,720 --> 00:00:35,870
响应数据点消息，如果我们有这样的字段，

13
00:00:35,870 --> 00:00:38,973
或未能获取作为后备。

14
00:00:40,200 --> 00:00:43,170
然后我想抛出这个错误对象。

15
00:00:43,170 --> 00:00:45,310
所以我正在创建一个新的错误对象

16
00:00:45,310 --> 00:00:48,150
并构建了错误构造函数

17
00:00:48,150 --> 00:00:49,350
成 Java 脚本。

18
00:00:49,350 --> 00:00:50,833
我把这个扔在这里。

19
00:00:51,720 --> 00:00:54,220
现在，每当这里抛出一个错误

20
00:00:54,220 --> 00:00:56,210
在这个分派的行动中，

21
00:00:56,210 --> 00:00:58,660
发送它的组件，

22
00:00:58,660 --> 00:01:01,940
在这种情况下教练的名单，可以处理它。

23
00:01:01,940 --> 00:01:04,181
这正是我们想要在这里做的。

24
00:01:04,181 --> 00:01:07,670
所以在负载教练这里，

25
00:01:07,670 --> 00:01:10,590
除了改变正在加载状态，

26
00:01:10,590 --> 00:01:14,630
我现在还要添加一个新的第二个数据属性，

27
00:01:14,630 --> 00:01:16,750
错误数据属性，

28
00:01:16,750 --> 00:01:20,910
最初是空的，就像这样。

29
00:01:20,910 --> 00:01:23,880
并且应该在任何时候设置这个错误

30
00:01:23,880 --> 00:01:26,253
这个分派的动作错误地冻结了。

31
00:01:27,653 --> 00:01:28,810
在这里，我们可以使用try catch，

32
00:01:28,810 --> 00:01:33,810
它内置在 JavaScript 中以尝试执行这一行。

33
00:01:35,390 --> 00:01:37,440
但是如果我们失败了，

34
00:01:37,440 --> 00:01:42,020
我想抓住错误并做点什么

35
00:01:42,020 --> 00:01:45,440
在错误情况下，应用程序不会崩溃，

36
00:01:45,440 --> 00:01:49,113
但是我们可以定义如果失败，哪个教练会执行。

37
00:01:50,330 --> 00:01:52,340
那么我想在这里做什么呢？

38
00:01:52,340 --> 00:01:57,340
我想将此错误设置为等于错误点消息

39
00:01:58,090 --> 00:02:01,270
或作为此错误对象的后备

40
00:02:01,270 --> 00:02:03,700
不应该有 message 属性

41
00:02:03,700 --> 00:02:06,143
出事了。

42
00:02:08,300 --> 00:02:11,400
现在我们正在设置这个错误数据属性，

43
00:02:11,400 --> 00:02:13,830
我们现在可以在我们的模板中使用它

44
00:02:13,830 --> 00:02:17,010
向用户显示错误。

45
00:02:17,010 --> 00:02:19,840
现在由您决定如何展示

46
00:02:19,840 --> 00:02:21,720
给用户的错误信息。

47
00:02:21,720 --> 00:02:25,660
我想通过打开叠加层来显示错误消息，

48
00:02:25,660 --> 00:02:28,580
向用户显示错误的模式，

49
00:02:28,580 --> 00:02:30,300
然后用户必须确认，

50
00:02:30,300 --> 00:02:33,510
也许他或她想再试一次或其他什么，

51
00:02:33,510 --> 00:02:37,110
但至少我们会向用户显示错误。

52
00:02:37,110 --> 00:02:39,600
所以让我们在这里添加这样一个模态。

53
00:02:39,600 --> 00:02:42,360
现在对于我想展示的这个错误模式，

54
00:02:42,360 --> 00:02:44,623
我为你准备了一些组件。

55
00:02:45,530 --> 00:02:48,490
它是附加的基本对话组件，

56
00:02:48,490 --> 00:02:51,260
您可以将其复制到您的 UI 文件夹中。

57
00:02:51,260 --> 00:02:54,530
现在我为你准备了这个组件，以便我们

58
00:02:54,530 --> 00:02:58,580
不要在创建另一个组件上浪费太多时间

59
00:02:58,580 --> 00:03:00,760
那真的没有做那么多。

60
00:03:00,760 --> 00:03:04,630
这只是一个对话，一个默认的 HTML 对话，

61
00:03:04,630 --> 00:03:07,950
正在渲染它背后的背景。

62
00:03:07,950 --> 00:03:11,530
它显示了一个在这里收到的表演道具，

63
00:03:11,530 --> 00:03:14,060
这必须是布尔值并且是必需的。

64
00:03:14,060 --> 00:03:18,240
我们用它来展示背景和对话。

65
00:03:18,240 --> 00:03:23,100
我在这里使用传送将其传送到身体，以便

66
00:03:23,100 --> 00:03:26,400
它没有呈现在我们使用的 Dom 层次结构中

67
00:03:26,400 --> 00:03:29,453
这个组件，但总是直接在正文中。

68
00:03:30,800 --> 00:03:34,020
然后我们得到一个title prop和一个fixed prop title

69
00:03:34,020 --> 00:03:35,610
是标题，显示

70
00:03:35,610 --> 00:03:37,320
在标题关闭对话。

71
00:03:37,320 --> 00:03:40,380
主要内容是动态的。我们可以在这里使用一个插槽。

72
00:03:40,380 --> 00:03:43,130
我们也可以使用一个插槽来替换标题

73
00:03:43,130 --> 00:03:46,500
并且还使用插槽来替换动作，

74
00:03:46,500 --> 00:03:47,960
我们在这里显示的按钮。

75
00:03:47,960 --> 00:03:50,460
但默认情况下，我在这里显示一个关闭按钮，

76
00:03:50,460 --> 00:03:53,130
触发 try close 方法，

77
00:03:53,130 --> 00:03:55,690
就像点击背景一样。

78
00:03:55,690 --> 00:03:59,460
并且 try close 方法是一种发出

79
00:03:59,460 --> 00:04:03,130
关闭事件，但它检查是否固定道具

80
00:04:03,130 --> 00:04:05,890
已设置，如果设置为 true，

81
00:04:05,890 --> 00:04:08,450
它实际上不会发出关闭事件。

82
00:04:08,450 --> 00:04:11,640
这个想法是你也可以使用这个对话

83
00:04:11,640 --> 00:04:13,770
以不可关闭的方式，

84
00:04:13,770 --> 00:04:16,209
这确保它不能被关闭

85
00:04:16,209 --> 00:04:17,570
通过单击背景。

86
00:04:17,570 --> 00:04:19,760
例如，如果您这样做，这可能会很有用

87
00:04:19,760 --> 00:04:23,850
想要显示对话框以保持加载微调器

88
00:04:23,850 --> 00:04:26,770
然后它应该会自动控制

89
00:04:26,770 --> 00:04:28,590
从这个组件的外部

90
00:04:28,590 --> 00:04:31,860
当不再需要加载微调器时。

91
00:04:31,860 --> 00:04:35,030
所以它实际上只是一个灵活的对话组件，

92
00:04:35,030 --> 00:04:36,370
它显示了一个覆盖。

93
00:04:36,370 --> 00:04:38,870
我们将使用这个组件。

94
00:04:38,870 --> 00:04:41,640
对于爸爸和主要JS，我们必须注册它

95
00:04:41,640 --> 00:04:43,750
作为一个全局组件。

96
00:04:43,750 --> 00:04:47,220
所以来自组件的基础对话，

97
00:04:47,220 --> 00:04:49,620
UI 基础对话点 vue。

98
00:04:49,620 --> 00:04:51,240
这就是我们需要的导入。

99
00:04:51,240 --> 00:04:53,090
然后加上那个导入，

100
00:04:53,090 --> 00:04:55,277
我们可以将它注册为一个组件

101
00:04:55,277 --> 00:04:59,020
在这里使用 app 组件方法，

102
00:04:59,020 --> 00:05:02,220
基本对话指向基本对话。

103
00:05:02,220 --> 00:05:04,733
现在该组件可用。

104
00:05:06,030 --> 00:05:08,380
我想在教练名单中使用它

105
00:05:08,380 --> 00:05:10,847
向用户显示错误消息

106
00:05:10,847 --> 00:05:13,743
如果获取数据失败。

107
00:05:14,780 --> 00:05:18,410
为此，我们可以简单地添加基本对话

108
00:05:18,410 --> 00:05:20,580
在这个组件的模板中。

109
00:05:20,580 --> 00:05:23,290
同样，它不会在该位置呈现

110
00:05:23,290 --> 00:05:24,600
Dom 层次结构。

111
00:05:24,600 --> 00:05:26,930
相反，它将始终被传送

112
00:05:26,930 --> 00:05:31,450
因为基地对话里面的瞬移到身体。

113
00:05:31,450 --> 00:05:34,230
但我想在这个教练的列表组件中使用它

114
00:05:34,230 --> 00:05:37,280
因为在这里我想显示错误信息。

115
00:05:37,280 --> 00:05:38,940
所以在一个段落中，

116
00:05:38,940 --> 00:05:42,140
我们在基本对话文本之间传递

117
00:05:42,140 --> 00:05:44,490
使用那里的默认插槽，

118
00:05:44,490 --> 00:05:48,404
这是此内容部分中的此插槽，

119
00:05:48,404 --> 00:05:51,430
这个插槽接收这个段落，

120
00:05:51,430 --> 00:05:52,770
在本段中，

121
00:05:52,770 --> 00:05:55,170
我想输出错误

122
00:05:55,170 --> 00:05:59,650
因为教练列表中的错误数据属性

123
00:05:59,650 --> 00:06:04,240
最初为 null，但实际上设置为错误消息

124
00:06:04,240 --> 00:06:05,743
如果我们确实有错误。

125
00:06:07,530 --> 00:06:10,660
而现在我当然只想展示对话

126
00:06:10,660 --> 00:06:12,150
如果我们确实有错误，

127
00:06:12,150 --> 00:06:16,440
所以我们可以绑定以显示基础对话队列的道具，而不是，

128
00:06:17,370 --> 00:06:19,520
不是错误。

129
00:06:19,520 --> 00:06:20,710
这可能看起来很奇怪，

130
00:06:20,710 --> 00:06:23,870
但这确保了如果错误是真实的，

131
00:06:23,870 --> 00:06:26,670
它被转换成一个真正的布尔值。

132
00:06:26,670 --> 00:06:28,920
如果它会通过并且只是错误，

133
00:06:28,920 --> 00:06:32,550
我会传入一个字符串作为显示的值，

134
00:06:32,550 --> 00:06:34,650
但显示一次布尔值。

135
00:06:34,650 --> 00:06:36,350
如果我加一个感叹号，

1
36
00:06:36,350 --> 00:06:39,940
我通过相反的方向，我不想要相反的方向。

137
00:06:39,940 --> 00:06:43,480
所以两个感叹号转换一个字符串，

138
00:06:43,480 --> 00:06:47,070
一个真值到一个真正的布尔值。

139
00:06:47,070 --> 00:06:49,130
这就是我在这里使用它的原因。

140
00:06:49,130​​ --> 00:06:52,110
因此，如果我们有错误，我们在这里传递 true，如果有错误，则传递 false

141
00:06:52,110 --> 00:06:55,620
如果我们没有一个和内部的 show 道具

142
00:06:55,620 --> 00:06:59,783
然后用于显示或隐藏对话和背景。

143
00:07:01,030 --> 00:07:02,610
我们也可以传入一个标题

144
00:07:02,610 --> 00:07:05,990
并将其设置为发生错误。

145
00:07:05,990 --> 00:07:06,823
有了这个，

146
00:07:06,823 --> 00:07:09,950
每当我们有错误时，我们都应该显示这个对话。

147
00:07:09,950 --> 00:07:12,800
所以如果我重新加载，因为获取总是失败，

148
00:07:12,800 --> 00:07:15,683
我们现在看到这个错误对话。

149
00:07:16,540 --> 00:07:18,540
现在如果我们能关闭它就太好了

150
00:07:18,540 --> 00:07:22,500
并且基本对话确实会发出关闭事件。

151
00:07:22,500 --> 00:07:26,520
每当我们点击背景或关闭按钮时，

152
00:07:26,520 --> 00:07:28,960
因此回到教练名单，

153
00:07:28,960 --> 00:07:32,360
我们可以在这里收听关闭事件。

154
00:07:32,360 --> 00:07:36,410
然后，例如，执行一个处理错误的方法

155
00:07:36,410 --> 00:07:38,690
我们还没有添加。

156
00:07:38,690 --> 00:07:40,920
所以这里应该添加句柄错误

157
00:07:42,190 --> 00:07:46,410
也许在加载到教练之后。

158
00:07:46,410 --> 00:07:50,490
在这里，我只想将 error 设置回 null。

159
00:07:50,490 --> 00:07:51,950
一旦它为空，

160
00:07:51,950 --> 00:07:56,530
这是一个虚假值，因此 show 将收到 false

161
00:07:56,530 --> 00:07:59,563
作为一个值，因此它将不再显示。

162
00:08:01,140 --> 00:08:04,850
因此，如果我们重新加载，您会看到这是错误，

163
00:08:04,850 --> 00:08:08,980
但是，例如，如果我单击背景，那么我们将其关闭。

164
00:08:08,980 --> 00:08:11,080
或者，如果我单击关闭。

165
00:08:11,080 --> 00:08:11,913
现在此刻，

166
00:08:11,913 --> 00:08:15,120
您总是会收到此错误，因为这是一个强制错误。

167
00:08:15,120 --> 00:08:20,120
毕竟我在教练的动作中操纵了这里的URL。

168
00:08:20,630 --> 00:08:22,200
这需要在最后结束。

169
00:08:22,200 --> 00:08:23,800
所以我们要把这个带回来，

170
00:08:23,800 --> 00:08:27,980
但现在我们可以看到错误处理在这里也有效。

171
00:08:27,980 --> 00:08:32,450
现在我们还可以带来加载微调器和错误处理

172
00:08:32,450 --> 00:08:36,070
如果我们愿意，可以到教练登记处，

173
00:08:36,070 --> 00:08:37,350
但我不会在这里做，

174
00:08:37,350 --> 00:08:40,572
但你绝对可以这样做并想办法添加

175
00:08:40,572 --> 00:08:43,799
它也在那里，那将是一个很好的做法。

176
00:08:43,799 --> 00:08:47,420
但另一种做法，我也想在这里实施，

177
00:08:47,420 --> 00:08:52,160
或者我想在接下来的讲座中做的是带来

178
00:08:52,160 --> 00:08:56,513
加载微调器和对请求的错误处理。

179
00:08:57,440 --> 00:08:59,228
当我们在这里获取请求时，

180
00:08:59,228 --> 00:09:01,730
我想从后端获取它们。

181
00:09:01,730 --> 00:09:03,230
我们还没有这样做。

182
00:09:03,230 --> 00:09:06,290
而且我还想在后端存储请求。

183
00:09:06,290 --> 00:09:09,740
我想在 Firebase 上存储请求。

184
00:09:09,740 --> 00:09:13,000
与整个模块一样，请自行尝试。

185
00:09:13,000 --> 00:09:13,910
下一堂课，

186
00:09:13,910 --> 00:09:15,860
我们将开始一起实施。