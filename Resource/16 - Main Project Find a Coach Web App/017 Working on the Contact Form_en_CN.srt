1
00:00:02,070 --> 00:00:04,520
所以目前我们得到了教练部分

2
00:00:04,520 --> 00:00:05,990
执行得很好，

3
00:00:05,990 --> 00:00:08,720
现在让我们继续讨论请求。

4
00:00:08,720 --> 00:00:11,320
有了这个，我的意思是我们可以，例如，

5
00:00:11,320 --> 00:00:15,600
联系教练并从此页面发送请求。

6
00:00:15,600 --> 00:00:18,150
现在，在这个页面上，我们总是收到警告，

7
00:00:18,150 --> 00:00:20,670
但这个警告很快就会消失。

8
00:00:20,670 --> 00:00:22,840
所以暂时我们可以忽略它

9
00:00:22,840 --> 00:00:24,890
因为警告应该消失

10
00:00:24,890 --> 00:00:28,200
一旦我们在这里替换了这段文字

11
00:00:28,200 --> 00:00:33,200
在带有一些实际 HTML 标记的 Contact coach 组件中。

12
00:00:34,920 --> 00:00:36,180
所以让我们这样做。

13
00:00:36,180 --> 00:00:38,810
在这里，我想呈现一个联系表格。

14
00:00:38,810 --> 00:00:39,643
所以当然，

15
00:00:39,643 --> 00:00:42,770
一个表单元素听起来很适合在这里呈现。

16
00:00:42,770 --> 00:00:46,820
以这种形式，我想提供两个输入，

17
00:00:46,820 --> 00:00:48,970
一个用于电子邮件地址，

18
00:00:48,970 --> 00:00:51,710
用户可以输入让教练

19
00:00:51,710 --> 00:00:56,190
与谁联系以了解如何联系用户。

20
00:00:56,190 --> 00:00:58,850
因此，我们想留下我们的电子邮件地址，

21
00:00:58,850 --> 00:01:01,300
我们也想发消息

22
00:01:01,300 --> 00:01:05,420
以及我们正在联系的教练的电子邮件地址。

23
00:01:05,420 --> 00:01:07,130
因此，我将在这里添加一个 div

24
00:01:07,130 --> 00:01:09,653
并在那个 div 中添加一个标签，

25
00:01:10,940 --> 00:01:15,940
哪个说你的电子邮件，哪个是一个元素

26
00:01:16,580 --> 00:01:18,490
带有电子邮件 ID。

27
00:01:18,490 --> 00:01:20,820
这就是我之后添加的下一个元素

28
00:01:20,820 --> 00:01:24,690
我们的 email 类型的输入字段，ID 为 email，

29
00:01:24,690 --> 00:01:27,763
在此标签下方添加。

30
00:01:29,120 --> 00:01:33,660
然后我们可以像这样在这里有另一个 div。

31
00:01:33,660 --> 00:01:38,540
在那个 div 我想有另一个标签

32
00:01:38,540 --> 00:01:40,620
让我们说一下消息。

33
00:01:40,620 --> 00:01:43,950
所以对于带有 ID 消息的元素

34
00:01:43,950 --> 00:01:46,850
我在那个标签上说信息，

35
00:01:46,850 --> 00:01:49,910
然后我们要在这里渲染一个文本区域，

36
00:01:49,910 --> 00:01:52,920
假设消息是，

37
00:01:52,920 --> 00:01:55,090
可以是多行的，而且更容易一些

38
00:01:55,090 --> 00:01:57,490
输入更长的文本。

39
00:01:57,490 --> 00:02:00,050
因此，这里我将有五行，

40
00:02:00,050 --> 00:02:03,403
比方说，并给出一个理想的信息。

41
00:02:04,500 --> 00:02:07,910
然后在下面，我将添加另一个 div

42
00:02:09,940 --> 00:02:12,210
用一类动作，

43
00:02:12,210 --> 00:02:15,560
这对于以后的造型很重要。

44
00:02:15,560 --> 00:02:17,763
不过，我会为您提供一些样式。

45
00:02:18,950 --> 00:02:21,800
在那里我想渲染一个按钮。

46
00:02:21,800 --> 00:02:22,633
而且当然，

47
00:02:22,633 --> 00:02:24,870
在这里我们可以使用我们的基本按钮组件，

48
00:02:24,870 --> 00:02:26,980
我们不久前创建的，

49
00:02:26,980 --> 00:02:30,230
在那里，比如说，发送消息。

50
00:02:30,230 --> 00:02:32,020
现在到这些其他div，

51
00:02:32,020 --> 00:02:36,050
我其实是想进入，添加一个表单控件类。

52
00:02:36,050 --> 00:02:39,820
所以将它添加到第一个和第二个 div

53
00:02:39,820 --> 00:02:43,270
它包含一个输入，现在我们可以添加一些样式。

54
00:02:43,270 --> 00:02:45,850
因此，让我们添加作用域样式。

55
00:02:45,850 --> 00:02:47,150
和往常一样，

56
00:02:47,150 --> 00:02:50,950
你可以在这里找到本次讲座的风格，

57
00:02:50,950 --> 00:02:54,780
你找到联系教练 CSS 文件，

58
00:02:54,780 --> 00:02:55,980
其中包含样式

59
00:02:55,980 --> 00:03:00,150
您可以复制并粘贴到这些范围样式文本中

60
00:03:00,150 --> 00:03:02,053
在联系教练组件中。

61
00:03:04,370 --> 00:03:07,363
这会给这个表格一些一般的样式。

62
00:03:08,820 --> 00:03:12,460
现在，当然，这不仅仅是关于标记和样式，

63
00:03:12,460 --> 00:03:14,980
但我们还需要一些逻辑脚本。

64
00:03:14,980 --> 00:03:19,510
我们想要获取电子邮件和消息的输入。

65
00:03:19,510 --> 00:03:23,450
我们可能想做某种验证。

66
00:03:23,450 --> 00:03:26,400
是否应该如此详细取决于您

67
00:03:26,400 --> 00:03:29,180
无论是否在教练注册页面上，

68
00:03:29,180 --> 00:03:31,040
但一些验证不会受到伤害。

69
00:03:31,040 --> 00:03:34,080
最终一旦我们得到一个有效的输入，

70
00:03:34,080 --> 00:03:36,660
我们想用那个输入做点什么，

71
00:03:36,660 --> 00:03:39,060
最后，我们想创建一个新消息，

72
00:03:39,060 --> 00:03:43,040
它附加到向其发送消息的教练。

73
00:03:43,040 --> 00:03:44,970
这就是这里的想法。

74
00:03:44,970 --> 00:03:46,370
因此，在这个脚本中，

75
00:03:46,370 --> 00:03:48,620
我将从添加一些数据开始

76
00:03:48,620 --> 00:03:51,960
因为我们肯定想在这里管理一些数据。

77
00:03:51,960 --> 00:03:54,180
以及我们绝对想要管理的数据

78
00:03:54,180 --> 00:03:57,550
是电子邮件地址和消息。

79
00:03:57,550 --> 00:03:58,830
我想这是有道理的

80
00:03:58,830 --> 00:04:01,403
因为这是我们在这里得到的两个输入。

81
00:04:02,440 --> 00:04:03,910
但除此之外，

82
00:04:03,910 --> 00:04:08,910
这里我还要添加一个表单是否有效，数据属性，

83
00:04:10,460 --> 00:04:12,430
并最初将其设置为 true。

84
00:04:12,430 --> 00:04:14,620
这应该设置为 false

85
00:04:14,620 --> 00:04:19,012
如果电子邮件地址或文本区域无效。

86
00:04:20,490 --> 00:04:22,420
所以下一步，

87
00:04:22,420 --> 00:04:26,840
我们可以在这里向这个对象添加方法，

88
00:04:26,840 --> 00:04:29,140
到这个组件，冲突对象，

89
00:04:29,140 --> 00:04:33,130
并且提交表单方法听起来很正确，

90
00:04:33,130 --> 00:04:35,560
因为这是应该触发的方法

91
00:04:35,560 --> 00:04:37,380
提交表单时。

92
00:04:37,380 --> 00:04:41,260
当然我们可以因此添加一个提交事件处理程序

93
00:04:41,260 --> 00:04:45,120
到这种形式，并防止浏览器默认

94
00:04:45,120 --> 00:04:47,420
就像我们之前在课程中做过很多次一样，

95
00:04:47,420 --> 00:04:52,313
然后在提交此表单时指向提交表单。

96
00:04:54,340 --> 00:04:57,800
所以在提交表单中，我现在想验证，

97
00:04:57,800 --> 00:05:00,070
如果数据有效，

98
00:05:00,070 --> 00:05:02,890
创建新消息或确保

99
00:05:02,890 --> 00:05:05,730
以某种方式创建了一条新消息。

100
00:05:05,730 --> 00:05:08,010
所以让我们从验证开始。

101
00:05:08,010 --> 00:05:10,850
首先，我将 form is valid 设置为 true

102
00:05:10,850 --> 00:05:13,600
所以如果它在两者之间是错误的，

103
00:05:13,600 --> 00:05:16,600
我们现在清除可能显示的任何错误消息。

104
00:05:16,600 --> 00:05:19,423
我们还没有展示，但我们很快就会这样做。

105
00:05:20,690 --> 00:05:24,400
因此，下一步，我们可以检查此电子邮件是否

106
00:05:24,400 --> 00:05:25,993
是空的，比方说，

107
00:05:27,060 --> 00:05:29,120
或者如果这封电子邮件

108
00:05:30,260 --> 00:05:33,900
不包括 at 符号。

109
00:05:33,900 --> 00:05:35,930
所以在这里我检查了相反的情况。

110
00:05:35,930 --> 00:05:39,260
如果它不包含 at 符号，

111
00:05:39,260 --> 00:05:43,150
或者如果此消息为空。

112
00:05:43,150 --> 00:05:44,940
如果是其中一种情况，

113
00:05:44,940 --> 00:05:49,090
然后我想将此表单设置为有效为假

114
00:05:49,090 --> 00:05:53,193
并返回以使该方法的其余部分不执行。

115
00:05:55,240 --> 00:05:57,940
所以现在我们管理了这个有效性，

116
00:05:57,940 --> 00:06:00,330
我想在标记中做两件事，

117
00:06:00,330 --> 00:06:04,100
一方面，我想绑定我的输入和我的文本区域

118
00:06:04,100 --> 00:06:07,080
通过两种方式绑定电子邮件和消息

119
00:06:07,080 --> 00:06:10,430
这样每次击键都会更新，

120
00:06:10,430 --> 00:06:14,490
如果表单无效，我想显示一条错误消息。

121
00:06:14,490 --> 00:06:17,590
现在我们将从与 V 模型的双向绑定开始。

122
00:06:17,590 --> 00:06:19,970
我会自动修剪输入

123
00:06:19,970 --> 00:06:22,550
然后在此处指向电子邮件

124
00:06:22,550 --> 00:06:25,910
在文本区域上，全部修剪它，

125
00:06:25,910 --> 00:06:27,143
指向消息。

126
00:06:29,180 --> 00:06:32,130
然后我们也可以显示错误

127
00:06:32,130 --> 00:06:35,860
通过在此处添加段落，例如，在按钮上方，

128
00:06:35,860 --> 00:06:38,750
有一类错误，

129
00:06:38,750 --> 00:06:41,640
应该用 V-if 显示

130
00:06:41,640 --> 00:06:45,600
如果论坛有效为假，

131
00:06:45,600 --> 00:06:47,263
所以如果不是真的

132
00:06:48,340 --> 00:06:50,880
然后在这里你可以输出你想要的任何消息。

133
00:06:50,880 --> 00:06:55,880
我会说，请输入有效的电子邮件和非空消息。

134
00:06:58,720 --> 00:07:02,430
所以这是一种不太复杂的验证方法

135
00:07:02,430 --> 00:07:05,000
比我们在教练注册时所接受的，

136
00:07:05,000 --> 00:07:07,300
但这当然总是一个非常好的方法

137
00:07:07,300 --> 00:07:08,133
做它。

138
00:07:08,133 --> 00:07:10,980
最终归结为您的要求

139
00:07:10,980 --> 00:07:15,003
以及您的偏好，您希望如何验证表单。

140
00:07:15,960 --> 00:07:17,760
然而，我们正在验证，

141
00:07:17,760 --> 00:07:20,270
我们正在获取输入值，

142
00:07:20,270 --> 00:07:23,460
如果我们在这里通过验证，

143
00:07:23,460 --> 00:07:26,490
然后我们要创建此消息。

144
00:07:26,490 --> 00:07:28,400
现在的问题当然是，

145
00:07:28,400 --> 00:07:32,473
在这个应用程序中创建消息究竟意味着什么？

146
00:07:33,360 --> 00:07:36,620
好吧，请记住，我们有这个请求页面

147
00:07:36,620 --> 00:07:39,180
我们要在哪里显示所有请求

148
00:07:39,180 --> 00:07:41,513
我们作为教练收到了。

149
00:07:42,530 --> 00:07:45,640
所以这当然需要我们注册为教练。

150
00:07:45,640 --> 00:07:49,960
但是一旦我们成为，如果我们作为教练收到信息，

151
00:07:49,960 --> 00:07:51,710
它应该出现在这里。

152
00:07:51,710 --> 00:07:54,443
这当然意味着最后一个信息，

153
00:07:54,443 --> 00:07:58,290
请求只是另一条数据

154
00:07:58,290 --> 00:08:00,800
我们想在这个 Vue 应用程序中管理

155
00:08:00,800 --> 00:08:04,010
因此可能使用 VueX。

156
00:08:04,010 --> 00:08:06,893
所以让我们在下一节课中这样做。