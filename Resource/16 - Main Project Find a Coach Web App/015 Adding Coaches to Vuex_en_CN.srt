1
00:00:02,070 --> 00:00:04,410
所以是时候编辑我们的状态了

2
00:00:04,410 --> 00:00:06,600
并添加更多教练。

3
00:00:06,600 --> 00:00:08,550
我们现在已经准备好了表格

4
00:00:08,550 --> 00:00:10,650
所以我们得到了我们需要的一切

5
00:00:10,650 --> 00:00:11,860
在那个表格里面。

6
00:00:11,860 --> 00:00:13,480
在教练表单组件内部，

7
00:00:13,480 --> 00:00:17,440
我们现在只需要公开输入的数据，

8
00:00:17,440 --> 00:00:20,330
所以这里的表格数据，

9
00:00:20,330 --> 00:00:22,750
到使用教练形式的组件

10
00:00:22,750 --> 00:00:25,073
这是教练注册组件。

11
00:00:26,160 --> 00:00:29,350
理论上我们也可以直接联系

12
00:00:29,350 --> 00:00:32,299
从教练表格内部到商店

13
00:00:32,299 --> 00:00:35,400
因为最终我们可以与 Vuex 商店进行交互

14
00:00:35,400 --> 00:00:36,840
从任何组件。

15
00:00:36,840 --> 00:00:41,380
但我喜欢这个组件是可重用和独立的

16
00:00:41,380 --> 00:00:43,460
和它的父母一起工作

17
00:00:43,460 --> 00:00:47,180
即使我们只在此应用程序的一部分中使用它。

18
00:00:47,180 --> 00:00:49,330
虽然这只是个人决定

19
00:00:49,330 --> 00:00:51,900
所以我会确保这个组件强盗

20
00:00:51,900 --> 00:00:54,410
发出一个事件，让父母知道

21
00:00:54,410 --> 00:00:56,630
关于输入的数据。

22
00:00:56,630 --> 00:00:57,890
然后是家长，

23
00:00:57,890 --> 00:01:00,830
所以本例中的教练注册组件

24
00:01:00,830 --> 00:01:03,720
将与 Vuex 进行通信。

25
00:01:03,720 --> 00:01:06,763
但这只是解决此问题的一种可能方式。

26
00:01:07,770 --> 00:01:10,220
然而，在教练的形式下，

27
00:01:10,220 --> 00:01:12,900
我将在这里以提交形式发出，

28
00:01:12,900 --> 00:01:15,020
我会发出安全数据

29
00:01:15,020 --> 00:01:16,890
并发出表单数据。

30
00:01:16,890 --> 00:01:20,150
是的，这些数据目前还没有得到验证，

31
00:01:20,150 --> 00:01:21,913
我们稍后会添加这个。

32
00:01:22,950 --> 00:01:24,630
所以现在这是发出的

33
00:01:24,630 --> 00:01:25,610
这当然意味着

34
00:01:25,610 --> 00:01:28,560
我们还应该在这里添加 emits 选项

35
00:01:28,560 --> 00:01:31,823
并明确表示我们会发出安全数据。

36
00:01:32,830 --> 00:01:34,750
一旦我们完成了所有这些，

37
00:01:34,750 --> 00:01:37,300
教练注册内

38
00:01:37,300 --> 00:01:40,890
我们可以接受这个传入的数据。

39
00:01:40,890 --> 00:01:45,000
所以在教练表格上我们可以收听保存数据，

40
00:01:45,000 --> 00:01:47,880
这是我们发出的自定义事件

41
00:01:47,880 --> 00:01:51,673
并在这里调用一个名为 saveData 的方法。

42
00:01:52,830 --> 00:01:55,220
当然我们还没有添加这个方法。

43
00:01:55,220 --> 00:01:58,070
所以在这里我将添加方法，

44
00:01:58,070 --> 00:01:59,390
保存数据。

45
00:01:59,390 --> 00:02:01,330
在这里我们会得到那个formData

46
00:02:02,920 --> 00:02:07,920
我们以教练的形式通过这里的活动。

47
00:02:08,009 --> 00:02:11,620
因此，我们在保存数据方法中将其作为参数获取

48
00:02:11,620 --> 00:02:15,770
我们在教练注册中绑定到这个事件。

49
00:02:15,770 --> 00:02:18,020
这很好，因为我们需要这些数据

50
00:02:18,020 --> 00:02:20,490
与我们的商店沟通。

51
00:02:20,490 --> 00:02:24,250
所以现在我们想在我们的 Vuex 商店中添加一个新的教练

52
00:02:24,250 --> 00:02:26,910
这当然意味着一件事，

53
00:02:26,910 --> 00:02:29,580
我们需要添加突变和动作

54
00:02:29,580 --> 00:02:32,230
因为你不应该直接改变你的状态

55
00:02:32,230 --> 00:02:33,253
从外面。

56
00:02:34,260 --> 00:02:39,260
因此，在mutations.js 中的这个空的mutations 对象中

57
00:02:40,310 --> 00:02:43,073
我将添加一个新的突变，registerCoach。

58
00:02:44,290 --> 00:02:46,870
你当然也可以命名这个添加教练

59
00:02:46,870 --> 00:02:48,143
如果你喜欢这个。

60
00:02:49,010 --> 00:02:53,500
在那里我得到了我的状态和我的有效载荷

61
00:02:53,500 --> 00:02:56,440
我现在联系州教练

62
00:02:56,440 --> 00:02:59,663
并以新教练的身份推动工作负载。

63
00:03:01,010 --> 00:03:03,470
现在实际上这将是无效的，

64
00:03:03,470 --> 00:03:05,070
或者不是很好。

65
00:03:05,070 --> 00:03:09,220
因为我们必须牢记有效载荷最终

66
00:03:09,220 --> 00:03:12,630
只是我以教练形式设置的外国数据

67
00:03:12,630 --> 00:03:17,300
我有 first, last 和 desc 作为键名。

68
00:03:17,300 --> 00:03:19,840
这与键名不符

69
00:03:19,840 --> 00:03:21,563
我有其余的数据。

70
00:03:22,610 --> 00:03:24,070
没问题t呵呵，

71
00:03:24,070 --> 00:03:26,950
因为无论如何我们都必须添加一个动作

72
00:03:26,950 --> 00:03:30,333
我将转换该数据而不是...

73
00:03:31,320 --> 00:03:33,270
所以在 actions.js 文件中

74
00:03:33,270 --> 00:03:38,270
我们现在可以注册教练或添加注册教练动作

75
00:03:38,780 --> 00:03:42,630
在那里我们将获得上下文并支付负载

76
00:03:42,630 --> 00:03:45,240
或者我们也可以命名这些数据。

77
00:03:45,240 --> 00:03:46,790
这是我们的方法

78
00:03:46,790 --> 00:03:50,100
所以我们可以随意命名参数。

79
00:03:50,100 --> 00:03:52,400
这将是最终的外国数据。

80
00:03:53,280 --> 00:03:56,690
然后在这里我将构建我的教练数据

81
00:03:56,690 --> 00:03:59,420
我的教练或任何你想命名的地方

82
00:03:59,420 --> 00:04:03,130
作为一个现在有名字的新对象，

83
00:04:03,130 --> 00:04:05,380
指向data.first，

84
00:04:05,380 --> 00:04:09,350
它的姓氏是 data.last，

85
00:04:09,350 --> 00:04:12,790
它的描述是 data.desc，

86
00:04:12,790 --> 00:04:14,500
每小时收费

87
00:04:14,500 --> 00:04:19,500
这是data.rate

88
00:04:19,820 --> 00:04:22,993
和区域，即 data.areas。

89
00:04:24,620 --> 00:04:27,750
我也想在这里加个ID

90
00:04:27,750 --> 00:04:29,760
当然，为此

91
00:04:29,760 --> 00:04:33,030
我们可以对 ISOstring 使用新的日期

92
00:04:33,030 --> 00:04:34,980
生成这样的 ID

93
00:04:34,980 --> 00:04:38,120
或者我们将它硬编码到 c3，

94
00:04:38,120 --> 00:04:39,520
这当然不是完美的

95
00:04:39,520 --> 00:04:43,050
因为这意味着只要我们注册两次，

96
00:04:43,050 --> 00:04:45,410
我们有两个教练有相同的ID，

97
00:04:45,410 --> 00:04:47,640
但这无论如何都不应该被允许。

98
00:04:47,640 --> 00:04:50,770
您应该可以多次注册。

99
00:04:50,770 --> 00:04:53,450
所以我现在将对其进行硬编码，

100
00:04:53,450 --> 00:04:55,940
稍后我们会将其发送到服务器

101
00:04:55,940 --> 00:04:59,310
服务器会给我们一个更好的真实ID。

102
00:04:59,310 --> 00:05:03,713
但目前我们可以在这里使用这个虚拟的硬编码 ID。

103
00:05:05,360 --> 00:05:07,310
所以现在我们得到了这个教练数据

104
00:05:07,310 --> 00:05:10,883
现在我可以上下文提交，

105
00:05:10,883 --> 00:05:12,870
注册教练

106
00:05:12,870 --> 00:05:17,303
并使用转换后的教练数据提交此突变。

107
00:05:18,170 --> 00:05:20,020
因此，现在在这个突变中，

108
00:05:20,020 --> 00:05:22,720
像这样添加这些数据是可以的

109
00:05:22,720 --> 00:05:26,693
因为现在与其他教练的格式相同。

110
00:05:28,380 --> 00:05:30,970
所以现在我们得到了这个注册教练动作

111
00:05:30,970 --> 00:05:33,360
因此我们现在可以发送这个

112
00:05:33,360 --> 00:05:35,950
在教练注册组件中

113
00:05:35,950 --> 00:05:38,650
每当执行安全数据时。

114
00:05:38,650 --> 00:05:43,170
在这里我们可以使用这个 store dispatch

115
00:05:43,170 --> 00:05:47,080
然后派遣教练/注册教练，

116
00:05:47,080 --> 00:05:48,600
这是名称空间，

117
00:05:48,600 --> 00:05:51,280
这是动作名称。

118
00:05:51,280 --> 00:05:52,910
当然不仅仅是这样

119
00:05:52,910 --> 00:05:55,200
但也提供第二个论点

120
00:05:55,200 --> 00:05:57,030
这是我们得到的数据

121
00:05:58,090 --> 00:06:01,040
现在应该增加一个新教练

122
00:06:01,040 --> 00:06:04,070
一旦我们填写了所有详细信息。

123
00:06:04,070 --> 00:06:07,010
所以如果我现在在这里重新加载

124
00:06:07,850 --> 00:06:11,060
我进入 Max Schwarz，

125
00:06:11,060 --> 00:06:12,870
这是一个测验。

126
00:06:12,870 --> 00:06:15,250
15 和后端。

127
00:06:15,250 --> 00:06:18,320
如果我注册并返回所有教练，

128
00:06:18,320 --> 00:06:20,300
我们看到那里的数据

129
00:06:20,300 --> 00:06:22,450
当然我们也可以查看详细信息。

130
00:06:24,010 --> 00:06:25,900
现在也许会很好

131
00:06:25,900 --> 00:06:28,590
如果我们会自动被转发

132
00:06:28,590 --> 00:06:30,720
一旦我们提交了该表格，

133
00:06:30,720 --> 00:06:33,880
被转发到我的意思是所有教练页面，

134
00:06:33,880 --> 00:06:36,350
这就是我们可以简单地实现的东西

135
00:06:36,350 --> 00:06:39,780
通过返回保存教练注册中的数据，

136
00:06:39,780 --> 00:06:44,780
并使用此 $router.push 将我们推送到 /coaches。

137
00:06:46,040 --> 00:06:48,940
或者使用我以前没有给你看的东西

138
00:06:48,940 --> 00:06:51,493
这就是路由器上的替换方法。

139
00:06:52,380 --> 00:06:54,460
它也带我们离开，

140
00:06:54,460 --> 00:06:55,700
就像推一样，

141
00:06:55,700 --> 00:06:58,110
但不同的是我们不能回去

142
00:06:58,110 --> 00:07:01,080
到我们之后的页面。

143
00:07:01,080 --> 00:07:02,310
这很好，因为这里

144
00:07:02,310 --> 00:07:04,340
我不想回到表格

145
00:07:04,340 --> 00:07:06,130
一旦提交。

146
00:07:06,130 --> 00:07:08,893
所以这就是为什么我在这里使用替换而不是推送。

147
00:07:10,060 --> 00:07:12,060
现在有了这个，

148
00:07:12,060 --> 00:07:13,020
让我们再试一次。

149
00:07:13,020 --> 00:07:14,370
让我们重新加载，

150
00:07:14,370 --> 00:07:15,630
每次我们重新加载时，

151
00:07:15,630 --> 00:07:17,930
顺便说一句，我们失去了我们生成的教练

152
00:07:17,930 --> 00:07:21,330
因为它只是暂时存储在内存中

153
00:07:21,330 --> 00:07:23,919
这就是为什么我们稍后在服务器中添加 HTTP

154
00:07:23,919 --> 00:07:27,650
所以这就是为什么我们现在重新加载时会丢失它的原因。

155
00:07:27,650 --> 00:07:28,900
但这很好，因为这意味着

156
00:07:28,900 --> 00:07:31,530
我们可以再次注册同一个教练

157
00:07:31,530 --> 00:07:33,718
没有身份冲突。

158
00:07:33,718 --> 00:07:35,193
这是一个测验，

159
00:07:36,410 --> 00:07:37,420
添加该数据

160
00:07:37,420 --> 00:07:40,713
现在，如果我注册，我将被转发到此页面。

161
00:07:42,110 --> 00:07:43,430
现在我觉得会很好

162
00:07:43,430 --> 00:07:46,300
如果此按钮不再可用

163
00:07:46,300 --> 00:07:48,540
一旦我们注册了。

164
00:07:48,540 --> 00:07:52,800
因此，我想确保我们知道

165
00:07:52,800 --> 00:07:55,990
该用户注册的时间。

166
00:07:55,990 --> 00:07:57,850
我想确定

167
00:07:57,850 --> 00:08:02,850
我们可以使用 Vuex 来检查用户是否是教练。

168
00:08:03,530 --> 00:08:06,110
在根索引托盘中如下，

169
00:08:06,110 --> 00:08:07,350
商店文件夹。

170
00:08:07,350 --> 00:08:10,340
我们目前只是注册教练模块。

171
00:08:10,340 --> 00:08:14,220
在这里，我实际上现在也想拥有一些根状态

172
00:08:14,220 --> 00:08:17,230
并且我想管理用户的 ID

173
00:08:17,230 --> 00:08:19,020
谁在使用这个应用程序。

174
00:08:19,020 --> 00:08:20,560
眼下，

175
00:08:20,560 --> 00:08:22,750
这个ID当然是硬编码的。

176
00:08:22,750 --> 00:08:24,650
我将在这里使用 c3。

177
00:08:24,650 --> 00:08:28,550
后来经过认证课程模块，

178
00:08:28,550 --> 00:08:31,130
我们实际上将在这里有一个真实的用户 ID。

179
00:08:31,130 --> 00:08:32,720
目前是这个虚拟ID，

180
00:08:32,720 --> 00:08:34,520
但没关系。

181
00:08:34,520 --> 00:08:36,880
所以我们在这里有一个使用ID

182
00:08:36,880 --> 00:08:39,960
现在应该使用该用户 ID

183
00:08:39,960 --> 00:08:41,860
当我们报名成为教练时。

184
00:08:41,860 --> 00:08:44,600
但此后应用于验证

185
00:08:44,600 --> 00:08:48,200
我们是否已经有了具有该 ID 的教练。

186
00:08:48,200 --> 00:08:52,040
现在首先在教练的行动中，

187
00:08:52,040 --> 00:08:54,680
我不再想在这里对 ID 进行硬编码

188
00:08:54,680 --> 00:08:57,480
而是使用此用户 ID。

189
00:08:57,480 --> 00:08:58,833
所以为此，

190
00:08:58,833 --> 00:09:02,400
谢天谢地，我们可以使用我们的上下文

191
00:09:02,400 --> 00:09:05,160
并在此处访问根吸气剂。

192
00:09:05,160 --> 00:09:08,290
现在我们只需要一个给我们这个 ID 的根 getter。

193
00:09:08,290 --> 00:09:11,170
所以在这里的root.js索引文件中

194
00:09:11,170 --> 00:09:15,540
我将添加 getter，然后添加用户 ID getter

195
00:09:15,540 --> 00:09:18,860
我只返回状态用户 ID

196
00:09:18,860 --> 00:09:20,793
并获取状态作为参数。

197
00:09:22,190 --> 00:09:25,600
现在我们可以在这个动作中使用这个根吸气剂

198
00:09:25,600 --> 00:09:29,003
通过访问上下文 rootGetters.userid

199
00:09:29,003 --> 00:09:31,000
以便我们在这里使用真实的用户ID

200
00:09:31,940 --> 00:09:34,610
然后在教练吸气剂中

201
00:09:34,610 --> 00:09:37,040
我们可以添加一个 isCoach getter

202
00:09:37,040 --> 00:09:39,790
如果用户已经是教练，则返回 true

203
00:09:39,790 --> 00:09:41,313
否则会跌倒，

204
00:09:42,500 --> 00:09:44,310
她我们可以利用这个事实

205
00:09:44,310 --> 00:09:46,930
我们在 getter 中获取状态

206
00:09:46,930 --> 00:09:50,678
还有其他 getter 和 rootState

207
00:09:50,678 --> 00:09:52,900
和rootGetters。

208
00:09:52,900 --> 00:09:55,800
这就是我在 Vuex 模块中向您展示的内容。

209
00:09:55,800 --> 00:09:59,950
因此，我们想在这里得到我们的教练

210
00:09:59,950 --> 00:10:03,720
通过访问 getters.coaches 或国家教练，

211
00:10:03,720 --> 00:10:05,860
在这里并没有真正的区别。212
00:10:05,860 --> 00:10:08,620
然后我们想看看那些教练

213
00:10:08,620 --> 00:10:12,500
看看我们有没有带我们用户 ID 的教练

214
00:10:12,500 --> 00:10:14,670
我们可以从 rootGetters 获得。

215
00:10:14,670 --> 00:10:18,497
我们通过访问 rootGetters.userId 来获取我们的用户 ID。

216
00:10:20,560 --> 00:10:24,810
然后我们可以返回 coaches.some

217
00:10:24,810 --> 00:10:27,590
这是一个返回 true 的内置方法

218
00:10:27,590 --> 00:10:31,410
如果某个教练符合标准

219
00:10:31,410 --> 00:10:33,590
在这里我们为每个教练运行一个函数

220
00:10:33,590 --> 00:10:37,147
如果coach.id 等于userId，则返回true。

221
00:10:38,660 --> 00:10:40,350
这样，这将返回 true

222
00:10:40,350 --> 00:10:42,670
如果我们找到至少一名教练

223
00:10:42,670 --> 00:10:45,150
以我们的用户 ID 作为 ID

224
00:10:45,150 --> 00:10:47,363
这意味着我们已经是一名教练了。

225
00:10:49,290 --> 00:10:51,500
现在我在这里得到了两个未使用的参数

226
00:10:51,500 --> 00:10:55,340
这个特定的项目设置不喜欢。

227
00:10:55,340 --> 00:11:00,340
所以在这里我将使用下划线和 _2 作为参数名称

228
00:11:01,730 --> 00:11:03,420
这是一个特定的约定

229
00:11:03,420 --> 00:11:07,130
这标志着这个项目的......

230
00:11:07,130 --> 00:11:08,910
我必须接受这些论点

231
00:11:08,910 --> 00:11:10,813
但我故意不使用它们。

232
00:11:12,040 --> 00:11:14,700
好吧，我们希望在这里实现

233
00:11:14,700 --> 00:11:16,953
如果我们有带我们身份证的教练。

234
00:11:18,040 --> 00:11:20,410
当然，这种方法的缺点是，

235
00:11:20,410 --> 00:11:22,810
是我们总是经过所有教练

236
00:11:22,810 --> 00:11:25,250
检查我们是否是教练

237
00:11:25,250 --> 00:11:27,690
所以解决这个问题的另一种方法

238
00:11:27,690 --> 00:11:29,710
将是简单地添加一个新状态

239
00:11:29,710 --> 00:11:31,920
到我们这里的教练状态

240
00:11:31,920 --> 00:11:36,920
我们说 UserIsCoach 我们将其设置为 true

241
00:11:37,680 --> 00:11:39,650
用户注册后。

242
00:11:39,650 --> 00:11:41,670
这绝对是另一种选择。

243
00:11:41,670 --> 00:11:44,660
我仍然会采用另一种方法来证明，

244
00:11:44,660 --> 00:11:47,060
但这取决于您要使用哪种方法。

245
00:11:48,180 --> 00:11:49,560
然而，有了这个，

246
00:11:49,560 --> 00:11:51,990
我有这个 isCoach 吸气剂

247
00:11:51,990 --> 00:11:54,420
现在在教练注册中

248
00:11:54,420 --> 00:11:58,190
我们还可以添加计算属性

249
00:11:58,190 --> 00:12:01,620
并添加一个 isCoach 计算属性

250
00:12:01,620 --> 00:12:04,060
我在哪里返回伸出援手的结果

251
00:12:04,060 --> 00:12:06,340
到这家商店。getters

252
00:12:06,340 --> 00:12:08,073
教练/isCoach。

253
00:12:09,680 --> 00:12:12,670
这是我们刚刚研究的新吸气剂。

254
00:12:12,670 --> 00:12:16,080
现在我们可以使用 isCoach 属性

255
00:12:16,080 --> 00:12:20,320
控制我们想要显示此注册按钮的任何人

256
00:12:20,320 --> 00:12:23,260
但我注意到了错误的组件

257
00:12:23,260 --> 00:12:25,990
所以让我们剪掉它并删除它。

258
00:12:25,990 --> 00:12:28,190
当然是在教练名单里

259
00:12:28,190 --> 00:12:31,850
在这里我们有这个注册为教练按钮

260
00:12:31,850 --> 00:12:34,590
所以在这里计算，

261
00:12:34,590 --> 00:12:38,933
我想添加我刚刚处理的 isCoach 计算属性。

262
00:12:39,950 --> 00:12:42,460
现在我们可以在这里使用 isCoach

263
00:12:42,460 --> 00:12:47,240
如果不是教练，则使用 v=if 仅显示此按钮。

264
00:12:47,240 --> 00:12:49,593
因此，如果用户还不是教练。

265
00:12:50,880 --> 00:12:52,490
如果我们保存这个，

266
00:12:52,490 --> 00:12:53,850
如果我重新加载

267
00:12:53,850 --> 00:12:55,180
按钮可用。

268
00:12:55,180 --> 00:12:58,140
但如果我现在在这里注册为教练

269
00:12:59,630 --> 00:13:03,240
希望此后不再如此。

270
00:13:03,240 --> 00:13:04,470
现在按钮不见了

271
00:13:04,470 --> 00:13:06,393
因为现在我是一名教练。

272
00:13:07,330 --> 00:13:10,890
所以现在添加教练或注册为教练有效

273
00:13:10,890 --> 00:13:13,890
至少在这个虚拟版本中。

274
00:13:13,890 --> 00:13:18,410
但是我们的核心教练功能已经完成了，

275
00:13:18,410 --> 00:13:21,450
如果我重新加载，只缺少一件事，

276
00:13:21,450 --> 00:13:23,600
我想向此表单添加验证

277
00:13:23,600 --> 00:13:26,150
这样我们就不能提交和清空表单

278
00:13:26,150 --> 00:13:28,380
因为那对我们不起作用。

279
00:13:28,380 --> 00:13:30,530
这就是我们接下来要做的工作

280
00:13:30,530 --> 00:13:34,863
在我们处理上下文和请求功能之前。