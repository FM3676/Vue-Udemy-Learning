1
00:00:02,100 --> 00:00:05,850
现在，我们看到了基于 JavaScript 的动画效果

2
00:00:05,850 --> 00:00:07,800
在这些特别活动的帮助下，

3
00:00:07,800 --> 00:00:09,680
我只想再次强调

4
00:00:09,680 --> 00:00:12,430
这些事件总是被发出，

5
00:00:12,430 --> 00:00:14,880
无论您是否控制动画

6
00:00:14,880 --> 00:00:16,630
是否使用 JavaScript。

7
00:00:16,630 --> 00:00:19,750
如果你用 CSS 来控制它，就像我们之前做的那样，

8
00:00:19,750 --> 00:00:21,670
这些事件也会被发出，

9
00:00:21,670 --> 00:00:23,883
这样您就可以运行任何您想要的代码。

10
00:00:24,960 --> 00:00:27,520
但你也可以利用这些事件，

11
00:00:27,520 --> 00:00:29,190
正如你在上一节课中看到的，

12
00:00:29,190 --> 00:00:32,530
通过JavaScript控制整个动画，

13
00:00:32,530 --> 00:00:35,580
或者通过你自己的 JavaScript 代码，就像我们做的那样，

14
00:00:35,580 --> 00:00:37,790
或通过使用其他第三方，

15
00:00:37,790 --> 00:00:40,373
例如，JavaScript 动画库。

16
00:00:41,410 --> 00:00:44,610
现在，如果你控制你的整个动画

17
00:00:44,610 --> 00:00:45,990
通过 JavaScript，

18
00:00:45,990 --> 00:00:48,700
正如我们现在在本段中所做的那样，

19
00:00:48,700 --> 00:00:52,570
您可以在此过渡上添加另一个属性。

20
00:00:52,570 --> 00:00:55,060
而不是设置一个我们现在不需要的名字，

21
00:00:55,060 --> 00:00:58,420
你可以添加 CSS 道具

22
00:00:58,420 --> 00:01:01,493
并将其绑定为假。

23
00:01:02,890 --> 00:01:04,510
现在，这是做什么的？

24
00:01:04,510 --> 00:01:07,830
这告诉 Vue 这个转换

25
00:01:07,830 --> 00:01:09,630
由这个转换组件控制

26
00:01:09,630 --> 00:01:14,630
关于本段将不会使用 CSS。

27
00:01:14,780 --> 00:01:17,030
它不会使用 CSS 过渡

28
00:01:17,030 --> 00:01:20,660
或在 CSS 代码中定义的 CSS 动画。

29
00:01:20,660 --> 00:01:23,330
相反，整个过渡将受到控制

30
00:01:23,330 --> 00:01:24,683
通过 JavaScript。

31
00:01:26,070 --> 00:01:29,110
为什么这是一条有用的信息

32
00:01:29,110 --> 00:01:30,780
我们可以传给你吗？

33
00:01:30,780 --> 00:01:34,610
正如您看到的那样，它在技术上不是必需的。

34
00:01:34,610 --> 00:01:36,680
但是现在通过这个道具，

35
00:01:36,680 --> 00:01:41,110
我们告诉 vue 它甚至不需要搜索

36
00:01:41,110 --> 00:01:44,020
对于相应的 CSS 类

37
00:01:44,020 --> 00:01:46,790
在这个过渡的 CSS 代码中。

38
00:01:46,790 --> 00:01:50,640
它甚至不需要尝试读取持续时间

39
00:01:50,640 --> 00:01:53,840
从我们的 CSS 代码中，因为它不会找到它，

40
00:01:53,840 --> 00:01:55,973
因为我们没有使用 CSS 代码。

41
00:01:57,290 --> 00:02:01,460
因此，它跳过了这个 CSS 分析步骤，

42
00:02:01,460 --> 00:02:05,250
它跳过搜索对 CSS 类的尊重

43
00:02:05,250 --> 00:02:08,130
以及这个动画在 CSS 中的持续时间。

44
00:02:08,130 --> 00:02:11,100
这只是稍微提高了性能，

45
00:02:11,100 --> 00:02:14,640
因为它不需要做这个不必要的步骤。

46
00:02:14,640 --> 00:02:17,680
因此，您当然应该只添加 CSS false，

47
00:02:17,680 --> 00:02:21,493
如果您真的不使用 CSS 代码进行此转换。

48
00:02:22,470 --> 00:02:23,303
例如，

49
00:02:23,303 --> 00:02:25,983
在我们在这里拥有的另一个过渡用户上，

50
00:02:26,890 --> 00:02:29,050
就像这两个替代按钮一样，

51
00:02:29,050 --> 00:02:32,510
我们绝对不能将 CSS 设置为 false，

52
00:02:32,510 --> 00:02:34,810
因为我们依靠

53
00:02:34,810 --> 00:02:37,183
CSS 过渡和动画。

54
00:02:38,270 --> 00:02:39,460
但如果你不这样做，

55
00:02:39,460 --> 00:02:43,210
如果你只是通过 JavaScript 控制你的动画，

56
00:02:43,210 --> 00:02:47,753
然后您可以将 CSS 设置为 false，以优化性能。

57
00:02:49,330 --> 00:02:51,620
有了这个，我们重新加载。

58
00:02:51,620 --> 00:02:53,740
这仍然像以前一样工作，

59
00:02:53,740 --> 00:02:56,780
但现在性能更高了。

60
00:02:56,780 --> 00:02:58,770
不会注意到这里的区别，

61
00:02:58,770 --> 00:03:01,160
但它就在那里，还有类似的小东西

62
00:03:01,160 --> 00:03:03,153
最终可以使您的应用程序更快。