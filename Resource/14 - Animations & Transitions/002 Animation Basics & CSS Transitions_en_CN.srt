1
00:00:02,100 --> 00:00:03,430
现在，你知道这个游戏了。

2
00:00:03,430 --> 00:00:05,700
附上你找到一个开始的项目，

3
00:00:05,700 --> 00:00:09,660
运行 npm install 来安装我们在那里获得的所有依赖项。

4
00:00:09,660 --> 00:00:12,340
一旦完成并且不碍事，

5
00:00:12,340 --> 00:00:14,020
你可以运行 npn run serve

6
00:00:14,020 --> 00:00:15,910
启动该开发服务器

7
00:00:15,910 --> 00:00:18,550
托管此演示应用程序。

8
00:00:18,550 --> 00:00:20,870
现在这是我们将要开始使用的应用程序。

9
00:00:20,870 --> 00:00:25,870
老实说，它更像是一个游乐场，而不是一个真正的应用程序。

10
00:00:25,980 --> 00:00:28,360
我们这里有一个可以打开和关闭的模式。

11
00:00:28,360 --> 00:00:29,740
但它真的就在那里

12
00:00:29,740 --> 00:00:32,040
这样我们就可以练习动画，

13
00:00:32,040 --> 00:00:33,890
但不会从模态开始。

14
00:00:33,890 --> 00:00:36,030
我们将从这个广场开始。

15
00:00:36,030 --> 00:00:38,480
有了这个深紫色的方块。

16
00:00:38,480 --> 00:00:41,617
我们将看到如何使用 CSS 制作动画

17
00:00:41,617 --> 00:00:43,530
还有 Vue。

18
00:00:43,530 --> 00:00:47,000
然后我们还会看到我们需要更多支持的地方

19
00:00:47,000 --> 00:00:50,163
来自 Vue 方面以及我们如何获得这种支持。

20
00:00:51,080 --> 00:00:54,970
那么我们如何为事物设置动画呢？让我们从简单的开始。

21
00:00:54,970 --> 00:00:59,080
假设我们要单击此动画按钮。

22
00:00:59,080 --> 00:01:01,160
好吧，那么这里的这个广场，

23
00:01:01,160 --> 00:01:04,050
这个块应该是动画的。

24
00:01:04,050 --> 00:01:06,420
为此，我们可以回到我们的代码。

25
00:01:06,420 --> 00:01:09,420
到 App.vue 我有这个块的地方。

26
00:01:09,420 --> 00:01:11,310
这个带有类块的 div。

27
00:01:11,310 --> 00:01:14,760
我们将首先添加一个点击监听器来制作动画。

28
00:01:14,760 --> 00:01:16,880
我们可以写一些 Vue 代码

29
00:01:16,880 --> 00:01:19,420
那应该对那个div做点什么。

30
00:01:19,420 --> 00:01:21,780
我想开始非常非常简单。

31
00:01:21,780 --> 00:01:25,350
我想从简单地移动那个街区开始

32
00:01:25,350 --> 00:01:28,390
比方说，向左一点。

33
00:01:28,390 --> 00:01:32,273
为此，我们可以添加一个新方法。

34
00:01:34,010 --> 00:01:37,760
动画块，听起来像是一个合适的名称。

35
00:01:37,760 --> 00:01:39,870
这就是应该触发的方法

36
00:01:39,870 --> 00:01:42,123
点击一下。所以让我们把它连接起来。

37
00:01:43,320 --> 00:01:45,600
我想在这里管理一些数据，

38
00:01:45,600 --> 00:01:47,390
基本上控制

39
00:01:47,390 --> 00:01:49,970
无论我们想要动画块与否。

40
00:01:49,970 --> 00:01:52,660
所以无论我们是否点击了按钮。

41
00:01:52,660 --> 00:01:57,660
动画块是我将为此添加的数据属性。

42
00:01:57,800 --> 00:02:01,113
它是一个简单的布尔值，以假值开头。

43
00:02:02,060 --> 00:02:04,430
现在这只是实现这一点的一种方式，

44
00:02:04,430 --> 00:02:06,450
但这是一个非常简单的演示

45
00:02:06,450 --> 00:02:08,220
我们可以这样构建。

46
00:02:08,220 --> 00:02:11,400
所以我们在这里得到动画块数据属性

47
00:02:11,400 --> 00:02:12,970
在 App.vue 文件中。

48
00:02:12,970 --> 00:02:16,680
我们现在可以利用这个数据属性

49
00:02:16,680 --> 00:02:20,560
有条件地向这个 div 添加一个 CSS 类。

50
00:02:20,560 --> 00:02:24,420
因为我们可以在 Web 开发中制作动画

51
00:02:24,420 --> 00:02:29,420
仅使用 CSS。从技术上讲，我们不需要 JavaScript。

52
00:02:29,610 --> 00:02:33,750
我们可能只需要 JavaScript 来启动动画，

53
00:02:33,750 --> 00:02:36,130
添加某些 CSS 代码。

54
00:02:36,130 --> 00:02:39,840
但此后，CSS 可以自行完成。

55
00:02:39,840 --> 00:02:43,960
所以在这里我们可以添加一个动态类绑定

56
00:02:43,960 --> 00:02:47,110
假设绑定动画类。

57
00:02:47,110 --> 00:02:48,760
这个类名由你决定。

58
00:02:48,760 --> 00:02:51,200
每当动画块。

59
00:02:51,200 --> 00:02:54,290
所以这个新添加的数据属性是真的。

60
00:02:54,290 --> 00:02:57,323
当这是真的，动画类将被添加。

61
00:02:59,000 --> 00:03:03,030
我们现在可以在我们的样式中定义这个动画类。

62
00:03:03,030 --> 00:03:06,010
我将添加一个全新的类动画。

63
00:03:06,010 --> 00:03:08,090
并移动方块，

64
00:03:08,090 --> 00:03:11,730
例如，我们可以使用 transform CSS 属性

65
00:03:11,730 --> 00:03:13,820
这是一个内置的 CSS 属性。

66
00:03:13,820 --> 00:03:16,280
与 Vue.js 无关

67
00:03:16,280 --> 00:03:19,480
在那里我们可以添加翻译 X

68
00:03:19,480 --> 00:03:22,690
移动一个X 轴上的 n 个元素。

69
00:03:22,690 --> 00:03:25,600
变换属性非常适合

70
00:03:25,600 --> 00:03:29,350
因为它以优化的方式移动元素。

71
00:03:29,350 --> 00:03:31,890
它本质上为我们提供了出色的性能。

72
00:03:31,890 --> 00:03:35,573
所以在这里我们可以移动它，比如说，50 像素。

73
00:03:36,920 --> 00:03:38,380
所以现在要完成这个，

74
00:03:38,380 --> 00:03:41,350
我们只需要转到我们之前添加的这个方法

75
00:03:41,350 --> 00:03:44,630
并在此处将此动画块设置为 true。

76
00:03:44,630 --> 00:03:47,280
有了这一切，有了那个财产，

77
00:03:47,280 --> 00:03:50,460
用于动态添加动画类

78
00:03:50,460 --> 00:03:53,330
和那个动画课在那里找到。

79
00:03:53,330 --> 00:03:54,700
有了所有这些设置。

80
00:03:54,700 --> 00:03:57,670
如果我们保存它，我们可以点击动画

81
00:03:57,670 --> 00:04:00,370
我们看到那个方块移动了一点。

82
00:04:00,370 --> 00:04:04,540
我们实际上也可以将它移动得更远一点，例如，

83
00:04:04,540 --> 00:04:07,853
减去 150 而不是 50 像素。

84
00:04:09,420 --> 00:04:11,510
但你会看到的当然是

85
00:04:11,510 --> 00:04:15,430
这是一个瞬间跳跃。这根本不是动画。

86
00:04:15,430 --> 00:04:19,890
它只是一个瞬间跳到它的新位置。

87
00:04:19,890 --> 00:04:21,490
现在这不是我想要的。

88
00:04:21,490 --> 00:04:23,500
我想要一个流畅的动画。

89
00:04:23,500 --> 00:04:26,940
使用 CSS 实现这一点非常容易。

90
00:04:26,940 --> 00:04:30,170
我们可以简单地去这个块类，

91
00:04:30,170 --> 00:04:34,040
这是该 div 具有的基本 CSS 类。

92
00:04:34,040 --> 00:04:36,830
在这里的那个街区课上，

93
00:04:36,830 --> 00:04:39,490
我们可以添加过渡 CSS 属性。

94
00:04:39,490 --> 00:04:42,950
这是 CSS 提供的另一个内置属性。

95
00:04:42,950 --> 00:04:44,973
它与 Vue 无关。

96
00:04:46,240 --> 00:04:49,690
过渡属性有几个值。

97
00:04:49,690 --> 00:04:52,200
它首先想知道

98
00:04:52,200 --> 00:04:56,080
我们想要转换的其他 CSS 属性。

99
00:04:56,080 --> 00:04:56,913
例如，

100
00:04:56,913 --> 00:05:00,000
我们可以说我们想要为不透明度设置动画。

101
00:05:00,000 --> 00:05:03,050
但是在这个块上，我们永远不会改变不透明度

102
00:05:03,050 --> 00:05:04,940
所以这没有任何意义。

103
00:05:04,940 --> 00:05:08,360
我们可以说所有，以动画任何变化

104
00:05:08,360 --> 00:05:11,630
在任何可动画的 CSS 属性中。

105
00:05:11,630 --> 00:05:15,720
或者我们专门针对变换，因为我们知道

106
00:05:15,720 --> 00:05:19,420
我们要改变变换属性。

107
00:05:19,420 --> 00:05:21,370
最初在这个基类上，

108
00:05:21,370 --> 00:05:23,970
我们不是在说任何关于变换的事情。

109
00:05:23,970 --> 00:05:28,780
然后稍后我们将其设置为平移 X -150 像素。

110
00:05:28,780 --> 00:05:30,300
所以当它开始时，

111
00:05:30,300 --> 00:05:33,350
在此处使用变换值进行转换

112
00:05:33,350 --> 00:05:38,350
告诉 CSS 应用到 transform 属性的任何更改

113
00:05:38,960 --> 00:05:42,723
或借助 transform 属性，应该进行动画处理。

114
00:05:44,130 --> 00:05:44,963
因此

115
00:05:44,963 --> 00:05:47,390
除了我们想要动画的属性的名称，

116
00:05:47,390 --> 00:05:49,650
我们还必须提供一个持续时间

117
00:05:49,650 --> 00:05:52,500
应该在其上完成此动画。

118
00:05:52,500 --> 00:05:55,240
例如，0.3 秒。

119
00:05:55,240 --> 00:05:56,310
现在，作为旁注。

120
00:05:56,310 --> 00:05:58,080
如果你想了解更多，

121
00:05:58,080 --> 00:06:00,100
您可以在此处设置的潜在值

122
00:06:00,100 --> 00:06:02,270
以及 CSS 动画是如何工作的。

123
00:06:02,270 --> 00:06:05,610
您可能想查看专门的 CSS 课程

124
00:06:05,610 --> 00:06:08,330
或者一些免费的 CSS 动画资源

125
00:06:08,330 --> 00:06:09,580
你会在那里找到。

126
00:06:09,580 --> 00:06:12,480
我不会在这里深入探讨

127
00:06:12,480 --> 00:06:14,890
因为它最终还是一门 Vue 课程

128
00:06:14,890 --> 00:06:18,963
而不是主要作为 CSS 或 CSS 动画课程。

129
00:06:20,130 --> 00:06:22,970
尽管如此，我们现在动画变化

130
00:06:22,970 --> 00:06:25,660
并在 0.3 秒内转换。

131
00:06:25,660 --> 00:06:28,260
我们发现了缓动函数

132
00:06:28,260 --> 00:06:32,090
这基本上决定了这个动画如何加速

133
00:06:32,090 --> 00:06:35,390
然后在最后油门。

134
00:06:35,390 --> 00:06:38,870
如果我们现在保存它。你会看到如果我点击动画，

135
00:06:38,870--> 00:06:41,040
现在这个动画。

136
00:06:41,040 --> 00:06:45,190
这会在我们指定的持续时间内移动。

137
00:06:45,190 --> 00:06:49,870
我们在这里使用 Vue 来启动这个动画

138
00:06:49,870 --> 00:06:53,150
通过将动画块设置为真。

139
00:06:53,150 --> 00:06:55,660
最初它是假的，但我们在这里将其设置为真。

140
00:06:55,660 --> 00:06:57,950
这增加了动画类。

141
00:06:57,950 --> 00:07:00,560
这就是我们使用 Vue 的部分。

142
00:07:00,560 --> 00:07:02,500
但此后它只是CSS。

143
00:07:02,500 --> 00:07:05,800
它只是结合了变换属性

144
00:07:05,800 --> 00:07:07,503
具有过渡属性。

145
00:07:08,450 --> 00:07:12,100
这很重要。这是一个非常好的方法。

146
00:07:12,100 --> 00:07:13,330
这不仅仅是好的。

147
00:07:13,330 --> 00:07:15,230
这实际上是推荐的方式

148
00:07:15,230 --> 00:07:18,120
添加这样的动画。

149
00:07:18,120 --> 00:07:21,110
现在有一种替代方案

150
00:07:21,110 --> 00:07:23,980
但是，像这样的简单过渡还不够。

151
00:07:23,980 --> 00:07:26,453
让我也向您展示这个替代方案。