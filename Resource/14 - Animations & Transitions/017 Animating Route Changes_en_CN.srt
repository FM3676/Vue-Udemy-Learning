1
00:00:02,130 --> 00:00:04,689
至此，我们有了很好的理解

2
00:00:04,689 --> 00:00:09,240
关于 Vue 如何帮助我们制作动画。

3
00:00:09,240 --> 00:00:12,200
有一种特定的东西

4
00:00:12,200 --> 00:00:13,420
您可能想要导航的，

5
00:00:13,420 --> 00:00:15,710
到目前为止，我们还没有看到。

6
00:00:15,710 --> 00:00:19,890
这将是两条路线之间的变化。

7
00:00:19,890 --> 00:00:23,380
为此，我将在这里快速添加路由，

8
00:00:23,380 --> 00:00:25,950
只需添加一个新的页面文件夹。

9
00:00:25,950 --> 00:00:30,950
然后在这里我们可以有 AllUsers 页面，比方说，

10
00:00:31,690 --> 00:00:34,210
还有一个 CourseGoals 页面。

11
00:00:34,210 --> 00:00:38,370
我不会真正用生命填充这些组件

12
00:00:38,370 --> 00:00:39,810
或具有实际价值，

13
00:00:39,810 --> 00:00:42,860
我只是想深入了解我们如何制作动画

14
00:00:42,860 --> 00:00:44,920
在这些页面之间。

15
00:00:44,920 --> 00:00:47,450
为此，在这里我将简单地添加一个 div

16
00:00:47,450 --> 00:00:52,450
与模板中的一类容器关闭 AllUsers。

17
00:00:52,870 --> 00:00:57,083
并在我说所有用户的地方添加一个 h2 标签。

18
00:00:58,950 --> 00:01:01,330
然后我会复制那个

19
00:01:01,330 --> 00:01:03,580
并将相同的内容添加到 CourseGoals，

20
00:01:03,580 --> 00:01:06,130
但当然在这里我会说 CourseGoals

21
00:01:06,130 --> 00:01:09,370
这样我们就可以区分这两页。

22
00:01:09,370 --> 00:01:11,500
所以这些是非常简单的虚拟组件

23
00:01:11,500 --> 00:01:13,800
它只有模板。

24
00:01:13,800 --> 00:01:17,300
现在我们可以使用 Control + C 退出开发服务器，

25
00:01:17,300 --> 00:01:22,300
和 npm install，dash，dash，保存 vue-router。

26
00:01:22,430 --> 00:01:24,740
这个包，我们已经安装了

27
00:01:24,740 --> 00:01:26,293
在路由模块中。

28
00:01:27,610 --> 00:01:30,650
安装完成后，我们可以重启开发服务器

29
00:01:30,650 --> 00:01:33,220
然后根据您的学习添加路由

30
00:01:33,220 --> 00:01:34,770
在路由模块中。

31
00:01:34,770 --> 00:01:39,250
所以在 main.js 或单独的 router.js 文件中。

32
00:01:39,250 --> 00:01:42,840
但由于我们只有两条路线，我将使用 main.js。

33
00:01:42,840 --> 00:01:47,840
您可以从 vue-router 导入 createRouter

34
00:01:47,930 --> 00:01:51,367
并且已经导入 createWebHistory

35
00:01:53,120 --> 00:01:55,610
然后在这里设置路由器。

36
00:01:55,610 --> 00:01:59,790
所以这里我们有我们用 createRouter 创建的路由器

37
00:01:59,790 --> 00:02:02,313
并将配置对象传递给 createRouter。

38
00:02:03,150 --> 00:02:05,953
将历史记录二设置为 createWebHistory 的结果。

39
00:02:07,540 --> 00:02:11,200
然后添加我们的路线。

40
00:02:11,200 --> 00:02:13,730
我这里有两条路线。

41
00:02:13,730 --> 00:02:18,730
如果我们有斜线，则应该应用第一条路线，什么都没有。

42
00:02:19,000 --> 00:02:24,000
在这种情况下，我想加载 AllUsers 组件。

43
00:02:24,630 --> 00:02:26,861
因此，我们应该导入它，

44
00:02:26,861 --> 00:02:31,861
AllUsers 来自点、斜线、pages/AllUsers.vue。

45
00:02:32,030 --> 00:02:35,010
我们也可以导入 CourseGoals

46
00:02:35,010 --> 00:02:39,673
来自点、斜线、页面/CourseGoals.vue。

47
00:02:40,950 --> 00:02:45,110
然后在第一条路线上加载 AllUsers。

48
00:02:45,110 --> 00:02:46,970
然后添加第二条路线

49
00:02:46,970 --> 00:02:50,420
有一条斜线，目标，比方说，

50
00:02:50,420 --> 00:02:54,523
我们要加载 CourseGoals 组件的地方。

51
00:02:55,550 --> 00:02:58,200
所以这是我在这里的两条路线。

52
00:02:58,200 --> 00:03:01,990
现在我们可以调用 app.use 来注册这个路由器

53
00:03:01,990 --> 00:03:03,380
使用我们的 Vue 应用程序。

54
00:03:03,380 --> 00:03:06,533
有了这些，Vue 就知道了这些路由。

55
00:03:07,720 --> 00:03:10,040
现在，正如您所了解的那样，为了加载路线

56
00:03:10,040 --> 00:03:13,760
为了显示它，我们需要转到我们的 App.vue 文件，

57
00:03:13,760 --> 00:03:17,540
在那里我实际上会删除所有内容

58
00:03:17,540 --> 00:03:21,550
我们在那里，只需添加路由器视图

59
00:03:21,550 --> 00:03:25,320
这样我们就在这两个组件之间切换了

60
00:03:25,320 --> 00:03:27,970
根据我们选择的路线。

61
00:03:27,970 --> 00:03:32,350
为了在这些组件之间来回移动

62
00:03:32,350 --> 00:03:34,360
从正在运行的应用程序内部，

63
00:03:34,360 --> 00:03:37,910
我实际上也会去 AllUsers

64
00:03:37,910 --> 00:03:42,323
并将路由器链接添加到我的 CourseGoals。

65
00:03:43,780 --> 00:03:48,040
因此，斜线处的两个支撑点，目标，

66
00:03:48,040 --> 00:03:51,773
因为那是我在这里处理的路径。

67
00:03:53,260 --> 00:03:54,920
我会复制那个。

68
00:03:54,920 --> 00:03:57,550
在 CourseGoals 我将添加相同的链接，

69
00:03:57,550 --> 00:03:59,750
但我会在这里斜线，

70
00:03:59,750 --> 00:04:01,853
因此转到 AllUsers。

71
00:04:03,890 --> 00:04:08,340
如果我们保存它，我会在这里收到一些投诉

72
00:04:08,340 --> 00:04:09,300
我没有使用

73
00:04:09,300 --> 00:04:12,200
App.vue 中的用户列表组件不再存在。

74
00:04:12,200 --> 00:04:14,340
没错，我在这里注册，

75
00:04:14,340 --> 00:04:17,100
但我没有在我的模板中对它做任何事情。

76
00:04:17,100 --> 00:04:20,420
所以我们可以注释掉这个并删除这个导入

77
00:04:20,420 --> 00:04:23,860
或在此处完全删除 components 选项。

78
00:04:23,860 --> 00:04:27,320
现在保存后，我们看到所有用户

79
00:04:27,320 --> 00:04:30,520
我们可以在这些路线之间切换。

80
00:04:30,520 --> 00:04:34,573
这一切都很好，但它与动画无关。

81
00:04:35,490 --> 00:04:38,650
好吧，我想为过渡设置动画

82
00:04:38,650 --> 00:04:40,820
这两条路线之间。

83
00:04:40,820 --> 00:04:43,660
谢天谢地，我们可以做到这一点。

84
00:04:43,660 --> 00:04:46,740
现在，有人认为你可以拥有

85
00:04:46,740 --> 00:04:51,740
是你用转换包装你的路由器视图。

86
00:04:52,600 --> 00:04:54,720
我的意思是，它是一个常规组件。

87
00:04:54,720 --> 00:04:57,760
如果我们想在 Vue 的帮助下制作动画

88
00:04:57,760 --> 00:05:01,710
在两个组件之间，就像我们之前看到的按钮，

89
00:05:01,710 --> 00:05:04,730
然后我们用过渡包装元素，对吧？

90
00:05:04,730 --> 00:05:07,210
这就是我们之前在本课程中所做的

91
00:05:07,210 --> 00:05:09,363
当我们想要为组件设置动画时。

92
00:05:10,580 --> 00:05:14,880
然后我们可以在这里定义一个新的 CSS 类。

93
00:05:14,880 --> 00:05:17,903
Route-enter-from。

94
00:05:20,050 --> 00:05:23,860
路由进入激活。

95
00:05:23,860 --> 00:05:26,690
和路线进入。

96
00:05:26,690 --> 00:05:28,270
我想用那个动画，

97
00:05:28,270 --> 00:05:31,550
所以我实际上只会使用 route-enter-active

98
00:05:31,550 --> 00:05:34,980
并使用我的幻灯片比例动画，

99
00:05:34,980 --> 00:05:37,070
此处设置的关键帧，

100
00:05:37,070 --> 00:05:42,070
超过 0.4 秒，并具有轻松功能

101
00:05:42,580 --> 00:05:44,900
或者放松，比方说。

102
00:05:44,900 --> 00:05:49,350
然后还要定义 route-leave-active。

103
00:05:49,350 --> 00:05:52,520
当然，取决于你要构建的动画，

104
00:05:52,520 --> 00:05:56,430
您还可以添加 route-leave-from 和 route-leave-to。

105
00:05:56,430 --> 00:05:59,390
但在这里我再次，只想应用一个动画。

106
00:05:59,390 --> 00:06:01,540
那将是一个幻灯片规模

107
00:06:01,540 --> 00:06:03,833
在相同的时间内轻松进入。

108
00:06:05,110 --> 00:06:08,610
现在，因为我命名了这些 CSS 类

109
00:06:08,610 --> 00:06:10,860
像这样的路线，

110
00:06:10,860 --> 00:06:15,860
我们可以像这样将此名称应用于此转换。

111
00:06:16,420 --> 00:06:19,460
但因为我总是说可以，等等，

112
00:06:19,460 --> 00:06:23,000
这可能不是它的工作方式。

113
00:06:23,000 --> 00:06:27,300
事实上，我们确实有一些奇怪的行为，

114
00:06:27,300 --> 00:06:31,540
但我们实际上看到 router-view 不能再使用了

115
00:06:31,540 --> 00:06:34,180
直接在过渡内部。

116
00:06:34,180 --> 00:06:35,910
现在，它不再说，

117
00:06:35,910 --> 00:06:38,930
因为以前使用旧版本的 Vue，

118
00:06:38,930 --> 00:06:40,140
确实有效。

119
00:06:40,140 --> 00:06:41,610
所以也许如果你学会了，

120
00:06:41,610 --> 00:06:44,033
您仍然习惯于这种旧方式。

121
00:06:44,930 --> 00:06:48,370
使用 Vue 3，这不再可能。

122
00:06:48,370 --> 00:06:50,070
我们实际上得到了解决方案

123
00:06:50,070 --> 00:06:51,810
在警告中也是如此。

124
00:06:51,810 --> 00:06:54,640
我们需要重构我们的代码。

125
00:06:54,640 --> 00:06:59,640
过渡现在需要进入我们的路由器视图。

126
00:06:59,810 --> 00:07:02,633
所以我们应该在里面移动过渡。

127
00:07:03,670 --> 00:07:05,870
But this only now all the won't do it 但现在只有这一切都不会这样做

128
00:07:05,870 --> 00:07:09,500
因为虽然路由器视图支持获取内容

129
00:07:09,500 --> 00:07:11,340
将在其中渲染，

130
00:07:11,340 --> 00:07:14,140
现在我们也需要告诉它

131
00:07:14,140 --> 00:07:17,510
在哪里实际呈现实际页面，

132
00:07:17,510 --> 00:07:19,920
应该渲染的实际组件

133
00:07:19,920 --> 00:07:21,983
基于活动的路线。

134
00:07:22,830 --> 00:07:25,870
为此，我们可以使用作用域槽语法

135
00:07:25,870 --> 00:07:28,350
router-view 在后台使用。

136
00:07:28,350 --> 00:07:30,130
通常我们不需要它，

137
00:07:30,130 --> 00:07:33,460
但是对于带有路线的过渡，您确实需要它。

138
00:07:33,460 --> 00:07:35,760
你可以使用这个 v-slot 指令，

139
00:07:35,760 --> 00:07:37,860
我在课程前面介绍的

140
00:07:37,860 --> 00:07:40,120
当我们谈到插槽时，

141
00:07:40,120 --> 00:07:44,413
提取你在这里得到的 slotProps。

142
00:07:45,260 --> 00:07:48,160
您可以通过路由器视图组件获得这些，

143
00:07:48,160 --> 00:07:49,970
这是内置的。

144
00:07:49,970 --> 00:07:54,110
然后您可以使用动态组件组件

145
00:07:54,110 --> 00:07:56,970
将其绑定到 slotProps.Component。

146
00:08:01,600 --> 00:08:05,460
所以 slotProps 有一个名为 Component 的属性

147
00:08:05,460 --> 00:08:08,640
带有大写字母 C，其中包含组件

148
00:08:08,640 --> 00:08:12,680
应该为当前选择的路线加载。

149
00:08:12,680 --> 00:08:15,700
而这种看起来很奇怪的语法正是你所需要的

150
00:08:15,700 --> 00:08:19,423
为这些组件之间的切换设置动画。

151
00:08:20,670 --> 00:08:24,340
如果您现在保存它，您将不再收到警告。

152
00:08:24,340 --> 00:08:26,390
而现在这种作品，

153
00:08:26,390 --> 00:08:29,220
但是当然这在这里看起来很愚蠢，对吧？

154
00:08:29,220 --> 00:08:30,930
我的意思是，它只是在移动

155
00:08:30,930 --> 00:08:35,929
我们同时在页面上获得了两个组件。

156
00:08:36,090 --> 00:08:38,409
所以这并不完全是我们想要的，

157
00:08:38,409 --> 00:08:41,049
但从技术上讲，这至少是正确的。

158
00:08:41,049 --> 00:08:42,900
但是我们想在这里改变一件事

159
00:08:42,900 --> 00:08:45,150
是我们之前已经看到的东西

160
00:08:45,150 --> 00:08:47,290
当我们在两个按钮之间切换时。

161
00:08:47,290 --> 00:08:49,520
我们要确保只有一个组件

162
00:08:49,520 --> 00:08:52,900
同时显示在页面上。

163
00:08:52,900 --> 00:08:55,390
你可能还记得我们可以做到这一点

164
00:08:55,390 --> 00:08:59,080
通过将 mode 属性添加到过渡组件。

165
00:08:59,080 --> 00:09:03,210
在那里我们添加进出。

166
00:09:03,210 --> 00:09:06,230
如果我们使用 out-in，我们首先确保，

167
00:09:06,230 --> 00:09:08,630
离开组件是动画的

168
00:09:08,630 --> 00:09:13,200
在此之前，输入组件是动画的。

169
00:09:13,200 --> 00:09:15,400
因此，如果我重新加载，

170
00:09:15,400 --> 00:09:19,160
现在这离开了，然后我们有了新的组件。

171
00:09:19,160 --> 00:09:21,960
我承认它看起来仍然很奇怪，

172
00:09:21,960 --> 00:09:25,903
但这仅仅是因为我们设置了动画 CSS 代码。

173
00:09:27,670 --> 00:09:29,300
如果我们使用不同的动画，

174
00:09:29,300 --> 00:09:32,380
就像我们这里的淡入淡出按钮类，

175
00:09:32,380 --> 00:09:36,250
如果我在这里使用它作为名称，淡入淡出按钮，

176
00:09:36,250 --> 00:09:37,613
这会更好看。

177
00:09:38,640 --> 00:09:41,380
有了这个，我们就有了一个很好的淡入淡出动画

178
00:09:41,380 --> 00:09:42,623
在这些路线之间。

179
00:09:43,750 --> 00:09:47,940
这就是您可以动画路线转换的方式。

180
00:09:47,940 --> 00:09:50,500
现在，您可能以前注意到的一件事

181
00:09:50,500 --> 00:09:53,730
是当你使用其他动画时

182
00:09:53,730 --> 00:09:57,500
看起来有点奇怪，这里的路线动画，

183
00:09:57,500 --> 00:10:01,140
我们甚至在加载页面时看到了那个动画

184
00:10:01,140 --> 00:10:03,460
首次。

185
00:10:03,460 --> 00:10:06,310
所以你有这个初始动画。

186
00:10:06,310 --> 00:10:09,270
数据的原因是使用vue-router，

187
00:10:09,270 --> 00:10:13,390
从技术上讲，路线的第一个动作是一条空路线。

188
00:10:13,390 --> 00:10:15,500
然后当你的页面开始时，

189
00:10:15,500 --> 00:10:17,820
当您的页面第一次加载时，

190
00:10:17,820 --> 00:10:21,260
它立即切换到应该使用的路线

191
00:10:21,260 --> 00:10:23,053
对于您的 URL 中的给定路径。

192
00:10:24,330 --> 00:10:27,480
这意味着从技术上讲，当应用程序启动时，

193
00:10:27,480 --> 00:10:29,970
vue-router 从没有路由

194
00:10:29,970 --> 00:10:33,870
到给定路径的所选路线。

195
00:10:33,870 --> 00:10:35,980
因此它播放动画

196
00:10:35,980 --> 00:10:39,000
因为我们从一个组件出发，什么都没有，

197
00:10:39,000 --> 00:10:40,943
到要加载的组件。

198
00:10:41,950 --> 00:10:46,190
为了避免这种行为，你可以去 main.js

199
00:10:46,190 --> 00:10:48,380
你在哪里注册路由器

200
00:10:48,380 --> 00:10:52,100
还有y你实际上可以使用路由器

201
00:10:52,100 --> 00:10:55,180
在其上调用 is ready 方法。

202
00:10:55,180 --> 00:10:57,300
这个方法会让你知道

203
00:10:57,300 --> 00:11:00,930
当路由器成功评估时

204
00:11:00,930 --> 00:11:02,753
应该加载哪个页面。

205
00:11:04,250 --> 00:11:08,210
这给了你一个承诺，因此你可以打电话给它。

206
00:11:08,210 --> 00:11:11,330
在传递给 this then 块的函数中，

207
00:11:11,330 --> 00:11:14,950
在这个功能中，路由器现在不会走

208
00:11:14,950 --> 00:11:18,520
从空白到要选择的页面。

209
00:11:18,520 --> 00:11:20,280
但相反，在这个时间点，

210
00:11:20,280 --> 00:11:22,680
它知道应该加载的页面

211
00:11:22,680 --> 00:11:27,120
因此它不会进行这种初始过渡。

212
00:11:27,120 --> 00:11:30,840
所以你可以在这个函数中安装你的应用程序

213
00:11:30,840 --> 00:11:35,130
仅安装并因此呈现您的应用程序

214
00:11:35,130 --> 00:11:39,170
一旦路由器完全设置并知道该页面

215
00:11:39,170 --> 00:11:40,860
应该加载。

216
00:11:40,860 --> 00:11:42,880
如果你这样做并重新加载，

217
00:11:42,880 --> 00:11:45,010
你没有这个初始动画。

218
00:11:45,010 --> 00:11:48,160
现在，如果您切换路线，您就拥有它。

219
00:11:48,160 --> 00:11:50,840
现在我要回到另一个动画

220
00:11:50,840 --> 00:11:52,400
因为看起来更好看，

221
00:11:52,400 --> 00:11:55,100
所以这里的淡入淡出按钮动画。

222
00:11:55,100 --> 00:11:56,020
但就是这样。

223
00:11:56,020 --> 00:11:59,530
这就是你可以动画过渡的方式

224
00:11:59,530 --> 00:12:01,710
不同路线之间。

225
00:12:01,710 --> 00:12:03,930
这可能是一种看起来很奇怪的语法，

226
00:12:03,930 --> 00:12:07,910
但你真的只需要这个过渡场景。

227
00:12:07,910 --> 00:12:11,920
但是有了它，您现在还可以为更改设置动画

228
00:12:11,920 --> 00:12:13,433
不同页面之间。