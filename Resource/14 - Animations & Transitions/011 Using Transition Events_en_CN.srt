1
00:00:01,567 --> 00:00:04,090
所以到现在为止，我们已经学到了很多

2
00:00:04,090 --> 00:00:07,580
关于过渡，过渡组件，它的作用

3
00:00:07,580 --> 00:00:09,340
以及如何使用它。

4
00:00:09,340 --> 00:00:14,210
有时你还想运行一些 JavaScript 代码，

5
00:00:14,210 --> 00:00:16,760
作为过渡的一部分，

6
00:00:16,760 --> 00:00:20,300
甚至可能控制整个过渡

7
00:00:20,300 --> 00:00:23,180
并且样式改变了 Fruit JavaScript，

8
00:00:23,180 --> 00:00:26,060
或者也许是因为你想做某事

9
00:00:26,060 --> 00:00:30,010
动画何时开始或结束。

10
00:00:30,010 --> 00:00:34,000
vue 也为你提供了这样做的机会。

11
00:00:34,000 --> 00:00:36,250
它为您提供各种活动，

12
00:00:36,250 --> 00:00:39,940
由这个过渡组件发出

13
00:00:39,940 --> 00:00:41,710
在过渡期间。

14
00:00:41,710 --> 00:00:43,350
所以当过渡开始时，

15
00:00:43,350 --> 00:00:46,510
添加元素或删除元素时

16
00:00:46,510 --> 00:00:48,130
来自大教堂

17
00:00:48,130 --> 00:00:51,910
我将在这个过渡包装上展示它，

18
00:00:51,910 --> 00:00:53,410
本段。

19
00:00:53,410 --> 00:00:55,460
我们可以在这里收听各种事件

20
00:00:55,460 --> 00:00:59,770
带有 v-on 或短的 and，@ 符号

21
00:00:59,770 --> 00:01:02,290
以及我们可以在这里列出的第一个事件

22
00:01:02,290 --> 00:01:04,670
是输入前。

23
00:01:04,670 --> 00:01:08,200
在这里，我们可以运行将要执行的代码

24
00:01:08,200 --> 00:01:11,630
当被包裹的元素，本段，

25
00:01:11,630 --> 00:01:14,430
在这种情况下即将进入。

26
00:01:14,430 --> 00:01:17,770
所以当进入动画开始时，

27
00:01:17,770 --> 00:01:19,910
所以最后，你可以说，

28
00:01:19,910 --> 00:01:24,910
每当添加来自 CSS 类的这个输入时，它就会运行。

29
00:01:25,700 --> 00:01:29,650
所以一开始，当元素被添加时

30
00:01:29,650 --> 00:01:31,473
动画开始。

31
00:01:32,760 --> 00:01:34,950
现在，我将在这里添加几个方法，

32
00:01:34,950 --> 00:01:37,970
这允许我们在控制台上打印一些东西，

33
00:01:37,970 --> 00:01:41,510
这样我们就可以在控制台中看到这一切。

34
00:01:41,510 --> 00:01:44,163
这里我有 beforeEnter，

35
00:01:47,000 --> 00:01:48,780
现在这个方法名称由你决定。

36
00:01:48,780 --> 00:01:51,670
它不必是 beforeEnter。

37
00:01:51,670 --> 00:01:55,750
这里，调整一次console.log beforeEnter。

38
00:01:55,750 --> 00:01:59,533
所以我们看到我们呃，达到了这个事件。

39
00:02:00,840 --> 00:02:04,640
现在我们可以点 beforeEnter 这里

40
00:02:04,640 --> 00:02:08,120
在 beforeEnter 事件的这个新添加的方法上。

41
00:02:08,120 --> 00:02:09,900
同样，方法名称由您决定。

42
00:02:09,900 --> 00:02:12,240
事件名称不是 beforeEnter，

43
00:02:12,240 --> 00:02:14,940
它是内置的事件转换之一

44
00:02:14,940 --> 00:02:19,810
如果我们保存它并打开开发者工具

45
00:02:19,810 --> 00:02:22,870
在浏览器中使用 JavaScript 控制台，

46
00:02:22,870 --> 00:02:24,980
如果我点击切换段落，

47
00:02:24,980 --> 00:02:28,390
我们看到 beforeEnter 被打印了。

48
00:02:28,390 --> 00:02:29,760
所以这行得通。

49
00:02:29,760 --> 00:02:32,030
现在，如果我删除该段落，

50
00:02:32,030 --> 00:02:34,650
我们没有看到 before 再次进入，

51
00:02:34,650 --> 00:02:37,820
因为它只在元素进入时触发。

52
00:02:37,820 --> 00:02:40,263
所以当进入动画播放时。

53
00:02:41,130 --> 00:02:45,820
当然，我们也可以听离开虽然

54
00:02:45,820 --> 00:02:50,350
使用 @before-leave 就像我们使用 beforeEnter 一样，

55
00:02:50,350 --> 00:02:55,340
我们也可以收听那个事件或时间点

56
00:02:55,340 --> 00:02:59,163
当被包装的元素离开 Dom 时。

57
00:03:00,450 --> 00:03:05,450
所以这里我们也可以添加一个 before-Leave 方法

58
00:03:05,872 --> 00:03:10,123
然后我们在其中 console.log beforeLeave。

59
00:03:11,770 --> 00:03:14,930
好吧，当然我们现在可以在这里指出这个方法

60
00:03:14,930 --> 00:03:17,923
在我们的@before-leave 事件处理程序上。

61
00:03:19,090 --> 00:03:22,140
如果我们保存了这个，重新加载，

62
00:03:22,140 --> 00:03:25,180
如果我点击切换段落，我们有 beforeEnter，

63
00:03:25,180 --> 00:03:27,693
如果我再次点击它，我们得到了 beforeLeave。

64
00:03:30,780 --> 00:03:35,500
现在你实际上也在这些方法中得到了一个参数

65
00:03:35,500 --> 00:03:37,090
由 vue 自动生成。

66
00:03:37,090 --> 00:03:41,450
这就是元素，因此我们在这里将其命名为 {el}，

67
00:03:41,450 --> 00:03:43,850
此动画在其上运行。

68
00:03:43,850 --> 00:03:48,850
如果我 console.log{el} 在这里和 beforeLeave

69
00:03:51,600 --> 00:03:55,230
并保存并重新加载，

70
00:03:55,230 --> 00:03:57,690
你会注意到难度切换段落。

71
00:03:57,690 --> 00:03:59,210
它正在打印段落，

72
00:03:59,210 --> 00:04:02,350
这是为了删除它而添加的。

73
00:04:02,350 --> 00:04:05,160
所以如果你需要对那个元素做点什么，

74
00:04:05,160 --> 00:04:08,780
例如，更改其样式以防万一您想控制

75
00:04:08,780 --> 00:04:10,900
动画水果 JavaScript，

76
00:04:10,900 --> 00:04:12,680
我们将在下一节课中做的事情，

77
00:04:12,680 --> 00:04:15,680
顺便说一句，那么你可以在元素的帮助下做到这一点，

78
00:04:15,680 --> 00:04:18,410
你会自动得到它作为参数

79
00:04:18,410 --> 00:04:22,187
在收听 beforeEnter 和 beforeLeave 时。

80
00:04:23,090 --> 00:04:27,370
但是 beforeEnter 和 beforeLeave 并不是我们所拥有的一切。

81
00:04:27,370 --> 00:04:31,490
我们还有一个可以监听的@enter 事件。

82
00:04:31,490 --> 00:04:36,490
这基本上相当于 Active CSS Class。

83
00:04:37,170 --> 00:04:40,880
下一步触发 enter 事件

84
00:04:41,927 --> 00:04:45,150
然后 beforeEnter 完成，你可以说。

85
00:04:45,150 --> 00:04:47,860
现在在这里，我想触发一个 enter 方法，

86
00:04:47,860 --> 00:04:51,570
尚不存在，但我现在当然会添加。

87
00:04:51,570 --> 00:04:54,340
在这里，假设我添加， enter()

88
00:04:54,340 --> 00:04:58,650
我在这里 console.log(enter) 。

89
00:04:58,650 --> 00:05:00,610
我们也在这里得到元素，

90
00:05:00,610 --> 00:05:02,690
所以我们也可以在这里与之交互

91
00:05:02,690 --> 00:05:05,137
如果我们想启用 console.log(el)。

92
00:05:06,040 --> 00:05:08,070
如果我们现在保存并重新加载，

93
00:05:08,070 --> 00:05:12,260
如果我切换我们之前看到的段落，请先输入

94
00:05:12,260 --> 00:05:15,993
和段落，然后我们看到输入和段落。

95
00:05:16,940 --> 00:05:18,980
当然我们也可以听

96
00:05:18,980 --> 00:05:23,980
到动画以@after-enter 结束的时间。

97
00:05:24,910 --> 00:05:28,173
在这里，我想触发一个 afterEnter 方法，

98
00:05:29,185 --> 00:05:30,230
我们还没有添加。

99
00:05:30,230 --> 00:05:32,770
这将在动画完成时触发，

100
00:05:32,770 --> 00:05:35,150
进入动画。

101
00:05:35,150 --> 00:05:40,150
所以在这里，我将添加一个 afterEnter 方法，

102
00:05:41,780 --> 00:05:45,020
console.log（回车后）

103
00:05:46,090 --> 00:05:48,450
在这里我们也得到了元素。

104
00:05:48,450 --> 00:05:53,450
所以如果我在这里打印，保存并重新加载，

105
00:05:54,520 --> 00:05:56,350
点击切换段落，

106
00:05:56,350 --> 00:05:59,010
你看，我们得到了 beforeEnter 先进入，再进入

107
00:05:59,010 --> 00:06:01,100
然后回车。

108
00:06:01,100 --> 00:06:02,790
现在我们在这里有一个快速动画，

109
00:06:02,790 --> 00:06:06,650
所以看起来 afterEnter 基本上是直接调用的

110
00:06:06,650 --> 00:06:08,040
进入后

111
00:06:08,040 --> 00:06:10,650
但实际上它等待动画完成

112
00:06:10,650 --> 00:06:12,620
直到 afterEnter 被调用。

113
00:06:12,620 --> 00:06:15,700
我可以通过转到 .para-enter-active 来展示这一点

114
00:06:15,700 --> 00:06:18,563
并将其增加到两秒，比方说。

115
00:06:19,530 --> 00:06:22,680
请记住，vue 会读取此持续时间。

116
00:06:22,680 --> 00:06:24,770
Vue 分析这个持续时间

117
00:06:24,770 --> 00:06:27,480
它知道动画需要多长时间。

118
00:06:27,480 --> 00:06:30,153
它将适当地添加 CSS 类，

119
00:06:30,153 --> 00:06:34,490
它也会适当地触发这些事件。

120
00:06:34,490 --> 00:06:39,090
现在 afterEnter 只会在两秒钟后被调用

121
00:06:39,090 --> 00:06:41,013
当动画完成时。

122
00:06:43,160 --> 00:06:45,680
所以现在如果我在这里重新加载并点击切换段落，

123
00:06:45,680 --> 00:06:47,150
我们只看到进入这里

124
00:06:47,150 --> 00:06:48,475
仅在两秒钟后，

125
00:06:48,475 --> 00:06:51,570
我们看到输入后打印

126
00:06:51,570 --> 00:06:55,253
因为只有在动画结束时才会调用它。

127
00:06:57,200 --> 00:06:59,980
当然，我们有删除的等价物。

128
00:06:59,980 --> 00:07:02,800
我将对其进行重组以使其更易于阅读。

129
00:07:02,800 --> 00:07:05,020
我们已经添加了 beforeLeave

130
00:07:05,020 --> 00:07:07,150
但当然我们现在也有“离开”

131
00:07:07,150 --> 00:07:11,240
我想在哪里调用@leave 方法和@after-leave

132
00:07:11,240 --> 00:07:14,300
当“离开”过渡完成时调用，

133
00:07:14,300 --> 00:07:17,840
在这里，我想调用一个 afterLeave 方法。

134
00:07:17,840 --> 00:07:20,363
所以现在我们也可以添加这些方法。

135
00:07:21,740 --> 00:07:26,740
在这里，我将添加一个 leave 方法，我们也可以在其中获取元素

136
00:07:27,600 --> 00:07:31,620
我们可以在哪里 console.log{leave}

137
00:07:31,620 --> 00:07:34,423
然后是 console.log[el]

138
00:07:35,280 --> 00:07:39,250
我们有 afterLeave 方法

139
00:07:39,250 --> 00:07:41,280
我们也得到元素的地方

140
00:07:41,280 --> 00:07:45,200
然后我们可以在这里 console.log[afterLeave]

141
00:07:45,200 --> 00:07:48,167
如果你想 console.log[el]。

142
00:07:50,099 --> 00:07:52,909
有了所有这些，如果我们保存并重新加载，

143
00:07:52,909 --> 00:07:56,550
如果我切换我们之前得到的段落Enter并输入

144
00:07:56,550 --> 00:07:57,920
并在 Enter 之后。

145
00:07:57,920 --> 00:08:01,070
如果我现在清除控制台并再次切换它，

146
00:08:01,070 --> 00:08:03,733
我们得到了 beforeLeave、leave 和 afterLeave。

147
00:08:05,380 --> 00:08:07,950
所以我们可以这样听

148
00:08:07,950 --> 00:08:11,130
这允许你运行任何你想要的代码

149
00:08:11,130 --> 00:08:13,930
回应你的动画。

150
00:08:13,930 --> 00:08:16,640
这对很多事情都有用

151
00:08:16,640 --> 00:08:19,028
但你也可以专门使用它

152
00:08:19,028 --> 00:08:22,900
用 JavaScript 控制整个动画

153
00:08:22,900 --> 00:08:26,650
如果你想这样做，而不是 CSS。

154
00:08:26,650 --> 00:08:29,400
这就是我们将在下一节课中探讨的内容。