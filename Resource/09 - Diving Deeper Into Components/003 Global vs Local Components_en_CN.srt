1
00:00:02,100 --> 00:00:04,570
让我们从组件注册开始。

2
00:00:04,570 --> 00:00:07,010
我们正在注册我们的组件

3
00:00:07,010 --> 00:00:09,840
使用我们 App 上的组件方法。

4
00:00:09,840 --> 00:00:14,100
这就是我们在过去所有模块中的做法。

5
00:00:14,100 --> 00:00:18,270
现在，这种方法本身并没有错。

6
00:00:18,270 --> 00:00:20,740
但这也不总是最好的方法

7
00:00:20,740 --> 00:00:22,360
注册组件。

8
00:00:22,360 --> 00:00:25,620
因为事实证明还有另一种选择。

9
00:00:25,620 --> 00:00:28,390
现在，当我们像这样注册组件时

10
00:00:28,390 --> 00:00:31,260
使用我们 App 上的组件方法，

11
00:00:31,260 --> 00:00:34,930
然后我们正在注册这些组件

12
00:00:34,930 --> 00:00:38,860
所谓的全局组件。

13
00:00:38,860 --> 00:00:42,080
这意味着它们可以在全球范围内使用

14
00:00:42,080 --> 00:00:44,430
在整个 Vue 应用程序中。

15
00:00:44,430 --> 00:00:46,600
所以我们可以使用这些组件

16
00:00:46,600 --> 00:00:51,600
作为此应用程序中任何位置的自定义 HTML 元素。

17
00:00:51,700 --> 00:00:56,700
在 App.Vue 文件中，也可以在我们这里的任何组件中。

18
00:00:57,230 --> 00:01:01,540
因此，它们在此 Route 应用程序中的任何位置都可用。

19
00:01:01,540 --> 00:01:03,140
这当然非常有用，

20
00:01:03,140 --> 00:01:06,150
因为这意味着我们可以使用这些组件

21
00:01:06,150 --> 00:01:08,140
作为任何地方的自定义元素。

22
00:01:08,140 --> 00:01:11,430
而且我们不必考虑在哪里使用它们。

23
00:01:11,430 --> 00:01:14,390
但它也有一个潜在的缺点。

24
00:01:14,390 --> 00:01:17,530
当然，这些组件都包含一些代码。

25
00:01:17,530 --> 00:01:20,730
现在，当然，在这里，它们都是相当简单的组件。

26
00:01:20,730 --> 00:01:23,190
但是，它仍然是一些模板代码，

27
00:01:23,190 --> 00:01:25,200
一点点脚本代码。

28
00:01:25,200 --> 00:01:27,680
现在，这段代码当然会增长，

29
00:01:27,680 --> 00:01:29,500
我们的应用程序越大。

30
00:01:29,500 --> 00:01:32,490
我们拥有的组件越多，代码包就越多

31
00:01:32,490 --> 00:01:33,930
我们有，你可以说。

32
00:01:33,930 --> 00:01:37,090
如果你在全球范围内注册它们，

33
00:01:37,090 --> 00:01:41,730
这最终意味着 Vue 需要将它们全部加载

34
00:01:41,730 --> 00:01:44,270
最初加载应用程序时。

35
00:01:44,270 --> 00:01:46,710
所以浏览器需要下载代码

36
00:01:46,710 --> 00:01:48,963
最初用于所有这些组件。

37
00:01:50,330 --> 00:01:52,110
这绝对没有问题

38
00:01:52,110 --> 00:01:53,910
对于我们这里的基本应用，

39
00:01:53,910 --> 00:01:57,310
但对于更大的应用程序，这可能是个问题。

40
00:01:57,310 --> 00:02:01,260
此外，如果您在此处全局注册所有内容，

41
00:02:01,260 --> 00:02:03,870
这可能是一个很长的列表。

42
00:02:03,870 --> 00:02:06,050
如果您有一个应用程序，比方说，

43
00:02:06,050 --> 00:02:09,550
数百个组件，这将是一个超长的列表。

44
00:02:09,550 --> 00:02:11,980
而且在哪里并不明显

45
00:02:11,980 --> 00:02:13,710
这些组件正在被使用。

46
00:02:13,710 --> 00:02:15,990
如果所有这些组件都意味着

47
00:02:15,990 --> 00:02:18,950
在多个地方使用，或者如果可能的话

48
00:02:18,950 --> 00:02:22,393
其中一些组件仅在少数地方使用。

49
00:02:23,580 --> 00:02:25,320
例如，标题。

50
00:02:25,320 --> 00:02:28,260
这个组件实际上只使用一次。

51
00:02:28,260 --> 00:02:32,520
它在 App.Vue 中使用，对于 UserInfo 也是如此。

52
00:02:32,520 --> 00:02:34,920
这些是刚刚得到的组件

53
00:02:34,920 --> 00:02:39,830
使用一次并在全球范围内注册它们，因此有效。

54
00:02:39,830 --> 00:02:42,103
但是有一点多余，你可以说。

55
00:02:43,400 --> 00:02:45,860
我们只有这些组件

56
00:02:45,860 --> 00:02:48,060
这样我们就可以外包我们的代码

57
00:02:48,060 --> 00:02:50,640
并保持我们的 App.Vue 文件精简，

58
00:02:50,640 --> 00:02:52,640
因为这就是组件背后的想法。

59
00:02:52,640 --> 00:02:55,400
我们想要构建复杂的用户界面

60
00:02:55,400 --> 00:02:57,853
通过组合多个构建块。

61
00:02:59,490 --> 00:03:01,270
这就是为什么我们还有另一种方式

62
00:03:01,270 --> 00:03:03,340
注册组件。

63
00:03:03,340 --> 00:03:05,860
尽管在全球范围内注册它们

64
00:03:05,860 --> 00:03:08,400
在我们的 App 上使用这个组件方法，

65
00:03:08,400 --> 00:03:11,840
我们也可以在组件本地注册它们

66
00:03:11,840 --> 00:03:13,570
我们计划在哪里使用它们。

67
00:03:13,570 --> 00:03:15,620
例如，对于 TheHeader，

68
00:03:15,620 --> 00:03:19,860
我们可以在 main.js 中删除这个组件注册，

69
00:03:19,860 --> 00:03:22,540
并在此处删除此导入。

70
00:03:22,540 --> 00:03:25,630
而是转到我们的 App.Vue 文件，

71
00:03:25,630 --> 00:03:27,970
这是我们计划使用它的地方。

72
00:03:27,970 --> 00:03:30,230
然后在脚本部分，

73
00:03:30,230 --> 00:03:35,230
我们可以从组件 TheHeader.Vue 中导入 TheHeader。

74
00:03:38,170 --> 00:03:42,550
而现在我们也可以在本地注册这个组件了

75
00:03:42,550 --> 00:03:46,360
在此 App 组件中或在此 App 对象中

76
00:03:46,360 --> 00:03:48,683
在这个 App 选项对象中。

77
00:03:50,190 --> 00:03:52,910
我们通过在此处添加新属性来做到这一点

78
00:03:52,910 --> 00:03:55,810
在计算的数据方法旁边

79
00:03:55,810 --> 00:03:57,990
以及您了解的所有其他属性

80
00:03:57,990 --> 00:04:01,430
那将是 components 属性，

81
00:04:01,430 --> 00:04:04,023
我们以前从未见过，但它就在这里。

82
00:04:04,960 --> 00:04:08,930
我们现在可以告诉 Vue，哪些组件

83
00:04:08,930 --> 00:04:12,740
可以在此应用程序的模板中使用

84
00:04:12,740 --> 00:04:14,620
或这个组件。

85
00:04:14,620 --> 00:04:16,920
以及这里注册的组件

86
00:04:16,920 --> 00:04:19,640
那么真的只能在这里使用，

87
00:04:19,640 --> 00:04:22,000
不在任何其他子组件中，

88
00:04:22,000 --> 00:04:24,530
在我们的应用程序中没有其他任何地方，

89
00:04:24,530 --> 00:04:28,543
就在这个文件中，在这个 .Vue 文件中。

90
00:04:30,110 --> 00:04:32,090
现在组件想要一个对象，

91
00:04:32,090 --> 00:04:34,680
然后我们需要一个键值对，

92
00:04:34,680 --> 00:04:38,410
其中关键是我们的自定义 HTML 元素。

93
00:04:38,410 --> 00:04:42,140
所以以 TheHeader 为例，我们想要使用的标签

94
00:04:42,140 --> 00:04:43,770
对于这个元素，可以这么说，

95
00:04:43,770 --> 00:04:46,770
然后值是导入的

96
00:04:46,770 --> 00:04:49,263
组件配置对象，我们指向。

97
00:04:50,741 --> 00:04:54,980
如果我这样做，并保存这个，这仍然有效。

98
00:04:54,980 --> 00:04:58,250
但是现在 TheHeader 是在本地注册的。

99
00:04:58,250 --> 00:05:00,560
你实际上也可以用不同的方式写这个。

100
00:05:00,560 --> 00:05:03,070
这很好，但你可以

101
00:05:03,070 --> 00:05:07,510
也在这里使用像这样的 TheHeader 作为键，

102
00:05:07,510 --> 00:05:10,370
作为属性名称，您仍然可以

103
00:05:10,370 --> 00:05:13,210
在您的模板中像这样使用它。

104
00:05:13,210 --> 00:05:15,930
Vue 自动翻译这个

105
00:05:15,930 --> 00:05:19,940
这样您就可以在模板中使用-header

106
00:05:19,940 --> 00:05:24,940
或者如果你喜欢它，像这样的 TheHeader。

107
00:05:24,940 --> 00:05:26,100
然后你也可以写

108
00:05:26,100 --> 00:05:28,683
如果您愿意，可以作为自闭合元素。

109
00:05:29,540 --> 00:05:32,700
不支持此自闭合标签

110
00:05:32,700 --> 00:05:35,260
如果你写它之间有一个破折号，

111
00:05:35,260 --> 00:05:37,870
那么这个自闭合标签将不起作用

112
00:05:37,870 --> 00:05:40,753
如果你在这个 PascallCase 中写它，它就可以工作。

113
00:05:41,820 --> 00:05:44,820
所以这取决于你喜欢哪种风格。

114
00:05:44,820 --> 00:05:47,370
我会坚持使用标题，因为

115
00:05:47,370 --> 00:05:49,480
这是我以前一直使用的风格

116
00:05:49,480 --> 00:05:52,453
但您现在也可以使用这种 PascalCase 样式。

117
00:05:53,440 --> 00:05:56,880
当您像这样注册时，两者都是可能的。

118
00:05:56,880 --> 00:05:58,850
然后你可以进一步缩短它，

119
00:05:58,850 --> 00:06:01,420
您可以在此处删除此密钥，

120
00:06:01,420 --> 00:06:04,220
然后像这样传递 TheHeader，

121
00:06:04,220 --> 00:06:07,500
因为有一个现代的 JavaScript 语法特性

122
00:06:07,500 --> 00:06:09,850
在此项目设置中受支持，

123
00:06:09,850 --> 00:06:13,290
如果你在这里只提供一个值

124
00:06:13,290 --> 00:06:18,290
在一个对象中， this 会自动扩展为这个语法。

125
00:06:18,780 --> 00:06:22,020
所以这只是键和值变量

126
00:06:22,020 --> 00:06:24,633
或值常量具有相同的名称。

127
00:06:25,940 --> 00:06:28,387
所以你可以只写 TheHeader

128
00:06:28,387 --> 00:06:31,457
这将注册这个 TheHeader 组件

129
00:06:31,457 --> 00:06:34,509
在 TheHeader 标识符下，您可以

130
00:06:34,509 --> 00:06:37,320
然后像这样使用-header，

131
00:06:37,320 --> 00:06:41,220
或者正如我之前解释的，使用这个 PascalCase

132
00:06:41,220 --> 00:06:42,170
如果你愿意的话。

133
00:06:43,410 --> 00:06:46,163
如果我们保存，那也可以。

134
00:06:47,070 --> 00:06:50,410
所以这就是您编写组件的方式

135
00:06:50,410 --> 00:06:51,600
并使用您的组件。

136
00:06:51,600 --> 00:06:54,963
这是本地组件注册。

137
00:06:56,170 --> 00:06:58,500
当然，在这个演示应用程序中，

138
00:06:58,500 --> 00:07:02,493
TheHeader 不是我们可以在本地注册的唯一组件。

139
00:07:03,630 --> 00:07:06,420
如果我们看一下，UserInfo

140
00:07:06,420 --> 00:07:11,040
也是我们在 App 模板中简单使用的一个组件。

141
00:07:11,040 --> 00:07:13,490
徽章列表将是另一个候选人。

142
00:07:13,490 --> 00:07:17,423
我们也只在我们的 App.Vue 文件中使用它。

143
00:07:18,600 --> 00:07:21,830
所以我们实际上可以抓取进口

144
00:07:21,830 --> 00:07:24,980
从 main.js 到 UserInfo 和 BadgeList

145
00:07:24,980 --> 00:07:26,313
把它们剪在那里。

146
00:07:27,340 --> 00:07:30,940
并删除这些全局组件注册，

147
00:07:30,940 --> 00:07:33,003
并且只将 BaseBadge 留在这里。

148
00:07:34,480 --> 00:07:38,850
然后转到 App.Vue 并在此处添加这些导入。

149
00:07:38,850 --> 00:07:42,850
然后添加 BadgeList 和 UserInfo

150
00:07:42,850 --> 00:07:47,023
作为组件选项中的本地组件。

151
00:07:48,810 --> 00:07:50,460
这段代码应该仍然有效

152
00:07:50,460 --> 00:07:53,670
因为我没有在这里更改这些名称。

153
00:07:53,670 --> 00:07:55,840
现在，此组件选项可用

154
00:07:55,840 --> 00:07:59,780
在任何配置对象中，而不仅仅是在 App.View 中。

155
00:07:59,780 --> 00:08:02,580
您还可以注册本地组件

156
00:08:02,580 --> 00:08:04,400
在您的其他组件之一中

157
00:08:04,400 --> 00:08:07,820
如果您有属于那里的本地组件。

158
00:08:07,820 --> 00:08:10,110
但在这个应用程序中，情况并非如此。

159
00:08:10,110 --> 00:08:13,770
我们现在剩下 BaseBadge 组件，

160
00:08:13,770 --> 00:08:16,390
我仍在全局配置。

161
00:08:16,390 --> 00:08:18,490
这是我想要保留的组件

162
00:08:18,490 --> 00:08:21,250
作为一个全球性的组成部分，因为我实际上是

163
00:08:21,250 --> 00:08:24,050
在这个应用程序的多个部分使用它。

164
00:08:24,050 --> 00:08:26,610
我在 BadgeList 组件中使用它，

165
00:08:26,610 --> 00:08:29,340
以及在 UserInfo 组件中。

166
00:08:29,340 --> 00:08:33,330
每当你有一个通用组件时，

167
00:08:33,330 --> 00:08:35,940
你在很多不同的地方使用它，

168
00:08:35,940 --> 00:08:38,419
在这种情况下，您通常希望

169
00:08:38,419 --> 00:08:41,823
使用全局组件，至少您想考虑它。

170
00:08:42,900 --> 00:08:44,560
当然你也可以添加

171
00:08:44,560 --> 00:08:47,830
作为多个其他组件的本地组件

172
00:08:47,830 --> 00:08:49,490
如果这更有意义。

173
00:08:49,490 --> 00:08:52,190
但也经常使用全局组件

174
00:08:52,190 --> 00:08:54,490
在这种情况下是正确的。

175
00:08:54,490 --> 00:08:56,690
另一方面，如果你有组件，

176
00:08:56,690 --> 00:08:59,230
你只能在一小时内使用，

177
00:08:59,230 --> 00:09:01,610
组件让我们说，那么你可能

178
00:09:01,610 --> 00:09:04,940
想考虑将它们注册为本地组件

179
00:09:04,940 --> 00:09:08,210
只是为了保持你的 main.js 文件简短

180
00:09:08,210 --> 00:09:11,223
并且不要在全球范围内注册所有内容。

181
00:09:12,320 --> 00:09:14,420
有了这个，我们得到了这个工作，

182
00:09:14,420 --> 00:09:18,230
但现在我们知道全局和本地注册

183
00:09:18,230 --> 00:09:19,923
以及何时使用什么。