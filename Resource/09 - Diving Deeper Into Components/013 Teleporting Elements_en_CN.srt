1
00:00:02,150 --> 00:00:05,920
那么我们当前的错误对话有什么问题。

2
00:00:05,920 --> 00:00:07,290
好吧，如果我打开它，

3
00:00:07,290 --> 00:00:10,180
视觉上，一切都很好。

4
00:00:10,180 --> 00:00:12,740
但如果我在这里检查这个，

5
00:00:12,740 --> 00:00:15,700
我们可以在 HTML 标记中看到一个问题。

6
00:00:15,700 --> 00:00:17,660
这是我们的对话吧？

7
00:00:17,660 --> 00:00:20,550
它位于按钮输入和 h2 标签下方。

8
00:00:20,550 --> 00:00:23,950
它在下面，因为那是我们添加它的地方

9
00:00:23,950 --> 00:00:25,843
在管理目标的模板中。

10
00:00:27,210 --> 00:00:31,490
现在，正如我所说的，一切都在视觉上有效，但在语义上，

11
00:00:31,490 --> 00:00:34,490
从 HTML 的角度来看，

12
00:00:34,490 --> 00:00:36,270
有了这个，

13
00:00:36,270 --> 00:00:38,240
元素对话，

14
00:00:38,240 --> 00:00:42,250
这实际上被视为覆盖整个页面。

15
00:00:42,250 --> 00:00:44,350
嵌套在这里，

16
00:00:44,350 --> 00:00:46,350
在我们的 HTML 代码中，

17
00:00:46,350 --> 00:00:48,110
不理想。

18
00:00:48,110 --> 00:00:51,830
它可以工作，但对于可访问性，这可能很奇怪。

19
00:00:51,830 --> 00:00:55,030
您还可能在此处遇到一些样式错误

20
00:00:55,030 --> 00:00:56,970
它可能更有意义

21
00:00:56,970 --> 00:01:00,301
如果那个对话不会在那里。

22
00:01:00,301 --> 00:01:04,780
但相反，可以说它会在这里的某个地方。

23
00:01:04,780 --> 00:01:09,780
它将被插入到我们的 HTML 树的根部。

24
00:01:10,210 --> 00:01:13,510
并没有深深地嵌套在其中。

25
00:01:13,510 --> 00:01:15,440
真的只是为了语义，

26
00:01:15,440 --> 00:01:18,990
以及部分可访问性原因。

27
00:01:18,990 --> 00:01:22,420
这是很容易通过视图实现的，

28
00:01:22,420 --> 00:01:24,563
还有一个叫做 Teleport 的功能。

29
00:01:25,520 --> 00:01:28,610
Teleport，是一个内置的视图组件

30
00:01:28,610 --> 00:01:29,800
就像组件一样

31
00:01:29,800 --> 00:01:30,962
并保持活力。

32
00:01:30,962 --> 00:01:34,600
你可以包装你的 2B 传送的东西

33
00:01:34,600 --> 00:01:37,570
所以你的 2B 呈现在别的地方，

34
00:01:37,570 --> 00:01:39,740
在这种情况下，错误警报，

35
00:01:39,740 --> 00:01:42,840
带有内置的 Teleport 元素。

36
00:01:42,840 --> 00:01:46,983
这又是一个为您提供的内置组件视图。

37
00:01:48,650 --> 00:01:50,640
现在 Teleport 是如何工作的

38
00:01:50,640 --> 00:01:52,780
或者你用它做什么。

39
00:01:52,780 --> 00:01:56,020
传送要一个道具，一个属性。

40
00:01:56,020 --> 00:01:57,710
两个道具。

41
00:01:57,710 --> 00:02:01,150
在这里你提供了一个 CSS 选择器，

42
00:02:01,150 --> 00:02:04,922
在整个页面上选择一个 HTML 元素，

43
00:02:04,922 --> 00:02:07,810
这个内容实际上应该在哪里

44
00:02:07,810 --> 00:02:11,370
被添加到 HTML 标记中。

45
00:02:11,370 --> 00:02:14,220
所以逻辑上还是属于这个组件的

46
00:02:14,220 --> 00:02:16,960
您仍然可以与该组件中的方法进行交互

47
00:02:16,960 --> 00:02:18,090
等等。

48
00:02:18,090 --> 00:02:19,410
但是会被渲染

49
00:02:19,410 --> 00:02:21,993
圆顶结构的其他地方。

50
00:02:22,960 --> 00:02:24,120
例如这里

51
00:02:24,120 --> 00:02:26,171
我们可以选择body元素

52
00:02:26,171 --> 00:02:29,300
仅参考body标签。

53
00:02:29,300 --> 00:02:33,140
您还可以通过 ID 选择器引用元素

54
00:02:33,140 --> 00:02:34,090
像这样。

55
00:02:34,090 --> 00:02:37,310
您只需在此处传入一个常规 CSS 选择器。

56
00:02:37,310 --> 00:02:39,830
在这里，我将使用 body 标签。

57
00:02:39,830 --> 00:02:43,800
也就是说，请渲染这个组件的内容

58
00:02:43,800 --> 00:02:47,910
应该添加到圆顶的实际 HTML 标记

59
00:02:47,910 --> 00:02:50,600
请在 Body 元素中渲染它，

60
00:02:50,600 --> 00:02:52,370
直接在body元素中

61
00:02:52,370 --> 00:02:55,810
并且没有深深嵌套在这个 HTML 结构中

62
00:02:55,810 --> 00:02:57,483
就像以前发生的那样。

63
00:02:59,240 --> 00:03:01,240
所以如果我保存它，

64
00:03:01,240 --> 00:03:02,500
并重新加载

65
00:03:02,500 --> 00:03:04,440
并产生这个对话，

66
00:03:04,440 --> 00:03:06,010
它看起来像以前。

67
00:03:06,010 --> 00:03:09,880
但是如果我们现在检查这个，我们会看到这个对话

68
00:03:09,880 --> 00:03:12,730
现在位于正文部分的末尾。

69
00:03:12,730 --> 00:03:15,260
它不再深深地嵌套在这个

70
00:03:15,260 --> 00:03:16,813
div 或任何其他元素。

71
00:03:16,813 --> 00:03:20,090
从语义上讲，这可能会更好。

72
00:03:20,090 --> 00:03:22,740
它当然是一个小的优化

73
00:03:22,740 --> 00:03:24,170
对你来说可能无关紧要

74
00:03:24,170 --> 00:03:27,194
如果你不想，你不必使用传送。

75
00:03:27,194 --> 00:03:30,730
但正如你所知道的，它非常易于使用。

76
00:03:30,730 --> 00:03:31,870
它可以帮助你

77
00:03:31,870 --> 00:03:34,230
整体 HTML 结构

78
00:03:34,230 --> 00:03:35,130
并确保

79
00:03:35,130 --> 00:03:37,930
你不只是创建一个看起来不错的应用程序

80
00:03:37,930 --> 00:03:39,410
并正常工作

81
00:03:39,410 --> 00:03:44,390
但它也使用语义正确的 HTML 结构

82
00:03:44,390 --> 00:03:45,300
在木头下。

83
00:03:45,300 --> 00:03:48,503
如您所知，瞬移使这一切变得容易。