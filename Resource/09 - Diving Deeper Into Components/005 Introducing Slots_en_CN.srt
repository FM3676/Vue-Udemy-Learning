1
00:00:02,090 --> 00:00:03,770
还有一个很酷的功能

2
00:00:03,770 --> 00:00:05,790
谈到 Vue 组件

3
00:00:05,790 --> 00:00:07,340
一旦你知道它，

4
00:00:07,340 --> 00:00:09,420
会给你更多的选择

5
00:00:09,420 --> 00:00:11,090
构建你的代码

6
00:00:11,090 --> 00:00:13,830
并将您的代码拆分为多个组件

7
00:00:13,830 --> 00:00:16,740
这将是插槽的功能。

8
00:00:16,740 --> 00:00:18,283
现在插槽是关于什么的？

9
00:00:19,320 --> 00:00:21,010
让我给你看一个例子。

10
00:00:21,010 --> 00:00:22,530
在用户信息中，

11
00:00:22,530 --> 00:00:26,593
我们有一个带有标题和段落的部分。

12
00:00:28,440 --> 00:00:32,143
在 BadgeList 中，我们还有一个包含一些内容的部分。

13
00:00:33,440 --> 00:00:34,820
现在内容不一样了

14
00:00:34,820 --> 00:00:36,490
但有一件重要的事情

15
00:00:36,490 --> 00:00:38,360
这两个组件，

16
00:00:38,360 --> 00:00:41,250
BadgeList 和 UserInfo 有共同点

17
00:00:41,250 --> 00:00:42,910
这就是部分

18
00:00:42,910 --> 00:00:44,920
但实际上不仅仅是一个部分

19
00:00:44,920 --> 00:00:48,740
但是正在应用的部分和样式

20
00:00:48,740 --> 00:00:49,863
到那个部分。

21
00:00:50,870 --> 00:00:53,300
你可能还记得在上一堂课中，

22
00:00:53,300 --> 00:00:55,140
我复制了样式

23
00:00:55,140 --> 00:00:57,710
确保该部分具有相同的样式

24
00:00:57,710 --> 00:00:59,293
在这两个组件中。

25
00:01:00,700 --> 00:01:01,650
现在当然，

26
00:01:01,650 --> 00:01:03,430
另一种选择是

27
00:01:03,430 --> 00:01:05,820
简单地使部分成为全局样式

28
00:01:05,820 --> 00:01:07,280
在 App.vue 中

29
00:01:07,280 --> 00:01:08,970
样式不受范围限制的地方

30
00:01:10,280 --> 00:01:12,230
但另一种选择是

31
00:01:12,230 --> 00:01:14,500
创建一个独立的组件

32
00:01:14,500 --> 00:01:16,700
仅包含该部分

33
00:01:16,700 --> 00:01:18,550
附带样式

34
00:01:18,550 --> 00:01:20,380
然后是灵活的

35
00:01:20,380 --> 00:01:22,543
关于它收到的内容。

36
00:01:23,830 --> 00:01:26,883
这可能类似于 BaseCard 组件。

37
00:01:27,780 --> 00:01:29,070
现在名字由你决定

38
00:01:29,070 --> 00:01:30,480
但我这样命名

39
00:01:30,480 --> 00:01:32,870
因为我想创造一个特定的外观

40
00:01:32,870 --> 00:01:37,590
这有时在网络中被称为卡片外观。

41
00:01:37,590 --> 00:01:39,950
基本上这种有阴影的样子

42
00:01:39,950 --> 00:01:41,250
和圆角，

43
00:01:41,250 --> 00:01:43,990
这通常被称为卡片外观

44
00:01:45,330 --> 00:01:47,360
我要在这里创建一个组件

45
00:01:47,360 --> 00:01:49,720
它封装了那个外观

46
00:01:49,720 --> 00:01:53,520
这样我们就可以轻松地在任何我们想要的地方重复使用它

47
00:01:53,520 --> 00:01:56,330
在这个模板中，

48
00:01:56,330 --> 00:02:01,000
我将添加一个这样的部分，

49
00:02:01,000 --> 00:02:02,860
或者也可以只使用 div

50
00:02:02,860 --> 00:02:05,910
使其在语义上更具可重用性

51
00:02:05,910 --> 00:02:07,810
但这只是一件小事。

52
00:02:07,810 --> 00:02:09,800
这里真的无所谓

53
00:02:09,800 --> 00:02:12,020
然后我添加我的样式

54
00:02:12,020 --> 00:02:13,630
重要的是，

55
00:02:13,630 --> 00:02:15,580
我将确定此样式的范围

56
00:02:15,580 --> 00:02:17,713
通过添加作用域属性。

57
00:02:18,850 --> 00:02:23,350
现在我将在此处复制此部分样式

58
00:02:25,330 --> 00:02:26,740
到我的基本卡

59
00:02:28,000 --> 00:02:30,610
并将其从 section 更改为 div 当然

60
00:02:30,610 --> 00:02:32,660
因为我现在在这里有一个 div

61
00:02:34,930 --> 00:02:37,060
现在我想确定

62
00:02:37,060 --> 00:02:39,180
这里的内容

63
00:02:39,180 --> 00:02:41,250
可以是我们想要的任何东西。

64
00:02:41,250 --> 00:02:42,500
我基本上只是想要

65
00:02:42,500 --> 00:02:44,610
将此组件用作包装器

66
00:02:44,610 --> 00:02:46,720
附有一定的风格。

67
00:02:46,720 --> 00:02:48,650
现在我们如何接收内容

68
00:02:48,650 --> 00:02:50,663
现在虽然从外面？

69
00:02:51,570 --> 00:02:53,490
好吧，我们了解了道具，

70
00:02:53,490 --> 00:02:55,513
我们可以在这里添加一个脚本，

71
00:02:59,960 --> 00:03:01,120
像这样

72
00:03:01,120 --> 00:03:06,120
然后简单地导出我们的默认 JavaScript 对象

73
00:03:07,870 --> 00:03:10,010
现在在这里接受一些道具。

74
00:03:10,010 --> 00:03:12,110
但是我们的道具是什么？

75
00:03:12,110 --> 00:03:13,600
会不会满足

76
00:03:13,600 --> 00:03:17,080
然后我们尝试输出像这样的内容？

77
00:03:17,080 --> 00:03:18,670
那实际上是行不通的

78
00:03:18,670 --> 00:03:22,130
因为如果我们现在想在这里使用我们的卡，

79
00:03:22,130 --> 00:03:24,500
我们不能传入我们的 HTML 内容

80
00:03:24,500 --> 00:03:26,950
与我们正在使用的所有这些 Vue 功能。

81
00:03:26,950 --> 00:03:28,900
让我告诉你问题是什么。

82
00:03:28,900 --> 00:03:31,510
假设我们在全球范围内注册它

83
00:03:31,510 --> 00:03:33,790
因为我们要用这张卡

84
00:03:33,790 --> 00:03:35,450
在多个地方。

85
00:03:35,450 --> 00:03:36,750
所以在 main.js

86
00:03:36,750 --> 00:03:38,640
我们将像这样注册它

87
00:03:39,710 --> 00:03:40,950
然后在这里，

88
00:03:40,950 --> 00:03:42,070
使用 app.component，

89
00:03:42,070 --> 00:03:45,240
我们有这样的 BaseCard

90
00:03:46,900 --> 00:03:48,540
现在在 UserInfo

91
00:03:48,540 --> 00:03:49,760
我想用它。

92
00:03:49,760 --> 00:03:51,400
所以我想最后，

93
00:03:51,400 --> 00:03:54,467
像这样用 BaseCard 将我的内容包装在这里，

94
00:03:57,640 --> 00:04:00,200
我不会用它替换该部分

95
00:04:00,200 --> 00:04:02,570
但我把我的 BaseCard 放进去

96
00:04:02,570 --> 00:04:05,580
然后用 BaseCard 包装这个内容。

97
00:04:05,580 --> 00:04:08,300
然而，这不是道具的工作方式吗？

98
00:04:08,300 --> 00:04:10,700
如果我保存它，

99
00:04:10,700 --> 00:04:12,780
我现在失去了所有的内容

100
00:04:12,780 --> 00:04:15,620
因为 Vue 不知道在哪里渲染它，

101
00:04:15,620 --> 00:04:18,950
我在自定义组件的文本之间添加了它

102
00:04:18,950 --> 00:04:22,670
好吧，你怎么知道该怎么做呢？

103
00:04:22,670 --> 00:04:23,983
在哪里输出呢？

104
00:04:25,210 --> 00:04:28,530
毕竟我们的自定义组件有自己的模板。

105
00:04:28,530 --> 00:04:30,240
是的，它有一个内容道具

106
00:04:30,240 --> 00:04:33,093
但是 Vue 不知道里面有什么。

107
00:04:35,330 --> 00:04:36,250
现在我们当然可以

108
00:04:36,250 --> 00:04:38,670
在此处设置内容等于字符串

109
00:04:38,670 --> 00:04:42,120
并将此内容作为字符串传递给内容

110
00:04:42,120 --> 00:04:45,533
但这将不再能够使用 Vue 功能。

111
00:04:46,570 --> 00:04:48,830
所以这一切都不是解决方案，

112
00:04:48,830 --> 00:04:52,010
相反，我提到的是这个插槽功能。

113
00:04:52,010 --> 00:04:55,930
Vue 为这种确切的场景提供了特殊的语法

114
00:04:55,930 --> 00:04:58,560
您想在哪里使用自己的组件

115
00:04:58,560 --> 00:05:01,720
作为动态内容的包装器。

116
00:05:01,720 --> 00:05:04,680
所以围绕不同种类的 HTML 内容

117
00:05:05,910 --> 00:05:06,860
为此，

118
00:05:06,860 --> 00:05:08,910
您只需转到您的组件

119
00:05:08,910 --> 00:05:10,500
那应该是包装。

120
00:05:10,500 --> 00:05:12,600
你不在那里使用道具

121
00:05:12,600 --> 00:05:15,740
但是你使用了一个特殊的元素，

122
00:05:15,740 --> 00:05:18,840
像这样的插槽元素

123
00:05:20,900 --> 00:05:22,840
如果你现在保存它，

124
00:05:22,840 --> 00:05:24,410
你会看到这个作品

125
00:05:24,410 --> 00:05:26,010
我们得到了我们想要的样子

126
00:05:27,820 --> 00:05:29,420
如果我去用户信息，

127
00:05:29,420 --> 00:05:30,400
铭记于心

128
00:05:30,400 --> 00:05:33,020
我在这里删除了部分样式。

129
00:05:33,020 --> 00:05:36,210
所以这个外观真的来自我们的 Card 组件

130
00:05:37,280 --> 00:05:39,160
这就是插槽的工作方式。

131
00:05:39,160 --> 00:05:43,250
它们允许我们接收 HTML 内容

132
00:05:43,250 --> 00:05:45,990
这也可能正在使用 Vue 功能

133
00:05:45,990 --> 00:05:48,143
从组件外部。

134
00:05:49,300 --> 00:05:51,540
基本上就像道具一样

135
00:05:51,540 --> 00:05:54,760
但是在 props 是用来存储数据的地方，

136
00:05:54,760 --> 00:05:56,120
组件需要哪个，

137
00:05:56,120 --> 00:05:59,540
插槽用于 HTML 代码

138
00:05:59,540 --> 00:06:02,293
对于组件需要的模板代码。

139
00:06:03,260 --> 00:06:06,810
所以这里我们现在只提供一个带有一些样式的外壳。

140
00:06:06,810 --> 00:06:08,510
我们还可以添加一些逻辑

141
00:06:08,510 --> 00:06:10,360
如果这个组件需要

142
00:06:10,360 --> 00:06:13,270
但是我们随后允许父组件

143
00:06:13,270 --> 00:06:15,700
提供 HTML 代码

144
00:06:15,700 --> 00:06:17,680
那应该在那个div里面

145
00:06:19,030 --> 00:06:21,903
这就是插槽背后的核心理念。