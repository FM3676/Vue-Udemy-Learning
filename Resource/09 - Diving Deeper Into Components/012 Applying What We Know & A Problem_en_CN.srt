1
00:00:02,210 --> 00:00:03,060
你准备好了吗

2
00:00:03,060 --> 00:00:05,920
了解更多 Vue 组件功能？

3
00:00:05,920 --> 00:00:07,670
我们正在慢慢走到尽头

4
00:00:07,670 --> 00:00:09,370
这个模块虽然承诺，

5
00:00:09,370 --> 00:00:12,070
你已经知道了很多核心功能

6
00:00:12,070 --> 00:00:13,400
你要知道。

7
00:00:13,400 --> 00:00:14,870
但这是另一个不错的功能

8
00:00:14,870 --> 00:00:17,093
有时会很高兴。

9
00:00:17,980 --> 00:00:20,430
让我坚持这个管理目标组件，

10
00:00:20,430 --> 00:00:22,450
即使它不是超级漂亮。

11
00:00:22,450 --> 00:00:24,300
假设在这里，我们有一个按钮。

12
00:00:25,690 --> 00:00:28,540
我有设定目标的文本，

13
00:00:28,540 --> 00:00:32,439
当点击这个按钮时，我想保存我的目标。

14
00:00:32,439 --> 00:00:35,660
因此，为此我将在托管目标中添加一个脚本

15
00:00:35,660 --> 00:00:39,070
并添加一个方法，我会在这里保持非常简单，

16
00:00:39,070 --> 00:00:42,210
我将在这个方法 setGoal 中命名为目标。

17
00:00:42,210 --> 00:00:44,810
然后在这里，我想检查一下

18
00:00:44,810 --> 00:00:47,560
输入里面是什么，如果它是空的，

19
00:00:47,560 --> 00:00:50,150
我想向用户显示一条错误消息。

20
00:00:50,150 --> 00:00:52,680
如果这是一个有效的目标，将不会在这里做任何事情

21
00:00:52,680 --> 00:00:55,450
因为我想专注于那个错误部分

22
00:00:55,450 --> 00:00:57,003
并在错误消息上。

23
00:00:58,070 --> 00:01:01,800
所以这里我们指向 setGoal，而不是 setGoal，

24
00:01:01,800 --> 00:01:06,800
我们可以在 refs 的帮助下获取我们输入的值，例如，

25
00:01:07,290 --> 00:01:10,150
或使用 V 模型和双向绑定。

26
00:01:10,150 --> 00:01:12,890
但是在这里，我将带回那个 ref 概念，

27
00:01:12,890 --> 00:01:15,210
将我的 ref 键添加到输入元素

28
00:01:16,470 --> 00:01:20,203
并给它一个我选择的标识符，在这种情况下是目标。

29
00:01:21,370 --> 00:01:23,940
然后在这里使用美元符号 refs.goal，

30
00:01:23,940 --> 00:01:26,180
我们可以访问这个输入元素

31
00:01:26,180 --> 00:01:27,700
因此，对于点值，

32
00:01:27,700 --> 00:01:29,603
我们可以得到用户输入的值。

33
00:01:30,930 --> 00:01:35,303
现在如果输入的值是一个空字符串，比方说，

34
00:01:36,260 --> 00:01:38,700
然后我想显示一个错误。

35
00:01:38,700 --> 00:01:39,900
现在在浏览器中，

36
00:01:39,900 --> 00:01:42,560
我们可以为此使用警报功能。

37
00:01:42,560 --> 00:01:45,230
输入不能为空。

38
00:01:45,230 --> 00:01:46,813
这是我们可以在这里输出的信息，

39
00:01:46,813 --> 00:01:48,820
并且警报功能可用

40
00:01:48,820 --> 00:01:50,193
在这样的浏览器中。

41
00:01:51,060 --> 00:01:55,997
所以如果我们现在保存它，然后回到这里管理目标，

42
00:01:57,410 --> 00:01:58,840
我们现在有一个按钮，

43
00:01:58,840 --> 00:02:02,520
如果我在这里什么都不输入，然后按 Set Goal，

44
00:02:02,520 --> 00:02:04,083
我在这里得到警报。

45
00:02:05,180 --> 00:02:07,280
这可行，但在大多数应用程序中，

46
00:02:07,280 --> 00:02:10,300
你可能不想显示这样的警报。

47
00:02:10,300 --> 00:02:14,020
这个内置的警报不是很好看，

48
00:02:14,020 --> 00:02:16,360
它可能不适合样式

49
00:02:16,360 --> 00:02:18,160
你的应用程序的其余部分，

50
00:02:18,160 --> 00:02:21,800
因此，这可能不是您想要做的。

51
00:02:21,800 --> 00:02:24,940
相反，也许你想建立自己的警报，

52
00:02:24,940 --> 00:02:26,470
你自己的模型。

53
00:02:26,470 --> 00:02:30,300
所以你自己的叠加对话，你想展示。

54
00:02:30,300 --> 00:02:32,300
这正是我在这里要做的。

55
00:02:32,300 --> 00:02:36,780
我将在这里构建我的 ErrorAlert.vue 组件。

56
00:02:36,780 --> 00:02:40,210
这将是一个非常简单的组件，

57
00:02:40,210 --> 00:02:42,760
用于构建对话元素，

58
00:02:42,760 --> 00:02:47,760
它有一个默认的 HTML 元素，用于输出一些内容。

59
00:02:49,070 --> 00:02:50,390
而实际上在这里，

60
00:02:50,390 --> 00:02:53,870
我们可以使用一些插槽内容来灵活

61
00:02:53,870 --> 00:02:56,573
关于该对话中显示的内容。

62
00:02:59,050 --> 00:03:02,850
现在我将在这里快速添加一些范围样式，

63
00:03:02,850 --> 00:03:04,780
针对这个对话，

64
00:03:04,780 --> 00:03:09,780
给它一个固定顶部 20vh 的位置

65
00:03:10,060 --> 00:03:14,580
将其从窗口顶部向下移动 20%，

66
00:03:14,580 --> 00:03:19,250
剩下 30% 在这里，哎呀，像这样，

67
00:03:19,250 --> 00:03:24,250
并给它一个宽度，比如说40%，

68
00:03:24,600 --> 00:03:28,130
这样我们就有了一个居中的最后在这里对话，

69
00:03:28,130 --> 00:03:33,113
并给它一个白色的背景颜色和一个盒子阴影

70
00:03:35,700 --> 00:03:37,900
最后在这里有一个浅色阴影。

71
00:03:39,170 --> 00:03:41,190
但这只是一些基本的造型，

72
00:03:41,190 --> 00:03:44,650
我总是会添加一个 REM 的填充，现在就是这样。

73
00:03:44,650 --> 00:03:46,820
你绝对可以用更漂亮的方式来设计这个，

74
00:03:46,820 --> 00:03:48,670
但这现在应该可以解决问题。

75
00:03:49,800 --> 00:03:52,900
所以现在我们有了这个对话框，其中包含确切的内容

76
00:03:52,900 --> 00:03:56,680
它的内部是灵活的，这要归功于我们在这里的插槽。

77
00:03:56,680 --> 00:03:59,850
所以现在在管理目标中，我想展示这种对话，

78
00:03:59,850 --> 00:04:02,930
如果用户输入了无效的内容。

79
00:04:02,930 --> 00:04:04,093
我们怎么能这样做？

80
00:04:05,360 --> 00:04:08,200
好吧，我们可以为此使用 v-if。

81
00:04:08,200 --> 00:04:10,193
我们可以在这里管理一些数据，

82
00:04:12,490 --> 00:04:14,943
在我们的管理目标组件中，

83
00:04:16,320 --> 00:04:21,019
并具有 InputIsInvalid 数据属性，

84
00:04:21,019 --> 00:04:23,320
最初是错误的，因为最初，

85
00:04:23,320 --> 00:04:24,900
输入不是无效的。

86
00:04:24,900 --> 00:04:27,443
毕竟用户还没有输入任何东西。

87
00:04:28,600 --> 00:04:30,940
但我们在这里将其设置为 true，

88
00:04:30,940 --> 00:04:34,150
如果我们看到用户输入的内容无效。

89
00:04:34,150 --> 00:04:38,143
所以我们可以将这个输入无效设置为真。

90
00:04:41,840 --> 00:04:46,760
现在我们想在这里显示我们的错误警报，

91
00:04:46,760 --> 00:04:50,160
如果输入无效为真。

92
00:04:50,160 --> 00:04:52,530
因此，在这个模板中，

93
00:04:52,530 --> 00:04:56,720
我们可以简单地添加错误警报，这个组件，

94
00:04:56,720 --> 00:04:58,320
为了在这里使用它，

95
00:04:58,320 --> 00:05:01,650
当然，这里我们应该导入 ErrorAlert

96
00:05:01,650 --> 00:05:06,650
来自 ./ErrorAlert.vue，而不是点斜线组件，

97
00:05:07,520 --> 00:05:10,500
但只是 Vue 的点斜线错误警报，

98
00:05:10,500 --> 00:05:13,840
因为它与托管目标位于同一文件夹中，

99
00:05:13,840 --> 00:05:16,820
这是我添加此输入的地方。

100
00:05:16,820 --> 00:05:20,900
然后我们可以在此处将其注册为本地组件。

101
00:05:20,900 --> 00:05:24,120
这是我们第一次注册本地组件

102
00:05:24,120 --> 00:05:27,430
在 app.Vue 之外，但正如我之前提到的，

103
00:05:27,430 --> 00:05:29,670
这是绝对可能的。

104
00:05:29,670 --> 00:05:32,690
所以错误警报现在是一个本地组件，

105
00:05:32,690 --> 00:05:34,283
在管理目标中。

106
00:05:35,610 --> 00:05:40,610
现在我只想在使用 v-if 时输出错误警报，

107
00:05:41,070 --> 00:05:45,270
如果输入无效为真。

108
00:05:45,270 --> 00:05:50,270
然后在这里我们可以有一个标题，例如，

109
00:05:50,950 --> 00:05:54,420
输入无效和一个段落

110
00:05:54,420 --> 00:05:57,070
我们提供更多信息的地方，

111
00:05:57,070 --> 00:06:02,070
请输入至少几个字符，诸如此类。

112
00:06:03,690 --> 00:06:06,140
这是将提供的标记

113
00:06:06,140 --> 00:06:08,773
用于错误警报中的插槽。

114
00:06:10,060 --> 00:06:13,700
因此，我们应该希望显示一个错误警报

115
00:06:13,700 --> 00:06:16,440
如果用户输入了无效的内容。

116
00:06:16,440 --> 00:06:18,450
所以如果用户什么都不输入，

117
00:06:18,450 --> 00:06:21,470
然后感谢这个数据属性和 v-if，

118
00:06:21,470 --> 00:06:23,833
我们显示此错误警报。

119
00:06:24,750 --> 00:06:26,170
试一试吧。

120
00:06:26,170 --> 00:06:29,220
让我们保存，重新加载，去管理目标

121
00:06:29,220 --> 00:06:32,590
不输入任何内容，点击设定目标，

122
00:06:32,590 --> 00:06:34,100
我们什么也看不见，

123
00:06:34,100 --> 00:06:37,980
尽管内置对话元素，但那是我的错

124
00:06:37,980 --> 00:06:42,550
需要显示一个开放的属性。

125
00:06:42,550 --> 00:06:45,260
因此，我们当然也可以显示可见性

126
00:06:45,260 --> 00:06:48,490
通过切换 open 属性来进行对话，

127
00:06:48,490 --> 00:06:53,150
但我总是会添加 open 而只是显示或隐藏它

128
00:06:53,150 --> 00:06:56,670
通过添加或删除整个组件

129
00:06:56,670 --> 00:06:59,010
使用 v-if 到 dom。

130
00:06:59,010 --> 00:07:02,450
但请确保您在对话中具有开放属性，

131
00:07:02,450 --> 00:07:04,440
否则它将无法正常工作。

132
00:07:04,440 --> 00:07:08,260
而且，如果我重新加载并尝试提交一个空目标，

133
00:07:08,260 --> 00:07:10,750
这是我们的错误对话。

134
00:07:10,750--> 00:07:13,833
现在好像造型有点乱

135
00:07:15,050 --> 00:07:18,343
我们可以通过在此处添加边际零来解决此问题。

136
00:07:20,860 --> 00:07:23,710
如果我们这样做，我们应该进行死心的对话。

137
00:07:23,710 --> 00:07:25,920
但无论如何，它并不是关于造型，

138
00:07:25,920 --> 00:07:28,220
我的意思是这仍然可以改进。

139
00:07:28,220 --> 00:07:33,220
但是我们看到我们现在可以像这样过度打开我们的自定义。

140
00:07:34,090 --> 00:07:36,080
当然我们可以更详细地调整它，

141
00:07:36,080 --> 00:07:39,203
但这已经是一个需要注意的有用模式。

142
00:07:40,640 --> 00:07:44,720
我们现在也可以通过管理目标来关闭它

143
00:07:44,720 --> 00:07:47,770
我们确实将我们的标记传递给这个组件，

144
00:07:47,770 --> 00:07:51,910
例如，我们可以在那里添加一个按钮，好吧，

145
00:07:51,910 --> 00:07:54,790
我们可以按下它来处理这个错误，

146
00:07:54,790 --> 00:07:57,190
并单击此处的此按钮，

147
00:07:57,190 --> 00:08:01,903
我们可以触发另一种方法，而不是管理目标，

148
00:08:02,870 --> 00:08:05,840
ConfirmError 可能是名称，

149
00:08:05,840 --> 00:08:09,500
我们简单地将 input is invalid 设置回 false

150
00:08:09,500 --> 00:08:12,110
给用户另一个机会。

151
00:08:12,110 --> 00:08:14,770
所以 ConfirmError 现在被触发

152
00:08:14,770 --> 00:08:16,393
单击此按钮。

153
00:08:17,610 --> 00:08:20,100
这也向您展示了一个旁注，

154
00:08:20,100 --> 00:08:23,280
为什么插槽的概念如此强大。

155
00:08:23,280 --> 00:08:27,820
我们可以为完全不同的组件添加内容

156
00:08:27,820 --> 00:08:30,430
在我们拥有所有逻辑的组件中

157
00:08:30,430 --> 00:08:32,683
用于显示错误警报组件。

158
00:08:33,770 --> 00:08:36,960
所以我们不需要通过自定义事件传递数据，

159
00:08:36,960 --> 00:08:39,039
错误警报在此处发出。

160
00:08:39,039 --> 00:08:42,450
相反，我们可以在组件中处理这里的所有内容

161
00:08:42,450 --> 00:08:47,450
在哪里产生错误，但交出样式

162
00:08:47,810 --> 00:08:50,130
以及该对话的标记

163
00:08:50,130 --> 00:08:51,950
到一个完全不同的组件。

164
00:08:51,950 --> 00:08:55,330
这是一种非常好的分担责任的方式。

165
00:08:55,330 --> 00:08:57,143
如果你想这样看的话。

166
00:08:58,500 --> 00:09:00,860
但是有了这个，如果我现在重新加载，

167
00:09:00,860 --> 00:09:02,630
我确认一个空洞的目标，

168
00:09:02,630 --> 00:09:06,040
我们现在也有了关闭这个对话框的按钮。

169
00:09:06,040 --> 00:09:07,930
这非常有用。

170
00:09:07,930 --> 00:09:09,640
但这又不是什么新鲜事，

171
00:09:09,640 --> 00:09:13,080
这只是一个很好的模式，也不错，

172
00:09:13,080 --> 00:09:16,410
但这并没有显示任何新功能。

173
00:09:16,410 --> 00:09:19,010
好吧，接下来我们将深入研究一个新功能

174
00:09:19,010 --> 00:09:22,693
因为我们当前的实现有一个小问题。