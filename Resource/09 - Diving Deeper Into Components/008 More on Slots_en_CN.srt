1
00:00:02,140 --> 00:00:05,100
因此，插槽显然是一个重要特征。

2
00:00:05,100 --> 00:00:07,660
它们给了我们更多的灵活性

3
00:00:07,660 --> 00:00:09,410
并允许我们做事，

4
00:00:09,410 --> 00:00:10,740
我们真的做不到

5
00:00:10,740 --> 00:00:13,570
或者没有插槽我们就无法真正构建。

6
00:00:13,570 --> 00:00:15,780
现在，我还没有完成插槽，

7
00:00:15,780 --> 00:00:18,220
我们可以介绍更多关于它们的内容。

8
00:00:18,220 --> 00:00:22,150
例如，您不能提供默认的广告位内容。

9
00:00:22,150 --> 00:00:23,360
所以，我不是说

10
00:00:23,360 --> 00:00:26,840
您有一个默认且未命名的插槽

11
00:00:26,840 --> 00:00:28,710
内容将去哪里

12
00:00:28,710 --> 00:00:30,820
不针对不同的名称，

13
00:00:30,820 --> 00:00:33,210
但我的意思是，如果你有空位，

14
00:00:33,210 --> 00:00:35,580
不接收任何内容，

15
00:00:35,580 --> 00:00:39,530
然后这个插槽可以呈现一些默认内容，

16
00:00:39,530 --> 00:00:42,320
例如，在标题中，

17
00:00:42,320 --> 00:00:44,010
我们可以添加默认内容

18
00:00:44,010 --> 00:00:45,280
通过添加内容

19
00:00:45,280 --> 00:00:47,980
在我们的插槽标签之间。

20
00:00:47,980 --> 00:00:51,050
让我们在这里说 h2 标签

21
00:00:51,050 --> 00:00:53,130
我说默认的地方，

22
00:00:53,130 --> 00:00:54,903
只是为了展示这是如何工作的。

23
00:00:56,180 --> 00:00:57,540
这确实很有意义

24
00:00:57,540 --> 00:00:59,280
对于这个特定的组件，

25
00:00:59,280 --> 00:01:01,390
但你绝对可以拥有组件

26
00:01:01,390 --> 00:01:04,860
一些默认内容可能有意义。

27
00:01:04,860 --> 00:01:06,650
现在，如果你添加这样一个元素，

28
00:01:06,650 --> 00:01:07,890
如果你添加内容

29
00:01:07,890 --> 00:01:09,850
在您的插槽标签之间，

30
00:01:09,850 --> 00:01:13,780
默认情况下，这现在不可见

31
00:01:13,780 --> 00:01:15,670
因为所有的地方

32
00:01:15,670 --> 00:01:17,630
我在哪里使用基卡

33
00:01:17,630 --> 00:01:20,610
确实为标题插槽提供内容。

34
00:01:20,610 --> 00:01:22,180
既是徽章名单，

35
00:01:22,180 --> 00:01:24,380
以及用户信息组件，

36
00:01:24,380 --> 00:01:27,303
两者都为标题提供内容。

37
00:01:28,680 --> 00:01:30,120
但是让我们说徽章列表

38
00:01:30,120 --> 00:01:33,870
这里不会有它的 v-slot 标头模板。

39
00:01:33,870 --> 00:01:35,930
所以，它不提供任何内容

40
00:01:35,930 --> 00:01:37,123
对于标题插槽。

41
00:01:38,360 --> 00:01:39,950
如果你删除它，

42
00:01:39,950 --> 00:01:43,710
您现在看到该组件中的默认值，

43
00:01:43,710 --> 00:01:47,030
因为现在插槽后备内容，

44
00:01:47,030 --> 00:01:50,230
正在显示该插槽的默认内容。

45
00:01:50,230 --> 00:01:53,763
当然，这对某些组件很有用。

46
00:01:55,130 --> 00:01:56,050
现在我们可以争论

47
00:01:56,050 --> 00:01:59,240
如果它对这个特定组件有用。

48
00:01:59,240 --> 00:02:00,820
为什么要办卡

49
00:02:00,820 --> 00:02:03,510
它应该只是一个包装器

50
00:02:03,510 --> 00:02:05,840
这给了我们一些视觉造型，

51
00:02:05,840 --> 00:02:08,759
为什么应该有一个默认标题？

52
00:02:08,759 --> 00:02:11,290
毕竟你不知道内容是什么

53
00:02:11,290 --> 00:02:14,290
那将被传递到卡将大约。

54
00:02:14,290 --> 00:02:17,010
所以，渲染一些默认标题

55
00:02:17,010 --> 00:02:19,083
可能确实很有意义。

56
00:02:20,030 --> 00:02:22,020
还是留在这里供大家参考

57
00:02:22,020 --> 00:02:24,600
但当然这只是一个例子。

58
00:02:24,600 --> 00:02:26,730
但你可以在这种情况下

59
00:02:26,730 --> 00:02:29,110
你不知道你是否真的需要

60
00:02:29,110 --> 00:02:31,180
这里的插槽元素，

61
00:02:31,180 --> 00:02:33,953
您还可以使用另一个不错的功能。

62
00:02:35,410 --> 00:02:39,120
如果我们不渲染这个默认的后备内容，

63
00:02:39,120 --> 00:02:42,720
我们的徽章列表卡没有任何标题。

64
00:02:42,720 --> 00:02:45,100
但是如果我们检查 HTML 标记，

65
00:02:45,100 --> 00:02:49,250
我们当然看到它有一个空的标题元素。

66
00:02:49,250 --> 00:02:51,810
虽然我们在屏幕上看不到它，

67
00:02:51,810 --> 00:02:54,270
这在语义上并不理想

68
00:02:54,270 --> 00:02:56,500
有一个空的 HTML 元素

69
00:02:56,500 --> 00:02:58,210
躺在大教堂里。

70
00:02:58,210 --> 00:03:01,010
我不知道，我不想拥有那个。

71
00:03:01,010 --> 00:03:03,610
您可以在这里使用另一个很酷的功能。

72
00:03:03,610 --> 00:03:07,160
在您定义插槽的组件中，

73
00:03:07,160 --> 00:03:11,700
你得到一个特别的vue 提供的属性。

74
00:03:11,700 --> 00:03:15,410
如果我在这里添加挂载的生命周期，我们可以看到它。

75
00:03:15,410 --> 00:03:17,240
然后让我们控制台日志，

76
00:03:17,240 --> 00:03:20,290
这个美元符号插槽。

77
00:03:20,290 --> 00:03:21,540
美元符号插槽

78
00:03:21,540 --> 00:03:24,950
是 vue 提供的一个数字内置属性。

79
00:03:24,950 --> 00:03:26,830
它保存着信息

80
00:03:26,830 --> 00:03:28,810
关于插槽数据

81
00:03:28,810 --> 00:03:32,573
该组件接收其不同的插槽。

82
00:03:33,800 --> 00:03:35,460
所以，如果我保存它，

83
00:03:35,460 --> 00:03:36,710
打开开发者工具

84
00:03:36,710 --> 00:03:39,450
并敢于使用 JavaScript 控制台并重新加载，

85
00:03:39,450 --> 00:03:42,630
我们在这里看到队列控制台日志。

86
00:03:42,630 --> 00:03:44,030
为什么我们看到两个？

87
00:03:44,030 --> 00:03:48,050
因为我们使用了有两次插槽的组件。

88
00:03:48,050 --> 00:03:49,950
我们在用户信息中使用它

89
00:03:49,950 --> 00:03:52,430
我们在徽章列表中使用它。

90
00:03:52,430 --> 00:03:53,830
所以，每次这个组件

91
00:03:53,830 --> 00:03:54,710
习惯了

92
00:03:54,710 --> 00:03:56,320
安装被调用

93
00:03:56,320 --> 00:03:57,970
因为这个基卡组件

94
00:03:57,970 --> 00:04:00,910
被创建和安装两次。

95
00:04:00,910 --> 00:04:02,910
显然，因为我们使用了两次

96
00:04:02,910 --> 00:04:06,270
因此我们两次得到这个控制台日志。

97
00:04:06,270 --> 00:04:08,170
现在，有趣的是，

98
00:04:08,170 --> 00:04:10,290
在那些物体中，

99
00:04:10,290 --> 00:04:13,920
我们可以访问我们提供的不同插槽。

100
00:04:13,920 --> 00:04:16,890
所以，我们实际上可以在这里访问点标题

101
00:04:16,890 --> 00:04:19,420
因为我们这里有一个名为 header 的插槽。

102
00:04:19,420 --> 00:04:21,680
我们还可以访问点默认值

103
00:04:21,680 --> 00:04:23,313
因为我们有一个默认插槽。

104
00:04:24,540 --> 00:04:26,230
现在，如果我访问点标题

105
00:04:26,230 --> 00:04:28,440
我们会看到一些有趣的东西。

106
00:04:28,440 --> 00:04:29,650
如果我重新加载，

107
00:04:29,650 --> 00:04:31,820
最后我们还看到两个输出，

108
00:04:31,820 --> 00:04:33,810
这个和这个

109
00:04:33,810 --> 00:04:35,360
我们看到两个输出

110
00:04:35,360 --> 00:04:37,550
原因与前面解释的相同。

111
00:04:37,550 --> 00:04:39,050
但有趣的是，

112
00:04:39,050 --> 00:04:42,120
我们在这里看到过这个奇怪的输出，

113
00:04:42,120 --> 00:04:45,390
但我们在其他时间看到未定义。

114
00:04:45,390 --> 00:04:47,260
现在，这里未定义

115
00:04:47,260 --> 00:04:49,040
来自使用

116
00:04:49,040 --> 00:04:50,730
基卡组件

117
00:04:50,730 --> 00:04:52,760
在徽章列表组件中。

118
00:04:52,760 --> 00:04:54,880
我们不提供内容

119
00:04:54,880 --> 00:04:56,230
对于标题插槽。

120
00:04:56,230 --> 00:04:58,390
因此在基卡组件中

121
00:04:58,390 --> 00:05:02,560
当我尝试访问此提供的内容时，可以说，

122
00:05:02,560 --> 00:05:05,600
当这个基卡组件时我得到未定义

123
00:05:05,600 --> 00:05:08,210
为徽章列表创建。

124
00:05:08,210 --> 00:05:11,070
现在这是我们可以在这里使用的东西。

125
00:05:11,070 --> 00:05:12,720
在这个标题元素上，

126
00:05:12,720 --> 00:05:14,590
我们可以添加 v-if

127
00:05:14,590 --> 00:05:18,990
并检查插槽标题是否真实。

128
00:05:18,990 --> 00:05:20,250
所以，如果它是未定义的，

129
00:05:20,250 --> 00:05:21,520
这将是虚假的

130
00:05:21,520 --> 00:05:23,320
因此这个标题元素

131
00:05:23,320 --> 00:05:24,533
不会被渲染。

132
00:05:26,341 --> 00:05:28,360
所以如果我现在保存并重新加载，

133
00:05:28,360 --> 00:05:29,800
我们得到相同的日志。

134
00:05:29,800 --> 00:05:32,440
但是如果我检查这个徽章列表组件，

135
00:05:32,440 --> 00:05:34,800
你现在看到标题不见了

136
00:05:35,760 --> 00:05:38,900
当然，这只是一个小小的改进。

137
00:05:38,900 --> 00:05:41,410
它也肯定更高级一些，

138
00:05:41,410 --> 00:05:42,810
但我希望你明白

139
00:05:42,810 --> 00:05:44,270
我们在这里做什么。

140
00:05:44,270 --> 00:05:45,800
带有美元符号插槽，

141
00:05:45,800 --> 00:05:48,550
我们可以检查我们是否确实收到了数据

142
00:05:48,550 --> 00:05:50,110
对于特定的插槽。

143
00:05:50,110 --> 00:05:51,450
如果我们不这样做，

144
00:05:51,450 --> 00:05:52,900
我们可以使用这些信息

145
00:05:52,900 --> 00:05:55,183
不渲染某个元素。

146
00:05:56,510 --> 00:05:58,160
标题仍然可以正常工作

147
00:05:58,160 --> 00:05:59,760
进入用户信息组件。

148
00:05:59,760 --> 00:06:02,120
DARE 基卡输出到标头149
00:06:02,120 --> 00:06:05,870
因为敢于使用基卡和用户信息，

150
00:06:05,870 --> 00:06:08,350
我们确实为标题提供内容。

151
00:06:08,350 --> 00:06:10,910
这只是使用和徽章列表

152
00:06:10,910 --> 00:06:12,630
我们也使用基卡，

153
00:06:12,630 --> 00:06:14,890
我们不提供标题内容的地方

154
00:06:15,800 --> 00:06:18,570
因此，我们删除了标题。

155
00:06:18,570 --> 00:06:19,640
这就是我们可以使用的方式

156
00:06:19,640 --> 00:06:22,063
这个美元符号插槽信息。

157
00:06:23,630 --> 00:06:26,200
现在还有一件事是关于插槽的，

158
00:06:26,200 --> 00:06:27,880
我还想提一下。

159
00:06:27,880 --> 00:06:31,270
在你使用组件的地方

160
00:06:31,270 --> 00:06:32,930
提供插槽。

161
00:06:32,930 --> 00:06:33,770
所以，在我们的例子中，

162
00:06:33,770 --> 00:06:36,020
在徽章列表和用户信息中，

163
00:06:36,020 --> 00:06:37,780
我们确实提供插槽内容

164
00:06:37,780 --> 00:06:38,820
有了这个模板

165
00:06:38,820 --> 00:06:41,150
和 v-slots 指令，

166
00:06:41,150 --> 00:06:44,190
就像 v-bind 和 v-on 一样，

167
00:06:44,190 --> 00:06:46,740
v-slot 有一个简写形式。

168
00:06:46,740 --> 00:06:49,090
你完全可以这样写，

169
00:06:49,090 --> 00:06:52,360
但您也可以将其替换为井号。

170
00:06:52,360 --> 00:06:55,140
所以，哈希头也意味着相同

171
00:06:55,140 --> 00:06:57,450
作为 v-slot 冒号标题。

172
00:06:57,450 --> 00:06:59,400
这只是有点短。

173
00:06:59,400 --> 00:07:00,280
我们可以在这里做同样的事情

174
00:07:00,280 --> 00:07:01,570
对于默认插槽。

175
00:07:01,570 --> 00:07:03,220
当然，我们也可以这样做

176
00:07:03,220 --> 00:07:04,630
在徽章列表中

177
00:07:04,630 --> 00:07:08,100
并像这样定位默认值。

178
00:07:08,100 --> 00:07:08,933
所以，我们可以这样写

179
00:07:08,933 --> 00:07:10,300
以更短的方式。

180
00:07:10,300 --> 00:07:12,770
这样我们就得到了和以前一样的输出

181
00:07:12,770 --> 00:07:15,250
我们没有错误，一切正常，

182
00:07:15,250 --> 00:07:17,250
但现在我们在这里使用这个速记。