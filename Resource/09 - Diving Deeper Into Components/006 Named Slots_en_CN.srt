1
00:00:02,140 --> 00:00:03,990
既然我们了解了插槽，

2
00:00:03,990 --> 00:00:06,930
我们当然可以使用我们的基卡插槽

3
00:00:06,930 --> 00:00:09,010
也在徽章列表中。

4
00:00:09,010 --> 00:00:11,260
在那里，我也有一个部分

5
00:00:11,260 --> 00:00:13,330
应该有这张卡的样子。

6
00:00:13,330 --> 00:00:16,480
所以我们可以在这里删除这个部分的样式，

7
00:00:16,480 --> 00:00:17,990
不是 h2 样式。

8
00:00:17,990 --> 00:00:20,560
我想保留这个组件独有的，

9
00:00:20,560 --> 00:00:21,890
但部分样式

10
00:00:22,980 --> 00:00:27,780
然后在这里使用我们的 base-card 组件来包装它，

11
00:00:27,780 --> 00:00:30,903
在我们的例子中，在 h2 标签中的所有列表上。

12
00:00:32,470 --> 00:00:36,290
所以使用 base-card 作为这个内容的包装器

13
00:00:36,290 --> 00:00:39,800
现在将确保它再次看起来像以前，

14
00:00:39,800 --> 00:00:42,960
但现在我们有了这个可重复使用的卡片组件

15
00:00:42,960 --> 00:00:45,603
我们可以在任何需要这种外观的地方使用它。

16
00:00:47,050 --> 00:00:50,250
但这还不是全部，您可以使用插槽。

17
00:00:50,250 --> 00:00:53,420
很高兴我们能够传递动态内容

18
00:00:53,420 --> 00:00:57,430
在我们自己的组件的开始和结束标签之间。

19
00:00:57,430 --> 00:01:00,100
但有时你也有这样的场景

20
00:01:00,100 --> 00:01:04,063
您的自定义组件应该有多个插槽。

21
00:01:05,160 --> 00:01:06,840
实际上，我可以在这里展示

22
00:01:06,840 --> 00:01:08,660
在此 BaseCard 的示例中。

23
00:01:08,660 --> 00:01:11,820
目前它只有一个插槽，

24
00:01:11,820 --> 00:01:13,550
但这并非不现实

25
00:01:13,550 --> 00:01:15,410
它应该有两个插槽，

26
00:01:15,410 --> 00:01:18,940
让我们说一个标题的插槽

27
00:01:18,940 --> 00:01:21,123
和一个主要内容的插槽。

28
00:01:21,970 --> 00:01:26,280
所以在 BaseCard 中，我们可以添加一个 header 组件

29
00:01:27,920 --> 00:01:30,340
确保我们始终拥有相同的结构

30
00:01:30,340 --> 00:01:32,410
例如，对于每张卡

31
00:01:32,410 --> 00:01:36,893
然后在这里，我们也想像这样添加一个插槽。

32
00:01:38,460 --> 00:01:40,930
但是当然现在我们有两个插槽

33
00:01:40,930 --> 00:01:43,840
因此 Vue 不会真正知道

34
00:01:43,840 --> 00:01:46,500
提供的内容应该去哪里。

35
00:01:46,500 --> 00:01:49,540
所以这就是为什么如果你使用多个插槽，

36
00:01:49,540 --> 00:01:52,200
您可以将名称添加到插槽

37
00:01:52,200 --> 00:01:55,763
使用 slot 元素上的名称、属性。

38
00:01:57,660 --> 00:02:00,280
在这里我们可以给它一个标题的名称，

39
00:02:00,280 --> 00:02:01,690
但这个名字取决于你。

40
00:02:01,690 --> 00:02:03,100
它可以是任何东西，

41
00:02:03,100 --> 00:02:06,100
不必是包装元素的名称。

42
00:02:06,100 --> 00:02:08,509
您不必命名所有插槽。

43
00:02:08,509 --> 00:02:10,930
如果您留下一个未命名的插槽，

44
00:02:10,930 --> 00:02:13,010
这将是默认插槽，

45
00:02:13,010 --> 00:02:16,990
但您必须只有一个未命名的插槽。

46
00:02:16,990 --> 00:02:21,060
现在您可以将内容分配到不同的插槽，

47
00:02:21,060 --> 00:02:23,150
例如在 UserInfo 中，

48
00:02:23,150 --> 00:02:27,510
我们现在可以在这里转到我们的标题

49
00:02:27,510 --> 00:02:30,800
现在在这里我想告诉 Vue 这个内容，

50
00:02:30,800 --> 00:02:32,790
h3 标签和基本标签

51
00:02:32,790 --> 00:02:34,900
应该去标题槽

52
00:02:34,900 --> 00:02:39,110
为此，您用模板标签包装它，

53
00:02:39,110 --> 00:02:42,120
这是一个默认的 HTML 元素

54
00:02:42,120 --> 00:02:44,320
在那个模板标签上，

55
00:02:44,320 --> 00:02:47,560
其中包含应该进入您的名称槽的内容，

56
00:02:47,560 --> 00:02:52,170
您添加了一个特殊指令，即 v-slot 指令。

57
00:02:52,170 --> 00:02:55,910
v-slot 指令可以用来让 Vue 知道

58
00:02:55,910 --> 00:02:58,223
某些内容应该去哪里。

59
00:02:59,870 --> 00:03:02,640
现在，您将让 Vue 知道内容应该放在哪里

60
00:03:02,640 --> 00:03:05,360
通过向该指令添加参数，

61
00:03:05,360 --> 00:03:07,370
你通过添加一个冒号来做到这一点，

62
00:03:07,370 --> 00:03:09,780
然后是您的插槽的名称。

63
00:03:09,780 --> 00:03:13,910
现在我在这里有一个名称为 header 的命名插槽

64
00:03:13,910 --> 00:03:17,880
因此我们可以在这里添加标题作为参数。

65
00:03:17,880 --> 00:03:21,380
这告诉 Vue 模板里面的内容

66
00:03:21,380 --> 00:03:23,083
将转到这个命名的插槽。

67
00:03:24,470 --> 00:03:25,490
现在作为旁注，

68
00:03:25,490 --> 00:03:28,120
模板是一个默认的 HTML 标签，

69
00:03:28,120 --> 00:03:30,760
它不会在屏幕上呈现任何东西，

70
00:03:30,760 --> 00:03:32,983
这就是为什么我们在这里将其用作容器的原因。

71
00:03:34,060 --> 00:03:35,920
现在，如果你还有内容，

72
00:03:35,920 --> 00:03:38,790
不在带有插槽的模板中，

73
00:03:38,790 --> 00:03:42,763
该内容将自动转到默认插槽。

74
00:03:43,820 --> 00:03:45,480
所以如果我保存它，

75
00:03:45,480 --> 00:03:47,510
看起来和以前差不多

76
00:03:47,510 --> 00:03:49,350
但我们可以说有些事情发生了变化

77
00:03:49,350 --> 00:03:51,470
因为现在是标签，这里是徽章

78
00:03:51,470 --> 00:03:53,890
不再在名称旁边

79
00:03:53,890 --> 00:03:56,070
它不再在名称旁边

80
00:03:56,070 --> 00:03:59,200
因为我们在 UserInfo 中不再有标题，

81
00:03:59,200 --> 00:04:02,310
相反，我们有发送此内容的模板

82
00:04:02,310 --> 00:04:04,113
进入 BaseCard 的标题。

83
00:04:06,090 --> 00:04:08,180
由于标题的样式，

84
00:04:08,180 --> 00:04:09,570
哪个负责

85
00:04:09,570 --> 00:04:12,250
用于将徽章放在标题旁边

86
00:04:12,250 --> 00:04:16,529
仍在 UserInfo 中，并且范围仅限于此组件，

87
00:04:16,529 --> 00:04:20,670
它不会影响 BaseCard 中的标题。

88
00:04:20,670 --> 00:04:22,470
我们要注意造型

89
00:04:22,470 --> 00:04:23,930
不过在接下来的讲座中。

90
00:04:23,930 --> 00:04:25,520
然而，在我们这样做之前，

91
00:04:25,520 --> 00:04:27,580
让我去徽章列表

92
00:04:27,580 --> 00:04:31,660
在这里，我想将此 h2 标签发送到标题中。

93
00:04:31,660 --> 00:04:33,493
再次，我们需要一个模板，

94
00:04:36,180 --> 00:04:40,520
用它包裹 h2，然后添加 v-slot:header。

95
00:04:40,520 --> 00:04:45,310
您还可以更明确地说明这一点，

96
00:04:45,310 --> 00:04:47,840
其余的将进入默认插槽

97
00:04:47,840 --> 00:04:49,583
通过在此处添加模板，

98
00:04:50,460 --> 00:04:52,540
围绕它添加一个模板

99
00:04:52,540 --> 00:04:55,940
然后添加 v-slot:default。

100
00:04:55,940 --> 00:04:57,940
默认为保留名称

101
00:04:57,940 --> 00:04:59,230
就像名字所暗示的那样，

102
00:04:59,230 --> 00:05:01,893
它始终以默认插槽为目标。

103
00:05:03,210 --> 00:05:04,610
所以我要在这里做这个

104
00:05:04,610 --> 00:05:06,800
以及在 UserInfo 组件中

105
00:05:06,800 --> 00:05:09,890
非常清楚哪些内容去哪里

106
00:05:09,890 --> 00:05:12,560
并且很明显我没有忘记

107
00:05:12,560 --> 00:05:14,740
将此分配给任何插槽，

108
00:05:14,740 --> 00:05:17,843
但我希望它进入默认插槽。

109
00:05:19,010 --> 00:05:21,970
所以这就是我添加这个默认插槽模板的原因

110
00:05:21,970 --> 00:05:25,520
到这里的 UserInfo 和 BadgeList。

111
00:05:25,520 --> 00:05:27,680
但是，这就是我们得到的。

112
00:05:27,680 --> 00:05:30,280
现在让我们在这里探索一下样式

113
00:05:30,280 --> 00:05:33,563
让我们看看在使用插槽时如何解决这个问题。