1
00:00:02,120 --> 00:00:04,270
现在插槽是一个重要功能

2
00:00:04,270 --> 00:00:05,500
正如你现在所知道的，

3
00:00:05,500 --> 00:00:07,580
都是相当强大的功能

4
00:00:07,580 --> 00:00:09,420
你可以和他们一起做很多事情，

5
00:00:09,420 --> 00:00:10,950
如您所知，在 Vue 中。

6
00:00:10,950 --> 00:00:13,100
现在还有关于插槽的最后一件事

7
00:00:13,100 --> 00:00:14,720
我也想在这里提一下。

8
00:00:14,720 --> 00:00:16,340
绝对是先进的

9
00:00:16,340 --> 00:00:18,300
但值得了解。

10
00:00:18,300 --> 00:00:21,223
为此，我将创建一个新组件

11
00:00:21,223 --> 00:00:25,860
CourseGoals.vue 我要在这里添加一个模板

12
00:00:25,860 --> 00:00:28,750
在那个模板中我想输出一个列表。

13
00:00:28,750 --> 00:00:29,850
暂时

14
00:00:29,850 --> 00:00:32,770
我不会太在意样式等等。

15
00:00:32,770 --> 00:00:35,410
我只想专注于这个老虎机功能

16
00:00:35,410 --> 00:00:37,030
我想给你看。

17
00:00:37,030 --> 00:00:38,780
所以我有无序列表

18
00:00:38,780 --> 00:00:40,850
我这里有一个脚本

19
00:00:40,850 --> 00:00:44,170
为这个组件定义我的配置对象，

20
00:00:44,170 --> 00:00:46,490
假设我们有一些数据

21
00:00:46,490 --> 00:00:48,070
我们在这里有一些目标

22
00:00:48,070 --> 00:00:49,560
这当然可以是动态的，

23
00:00:49,560 --> 00:00:50,570
但就目前而言

24
00:00:50,570 --> 00:00:52,290
我会这样为他们辩护，

25
00:00:52,290 --> 00:00:56,883
简单的字符串，比如完成课程并学习 Vue。

26
00:00:59,390 --> 00:01:02,170
所以这里绝对没有什么太花哨的。

27
00:01:02,170 --> 00:01:03,030
现在当然，

28
00:01:03,030 --> 00:01:07,560
我们可以在这里使用 v-for 渲染列表项

29
00:01:07,560 --> 00:01:10,950
通过循环我们的目标，你学到了它。

30
00:01:10,950 --> 00:01:12,960
我们也可以添加那个键

31
00:01:12,960 --> 00:01:15,190
例如，将其设置为我们的目标。

32
00:01:15,190 --> 00:01:16,250
所以对于那个字符串，

33
00:01:16,250 --> 00:01:19,033
假设每个字符串在此数组中都是唯一的。

34
00:01:20,370 --> 00:01:23,240
然后当然我们可以在这里输出我们的目标

35
00:01:23,240 --> 00:01:26,940
现在我们可以去 App.vue 例如

36
00:01:26,940 --> 00:01:30,380
在那里，导入这个新创建的组件。

37
00:01:30,380 --> 00:01:35,380
所以从'./components/CourseGoals.vue'导入CourseGoals

38
00:01:38,020 --> 00:01:42,360
之后，将其注册为本地组件，

39
00:01:42,360 --> 00:01:44,793
这样我们就可以在此处的模板中使用它。

40
00:01:46,290 --> 00:01:47,450
所以让我们这样做。

41
00:01:47,450 --> 00:01:52,450
这将简单地将其添加到课程目标中，就像这样。

42
00:01:53,320 --> 00:01:55,750
所以现在我在这里添加了我的组件

43
00:01:55,750 --> 00:01:57,410
因此我们在这里看到了目标。

44
00:01:57,410 --> 00:01:59,860
正如我所提到的，样式已关闭

45
00:01:59,860 --> 00:02:01,870
但这不是这里的重点。

46
00:02:01,870 --> 00:02:05,010
现在，这与插槽有什么关系？

47
00:02:05,010 --> 00:02:07,810
有时如果你正在构建一个组件

48
00:02:07,810 --> 00:02:10,380
您可能想与我们的员工分享

49
00:02:10,380 --> 00:02:11,620
与我们的同事

50
00:02:11,620 --> 00:02:13,770
或者以不同的方式使用

51
00:02:13,770 --> 00:02:15,430
在一个更大的项目中，

52
00:02:15,430 --> 00:02:16,263
你想做

53
00:02:16,263 --> 00:02:20,110
该组件的某些方面可定制。

54
00:02:20,110 --> 00:02:22,930
例如在这里我们可以有这个组件

55
00:02:22,930 --> 00:02:25,030
其中有 CourseGoals 数据

56
00:02:25,030 --> 00:02:28,690
这可能还有更多与此相关的逻辑

57
00:02:28,690 --> 00:02:30,620
然后它会关心

58
00:02:30,620 --> 00:02:33,003
将这些课程目标呈现到屏幕上。

59
00:02:33,970 --> 00:02:36,060
但是你可能想做一件事

60
00:02:36,060 --> 00:02:37,380
可定制。

61
00:02:37,380 --> 00:02:40,913
这就是每个列表项的内容。

62
00:02:41,750 --> 00:02:43,120
我的意思是，

63
00:02:43,120 --> 00:02:45,820
如果您只有列表项中的文本，

64
00:02:45,820 --> 00:02:48,580
如果你那里可能有一个 h2 标签，

65
00:02:48,580 --> 00:02:50,570
也许是多个元素。

66
00:02:50,570 --> 00:02:54,090
所以也许你想让它可定制。

67
00:02:54,090 --> 00:02:56,110
让这个核心技能组件

68
00:02:56,110 --> 00:02:58,930
可以在应用程序的不同部分使用，

69
00:02:58,930 --> 00:03:00,800
但列表项的内容

70
00:03:00,800 --> 00:03:03,333
每次使用时可能会有所不同。

71
00:03:04,190 --> 00:03:05,640
现在我们可以当然

72
00:03:05,640 --> 00:03:08,040
考虑在这里使用插槽。

73
00:03:08,040 --> 00:03:09,950
我们可以在这里输入一个插槽

74
00:03:09,950 --> 00:03:11,890
如果我们在这里有空位，

75
00:03:11,890 --> 00:03:14,480
HTML 标记的内容

76
00:03:14,480 --> 00:03:16,530
传递给列表项

77
00:03:16,530 --> 00:03:19,170
可以从地方内部定义

78
00:03:19,170 --> 00:03:21,033
使用课程目标的地方。

79
00:03:22,070 --> 00:03:25,700
这听起来就像我在这里尝试做的一样。

80
00:03:25,700 --> 00:03:28,700
所以在我使用课程目标的 App.vue 中，

81
00:03:28,700 --> 00:03:32,310
我现在可以为课程目标传递我的内容。

82
00:03:32,310 --> 00:03:35,040
我可以说我想要我的目标文本

83
00:03:35,040 --> 00:03:36,733
而不是这里的 h2 技术。

84
00:03:37,610 --> 00:03:39,930
但这就是问题开始的地方。

85
00:03:39,930 --> 00:03:42,330
是的，我可以传递我的标记，

86
00:03:42,330 --> 00:03:43,960
但我有一个大问题。

87
00:03:43,960 --> 00:03:47,520
我无法访问个人目标

88
00:03:47,520 --> 00:03:49,980
此列表项正在为其呈现。

89
00:03:49,980 --> 00:03:53,430
此目标变量仅在此处可用

90
00:03:53,430 --> 00:03:55,230
在课程目标内，

91
00:03:55,230 --> 00:03:58,240
但是应该在这里输出的标记

92
00:03:58,240 --> 00:04:01,360
正在从 App.vue here 传入。

93
00:04:01,360 --> 00:04:03,950
在这里我无法达到这些目标

94
00:04:03,950 --> 00:04:07,490
或目标变量，我在课程目标中使用。

95
00:04:07,490 --> 00:04:10,010
对于这个特定的场景

96
00:04:10,010 --> 00:04:12,390
你想在哪里建造类似的东西，

97
00:04:12,390 --> 00:04:14,200
Vue 还有另一个特点。

98
00:04:14,200 --> 00:04:17,260
它有作用域插槽。

99
00:04:17,260 --> 00:04:19,382
现在作用域插槽是关于什么的？

100
00:04:20,500 --> 00:04:24,790
作用域插槽的概念是关于

101
00:04:24,790 --> 00:04:27,290
让你传递数据

102
00:04:27,290 --> 00:04:31,130
从您定义插槽的组件内部

103
00:04:31,130 --> 00:04:32,650
到组件

104
00:04:32,650 --> 00:04:36,510
您在其中传递插槽的标记。

105
00:04:36,510 --> 00:04:38,560
你可以通过访问组件来做到这一点

106
00:04:38,560 --> 00:04:40,140
你有数据的地方

107
00:04:40,140 --> 00:04:41,980
以及定义插槽的位置，

108
00:04:41,980 --> 00:04:44,380
然后在插槽上

109
00:04:44,380 --> 00:04:47,950
你可以添加一个道具。例如，目标。

110
00:04:47,950 --> 00:04:49,470
这个名字由你决定。

111
00:04:49,470 --> 00:04:52,400
你也可以用 v-bind 绑定它

112
00:04:52,400 --> 00:04:55,660
或缩短为动态值，

113
00:04:55,660 --> 00:04:58,190
就我而言，目标。

114
00:04:58,190 --> 00:05:00,950
为了避免这里的命名混淆，

115
00:05:00,950 --> 00:05:02,390
我会给这个项目命名

116
00:05:02,390 --> 00:05:04,803
尽管您绝对也可以使用目标。

117
00:05:05,840 --> 00:05:06,940
没关系

118
00:05:06,940 --> 00:05:08,160
但为了更清楚，

119
00:05:08,160 --> 00:05:10,390
我将在这里命名我的道具

120
00:05:10,390 --> 00:05:11,900
并且超过了这个目标

121
00:05:11,900 --> 00:05:15,203
它是为每次迭代创建的，队列项。

122
00:05:16,880 --> 00:05:18,430
现在这些名字由你决定，

123
00:05:18,430 --> 00:05:22,260
但无论你在插槽上设置什么道具，

124
00:05:22,260 --> 00:05:24,520
所以在这个插槽元素上

125
00:05:24,520 --> 00:05:27,530
现在可以在该地方访问

126
00:05:27,530 --> 00:05:30,260
您在哪里传递该插槽的数据。

127
00:05:30,260 --> 00:05:32,300
在这种情况下，在 App.vue 中，

128
00:05:32,300 --> 00:05:35,453
我正在为我的插槽传递这个标记。

129
00:05:36,370 --> 00:05:38,850
在这里，我们现在可以访问数据

130
00:05:38,850 --> 00:05:40,810
通过添加模板

131
00:05:40,810 --> 00:05:43,230
围绕我们的插槽标记。

132
00:05:43,230 --> 00:05:46,820
所以围绕我们想要传递到那个插槽的标记

133
00:05:46,820 --> 00:05:49,780
在那个模板上，我们使用 v-slot

134
00:05:49,780 --> 00:05:50,890
或缩短的

135
00:05:51,850 --> 00:05:54,840
对于这种情况下的默认插槽，

136
00:05:54,840 --> 00:05:58,500
但同样的概念当然也适用于命名槽。

137
00:05:58,500 --> 00:06:00,040
而现在在这里，

138
00:06:00,040 --> 00:06:03,890
我们可以定义我们选择的任何名称，例如 slotProps

139
00:06:03,890 --> 00:06:06,010
但这个名字也取决于你。

140
00:06:06,010 --> 00:06:07,950
这只是一个变量的名称，

141
00:06:07,950 --> 00:06:10,970
你可以定义哪个 Vue 会给你

142
00:06:10,970 --> 00:06:12,260
和这个变量

143
00:06:12,260 --> 00:06:14,680
您为此变量获得的值。

144
00:06:14,680 --> 00:06:17,840
因此，在这种情况下，您为 slotProps 获得的值

145
00:06:17,840 --> 00:06:20,030
将永远是一个对象

146
00:06:20,030 --> 00:06:23,220
您在插槽上定义的所有道具

147
00:06:23,220 --> 00:06:24,463
被合并进去。

148
00:06:25,300 --> 00:06:30,300
因此，如果您在这里有另一个带有一些数据的道具，

149
00:06:30,460 --> 00:06:33,050
这也将是插槽道具的一部分

150
00:06:33,050 --> 00:06:34,060
这个对象的

151
00:06:35,140 --> 00:06:37,040
在另一个 prop 键下可访问。

152
00:06:40,030 --> 00:06:41,280
我实际上会把它留在这里

153
00:06:41,280 --> 00:06:42,450
用于演示目的。

154
00:06:42,450 --> 00:06:45,640
这里它没有绑定，它只是设置为一个字符串。

155
00:06:45,640 --> 00:06:48,920
所以现在在这里，我们得到了这个 slotProps 的东西

156
00:06:48,920 --> 00:06:50,620
我们能用它做什么？

157
00:06:50,620 --> 00:06:52,190
好吧，你现在可以使用它了

158
00:06:52,190 --> 00:06:55,210
例如这里的这个模板里面，

159
00:06:55,210 --> 00:06:59,790
在 h2 标签之间进行插值

160
00:06:59,790 --> 00:07:04,171
现在访问 slotProps.item。

161
00:07:04,171 --> 00:07:09,171
.item，因为我在我的插槽上添加了一个项目道具。

162
00:07:10,200 --> 00:07:12,260
如果您在这里选择了不同的名称，

163
00:07:12,260 --> 00:07:15,783
而不是项目，这里也是一个不同的名称。

164
00:07:17,350 --> 00:07:19,750
在此之下，我还将添加一段

165
00:07:19,750 --> 00:07:21,837
我在哪里输出 slotProps，

166
00:07:24,090 --> 00:07:27,510
现在在这里使用这个方括号符号

167
00:07:27,510 --> 00:07:30,820
这样就可以访问带有破折号的属性，

168
00:07:30,820 --> 00:07:32,740
然后提到另一个道具，

169
00:07:32,740 --> 00:07:35,020
我在这里定义的。

170
00:07:35,020 --> 00:07:38,100
这里很重要，Vue 不会转换

171
00:07:38,100 --> 00:07:41,250
这会自动转换为 CamelCase 表示法。

172
00:07:41,250 --> 00:07:46,250
因此，如果您在 CourseGoals 中有另一个带有破折号的道具，

173
00:07:46,970 --> 00:07:50,010
您需要在此处使用完全相同的名称访问它

174
00:07:50,010 --> 00:07:51,950
在您定义标记的地方，

175
00:07:51,950 --> 00:07:55,080
这就是为什么我在这里需要方括号符号，

176
00:07:55,080 --> 00:07:56,880
因为使用点符号

177
00:07:56,880 --> 00:07:59,130
这将是无效的 JavaScript 代码

178
00:07:59,130​​ --> 00:08:01,493
使用方括号表示法这是有效的。

179
00:08:03,670 --> 00:08:05,550
所以现在有了它，如果我们保存了它

180
00:08:05,550 --> 00:08:07,550
我们在这里看到我们的输出，

181
00:08:07,550 --> 00:08:10,740
包括来自另一个道具的点

182
00:08:10,740 --> 00:08:13,160
我为演示目的定义的。

183
00:08:13,160 --> 00:08:14,940
这希望能清楚地说明

184
00:08:14,940 --> 00:08:17,040
作用域插槽如何工作。

185
00:08:17,040 --> 00:08:20,140
这绝对是一个利基和高级功能

186
00:08:20,140 --> 00:08:22,540
你不会一直需要它，

187
00:08:22,540 --> 00:08:25,050
但有特定的场景

188
00:08:25,050 --> 00:08:28,180
在不可能建造你想要建造的东西的地方，

189
00:08:28,180 --> 00:08:30,190
如果这个功能不存在。

190
00:08:30,190 --> 00:08:33,010
这当然也是我在这里介绍它的原因，

191
00:08:33,010 --> 00:08:36,113
但请注意，这绝对是一个小众功能。

192
00:08:37,710 --> 00:08:39,919
现在有一个简化，我们可以在这里进行

193
00:08:39,919 --> 00:08:42,840
顺便说一句，如果您只针对一个广告位，

194
00:08:42,840 --> 00:08:44,780
这里只有默认插槽，

195
00:08:44,780 --> 00:08:48,130
您可以在此处删除该模板

196
00:08:48,130 --> 00:08:50,170
首先让我剪掉这个，

197
00:08:50,170 --> 00:08:52,810
删除这个不必要的模板包装，

198
00:08:52,810 --> 00:08:56,960
而是添加这个哈希默认 slotProps 东西

199
00:08:56,960 --> 00:08:59,960
直接在您的组件标签上。

200
00:08:59,960 --> 00:09:01,340
这只允许

201
00:09:01,340 --> 00:09:05,020
如果您的开始和结束标签之间的标记在这里

202
00:09:05,020 --> 00:09:07,980
应该完全进入一个插槽，

203
00:09:07,980 --> 00:09:09,630
进入这里的默认插槽。

204
00:09:09,630 --> 00:09:12,400
然后你可以在这里使用这个简化的代码，

205
00:09:12,400 --> 00:09:13,610
如您所见，它有效。

206
00:09:13,610 --> 00:09:15,690
然后这是最短的方法

207
00:09:15,690 --> 00:09:17,093
最后写这个。

208
00:09:18,200 --> 00:09:19,770
现在就是这样

209
00:09:19,770 --> 00:09:22,330
插槽和所有第一个作用域插槽。

210
00:09:22,330 --> 00:09:23,520
我知道很多，

211
00:09:23,520 --> 00:09:24,670
我们会看到它在行动

212
00:09:24,670 --> 00:09:26,810
在各种项目的整个课程中等，

213
00:09:26,810 --> 00:09:28,690
和范围插槽功能

214
00:09:28,690 --> 00:09:31,140
如上所述也是一个非常先进的

215
00:09:31,140 --> 00:09:32,293
和利基功能。