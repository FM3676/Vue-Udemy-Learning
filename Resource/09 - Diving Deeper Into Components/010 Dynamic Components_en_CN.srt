1
00:00:02,190 --> 00:00:05,010
是时候终于离开插槽了。

2
00:00:05,010 --> 00:00:08,973
在 App.vue 中，我要删除，

3
00:00:10,410 --> 00:00:12,720
到目前为止我一直在使用的所有组件，

4
00:00:12,720 --> 00:00:14,550
除了 TheHeader，

5
00:00:14,550 --> 00:00:16,210
因为我现在想清理 UI。

6
00:00:16,210 --> 00:00:19,430
我将把文件留在这里以供参考。

7
00:00:19,430 --> 00:00:22,870
但是现在让我在这里快速创建两个全新的组件，

8
00:00:22,870 --> 00:00:24,160
与

9
00:00:24,160 --> 00:00:27,190
我们之前使用的这个虚拟代码。

10
00:00:27,190 --> 00:00:30,570
假设我们有一个 ManageGoals.vue 文件

11
00:00:30,570 --> 00:00:33,413
和 ActiveGoals.vue 文件。

12
00:00:34,662 --> 00:00:36,770
ManageGoals 可以是一个组件，其中

13
00:00:36,770 --> 00:00:39,000
用户可以添加新的课程目标，

14
00:00:39,000 --> 00:00:40,870
ActiveGoals 是一个组件

15
00:00:40,870 --> 00:00:44,160
显示所有添加和活动目标的位置。

16
00:00:44,160 --> 00:00:46,650
不过，我们不会为此添加所有逻辑，

17
00:00:46,650 --> 00:00:48,530
因为我想给你看别的东西。

18
00:00:48,530 --> 00:00:49,960
因此，我会保持简单

19
00:00:49,960 --> 00:00:52,640
在这里只说主动目标

20
00:00:52,640 --> 00:00:55,120
在 ActiveGoal 组件的模板中

21
00:00:55,120 --> 00:00:57,403
这样我们就可以识别这个组件。

22
00:00:58,740 --> 00:01:00,280
在 ManageGoals 中，

23
00:01:00,280 --> 00:01:04,530
我将在我说管理目标的地方添加一个模板。

24
00:01:04,530 --> 00:01:07,610
我什至不会在这里添加脚本标签。

25
00:01:07,610 --> 00:01:10,540
我不会导出默认配置对象，

26
00:01:10,540 --> 00:01:13,260
因为如果它是空的，你甚至不需要导出它。

27
00:01:13,260 --> 00:01:15,240
可以这么说，

28
00:01:15,240 --> 00:01:17,820
自动为您导出和创建

29
00:01:17,820 --> 00:01:18,770
在幕后。

30
00:01:18,770 --> 00:01:20,620
然后你不需要定义它

31
00:01:20,620 --> 00:01:22,053
如果它是空的。

32
00:01:23,040 --> 00:01:26,450
所以你可以像这里一样拥有只有模板的组件

33
00:01:26,450 --> 00:01:30,530
现在我们可以将它们作为本地组件添加到 App.vue 中。

34
00:01:30,530 --> 00:01:34,889
我将从组件中导入 ActiveGoals

35
00:01:34,889 --> 00:01:36,850
ActiveGoals.vue 当然，

36
00:01:36,850 --> 00:01:39,317
并从中导入 ManageGoals

37
00:01:39,317 --> 00:01:44,313
./components/ManageGoals.vue 像这样。

38
00:01:46,260 --> 00:01:48,430
然后将两者都注册为

39
00:01:49,480 --> 00:01:51,664
在这种情况下，这里的本地组件，

40
00:01:51,664 --> 00:01:53,997
主动目标和管理目标。

41
00:01:55,100 --> 00:01:57,240
现在当然这不应该是一个惊喜。

42
00:01:57,240 --> 00:01:58,530
我们可以在这里使用它们

43
00:01:58,530 --> 00:02:02,420
active-goals 可以这样使用

44
00:02:02,420 --> 00:02:07,023
和 manage-goals 也可以这样使用。

45
00:02:08,759 --> 00:02:11,100
然后现在我的构建过程在这里

46
00:02:11,100 --> 00:02:12,840
抱怨事实

47
00:02:12,840 --> 00:02:14,810
我已经注册了组件，

48
00:02:14,810 --> 00:02:17,570
我没有使用，所以让我实际删除

49
00:02:17,570 --> 00:02:20,410
BadgeList、UserInfo 和 CourseGoals 来自这里，

50
00:02:20,410 --> 00:02:24,873
然后在这里注释掉那些导入。

51
00:02:25,850 --> 00:02:27,423
所以现在它正在重建。

52
00:02:28,990 --> 00:02:31,100
现在我们可以看到主动目标

53
00:02:31,100 --> 00:02:32,730
和管理屏幕上的目标。

54
00:02:32,730 --> 00:02:34,670
现在这当然不会太令人兴奋，

55
00:02:34,670 --> 00:02:37,360
但这是我想向您展示的很酷的功能。

56
00:02:37,360 --> 00:02:41,010
Vue 有这个动态组件的概念

57
00:02:41,010 --> 00:02:43,400
这就是它可以派上用场的地方。

58
00:02:43,400 --> 00:02:46,810
假设我们正在构建一个包含各种选项卡的组件，

59
00:02:46,810 --> 00:02:48,200
所以各种按钮到底，

60
00:02:48,200 --> 00:02:51,120
我们可以按它来显示不同的组件

61
00:02:51,120 --> 00:02:54,530
这样我们要么看到主动目标要么管理目标，

62
00:02:54,530 --> 00:02:57,150
但不是同时。

63
00:02:57,150 --> 00:03:00,260
为此，我们可以在这里设置标签按钮，

64
00:03:00,260 --> 00:03:04,910
主动目标，然后是我说的另一个按钮

65
00:03:04,910 --> 00:03:08,120
管理目标，所以我有这两个按钮

66
00:03:09,220 --> 00:03:10,970
喜欢这里的标签。

67
00:03:10,970 --> 00:03:12,570
当我按下一个按钮时，

68
00:03:12,570 --> 00:03:14,650
应显示相应的组件

69
00:03:14,650 --> 00:03:16,990
而其他组件不应该。

70
00:03:16,990 --> 00:03:19,243
现在这里我们如何实现这一点。

71
00:03:20,100 --> 00:03:23,827
我们可以在这里管理一些额外的数据，

72
00:03:23,827 --> 00:03:26,750
例如，选定的组件。

73
00:03:26,750 --> 00:03:30,050
最初让我们说这是主动目标。

74
00:03:30,050 --> 00:03:32,700
所以HTML标签名称，

75
00:03:32,700 --> 00:03:35,220
我们也在 Dum 中使用它。

76
00:03:35,220 --> 00:03:36,913
主动目标。

77
00:03:38,070 --> 00:03:41,630
然后我们在这里添加一个方法。

78
00:03:41,630 --> 00:03:43,150
所以我们添加方法键

79
00:03:44,920 --> 00:03:46,150
并在那里添加一个方法，

80
00:03:46,150 --> 00:03:47,150
设置选定组件

81
00:03:50,940 --> 00:03:54,580
我将组件作为参数，

82
00:03:54,580 --> 00:03:58,270
然后设置 this.selectedcomponent 等于该值

83
00:03:58,270 --> 00:04:00,220
我来这里作为一个论点。

84
00:04:00,220 --> 00:04:03,910
现在我们可以在此处将此方法绑定到按钮。

85
00:04:03,910 --> 00:04:06,050
所以点击一下我想打电话

86
00:04:06,050 --> 00:04:10,950
setSelectedComponent 并传入活动目标。

87
00:04:10,950 --> 00:04:14,780
单击“管理目标”按钮，

88
00:04:14,780 --> 00:04:19,040
我将调用 setSelectedComponent 并传入 manage-goals

89
00:04:21,209 --> 00:04:23,733
作为参数的值。

90
00:04:25,160 --> 00:04:26,860
现在这些是按钮，

91
00:04:26,860 --> 00:04:29,380
现在我们可以更改为选中的组件，

92
00:04:29,380 --> 00:04:34,100
我们可以在此处添加 v-if，这两个组件文本

93
00:04:34,100 --> 00:04:36,330
并检查 selectedComponent 是否相等

94
00:04:36,330 --> 00:04:40,650
到第二个组件的此处或此处的主动目标，

95
00:04:40,650 --> 00:04:44,093
如果 selectedComponent 等于 manage-goals。

96
00:04:45,980 --> 00:04:47,170
如果我现在保存它

97
00:04:48,040 --> 00:04:50,910
我们可以像标签一样使用它，我们可以切换

98
00:04:50,910 --> 00:04:52,380
这些组件之间。

99
00:04:52,380 --> 00:04:53,690
但这并不是什么新鲜事。

100
00:04:53,690 --> 00:04:55,670
这里我们只使用功能

101
00:04:55,670 --> 00:04:57,590
你已经了解了。

102
00:04:57,590 --> 00:04:59,600
现在，虽然你可以像这样构建它，

103
00:04:59,600 --> 00:05:01,870
如果你有越来越多的组件

104
00:05:01,870 --> 00:05:03,730
你想在哪个之间圈

105
00:05:03,730 --> 00:05:05,690
一直使用 v-if

106
00:05:05,690 --> 00:05:08,440
并一直重复那个 v-if 代码，

107
00:05:08,440 --> 00:05:10,500
很烦人。

108
00:05:10,500 --> 00:05:14,160
这就是为什么 Vue 有另一种方法来做到这一点。

109
00:05:14,160 --> 00:05:16,120
所以让我们在这里评论一下

110
00:05:16,120 --> 00:05:19,463
让我向您介绍动态组件。

111
00:05:20,710 --> 00:05:25,440
Vue 为您提供了一个可以使用的特殊 HTML 元素。

112
00:05:25,440 --> 00:05:27,323
组件元素。

113
00:05:28,850 --> 00:05:33,220
这是一个元素，Vue 提供的一个组件。

114
00:05:33,220 --> 00:05:35,330
有趣的是

115
00:05:35,330 --> 00:05:38,360
这个组件不会像这样单独工作。

116
00:05:38,360 --> 00:05:40,940
它不会在屏幕上显示任何内容。

117
00:05:40,940 --> 00:05:44,140
相反，它需要一个关键属性。

118
00:05:44,140 --> 00:05:46,670
这就是 is 属性。

119
00:05:46,670 --> 00:05:50,040
is 属性告诉组件，

120
00:05:50,040 --> 00:05:53,150
您定义的所有组件中的哪个组件

121
00:05:53,150 --> 00:05:56,180
应显示在此组件的位置。

122
00:05:56,180 --> 00:05:59,023
例如，我们可以将其设置为主动目标，

123
00:06:00,050 --> 00:06:02,070
但我们当然不想硬编码

124
00:06:02,070 --> 00:06:03,070
因为如果我们这样做了

125
00:06:03,070 --> 00:06:05,610
我们可以像这样使用主动目标。

126
00:06:05,610 --> 00:06:09,193
如果我们总是只显示那个组件。

127
00:06:09,193 --> 00:06:11,380
相反，我们想在这里做什么

128
00:06:11,380 --> 00:06:15,570
我们想绑定是动态的 v-bind

129
00:06:15,570 --> 00:06:17,760
或用速记。

130
00:06:17,760 --> 00:06:20,313
然后在这种情况下指向 selectedComponent，

131
00:06:21,360 --> 00:06:25,540
它将我们的组件 HTML 标签保存为值。

132
00:06:25,540 --> 00:06:27,850
最初是主动目标，

133
00:06:27,850 --> 00:06:29,440
在我们这里的方法中，

134
00:06:29,440 --> 00:06:33,120
最后，我们在主动目标和管理目标之间切换。

135
00:06:33,120 --> 00:06:35,573
哪些是我们的组件标签。

136
00:06:37,500 --> 00:06:39,240
我们告诉 Vue，

137
00:06:39,240 --> 00:06:42,720
该组件应该基本上交换自己

138
00:06:42,720 --> 00:06:45,820
对于 v-if active-goals 或 manage-goals。

139
00:06:45,820 --> 00:06:48,320
无论是当前ntly 存储在 selectedComponent 中。

140
00:06:49,810 --> 00:06:51,490
因此，如果我重新加载，

141
00:06:51,490 --> 00:06:54,110
我得到了和以前一样的行为，

142
00:06:54,110 --> 00:06:56,470
但现在代码更少了

143
00:06:56,470 --> 00:06:58,960
没有多个 v-if 语句，

144
00:06:58,960 --> 00:07:02,260
这当然使我们作为开发人员的生活更轻松。

145
00:07:02,260 --> 00:07:04,993
这意味着我们要编写的代码更少。