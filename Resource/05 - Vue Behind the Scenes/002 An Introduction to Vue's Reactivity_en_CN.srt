1
00:00:02,060 --> 00:00:03,490
现在对于这个模块，

2
00:00:03,490 --> 00:00:06,930
我为你准备了另一个非常简单的项目。

3
00:00:06,930 --> 00:00:08,260
你发现它附上了。

4
00:00:08,260 --> 00:00:11,570
我已经有了一个简单的 Vue 应用程序

5
00:00:11,570 --> 00:00:13,670
使用创建应用程序创建

6
00:00:13,670 --> 00:00:16,219
我们有两条数据，

7
00:00:16,219 --> 00:00:19,150
当前用户输入和消息

8
00:00:19,150 --> 00:00:21,310
我们有两种方法。

9
00:00:21,310 --> 00:00:23,880
一、改变当前用户输入

10
00:00:23,880 --> 00:00:25,900
到事件目标值。

11
00:00:25,900 --> 00:00:27,756
和一个设置当前消息

12
00:00:27,756 --> 00:00:29,770
到当前用户输入。

13
00:00:29,770 --> 00:00:33,890
所有这些都与一些 HTML 代码相关联。

14
00:00:33,890 --> 00:00:37,350
那是我们用 Vue 控制的部分。

15
00:00:37,350 --> 00:00:40,670
这是触发保存输入法的原因。

16
00:00:40,670 --> 00:00:43,400
这里我们触发了一个 set text 方法

17
00:00:43,400 --> 00:00:45,680
在这里我们输出消息。

18
00:00:45,680 --> 00:00:47,260
然后我们有一些风格，

19
00:00:47,260 --> 00:00:49,160
我们当然可以忽略。

20
00:00:49,160 --> 00:00:53,333
无论如何，这些主要是您已经知道的样式。

21
00:00:54,300 --> 00:00:57,030
现在这个应用程序非常简单，

22
00:00:57,030 --> 00:00:59,380
Vue 很棒，我可以在这里输入。

23
00:00:59,380 --> 00:01:02,830
如果我单击设置文本，这就是此处显示的消息。

24
00:01:02,830 --> 00:01:07,830
这是通过数据方法的组合来实现的

25
00:01:08,810 --> 00:01:11,070
然后当然是事件绑定

26
00:01:11,070 --> 00:01:12,450
触发了方法

27
00:01:12,450 --> 00:01:16,310
和插值输出消息数据。

28
00:01:16,310 --> 00:01:19,200
现在，这就是你将在本课程中学到的全部内容，

29
00:01:19,200 --> 00:01:23,280
我不会在这里再重复一遍让你厌烦。

30
00:01:23,280 --> 00:01:26,300
如果这仍然不清楚，你应该通过

31
00:01:26,300 --> 00:01:28,803
以前的讲座和模块再次。

32
00:01:29,860 --> 00:01:31,750
现在，我想在这里探索什么

33
00:01:31,750 --> 00:01:35,220
Vue 在幕后是如何做到这一点的。

34
00:01:35,220 --> 00:01:38,090
这里自动更新。

35
00:01:38,090 --> 00:01:40,800
如果我们在这里更改文本并设置它，

36
00:01:40,800 --> 00:01:45,800
我们作为用户看到的这部分页面是由 Vue 更新的。

37
00:01:47,150 --> 00:01:52,150
这就是 Vue 具有的内置响应性，

38
00:01:52,150 --> 00:01:54,490
这是它的核心功能之一。

39
00:01:54,490 --> 00:01:57,360
本质上被视为一件重要的事情。

40
00:01:57,360 --> 00:02:02,360
您在此处定义的数据是 Vue 跟踪的。

41
00:02:03,050 --> 00:02:07,200
我之前提到过它会在这里取这个数据对象

42
00:02:07,200 --> 00:02:12,200
并将您在此处的所有属性合并为一个全局

43
00:02:12,500 --> 00:02:15,840
在幕后管理对象，

44
00:02:15,840 --> 00:02:18,670
你的方法所在的同一个对象

45
00:02:18,670 --> 00:02:20,543
顺便合并进去。

46
00:02:21,860 --> 00:02:23,820
事实上，这就是正在发生的事情

47
00:02:23,820 --> 00:02:25,630
Vue 的幕后花絮。

48
00:02:25,630 --> 00:02:28,110
它还做其他事情，比如确保

49
00:02:28,110 --> 00:02:32,300
this 指向这个全局对象，

50
00:02:32,300 --> 00:02:34,100
但说到数据，

51
00:02:34,100 --> 00:02:37,473
Vue 所做的重要和关键的事情

52
00:02:37,473 --> 00:02:42,473
是否将您的数据对象变成了反应性数据对象

53
00:02:43,900 --> 00:02:47,390
通过基本上包装你的属性

54
00:02:47,390 --> 00:02:50,810
具有称为代理的 JavaScript 功能。

55
00:02:50,810 --> 00:02:53,170
在 JavaScript 中有一个内置功能，

56
00:02:53,170 --> 00:02:55,090
这被称为代理，

57
00:02:55,090 --> 00:02:57,890
Vue 在幕后利用

58
00:02:57,890 --> 00:03:02,590
在这里包装你的财产并得到通知

59
00:03:02,590 --> 00:03:05,260
每当您分配新值时，

60
00:03:05,260 --> 00:03:07,200
喜欢这里的消息。

61
00:03:07,200 --> 00:03:10,120
当我为消息设置一个新值时，

62
00:03:10,120 --> 00:03:12,794
无论数据是否是另一个数据属性

63
00:03:12,794 --> 00:03:16,200
或像这样的硬编码字符串，

64
00:03:16,200 --> 00:03:21,200
不管是什么，当你给消息分配一个新值时

65
00:03:21,360 --> 00:03:25,020
Vue 意识到了这一点。

66
00:03:25,020 --> 00:03:26,370
这很重要。

67
00:03:26,370 --> 00:03:30,780
如果 Vue 不会收到关于这个新任务的通知，

68
00:03:30,780 --> 00:03:34,960
它无法继续更新吃了你在屏幕上看到的东西。

69
00:03:34,960 --> 00:03:38,060
需要通过这样的更改来通知它

70
00:03:38,060 --> 00:03:41,210
以便它认识到它应该扫描

71
00:03:41,210 --> 00:03:44,140
用于使用的受控 HTML 代码

72
00:03:44,140 --> 00:03:46,740
例如经常改变的财产

73
00:03:46,740 --> 00:03:49,250
像这里一样，这里使用的消息。

74
00:03:49,250 --> 00:03:52,020
然后当它看到这些用法时

75
00:03:52,020 --> 00:03:54,310
它知道消息改变了，

76
00:03:54,310 --> 00:03:56,800
它输出到呈现的页面

77
00:03:56,800 --> 00:03:58,540
到用户看到的屏幕，

78
00:03:58,540 --> 00:04:00,400
它进入那个屏幕

79
00:04:00,400 --> 00:04:03,330
并在那里找到合适的地方

80
00:04:03,330 --> 00:04:06,700
显示此动态内容的位置

81
00:04:06,700 --> 00:04:09,550
并在屏幕上更新。

82
00:04:09,550 --> 00:04:11,850
这就是内置的反应性，

83
00:04:11,850 --> 00:04:15,283
Vue 在幕后所做和使用的。

84
00:04:16,250 --> 00:04:17,950
现在，它是如何工作的呢？

85
00:04:17,950 --> 00:04:22,270
我提到将使用称为代理的功能。

86
00:04:22,270 --> 00:04:24,493
让我们更详细地探索数据。