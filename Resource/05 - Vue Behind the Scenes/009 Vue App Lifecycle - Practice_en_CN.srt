1
00:00:02,480 --> 00:00:05,100
为了看到它的实际效果，我回到了 app.js，

2
00:00:05,100 --> 00:00:07,520
我会回到我的主 Vue 应用程序，

3
00:00:07,520 --> 00:00:10,030
这是具有此输入字段的那个。

4
00:00:10,030 --> 00:00:12,360
现在我提到了所有那些生命周期钩子，

5
00:00:12,360 --> 00:00:15,060
我提到这些将是方法

6
00:00:15,060 --> 00:00:16,760
您可以添加到您的 Vue 应用程序中。

7
00:00:16,760 --> 00:00:19,830
有了这个，我不是说你添加的方法

8
00:00:19,830 --> 00:00:22,000
在您的方法选项中。

9
00:00:22,000 --> 00:00:24,320
因为在那里，你真的只添加

10
00:00:24,320 --> 00:00:27,060
你计划给自己打电话的方法

11
00:00:27,060 --> 00:00:31,130
或者你想要调用的事件，比如点击。

12
00:00:31,130 --> 00:00:34,840
相反，您将它们添加到数据和方法旁边。

13
00:00:34,840 --> 00:00:37,970
在这个应用程序中你想要的任何地方。

14
00:00:37,970 --> 00:00:39,200
所以例如这里，

15
00:00:39,200 --> 00:00:42,960
在此应用程序配置对象的末尾。

16
00:00:42,960 --> 00:00:47,870
在这里，我们可以添加 beforeCreate 方法，

17
00:00:47,870 --> 00:00:50,650
我在幻灯片上展示了。

18
00:00:50,650 --> 00:00:53,030
您只需将其添加为这样的方法，

19
00:00:53,030 --> 00:00:55,763
在这里我们可以 console.log beforeCreate

20
00:00:56,610 --> 00:00:59,830
这样我们就可以知道它何时运行。

21
00:00:59,830 --> 00:01:02,640
当然，您可以做的不仅仅是在这里登录。

22
00:01:02,640 --> 00:01:06,420
您可以向服务器发送 HTTP 请求。

23
00:01:06,420 --> 00:01:10,053
你可以设置一个计时器，你可以做任何你需要做的事情。

24
00:01:11,010 --> 00:01:13,653
如果我现在再次扩展它，

25
00:01:14,770 --> 00:01:16,940
打开控制台并重新加载，

26
00:01:16,940 --> 00:01:19,873
你看到 beforeCreate 被记录在这里。

27
00:01:22,380 --> 00:01:25,970
实际上，我会在这里注释掉他的日志信息

28
00:01:25,970 --> 00:01:29,430
在最底部，这样我们就不会对此感到困惑。

29
00:01:29,430 --> 00:01:32,500
那么让我们再次回到我们的 Vue 应用程序，

30
00:01:32,500 --> 00:01:34,797
重新加载，我们看到 beforeCreate。

31
00:01:35,950 --> 00:01:40,950
如果我们做其他事情并转到此处的 Sources 选项卡

32
00:01:41,370 --> 00:01:43,740
在 Chrome 开发者工具中，

33
00:01:43,740 --> 00:01:47,370
我们实际上也可以在那里检查我们的源代码。

34
00:01:47,370 --> 00:01:49,590
我在这里向你展示这个

35
00:01:49,590 --> 00:01:52,600
因为我们可以用它做一些巧妙的事情。

36
00:01:52,600 --> 00:01:55,660
我们实际上可以在这里找到 beforeCreate 方法

37
00:01:55,660 --> 00:02:00,540
在 app.js 文件中并单击此处设置断点。

38
00:02:00,540 --> 00:02:04,260
结果，代码执行将暂停

39
00:02:04,260 --> 00:02:05,910
当达到这一点时。

40
00:02:05,910 --> 00:02:09,820
如果你现在重新加载页面，你会看到它在这里暂停，

41
00:02:09,820 --> 00:02:11,360
你总是可以继续

42
00:02:11,360 --> 00:02:13,410
通过单击蓝色播放按钮。

43
00:02:13,410 --> 00:02:14,580
但有趣的是，

44
00:02:14,580 --> 00:02:16,490
以及我这样做的原因

45
00:02:16,490 --> 00:02:19,270
是你看到屏幕上还没有任何东西。

46
00:02:19,270 --> 00:02:20,540
如我所说，

47
00:02:20,540 --> 00:02:24,080
在 beforeCreate 中，您不会在屏幕上看到任何内容。

48
00:02:24,080 --> 00:02:27,060
此时，实际上连 Vue 应用程序都没有

49
00:02:27,060 --> 00:02:29,033
将被完全初始化。

50
00:02:30,500 --> 00:02:33,320
所以让我点击这里的蓝色按钮继续

51
00:02:33,320 --> 00:02:36,143
并通过再次单击来删除断点。

52
00:02:37,120 --> 00:02:41,230
现在让我们添加第二个钩子，即创建的钩子。

53
00:02:41,230 --> 00:02:43,197
在这个时间点，

54
00:02:43,197 --> 00:02:46,460
Vue 应用程序在内部初始化，

55
00:02:46,460 --> 00:02:48,180
但它还没有安装。

56
00:02:48,180 --> 00:02:51,930
所以在视觉上，我们仍然看不到任何东西。

57
00:02:51,930 --> 00:02:56,930
如果我重新加载，我们会在控制台中看到已创建。

58
00:02:57,510 --> 00:03:00,210
如果我们回到源头

59
00:03:00,210 --> 00:03:04,070
我现在在创建的钩子中添加一个断点，

60
00:03:04,070 --> 00:03:06,500
如果我重新加载，你会再次看到这一点，

61
00:03:06,500 --> 00:03:09,733
正如我解释的那样，屏幕上什么也没有。

62
00:03:10,900 --> 00:03:13,310
所以让我删除断点并继续，

63
00:03:13,310 --> 00:03:16,020
让我们添加更多生命周期钩子。

64
00:03:16,020 --> 00:03:19,510
下一个钩子是 beforeMount。

65
00:03:19,510 --> 00:03:23,730
这会在此应用程序真正安装之前触发。

66
00:03:23,730 --> 00:03:27,030
所以就在我们在屏幕上看到某些东西之前。

67
00:03:27,030 --> 00:03:29,460
所以我们还是什么都看不到，

68
00:03:29,460 --> 00:03:32,790
但之后我们会在下一个钩子中看到一些东西，

69
00:03:32,790 --> 00:03:33,993
已安装。

70
00:03:35,060 --> 00:03:39,800
所以在这里，让我安装console.log。

71
00:03:39,800 --> 00:03:41,790
然后让我们保存这个，

72
00:03:41,790 --> 00:03:45,620
返回 JavaScript 控制台并重新加载。

73
00:03:45,620 --> 00:03:50,620
而且我们看到了beforeCreate、created、beforeMount和mounted。

74
00:03:52,730 --> 00:03:56,200
但同样，如果我们去 Sources 会更有趣

75
00:03:56,200 --> 00:04:01,200
现在在挂载前和挂载中添加一个断点，

76
00:04:02,560 --> 00:04:04,050
现在重新加载。

77
00:04:04,050 --> 00:04:06,620
我们首先在 beforeMount 中暂停

78
00:04:06,620 --> 00:04:09,280
因为那个钩子首先运行。

79
00:04:09,280 --> 00:04:11,323
你在屏幕上什么也看不到。

80
00:04:12,350 --> 00:04:17,350
如果你现在点击恢复，那么这里的蓝色播放按钮，

81
00:04:17,380 --> 00:04:20,570
我们在下一个断点处暂停，该断点位于mounted 中。

82
00:04:20,570 --> 00:04:23,120
现在你在屏幕上看到了一些东西。

83
00:04:23,120 --> 00:04:26,080
正如我解释的那样，因为在这个时间点

84
00:04:26,080 --> 00:04:29,200
这个 Vue 应用程序已安装到屏幕上。

85
00:04:29,200 --> 00:04:33,020
内部初始化，处理完所有数据，

86
00:04:33,020 --> 00:04:34,790
模板已编译

87
00:04:34,790 --> 00:04:37,623
它在屏幕上显示它的输出。

88
00:04:39,360 --> 00:04:42,000
所以，有了这个，我们也可以删除那些断点

89
00:04:42,000 --> 00:04:43,233
并再次恢复。

90
00:04:45,180 --> 00:04:49,330
至此，这里的创建生命周期就结束了，

91
00:04:49,330 --> 00:04:52,050
但我提到我们会有数据变化，

92
00:04:52,050 --> 00:04:54,85​​3
这也触发了他们自己的生命周期钩子。

93
00:04:57,130 --> 00:04:59,570
所以让我们看看那些在行动。

94
00:04:59,570 --> 00:05:01,830
不过，安装到这里之后，

95
00:05:01,830 --> 00:05:04,970
如前所述，确切的位置并不重要，

96
00:05:04,970 --> 00:05:07,533
但是在 Mount 之后我会添加 beforeUpdate

97
00:05:09,630 --> 00:05:14,560
和 console.log beforeUpdate 在这里。

98
00:05:14,560 --> 00:05:17,623
我还将添加更新。

99
00:05:19,070 --> 00:05:22,510
不同之处在于 beforeUpdate 中，

100
00:05:22,510 --> 00:05:25,130
我们还不会在屏幕上看到变化。

101
00:05:25,130 --> 00:05:26,963
在更新中，我们将。

102
00:05:27,850 --> 00:05:30,730
因此，如果您转到 DevTools 中的 JavaScript 控制台

103
00:05:30,730 --> 00:05:34,750
并重新加载，我们看不到这些钩子正在执行

104
00:05:34,750 --> 00:05:37,130
因为这个应用程序没有任何更新。

105
00:05:37,130 --> 00:05:40,550
它已创建，但没有更新。

106
00:05:40,550 --> 00:05:43,510
所以现在让我们在这里输入一个新文本。

107
00:05:43,510 --> 00:05:45,950
如果我现在点击设置文本，

108
00:05:45,950 --> 00:05:48,383
你看到 beforeUpdate 和更新。

109
00:05:49,350 --> 00:05:51,670
如果您再次转到“源”选项卡

110
00:05:51,670 --> 00:05:56,670
并在 beforeUpdate 和 updated 中添加一些断点，

111
00:05:56,720 --> 00:05:59,910
我们还可以看到，如果我再次更改，例如，

112
00:05:59,910 --> 00:06:03,910
为了添加更多感叹号，我们现在暂停。

113
00:06:03,910 --> 00:06:06,790
我们首先在 beforeUpdate 中暂停。

114
00:06:06,790 --> 00:06:10,090
你注意到屏幕上的文本输出

115
00:06:10,090 --> 00:06:12,150
仍然是旧的。

116
00:06:12,150 --> 00:06:13,200
因为，如前所述，

117
00:06:13,200 --> 00:06:16,910
在 beforeUpdate 中，更新尚未完全处理。

118
00:06:16,910 --> 00:06:19,460
它在屏幕上不可见。

119
00:06:19,460 --> 00:06:22,600
如果我恢复，我们会暂停更新。

120
00:06:22,600 --> 00:06:25,110
确实在这个时候，

121
00:06:25,110 --> 00:06:30,110
输出已被处理并在屏幕上可见。

122
00:06:31,660 --> 00:06:34,510
因此，我再次删除这些断点并恢复，

123
00:06:34,510 --> 00:06:37,713
并希望显示更新过程。

124
00:06:39,240 --> 00:06:43,550
现在，如前所述，我们还可以卸载 Vue 应用程序，

125
00:06:43,550 --> 00:06:46,610
即使到目前为止我们还没有这样做。

126
00:06:46,610 --> 00:06:50,970
然后我们触发 beforeUnmount 和 unmounted 钩子。

127
00:06:50,970 --> 00:06:52,830
并且如前所述，

128
00:06:52,830 --> 00:06:56,823
这个卸载过程稍后会变得更加重要。

129
00:06:58,040 --> 00:07:00,663
尽管如此，让我们现在已经看到它在行动。

130
00:07:02,210 --> 00:07:04,330
对于这里的代码，

131
00:07:04,330 --> 00:07:08,760
我要添加 deep beforeUnmount 钩子

132
00:07:08,760 --> 00:07:10,273和 console.log beforeUnmount。
133

00:07:14,810 --> 00:07:19,690
我还要添加未安装的钩子

134
00:07:19,690 --> 00:07:24,610
因此console.log在这里卸载

135
00:07:24,610 --> 00:07:27,620
以便实现这两个钩子

136
00:07:27,620 --> 00:07:29,453
我们为他们记录一条消息。

137
00:07:30,560 --> 00:07:33,530
但目前，这个应用程序永远不会被卸载。

138
00:07:33,530 --> 00:07:36,920
我们没有办法杀死或删除它。

139
00:07:36,920 --> 00:07:40,230
但是就像我们有一个应用挂载方法一样，

140
00:07:40,230 --> 00:07:44,790
我们还有一个应用卸载方法来删除一个 Vue 应用。

141
00:07:44,790 --> 00:07:47,010
现在你很少会调用这个方法

142
00:07:47,010 --> 00:07:48,840
不过在实际应用中。

143
00:07:48,840 --> 00:07:53,840
相反，您稍后会看到一个更现实的场景

144
00:07:53,930 --> 00:07:55,720
卸载应用程序。

145
00:07:55,720 --> 00:07:58,970
但目前我们缺少一个关键的先决条件，

146
00:07:58,970 --> 00:08:02,003
所以我们将改用那个卸载方法。

147
00:08:02,890 --> 00:08:05,210
我们可以在这里设置一个计时器

148
00:08:05,210 --> 00:08:08,600
并将其设置为三秒，比方说，

149
00:08:08,600 --> 00:08:13,600
然后有一个我们称之为卸载的函数。

150
00:08:14,260 --> 00:08:18,340
所以在应用程序创建和挂载后三秒，

151
00:08:18,340 --> 00:08:21,030
我们摧毁它，我们卸下它。

152
00:08:21,030 --> 00:08:22,720
如果我们现在保存并重新加载，

153
00:08:22,720 --> 00:08:26,030
三秒钟后你会看到，

154
00:08:26,030 --> 00:08:27,880
该应用程序已出现在屏幕上

155
00:08:27,880 --> 00:08:29,830
我们看到 beforeUnmount 和 unmounted。

156
00:08:31,410 --> 00:08:34,570
当然，再一次，我们也可以去源头

157
00:08:38,010 --> 00:08:41,576
只需在 beforeUnmount 中添加断点

158
00:08:41,576 --> 00:08:43,080
并在卸载。

159
00:08:43,080 --> 00:08:47,480
并重新加载，看看三秒钟后它是如何暂停的。

160
00:08:47,480 --> 00:08:50,590
首先在beforeUnmount，在哪个时间点

161
00:08:50,590 --> 00:08:51,950
我们仍然看到该应用程序。

162
00:08:51,950 --> 00:08:54,673
所以这是最后一次使用它的机会。

163
00:08:55,510 --> 00:08:59,063
但是，如果我恢复，它会在卸载时被删除。

164
00:09:00,930 --> 00:09:05,930
这就是带有所有钩子的 Vue 生命周期。

165
00:09:06,060 --> 00:09:10,010
实际上，您只需要其中的几个钩子。

166
00:09:10,010 --> 00:09:12,520
尽管如此，我当然想把它们展示给你看

167
00:09:12,520 --> 00:09:15,450
因为毕竟这是完整的指南

168
00:09:15,450 --> 00:09:19,040
而不是我给你看的一些东西指南。

169
00:09:19,040 --> 00:09:22,310
尽管如此，我们会特别看到像 created 这样的钩子，

170
00:09:22,310 --> 00:09:25,980
在整个课程中安装或卸载，

171
00:09:25,980 --> 00:09:27,530
以及更新。

172
00:09:27,530 --> 00:09:31,490
有了这个，我们也可以离开这个模块。

173
00:09:31,490 --> 00:09:35,180
我们现在对基本功能有了深入的了解

174
00:09:35,180 --> 00:09:37,310
而不仅仅是如何使用它们，

175
00:09:37,310 --> 00:09:39,840
以及它们如何在幕后工作。

176
00:09:39,840 --> 00:09:42,900
有了这个，你已经迈出了一大步

177
00:09:42,900 --> 00:09:46,263
朝着成为 Vue 开发人员的正确方向前进。