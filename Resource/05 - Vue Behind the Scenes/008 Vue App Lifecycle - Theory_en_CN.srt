1
00:00:01,492 --> 00:00:04,550
现在结束这个模块，

2
00:00:04,550 --> 00:00:09,080
我们将有我们的第二讲，你不应该跳过。

3
00:00:09,080 --> 00:00:11,040
第一个是裁判讲座。

4
00:00:11,040 --> 00:00:14,570
现在我们要讨论 Vue 实例生命周期，

5
00:00:14,570 --> 00:00:16,460
这也很重要。

6
00:00:16,460 --> 00:00:18,510
我们了解了 Vue 在后台是如何工作的，

7
00:00:18,510 --> 00:00:20,280
我们了解了虚拟 DOM，

8
00:00:20,280 --> 00:00:22,200
并且有不同的步骤

9
00:00:22,200 --> 00:00:24,820
将某些东西带到屏幕上。

10
00:00:24,820 --> 00:00:28,940
有时您需要在这些步骤中运行代码。

11
00:00:28,940 --> 00:00:32,400
这就是为什么 Vue 有一个相当复杂的生命周期，

12
00:00:32,400 --> 00:00:34,980
您可以随时介入的地方

13
00:00:34,980 --> 00:00:37,460
执行您需要执行的代码。

14
00:00:37,460 --> 00:00:40,130
你会看到一些生命周期钩子

15
00:00:40,130 --> 00:00:42,580
我们现在将在行动中讨论

16
00:00:42,580 --> 00:00:44,650
顺便说一句，在整个课程中。

17
00:00:44,650 --> 00:00:46,980
这一切都始于我们创建一个新的应用程序。

18
00:00:46,980 --> 00:00:50,300
当然，使用 mount 方法安装它

19
00:00:50,300 --> 00:00:52,430
到 HTML 代码，到 DOM，

20
00:00:52,430 --> 00:00:55,870
以便 Vue 知道在哪里渲染应用程序。

21
00:00:55,870 --> 00:00:58,440
然后，当它开始创建应用程序时，

22
00:00:58,440 --> 00:01:00,960
并开始在屏幕上显示一些东西，

23
00:01:00,960 --> 00:01:05,960
它达到了几个点，几个生命周期阶段，

24
00:01:07,220 --> 00:01:10,760
这也体现在方法上

25
00:01:10,760 --> 00:01:14,500
您可以添加到您的 Vue 应用程序配置对象

26
00:01:14,500 --> 00:01:18,410
要运行您可能需要在此时运行的代码。

27
00:01:18,410 --> 00:01:21,190
例如，第一个生命周期阶段，

28
00:01:21,190 --> 00:01:23,303
第一个所谓的生命周期钩子

29
00:01:23,303 --> 00:01:27,600
达到的是 beforeCreate 阶段。

30
00:01:27,600 --> 00:01:29,890
紧随其后的是创建阶段。

31
00:01:29,890 --> 00:01:32,140
不同的是 beforeCreate

32
00:01:32,140 --> 00:01:34,880
基本上是在app之前调用

33
00:01:34,880 --> 00:01:36,950
已完全初始化，

34
00:01:36,950 --> 00:01:39,630
而 created 之后被调用。

35
00:01:39,630 --> 00:01:41,210
在这个时间点，

36
00:01:41,210 --> 00:01:43,600
我们仍然没有任何东西在屏幕上。

37
00:01:43,600 --> 00:01:47,910
创建后的 Vue 只知道它的数据属性，

38
00:01:47,910 --> 00:01:51,163
它知道一般的应用程序配置。

39
00:01:52,540 --> 00:01:56,503
但是现在是编译模板的时候了。

40
00:01:57,390 --> 00:02:00,030
所以所有的动态占位符，

41
00:02:00,030 --> 00:02:03,280
所有插值等都被删除

42
00:02:03,280 --> 00:02:05,570
并替换为具体值

43
00:02:05,570 --> 00:02:07,253
应该显示给用户。

44
00:02:08,187 --> 00:02:12,620
此后到达之前的挂载钩子

45
00:02:12,620 --> 00:02:16,250
before mount 意味着这个就在 Vue 之前

46
00:02:16,250 --> 00:02:19,760
实际上是要把一些东西带到屏幕上。

47
00:02:19,760 --> 00:02:23,233
所以就在我们可以在屏幕上看到某些东西之前。

48
00:02:24,170 --> 00:02:28,410
所以现在在created 和beforeMount 之后，我们到达mounted。

49
00:02:28,410 --> 00:02:30,760
所以最后就意味着现在

50
00:02:30,760 --> 00:02:32,570
我们在屏幕上看到了一些东西。

51
00:02:32,570 --> 00:02:34,680
现在 Vue 应用程序已初始化

52
00:02:34,680 --> 00:02:36,420
模板已编译，

53
00:02:36,420 --> 00:02:38,680
Vue 知道要在屏幕上显示什么。

54
00:02:38,680 --> 00:02:42,873
它把这些指令交给浏览器，

55
00:02:42,873 --> 00:02:47,450
让浏览器真正添加了所有的 HTML 元素

56
00:02:47,450 --> 00:02:52,123
包含我们需要的所有内容，由我们的 Vue 应用程序定义。

57
00:02:53,010 --> 00:02:55,190
所以现在我们已经安装了 Vue 应用程序，

58
00:02:55,190 --> 00:02:57,910
我们的 Mountain Vue 实例。

59
00:02:57,910 --> 00:03:01,870
当然，现在大多数 Vue 应用程序中的数据都发生了变化

60
00:03:01,870 --> 00:03:03,370
在某个时间点。

61
00:03:03,370 --> 00:03:06,670
然后触发一个新的生命周期。

62
00:03:06,670 --> 00:03:09,910
现在我们到达 beforeUpdate 钩子

63
00:03:09,910 --> 00:03:13,440
在更新的钩子之后。

64
00:03:13,440 --> 00:03:16,120
这有点像 beforeCreate 和 created。

65
00:03:16,120 --> 00:03:19,420
在更新之前到达 BeforeUpdate

66
00:03:19,420 --> 00:03:24,300
已由 Vue 在其应用程序内部完全处理，

67
00:03:24,300 --> 00:03:28,033
更新后，一旦处理完毕。

68
00:03:29,180 --> 00:03:32,410
顺便说一句，这也意味着在这个时间点，

69
00:03:32,410 --> 00:03:35,300
更新在屏幕上可见。

70
00:03:35,300 --> 00:03:37,510
所以我们不会再次到达mounted，

71
00:03:37,510 --> 00:03:40,840
因为模板从未被卸载，

72
00:03:40,840 --> 00:03:42,650
所以它总是可见的。

73
00:03:42,650 --> 00:03:46,220
更新后，更改刚刚处理完毕

74
00:03:46,220 --> 00:03:48,450
并已渲染到屏幕上。

75
00:03:48,450 --> 00:03:51,023
而在 beforeUpdate 中，他们没有。

76
00:03:52,220 --> 00:03:55,030
现在有时，也可以卸载实例。

77
00:03:55,030 --> 00:03:58,210
可以卸载 Vue 应用程序。

78
00:03:58,210 --> 00:04:01,160
我们还没有这个场景，

79
00:04:01,160 --> 00:04:04,360
正如您将看到的，稍后它会变得更加重要。

80
00:04:04,360 --> 00:04:05,740
但我也可以给你看

81
00:04:05,740 --> 00:04:08,900
我们如何在下一节课中卸载应用程序。

82
00:04:08,900 --> 00:04:12,700
卸载应用程序时，其所有内容都将被删除

83
00:04:12,700 --> 00:04:15,250
从屏幕上，应用程序已经死了。

84
00:04:15,250 --> 00:04:17,649
我们这里也有两个生命周期钩子。

85
00:04:17,649 --> 00:04:20,529
BeforeUnmount，它在之前运行

86
00:04:20,529 --> 00:04:22,270
即将被删除，

87
00:04:22,270 --> 00:04:25,630
并卸载，它在被移除后运行。

88
00:04:25,630 --> 00:04:28,300
例如，您可以使用这些钩子

89
00:04:28,300 --> 00:04:31,480
执行您可能想做的任何清理代码，

90
00:04:31,480 --> 00:04:34,240
向您的服务器发送 HTTP 请求

91
00:04:34,240 --> 00:04:36,740
跟踪正在卸载的应用程序

92
00:04:36,740 --> 00:04:39,210
或您需要做的任何事情。

93
00:04:39,210 --> 00:04:41,730
现在让我们看看所有这些钩子的作用

94
00:04:41,730 --> 00:04:44,303
使其更清楚它们是如何工作的。