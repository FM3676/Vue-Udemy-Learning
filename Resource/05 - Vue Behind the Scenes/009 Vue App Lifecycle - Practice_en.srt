1
00:00:02,480 --> 00:00:05,100
To see it in action, I'm back in app.js,

2
00:00:05,100 --> 00:00:07,520
and I'll go back to my main Vue app,

3
00:00:07,520 --> 00:00:10,030
which is the one with this input field.

4
00:00:10,030 --> 00:00:12,360
Now I mentioned all those lifecycle hooks,

5
00:00:12,360 --> 00:00:15,060
and I mentioned that these would be methods

6
00:00:15,060 --> 00:00:16,760
you can add to your Vue app.

7
00:00:16,760 --> 00:00:19,830
And with that, I don't mean methods you add

8
00:00:19,830 --> 00:00:22,000
in your methods option.

9
00:00:22,000 --> 00:00:24,320
Because in there, you really only add

10
00:00:24,320 --> 00:00:27,060
the methods you plan on calling yourself

11
00:00:27,060 --> 00:00:31,130
or which you want to call upon events, like clicks.

12
00:00:31,130 --> 00:00:34,840
Instead, you add them right next to data and methods.

13
00:00:34,840 --> 00:00:37,970
Anywhere you want in this app.

14
00:00:37,970 --> 00:00:39,200
So for example here,

15
00:00:39,200 --> 00:00:42,960
towards the end of this app configuration object.

16
00:00:42,960 --> 00:00:47,870
Here, we could add the beforeCreate method,

17
00:00:47,870 --> 00:00:50,650
which I showed on the slide.

18
00:00:50,650 --> 00:00:53,030
You just add it as a method like this,

19
00:00:53,030 --> 00:00:55,763
and here we can console.log beforeCreate

20
00:00:56,610 --> 00:00:59,830
so that we get an idea for when this runs.

21
00:00:59,830 --> 00:01:02,640
And of course you could do more than just logging here.

22
00:01:02,640 --> 00:01:06,420
You could send an HTTP request to a server.

23
00:01:06,420 --> 00:01:10,053
You could set a timer, you could do whatever you need to do.

24
00:01:11,010 --> 00:01:13,653
If I now expand this again,

25
00:01:14,770 --> 00:01:16,940
open the console and reload,

26
00:01:16,940 --> 00:01:19,873
you see beforeCreate being logged here.

27
00:01:22,380 --> 00:01:25,970
And actually, I'll comment out his log message here

28
00:01:25,970 --> 00:01:29,430
at the very bottom so that we're not confused by that.

29
00:01:29,430 --> 00:01:32,500
So let's go back to our Vue app again then,

30
00:01:32,500 --> 00:01:34,797
reload, and we see beforeCreate.

31
00:01:35,950 --> 00:01:40,950
If we do something else and go to the Sources tab here

32
00:01:41,370 --> 00:01:43,740
in the Chrome developer tools,

33
00:01:43,740 --> 00:01:47,370
we actually can also inspect our source code there.

34
00:01:47,370 --> 00:01:49,590
And I'm showing this to you here

35
00:01:49,590 --> 00:01:52,600
because there's something neat we can do with that.

36
00:01:52,600 --> 00:01:55,660
We can actually find the beforeCreate method here

37
00:01:55,660 --> 00:02:00,540
in the app.js file and click here to set a break point.

38
00:02:00,540 --> 00:02:04,260
As a consequence, code execution will pause

39
00:02:04,260 --> 00:02:05,910
when this is reached.

40
00:02:05,910 --> 00:02:09,820
And if you now reload the page, you will see it pauses here,

41
00:02:09,820 --> 00:02:11,360
and you can always continue

42
00:02:11,360 --> 00:02:13,410
by clicking the blue play button.

43
00:02:13,410 --> 00:02:14,580
But the interesting thing,

44
00:02:14,580 --> 00:02:16,490
and the reason for why I'm doing this

45
00:02:16,490 --> 00:02:19,270
is that you see there's nothing on the screen yet.

46
00:02:19,270 --> 00:02:20,540
As I mentioned,

47
00:02:20,540 --> 00:02:24,080
in beforeCreate you won't see anything on the screen.

48
00:02:24,080 --> 00:02:27,060
At this point, actually not even the Vue app

49
00:02:27,060 --> 00:02:29,033
will have been fully initialized.

50
00:02:30,500 --> 00:02:33,320
So let me click the blue button here to continue

51
00:02:33,320 --> 00:02:36,143
and remove the break point by clicking on it again.

52
00:02:37,120 --> 00:02:41,230
Let's now add the second hook, which is the created hook.

53
00:02:41,230 --> 00:02:43,197
At this point of time,

54
00:02:43,197 --> 00:02:46,460
the Vue app was initialized internally,

55
00:02:46,460 --> 00:02:48,180
but it was not mounted yet.

56
00:02:48,180 --> 00:02:51,930
So visually, we'll still not see anything.

57
00:02:51,930 --> 00:02:56,930
If I reload, in the console we see created.

58
00:02:57,510 --> 00:03:00,210
And if we go back to Sources

59
00:03:00,210 --> 00:03:04,070
and I add a break point in the created hook now,

60
00:03:04,070 --> 00:03:06,500
if I reload, you see again at this point,

61
00:03:06,500 --> 00:03:09,733
there's nothing on the screen, just as I explained.

62
00:03:10,900 --> 00:03:13,310
So let me remove the break point and continue,

63
00:03:13,310 --> 00:03:16,020
and let's add more lifecycle hooks.

64
00:03:16,020 --> 00:03:19,510
The next hook in place is beforeMount.

65
00:03:19,510 --> 00:03:23,730
This triggers right before this app really is mounted.

66
00:03:23,730 --> 00:03:27,030
So right before we see something on the screen.

67
00:03:27,030 --> 00:03:29,460
So we'll still not see anything here,

68
00:03:29,460 --> 00:03:32,790
but we will see something in the next hook thereafter,

69
00:03:32,790 --> 00:03:33,993
which is mounted.

70
00:03:35,060 --> 00:03:39,800
So here, let me console.log mounted.

71
00:03:39,800 --> 00:03:41,790
And let's then save this,

72
00:03:41,790 --> 00:03:45,620
go back to the JavaScript console and reload.

73
00:03:45,620 --> 00:03:50,620
And we see beforeCreate, created, beforeMount and mounted.

74
00:03:52,730 --> 00:03:56,200
But again, it's more interesting if we go to Sources

75
00:03:56,200 --> 00:04:01,200
and now add a break point in before mount and in mounted,

76
00:04:02,560 --> 00:04:04,050
and now reload.

77
00:04:04,050 --> 00:04:06,620
And we first pause in beforeMount

78
00:04:06,620 --> 00:04:09,280
because that hook runs first.

79
00:04:09,280 --> 00:04:11,323
And you see nothing on the screen.

80
00:04:12,350 --> 00:04:17,350
If you now click resume, so this blue play button here,

81
00:04:17,380 --> 00:04:20,570
we pause on the next break point, which is in mounted.

82
00:04:20,570 --> 00:04:23,120
And now you see something on the screen.

83
00:04:23,120 --> 00:04:26,080
As I explained, because at this point of time

84
00:04:26,080 --> 00:04:29,200
this Vue app was mounted to the screen.

85
00:04:29,200 --> 00:04:33,020
It was initialized internally, all the data was processed,

86
00:04:33,020 --> 00:04:34,790
the template was compiled

87
00:04:34,790 --> 00:04:37,623
and it's showing its output on the screen.

88
00:04:39,360 --> 00:04:42,000
So, with that, we can also remove those break points

89
00:04:42,000 --> 00:04:43,233
and resume again.

90
00:04:45,180 --> 00:04:49,330
Now with that, the creation life cycle here is finished,

91
00:04:49,330 --> 00:04:52,050
but I mentioned that we would have data changes,

92
00:04:52,050 --> 00:04:54,853
which also triggered their own lifecycle hooks.

93
00:04:57,130 --> 00:04:59,570
So let's see those in action as well.

94
00:04:59,570 --> 00:05:01,830
After mounted here, though,

95
00:05:01,830 --> 00:05:04,970
as mentioned before, the exact position does not matter,

96
00:05:04,970 --> 00:05:07,533
but after Mount that I'll add beforeUpdate

97
00:05:09,630 --> 00:05:14,560
and console.log beforeUpdate here.

98
00:05:14,560 --> 00:05:17,623
And I will also add updated.

99
00:05:19,070 --> 00:05:22,510
The difference will be that in beforeUpdate,

100
00:05:22,510 --> 00:05:25,130
we'll not see the changes on the screen yet.

101
00:05:25,130 --> 00:05:26,963
In updated, we will.

102
00:05:27,850 --> 00:05:30,730
So if you go to the JavaScript console in the DevTools

103
00:05:30,730 --> 00:05:34,750
and reload, we don't see those hooks being executed

104
00:05:34,750 --> 00:05:37,130
because nothing was updated in this app.

105
00:05:37,130 --> 00:05:40,550
It was created, but nothing was updated.

106
00:05:40,550 --> 00:05:43,510
So now let's enter a new text here.

107
00:05:43,510 --> 00:05:45,950
And if I click Set Text now,

108
00:05:45,950 --> 00:05:48,383
you see beforeUpdate and updated.

109
00:05:49,350 --> 00:05:51,670
And if you go to the Source tab again

110
00:05:51,670 --> 00:05:56,670
and add some break points in beforeUpdate and in updated,

111
00:05:56,720 --> 00:05:59,910
we can also see that if I changed is again, for example,

112
00:05:59,910 --> 00:06:03,910
to add more exclamation marks, we now pause.

113
00:06:03,910 --> 00:06:06,790
And we first pause in beforeUpdate.

114
00:06:06,790 --> 00:06:10,090
And you notice that the text output here on the screen

115
00:06:10,090 --> 00:06:12,150
is still the old one.

116
00:06:12,150 --> 00:06:13,200
Because, as mentioned,

117
00:06:13,200 --> 00:06:16,910
in beforeUpdate the update was not fully processed yet.

118
00:06:16,910 --> 00:06:19,460
It's not visible on the screen.

119
00:06:19,460 --> 00:06:22,600
If I resume, we pause in updated.

120
00:06:22,600 --> 00:06:25,110
And indeed at this point of time,

121
00:06:25,110 --> 00:06:30,110
the output has been processed and is visible on the screen.

122
00:06:31,660 --> 00:06:34,510
So again, I'm removing those break points and resuming,

123
00:06:34,510 --> 00:06:37,713
and that hopefully shows the updating process.

124
00:06:39,240 --> 00:06:43,550
Now, as mentioned before, we also can unmount a Vue app,

125
00:06:43,550 --> 00:06:46,610
even though we haven't done this thus far.

126
00:06:46,610 --> 00:06:50,970
We then trigger the beforeUnmount and the unmounted hooks.

127
00:06:50,970 --> 00:06:52,830
And as also mentioned before,

128
00:06:52,830 --> 00:06:56,823
this unmounting process will become more relevant later.

129
00:06:58,040 --> 00:07:00,663
Nonetheless, let's see it in action now already.

130
00:07:02,210 --> 00:07:04,330
And for that back in code here,

131
00:07:04,330 --> 00:07:08,760
I'm going to add deep beforeUnmount hook

132
00:07:08,760 --> 00:07:10,273
and console.log beforeUnmount.

133
00:07:14,810 --> 00:07:19,690
And I'm also going to add the unmounted hook

134
00:07:19,690 --> 00:07:24,610
and hence console.log unmounted here

135
00:07:24,610 --> 00:07:27,620
so that both those hooks are implemented

136
00:07:27,620 --> 00:07:29,453
and we log a message for them.

137
00:07:30,560 --> 00:07:33,530
But at the moment, this app will never get unmounted.

138
00:07:33,530 --> 00:07:36,920
We have no way of killing or removing it.

139
00:07:36,920 --> 00:07:40,230
But just as we have an app mount method,

140
00:07:40,230 --> 00:07:44,790
we also have a app unmount method to remove a Vue app.

141
00:07:44,790 --> 00:07:47,010
Now you will rarely call this method

142
00:07:47,010 --> 00:07:48,840
in a real application though.

143
00:07:48,840 --> 00:07:53,840
Instead, you will later see a way more realistic scenario

144
00:07:53,930 --> 00:07:55,720
of unmounting apps.

145
00:07:55,720 --> 00:07:58,970
But at the moment we're missing a key prerequisite for that,

146
00:07:58,970 --> 00:08:02,003
so we're going to work with that unmount method instead.

147
00:08:02,890 --> 00:08:05,210
We could set a timer here

148
00:08:05,210 --> 00:08:08,600
and set it to three seconds, let's say,

149
00:08:08,600 --> 00:08:13,600
and then have a function in which we call unmount.

150
00:08:14,260 --> 00:08:18,340
So that three seconds after the app was created and mounted,

151
00:08:18,340 --> 00:08:21,030
we destroy it, we unmount it.

152
00:08:21,030 --> 00:08:22,720
And if we now save that and reload,

153
00:08:22,720 --> 00:08:26,030
you will see that after three seconds,

154
00:08:26,030 --> 00:08:27,880
the app has gone on the screen

155
00:08:27,880 --> 00:08:29,830
and we see beforeUnmount and unmounted.

156
00:08:31,410 --> 00:08:34,570
And of course, again, we could also go to the sources

157
00:08:38,010 --> 00:08:41,576
and simply add break points here in beforeUnmount

158
00:08:41,576 --> 00:08:43,080
and in unmounted.

159
00:08:43,080 --> 00:08:47,480
And reload and see how this pauses after three seconds.

160
00:08:47,480 --> 00:08:50,590
First in beforeUnmount, at which point of time

161
00:08:50,590 --> 00:08:51,950
we still see the app.

162
00:08:51,950 --> 00:08:54,673
So that's the last chance to work with it.

163
00:08:55,510 --> 00:08:59,063
But then if I resume, it's removed in unmounted.

164
00:09:00,930 --> 00:09:05,930
And that is the Vue lifecycle with all its hooks.

165
00:09:06,060 --> 00:09:10,010
In reality, you will only need a few of those hooks.

166
00:09:10,010 --> 00:09:12,520
Nonetheless, of course, I wanted to show them to you

167
00:09:12,520 --> 00:09:15,450
because this is the complete guide after all

168
00:09:15,450 --> 00:09:19,040
and not the I show you some things guide.

169
00:09:19,040 --> 00:09:22,310
Nonetheless, we'll especially see hooks like created,

170
00:09:22,310 --> 00:09:25,980
mounted or unmounted in action throughout this course,

171
00:09:25,980 --> 00:09:27,530
as well as updated.

172
00:09:27,530 --> 00:09:31,490
And with that, we can also leave this module.

173
00:09:31,490 --> 00:09:35,180
We now have a solid understanding of the basic features

174
00:09:35,180 --> 00:09:37,310
and not just of how to use them,

175
00:09:37,310 --> 00:09:39,840
but also how they work under the hood.

176
00:09:39,840 --> 00:09:42,900
And with that, you already made a huge step

177
00:09:42,900 --> 00:09:46,263
in the right direction to becoming a Vue developer.

