1
00:00:02,040 --> 00:00:03,800
现在我们已经了解了

2
00:00:03,800 --> 00:00:08,570
Vue 的一些幕后和核心功能。

3
00:00:08,570 --> 00:00:11,440
现在让我们了解它实际上是如何更新的

4
00:00:11,440 --> 00:00:13,090
我们在屏幕上看到的。

5
00:00:13,090 --> 00:00:16,149
当然，我们了解到它是内置的反应性，

6
00:00:16,149 --> 00:00:19,270
但这基本上就是 Vue 检测的方式

7
00:00:19,270 --> 00:00:23,060
需要更新以及需要更新的位置。

8
00:00:23,060 --> 00:00:27,480
但是以性能优化的方式执行更新

9
00:00:27,480 --> 00:00:29,540
又是另一回事。

10
00:00:29,540 --> 00:00:31,030
我之前提到过，

11
00:00:31,030 --> 00:00:33,410
我将再次向您展示。

12
00:00:33,410 --> 00:00:38,410
如果我在浏览器开发者工具中检查一个元素，

13
00:00:38,790 --> 00:00:42,790
你会注意到，如果我在这里输入，

14
00:00:42,790 --> 00:00:46,280
我点击设置文本，只有段落

15
00:00:46,280 --> 00:00:49,863
里面的文字在右边闪烁。

16
00:00:50,720 --> 00:00:53,950
所以Vue只更新了这一段，

17
00:00:53,950 --> 00:00:56,080
屏幕上没有其他内容。

18
00:00:56,080 --> 00:01:01,080
而 Vue 使用一个称为虚拟 DOM 的概念来做到这一点。

19
00:01:01,820 --> 00:01:02,970
那么这是如何工作的呢？

20
00:01:02,970 --> 00:01:06,670
为什么视图会像这样更新到 DOM？

21
00:01:06,670 --> 00:01:09,070
我们得到了我们的 Vue 实例，我们的视图应用程序，

22
00:01:09,070 --> 00:01:11,270
我们得到了 DOM，即浏览器 DOM。

23
00:01:11,270 --> 00:01:14,660
所以浏览器渲染的HTML内容，

24
00:01:14,660 --> 00:01:16,220
因此基本上

25
00:01:16,220 --> 00:01:18,473
用户能够在屏幕上看到的内容。

26
00:01:19,650 --> 00:01:23,000
我们的 Vue 应用程序，我们的 Vue 实例，存储数据，

27
00:01:23,000 --> 00:01:25,080
计算的属性和方法。

28
00:01:25,080 --> 00:01:28,060
然后浏览器 DOM 会受到影响

29
00:01:28,060 --> 00:01:30,640
在视图控制模板的帮助下。

30
00:01:30,640 --> 00:01:33,440
该模板内容被渲染到 DOM。

31
00:01:33,440 --> 00:01:37,620
在 Vue 控制的渲染过程中，

32
00:01:37,620 --> 00:01:41,760
动态部分和占位符，插值，

33
00:01:41,760 --> 00:01:44,220
和绑定，被删除，

34
00:01:44,220 --> 00:01:47,470
并插入实际值。

35
00:01:47,470 --> 00:01:49,970
我的意思是，这也是你可以在这里看到的。

36
00:01:49,970 --> 00:01:51,760
我们得到了段落标签，

37
00:01:51,760 --> 00:01:54,220
在这里呈现测试文本。

38
00:01:54,220 --> 00:01:56,080
我们这里没有花括号，

39
00:01:56,080 --> 00:01:59,793
但是我们当然在我们的模板中有它们。

40
00:02:00,740 --> 00:02:03,860
在按钮上，我们得到了这个@click 的东西，

41
00:02:03,860 --> 00:02:05,860
这是对 Vue 的指令，

42
00:02:05,860 --> 00:02:07,580
这就是为什么我们看不到它

43
00:02:07,580 --> 00:02:10,699
在浏览器中呈现的实际 DOM 中。

44
00:02:10,699 --> 00:02:14,730
因为那些 Vue 指令被 Vue 移除了

45
00:02:14,730 --> 00:02:18,040
当它将其模板呈现给 DOM 时。

46
00:02:18,040 --> 00:02:21,010
所以当它基本上转换它的模板时，

47
00:02:21,010 --> 00:02:23,710
到实际的 HTML 元素

48
00:02:23,710 --> 00:02:26,033
应该显示在屏幕上。

49
00:02:27,380 --> 00:02:29,210
这就是 Vue 在这里所做的。

50
00:02:29,210 --> 00:02:31,930
因此，如果我们有这样的数据，

51
00:02:31,930 --> 00:02:34,600
我们会在屏幕上看到类似的东西，

52
00:02:34,600 --> 00:02:38,800
例如，如果我们使用插值来输出数据。

53
00:02:38,800 --> 00:02:40,910
现在当然是我们的数据，

54
00:02:40,910 --> 00:02:44,020
我们的计算属性可能会改变。

55
00:02:44,020 --> 00:02:46,510
例如，因为用户输入了一些东西

56
00:02:46,510 --> 00:02:49,100
或单击一个按钮和那些更新

57
00:02:49,100 --> 00:02:50,840
当然应该反映，

58
00:02:50,840 --> 00:02:54,070
但是 Vue 不应该重新渲染整个页面，

59
00:02:54,070 --> 00:02:55,920
每次发生变化时，

60
00:02:55,920 --> 00:02:58,760
但只有发生变化的部分。

61
00:02:58,760 --> 00:03:01,360
因为如果 Vue 会重新评估

62
00:03:01,360 --> 00:03:03,820
并重新渲染整个页面，

63
00:03:03,820 --> 00:03:06,570
好吧，这对性能来说不是很好

64
00:03:06,570 --> 00:03:09,470
如果只有一段文字发生了变化。

65
00:03:09,470 --> 00:03:12,130
例如，如果只是标题改变了，

66
00:03:12,130 --> 00:03:14,430
但不是这里的 text 属性，

67
00:03:14,430 --> 00:03:17,630
然后只有 h2 标签，它输出标题

68
00:03:17,630 --> 00:03:20,203
应该更新而不是段落。

69
00:03:21,140 --> 00:03:24,190
现在，Vue 怎么能确保是这种情况

70
00:03:24,190 --> 00:03:27,760
它不会重新渲染整个屏幕？

71
00:03:27,760 --> 00:03:30,130
好吧，一种可能的解决方案是

72
00:03:30,130 --> 00:03:33,970
它基本上比较旧的 DOM 值

73
00:03:33,970 --> 00:03:35,240
与新的。

74
00:03:35,240 --> 00:03:38,870
所以它基本上会遍历整个渲染的 DOM，

75
00:03:38,870 --> 00:03:41,150
查看里面有哪些内容，

76
00:03:41,150 --> 00:03:44,610
并将其与其存储的内容进行比较

77
00:03:44,610 --> 00:03:47,150
在 Vue 应用程序的数据属性中。

78
00:03:47,150 --> 00:03:49,433
如果有差异，它会更新它。

79
00:03:51,000 --> 00:03:52,770
那么它可以做到这一点。

80
00:03:52,770 --> 00:03:56,770
至少它不会更新整个屏幕，

81
00:03:56,770 --> 00:03:59,330
但实际上这不是它的作用

82
00:03:59,330 --> 00:04:03,540
因为阅读了整个真实的 DOM，

83
00:04:03,540 --> 00:04:06,440
它一直由浏览器呈现，

84
00:04:06,440 --> 00:04:07,980
每当有什么变化

85
00:04:07,980 --> 00:04:10,610
也是相当性能密集型的。

86
00:04:10,610 --> 00:04:14,470
也许不如重新渲染整个页面那么糟糕

87
00:04:14,470 --> 00:04:17,820
一直，但绝对不是很好。

88
00:04:17,820 --> 00:04:20,019
相反，如前所述，

89
00:04:20,019 --> 00:04:24,010
Vue 使用了一个叫做 Virtual DOM 的概念。

90
00:04:24,010 --> 00:04:28,580
它基本上具有真实 DOM 的虚拟副本，

91
00:04:28,580 --> 00:04:31,740
完全由 JavaScript 管理，

92
00:04:31,740 --> 00:04:33,423
因此在记忆中。

93
00:04:34,610 --> 00:04:36,150
它可能看起来像这样，

94
00:04:36,150 --> 00:04:40,500
Vue 记忆的一堆 JavaScript 对象

95
00:04:40,500 --> 00:04:42,720
需要哪个 HTML 标签，

96
00:04:42,720 --> 00:04:45,023
以及该标签的内容是什么。

97
00:04:46,490 --> 00:04:50,260
当数据发生变化时，它基本上只是创建

98
00:04:50,260 --> 00:04:52,600
你可以说一个新的虚拟 DOM，

99
00:04:52,600 --> 00:04:57,600
并将新的 Virtual DOM 与旧的 Virtual DOM 进行比较，

100
00:04:57,720 --> 00:05:02,360
并且只有那些虚拟DOMS之间的区别

101
00:05:02,360 --> 00:05:04,710
被写入真实的 DOM。

102
00:05:04,710 --> 00:05:06,610
这更有效

103
00:05:06,610 --> 00:05:10,930
因为在虚拟 DOM 中进行这样的比较和更新

104
00:05:10,930 --> 00:05:13,360
因此完全在记忆中，

105
00:05:13,360 --> 00:05:16,830
比在真实的 DOM 中做的效率更高，

106
00:05:16,830 --> 00:05:18,653
它被渲染到屏幕上。

107
00:05:19,860 --> 00:05:22,150
这就是 Vue 在幕后的方式。

108
00:05:22,150 --> 00:05:23,600
每当我们改变一些东西时，

109
00:05:23,600 --> 00:05:25,520
每当我在这里更改此文本时，

110
00:05:25,520 --> 00:05:29,260
然后我点击设置文本，Vue 检测到这个变化，

111
00:05:29,260 --> 00:05:32,700
感谢我们之前讨论过的反应性

112
00:05:32,700 --> 00:05:37,320
在这个模块中，然后它会创建一个新的 Virtual DOM，

113
00:05:37,320 --> 00:05:40,340
将其与旧的 Virtual DOM 进行比较，

114
00:05:40,340 --> 00:05:44,120
并检测差异，然后更新零件

115
00:05:44,120 --> 00:05:48,130
在检测到差异的真实 DOM 中。

116
00:05:48,130 --> 00:05:50,800
简而言之，这就是 Vue 所做的。

117
00:05:50,800 --> 00:05:53,090
现在应该不用说了

118
00:05:53,090 --> 00:05:56,600
Vue 有很多优化

119
00:05:56,600 --> 00:06:00,160
这实际上使这种方式更加高效。

120
00:06:00,160 --> 00:06:02,840
实际上，它不会重新创建

121
00:06:02,840 --> 00:06:05,370
整个虚拟 DOM 一直都在。

122
00:06:05,370 --> 00:06:07,850
它有很多优化，

123
00:06:07,850 --> 00:06:10,020
但这超出了本课程的范围。

124
00:06:10,020 --> 00:06:11,890
而且真的也不是什么

125
00:06:11,890 --> 00:06:13,760
你必须知道。

126
00:06:13,760 --> 00:06:16,740
你应该只知道它通常是如何工作的

127
00:06:16,740 --> 00:06:21,000
要知道 Vue 做了什么，它并不全是魔法，

128
00:06:21,000 --> 00:06:23,860
但它很漂亮，性能很好。