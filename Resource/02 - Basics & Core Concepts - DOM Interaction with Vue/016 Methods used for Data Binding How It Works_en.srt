1
00:00:02,170 --> 00:00:03,590
So now at this point,

2
00:00:03,590 --> 00:00:05,870
we know a couple of things.

3
00:00:05,870 --> 00:00:08,770
We learned about DOM interaction,

4
00:00:08,770 --> 00:00:11,470
and that's a complex term with that I mean

5
00:00:11,470 --> 00:00:14,770
that we learned how to make a part of the DOM,

6
00:00:14,770 --> 00:00:19,530
the template of our Vue app by mounting the Vue app to it.

7
00:00:19,530 --> 00:00:21,200
We learned about data binding,

8
00:00:21,200 --> 00:00:26,080
with the bind and string interpolation, and also v-HTML,

9
00:00:26,080 --> 00:00:28,810
and we learned about event handling with v-on,

10
00:00:28,810 --> 00:00:31,470
but also with v-model.

11
00:00:31,470 --> 00:00:34,820
To be precise, v-model is two-way binding,

12
00:00:34,820 --> 00:00:37,240
and therefore the combination of data binding

13
00:00:37,240 --> 00:00:39,620
and event handling so to say.

14
00:00:39,620 --> 00:00:42,260
Now, it's time to dive into a third,

15
00:00:42,260 --> 00:00:44,620
big block that makes up Vue.

16
00:00:44,620 --> 00:00:46,690
This block has no official name,

17
00:00:46,690 --> 00:00:50,750
but I like to call it advanced reactivity.

18
00:00:50,750 --> 00:00:53,110
Vue is very reactive,

19
00:00:53,110 --> 00:00:55,780
we already see that in a lot of places.

20
00:00:55,780 --> 00:00:58,930
When I type here, the name here updates,

21
00:00:58,930 --> 00:01:00,700
and Vue does that for us.

22
00:01:00,700 --> 00:01:04,223
The same if we change the counter, so that all works.

23
00:01:05,080 --> 00:01:06,870
But we have even more features

24
00:01:06,870 --> 00:01:09,380
than what we know about thus far.

25
00:01:09,380 --> 00:01:12,770
And I wanna start by coming back to methods

26
00:01:12,770 --> 00:01:15,210
besides using them with events,

27
00:01:15,210 --> 00:01:18,890
and then show you a better alternative to methods

28
00:01:18,890 --> 00:01:20,513
for certain use cases.

29
00:01:21,490 --> 00:01:24,840
Now, in this app here, we add it to a binding,

30
00:01:24,840 --> 00:01:29,800
but to add it, we had to get rid of our last name here.

31
00:01:29,800 --> 00:01:31,410
Now, that's not too bad

32
00:01:31,410 --> 00:01:34,720
because the way we made the entered name,

33
00:01:34,720 --> 00:01:39,660
a full name by adding a last name wasn't ideal anyways,

34
00:01:39,660 --> 00:01:43,730
using this setName method, passing in this argument,

35
00:01:43,730 --> 00:01:47,470
it worked but as you see, as soon as you want to do more,

36
00:01:47,470 --> 00:01:50,470
for example, adding a reset functionality,

37
00:01:50,470 --> 00:01:53,920
it's pretty hard to implement it like this,

38
00:01:53,920 --> 00:01:56,200
that's why we had to get rid of it.

39
00:01:56,200 --> 00:02:00,680
But that's no problem, we can output a full name here,

40
00:02:00,680 --> 00:02:02,630
in a different way.

41
00:02:02,630 --> 00:02:04,920
For example, we can add a new method,

42
00:02:04,920 --> 00:02:07,080
anywhere where you want` by the way,

43
00:02:07,080 --> 00:02:10,180
the order of methods here does not play a role.

44
00:02:10,180 --> 00:02:12,470
So I will add it at the top.

45
00:02:12,470 --> 00:02:15,257
And we'll name it, outputFullname,

46
00:02:18,100 --> 00:02:20,860
because that's what this method should do.

47
00:02:20,860 --> 00:02:25,090
It should return something, because I'm not going to use it

48
00:02:25,090 --> 00:02:26,970
to bind it to an event,

49
00:02:26,970 --> 00:02:31,230
but instead I'm going to use it to call it here,

50
00:02:31,230 --> 00:02:32,500
in the curly braces,

51
00:02:32,500 --> 00:02:35,793
I wanna call outputFullname, like this.

52
00:02:36,680 --> 00:02:39,560
And therefore I wanna get back to full name here,

53
00:02:39,560 --> 00:02:44,530
which then will be inserted in this part of the HTML code.

54
00:02:44,530 --> 00:02:47,400
And therefore here I wanna return this name,

55
00:02:47,400 --> 00:02:49,060
which is the entered name,

56
00:02:49,060 --> 00:02:52,723
so this name property, which we're managing with v-model,

57
00:02:53,930 --> 00:02:58,683
plus a blank space, plus Schwarzmuller,

58
00:03:00,070 --> 00:03:03,270
and of course this Schwarzmuller could also be fetched

59
00:03:03,270 --> 00:03:06,463
from another input, here it's simply hard-coded.

60
00:03:07,640 --> 00:03:09,920
And if it's now saved and then reload,

61
00:03:09,920 --> 00:03:12,380
we see Schwarzmuller here at the beginning,

62
00:03:12,380 --> 00:03:14,460
and if I enter Maximilian,

63
00:03:14,460 --> 00:03:16,960
we see Maximilian Schwarzmuller.

64
00:03:16,960 --> 00:03:20,030
Now since I'm using a method we can even add an if check

65
00:03:20,030 --> 00:03:24,823
and check if this name is currently empty,

66
00:03:26,850 --> 00:03:30,230
and if it is empty we just return an empty string here,

67
00:03:30,230 --> 00:03:35,230
so that we only add Schwarzmuller if the name is not empty.

68
00:03:35,440 --> 00:03:37,480
So here we leveraged the fact

69
00:03:37,480 --> 00:03:41,250
that we're having a method to return different values based

70
00:03:41,250 --> 00:03:43,400
on different values and name.

71
00:03:43,400 --> 00:03:46,020
And with that if I saved as a reload,

72
00:03:46,020 --> 00:03:48,940
we make sure that we initially don't see anything,

73
00:03:48,940 --> 00:03:52,860
and we only see full name with Schwarzmuller included

74
00:03:52,860 --> 00:03:55,020
if I did enter a real name,

75
00:03:55,020 --> 00:03:58,373
and as soon as that's empty again, the full name is gone.

76
00:03:59,280 --> 00:04:00,780
So that's pretty nice,

77
00:04:00,780 --> 00:04:03,307
however, it's not the best way of doing that.

78
00:04:03,307 --> 00:04:06,530
"Now why is that not the best way of doing it?"

79
00:04:06,530 --> 00:04:10,090
Well, if I type here we update the name

80
00:04:10,090 --> 00:04:12,180
and output down there, that's good.

81
00:04:12,180 --> 00:04:16,000
The problem is if I press this counter button,

82
00:04:16,000 --> 00:04:17,950
we don't see a problem,

83
00:04:17,950 --> 00:04:20,649
but behind the scenes Vue does something,

84
00:04:20,649 --> 00:04:22,940
which is not ideal.

85
00:04:22,940 --> 00:04:25,130
When we change the counter,

86
00:04:25,130 --> 00:04:28,530
Vue basically tries to find out,

87
00:04:28,530 --> 00:04:33,530
where on this page, it needs to update the rendered page.

88
00:04:35,000 --> 00:04:38,360
So for example, if the counter changes Vue sees

89
00:04:38,360 --> 00:04:40,920
that in this paragraph we're using to counter

90
00:04:40,920 --> 00:04:45,020
and hence it needs to well update this part here

91
00:04:45,020 --> 00:04:48,580
on the real page, that's exactly why we use Vue,

92
00:04:48,580 --> 00:04:51,870
it updates the page for us automatically.

93
00:04:51,870 --> 00:04:56,010
The problem is if we call a method like this here,

94
00:04:56,010 --> 00:05:01,010
this method will also be re-executed by Vue,

95
00:05:01,040 --> 00:05:04,320
whenever anything on the page changes,

96
00:05:04,320 --> 00:05:08,520
because Vue can't know what this method does.

97
00:05:08,520 --> 00:05:10,200
It doesn't know wherever,

98
00:05:10,200 --> 00:05:13,460
maybe the counter gets used in there.

99
00:05:13,460 --> 00:05:15,230
Well, if the counter changed,

100
00:05:15,230 --> 00:05:17,770
and this method maybe uses the counter

101
00:05:17,770 --> 00:05:21,140
this method should be re-executed, right?

102
00:05:21,140 --> 00:05:24,490
Well, and for that reason Vue goes ahead,

103
00:05:24,490 --> 00:05:27,640
and re-executes any method

104
00:05:27,640 --> 00:05:30,570
you're using anywhere in your HTML code

105
00:05:31,480 --> 00:05:36,130
between curly braces, or with the bind, or with the HTML,

106
00:05:36,130 --> 00:05:40,740
so any non-event bound method will be re-executed by Vue,

107
00:05:40,740 --> 00:05:43,390
whenever anything on the screen changes.

108
00:05:43,390 --> 00:05:47,300
Even if like in this case, we know that in this method,

109
00:05:47,300 --> 00:05:48,690
we're not using the counter.

110
00:05:48,690 --> 00:05:51,060
We know it, but Vue doesn't.

111
00:05:51,060 --> 00:05:54,620
And from a performance perspective, that's not so great.

112
00:05:54,620 --> 00:05:56,110
And we can see this by the way,

113
00:05:56,110 --> 00:06:00,033
we can add a console log here running again,

114
00:06:02,210 --> 00:06:05,970
and if I now, increase this a little bit,

115
00:06:05,970 --> 00:06:07,860
open up the browser developer tools,

116
00:06:07,860 --> 00:06:10,750
and go to the JavaScript console part,

117
00:06:10,750 --> 00:06:13,160
you will see that if I reload here,

118
00:06:13,160 --> 00:06:15,800
we see running again initially,

119
00:06:15,800 --> 00:06:18,920
but if I change to counter, we also see it running again,

120
00:06:18,920 --> 00:06:21,330
being executed over and over again,

121
00:06:21,330 --> 00:06:24,080
even though we just changed to counter.

122
00:06:24,080 --> 00:06:26,910
Still outputFullname was executed again,

123
00:06:26,910 --> 00:06:29,423
for the reasons I just specified.

124
00:06:31,230 --> 00:06:33,310
And that's not a back, that's how Vue works.

125
00:06:33,310 --> 00:06:37,710
And that's why methods are not the best solution

126
00:06:37,710 --> 00:06:42,240
for outputting some dynamically calculated value like this,

127
00:06:42,240 --> 00:06:44,113
but what is a better solution then?

