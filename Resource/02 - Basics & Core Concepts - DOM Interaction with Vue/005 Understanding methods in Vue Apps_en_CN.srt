1
00:00:02,130 --> 00:00:04,500
因此，通过插值和 V-bind，

2
00:00:04,500 --> 00:00:08,530
我们了解了输出的两个关键特性，

3
00:00:08,530 --> 00:00:13,530
以及在 HTML 代码中使用 Vue 管理的数据。

4
00:00:13,810 --> 00:00:15,500
这真的很重要。

5
00:00:15,500 --> 00:00:20,110
现在让我们让我们的应用程序至少更具动态性。

6
00:00:20,110 --> 00:00:21,520
对于数据，假设我们实际上

7
00:00:21,520 --> 00:00:23,440
有两个可能的课程目标，

8
00:00:23,440 --> 00:00:25,120
我们想在这里输出。

9
00:00:25,120 --> 00:00:27,930
目前，我们将随机决定

10
00:00:27,930 --> 00:00:29,920
输出哪一个。

11
00:00:29,920 --> 00:00:31,760
现在，我们需要运行一些代码。

12
00:00:31,760 --> 00:00:35,200
我们基本上需要掷骰子，你可以说，

13
00:00:35,200 --> 00:00:37,440
然后要么使用此文本

14
00:00:37,440 --> 00:00:39,040
或其他文本作为 courseGoal。

15
00:00:40,227 --> 00:00:42,440
我们可以用另一种选择来做到这一点。

16
00:00:42,440 --> 00:00:45,870
我们可以在这个 Vue app 对象上进行设置。

17
00:00:45,870 --> 00:00:48,400
我们已经设置了数据选项。

18
00:00:48,400 --> 00:00:51,360
现在是时候了解一个新选项了。

19
00:00:51,360 --> 00:00:54,390
这就是方法选项。

20
00:00:54,390 --> 00:00:57,640
方法允许您定义函数

21
00:00:57,640 --> 00:01:00,770
发生某事时应该执行

22
00:01:00,770 --> 00:01:04,819
例如，当您调用它们时，或者稍后您将了解到，

23
00:01:04,819 --> 00:01:08,140
当像按钮点击这样的用户事件发生时。

24
00:01:08,140 --> 00:01:11,490
传递 JavaScript 对象的两种方法。

25
00:01:11,490 --> 00:01:13,840
所以这是数据的重要区别。

26
00:01:13,840 --> 00:01:17,260
数据本身是一个函数一个方法，

27
00:01:17,260 --> 00:01:22,260
方法接受一个对象，该对象将充满方法，

28
00:01:22,390 --> 00:01:25,000
这样的功能，但这些功能

29
00:01:25,000 --> 00:01:26,100
现在完全取决于你。

30
00:01:26,100 --> 00:01:28,070
您可以随意命名它们。

31
00:01:28,070 --> 00:01:33,070
例如，outputGoal，但这完全取决于您。

32
00:01:33,400 --> 00:01:35,060
这可以是您想要的任何名称。

33
00:01:35,060 --> 00:01:36,640
另一方面，方法，

34
00:01:36,640 --> 00:01:41,130
就像数据是保留词一样，是保留名称。

35
00:01:41,130 --> 00:01:43,120
但是在这个方法对象内部，

36
00:01:43,120 --> 00:01:44,610
你可以使用任何你想要的东西。

37
00:01:44,610 --> 00:01:46,560
这里唯一重要的是，

38
00:01:46,560 --> 00:01:50,990
您在此方法对象中定义的所有属性

39
00:01:50,990 --> 00:01:52,560
必须是函数

40
00:01:52,560 --> 00:01:55,650
因为它们需要作为函数调用。

41
00:01:55,650 --> 00:01:56,950
你可以这样做

42
00:01:56,950 --> 00:01:59,740
或使用这里的方法简写。

43
00:01:59,740 --> 00:02:01,653
就像我们对数据所做的那样。

44
00:02:04,040 --> 00:02:07,730
现在，在 outputGoal 中，我们现在可以计算

45
00:02:07,730 --> 00:02:11,470
一个带有数学随机数的 randomNumber，

46
00:02:11,470 --> 00:02:14,710
这是 JavaScript 中的内置函数。

47
00:02:14,710 --> 00:02:19,170
与 Vue 完全无关，它是一个核心的 JavaScript 函数。

48
00:02:19,170 --> 00:02:21,410
它会简单地计算一个随机数

49
00:02:21,410 --> 00:02:22,813
在零和一之间。

50
00:02:24,360 --> 00:02:26,660
在这里，我们可以简单地添加一个 if 检查

51
00:02:26,660 --> 00:02:31,390
并说如果 randomNumber 小于零点五。

52
00:02:31,390 --> 00:02:35,113
我们想要回归学习 Vue，作为一个目标。

53
00:02:36,010 --> 00:02:40,660
否则，返回任何你想要的主 Vue，

54
00:02:40,660 --> 00:02:42,253
这些字符串由您决定。

55
00:02:43,490 --> 00:02:47,750
现在我们得到了这个函数，这个方法输出目标，

56
00:02:47,750 --> 00:02:51,330
这将返回这个或这个文本。

57
00:02:51,330 --> 00:02:54,800
现在我们想在本段中使用此文本

58
00:02:54,800 --> 00:02:57,640
好吧，每次显示不同的文字

59
00:02:57,640 --> 00:02:59,300
此页面已重新加载。

60
00:02:59,300 --> 00:03:02,120
所以为此，我们以某种方式调用这个函数，

61
00:03:02,120 --> 00:03:03,693
使其执行。

62
00:03:05,330 --> 00:03:09,280
很酷的是我们可以调用一个方法，

63
00:03:09,280 --> 00:03:12,970
所以这个方法对象中定义的函数

64
00:03:12,970 --> 00:03:14,740
在我们的 HTML 代码中，

65
00:03:14,740 --> 00:03:19,270
就像我们可以指向一个数据属性一样，你可以同时做这两个。

66
00:03:19,270 --> 00:03:22,790
所以现在我们指向一个数据属性。

67
00:03:22,790 --> 00:03:25,180
但如果我们愿意，我们也可以改为

68
00:03:25,180 --> 00:03:28,920
执行一个 def 的函数在方法上，

69
00:03:28,920 --> 00:03:32,280
这很重要，它需要定义和方法。

70
00:03:32,280 --> 00:03:35,390
所以在这里添加 outputGoal，

71
00:03:35,390 --> 00:03:38,820
直接在您传递给创建应用程序的配置对象中

72
00:03:38,820 --> 00:03:40,913
例如，将无法正常工作。

73
00:03:41,790 --> 00:03:44,540
但是由于 outputGoal 是在方法中定义的，

74
00:03:44,540 --> 00:03:45,830
我们可以在这里调用它。

75
00:03:45,830 --> 00:03:48,490
既然我们想调用它，我们需要在这里添加括号，

76
00:03:48,490 --> 00:03:51,130
就像在常规 JavaScript 中一样。

77
00:03:51,130 --> 00:03:53,390
顺便说一句，这就是有趣的部分，

78
00:03:53,390 --> 00:03:56,590
在你的 Vue 控制的 HTML 代码中

79
00:03:56,590 --> 00:03:58,600
在这种插值语法中，

80
00:03:58,600 --> 00:04:01,410
而且在使用显示绑定语法时，

81
00:04:01,410 --> 00:04:05,040
您可以执行简单的 JavaScript 代码。

82
00:04:05,040 --> 00:04:07,150
例如，在这里，我们也可以执行

83
00:04:07,150 --> 00:04:08,853
如果我们愿意，一加一。

84
00:04:09,710 --> 00:04:14,710
如果您愿意，我们也可以在这里随机执行数学运算。

85
00:04:15,550 --> 00:04:18,810
在这里你不能做的是编写复杂的代码。

86
00:04:18,810 --> 00:04:22,070
例如，你不能在这里使用 if 语句，

87
00:04:22,070 --> 00:04:23,390
这行不通。

88
00:04:23,390 --> 00:04:25,590
但是你可以使用三元表达式，

89
00:04:25,590 --> 00:04:28,110
你可以编写任何 JavaScript 表达式

90
00:04:28,110 --> 00:04:31,960
在你的双花括号之间和使用 v-bind 时。

91
00:04:31,960 --> 00:04:33,920
因此，由于我们可以使用

92
00:04:33,920 --> 00:04:36,390
这些基本的 JavaScript 表达式，

93
00:04:36,390 --> 00:04:40,313
我们也可以像这样在这里调用 outputGoal。

94
00:04:41,810 --> 00:04:43,710
如果我保存并重新加载，

95
00:04:43,710 --> 00:04:45,370
我看到学习 Vue。

96
00:04:45,370 --> 00:04:48,680
如果我重新加载，在某个时候，我会看到主 Vue

97
00:04:48,680 --> 00:04:51,480
我会不时看到不同的价值

98
00:04:51,480 --> 00:04:54,600
因为我们总是计算一个全新的值

99
00:04:54,600 --> 00:04:56,610
因为这被调用了。

100
00:04:56,610 --> 00:04:59,250
我给你看是因为它很重要

101
00:04:59,250 --> 00:05:01,690
了解 Vue 的工作原理

102
00:05:01,690 --> 00:05:04,760
你可以在这里执行 JavaScript 表达式

103
00:05:04,760 --> 00:05:08,030
在花括号之间以及使用 v-bind 时。

104
00:05:08,030 --> 00:05:10,830
这给了你很大的灵活性。

105
00:05:10,830 --> 00:05:14,180
因为只要使用这个非常简单的例子，

106
00:05:14,180 --> 00:05:17,850
我们这里的应用程序至少更动态一些，

107
00:05:17,850 --> 00:05:21,260
因为现在我们在这里并不总是看到相同的文本。

108
00:05:21,260 --> 00:05:25,460
相反，在重新加载后，它会发生变化。

109
00:05:25,460 --> 00:05:27,710
那是一个更动态的应用程序，

110
00:05:27,710 --> 00:05:30,530
我们可以使用 Vue 轻松构建，

111
00:05:30,530 --> 00:05:32,150
我们无法建造

112
00:05:32,150 --> 00:05:35,620
只有 HTML 没有 JavaScript。

113
00:05:35,620 --> 00:05:38,780
因此，我们已经越来越接近看到

114
00:05:38,780 --> 00:05:41,190
为什么 Vue 真的很棒，

115
00:05:41,190 --> 00:05:42,790
我们建造了我们的第一个

116
00:05:42,790 --> 00:05:45,603
至少更动态的应用程序。