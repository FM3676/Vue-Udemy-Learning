1
00:00:02,130 --> 00:00:05,820
So back in the project worked on before.

2
00:00:05,820 --> 00:00:08,920
A bit simplified, I dumped the event modifiers,

3
00:00:08,920 --> 00:00:12,500
I dumped v-ons and you find this snapshot attached

4
00:00:12,500 --> 00:00:15,360
to this lecture in case you all don't want to start from,

5
00:00:15,360 --> 00:00:17,700
well, this state again.

6
00:00:17,700 --> 00:00:19,290
So I'm back in this project

7
00:00:19,290 --> 00:00:21,900
where we have this input element that the buttons

8
00:00:21,900 --> 00:00:23,933
for the counter and so on.

9
00:00:25,070 --> 00:00:29,670
Now let's say our goal is to have another button

10
00:00:29,670 --> 00:00:33,740
maybe here below the input where we say resetInput.

11
00:00:34,760 --> 00:00:36,930
And the buttons should do what the name implies.

12
00:00:36,930 --> 00:00:41,223
It should reset the input in, well, the input element.

13
00:00:42,420 --> 00:00:45,360
For that, we can add a new method,

14
00:00:45,360 --> 00:00:48,710
resetInput, or however you wanna name it.

15
00:00:48,710 --> 00:00:52,690
And in there, how do we do that?

16
00:00:52,690 --> 00:00:56,400
In there we now want to be clear this input.

17
00:00:56,400 --> 00:00:59,700
Now we could try to get access to the input

18
00:00:59,700 --> 00:01:04,700
through JavaScript with document.querySelector, for example,

19
00:01:05,660 --> 00:01:07,680
get access to the input like this,

20
00:01:07,680 --> 00:01:11,453
access to value property and set it to an empty string.

21
00:01:12,440 --> 00:01:16,440
This might actually work, but it's very hacky.

22
00:01:16,440 --> 00:01:19,990
We're not using Vue to then fall back

23
00:01:19,990 --> 00:01:22,980
to such explicit JavaScript instructions.

24
00:01:22,980 --> 00:01:25,650
That's not the idea behind using Vue.

25
00:01:25,650 --> 00:01:27,670
Instead, we wanna stay in the Vue world

26
00:01:27,670 --> 00:01:30,553
and leverage Vue and its features for that.

27
00:01:31,390 --> 00:01:33,640
So how could we do that?

28
00:01:33,640 --> 00:01:38,640
Well, we could use the name, data property,

29
00:01:40,340 --> 00:01:43,260
which is the value we're ultimately updating

30
00:01:43,260 --> 00:01:44,970
on every key stroke.

31
00:01:44,970 --> 00:01:49,750
And output it here in input by setting value,

32
00:01:49,750 --> 00:01:53,260
the value attribute equal to name, however, not like this,

33
00:01:53,260 --> 00:01:57,390
but instead since name is dynamic and managed by Vue

34
00:01:57,390 --> 00:01:59,273
with help of v-bind.

35
00:02:00,280 --> 00:02:05,280
With that I'm making sure that name is reflected here.

36
00:02:05,740 --> 00:02:08,900
So this name here is reflected in the input.

37
00:02:08,900 --> 00:02:10,660
Why am I doing that?

38
00:02:10,660 --> 00:02:14,020
Well if I now go to resetInput

39
00:02:14,020 --> 00:02:17,050
and set this name equal to an empty string,

40
00:02:17,050 --> 00:02:21,010
that empty value should be reflected in the input

41
00:02:21,010 --> 00:02:25,000
and we should be able to set it back to an empty string.

42
00:02:25,000 --> 00:02:27,110
Now we'll have one problem with that.

43
00:02:27,110 --> 00:02:29,970
And that is that in set name,

44
00:02:29,970 --> 00:02:32,900
I'm not setting name to just what the user enters,

45
00:02:32,900 --> 00:02:36,980
but to what the user enters plus the last name.

46
00:02:36,980 --> 00:02:39,530
And that would lead to a strange behavior

47
00:02:39,530 --> 00:02:42,590
if we then reflect name back into this input here,

48
00:02:42,590 --> 00:02:44,050
I can actually show it to you.

49
00:02:44,050 --> 00:02:48,010
If I reload you'll see if I start typing

50
00:02:48,010 --> 00:02:50,850
Schwartzmueller gets added over and over again,

51
00:02:50,850 --> 00:02:52,690
which is not the idea.

52
00:02:52,690 --> 00:02:55,960
So for the moment, let's get rid of this last name,

53
00:02:55,960 --> 00:02:57,400
which we add here.

54
00:02:57,400 --> 00:03:00,250
And let's just store what the user enters

55
00:03:00,250 --> 00:03:02,680
with every keystroke in name,

56
00:03:02,680 --> 00:03:05,700
and then reflect named back into the input

57
00:03:05,700 --> 00:03:09,230
so that there we really reflect what the user entered.

58
00:03:09,230 --> 00:03:14,040
And now let's also connect this button here with v-on:click

59
00:03:15,009 --> 00:03:19,010
to this newly added resetInput method

60
00:03:19,010 --> 00:03:20,240
so that this is triggered

61
00:03:20,240 --> 00:03:22,890
when the resetInput button is pressed.

62
00:03:22,890 --> 00:03:24,630
And with that, if I now reload,

63
00:03:24,630 --> 00:03:27,400
I can enter Max here and it all works.

64
00:03:27,400 --> 00:03:30,950
But if I click resetInput, we cleared it.

65
00:03:30,950 --> 00:03:33,210
We also cleared in the paragraph

66
00:03:33,210 --> 00:03:36,580
because there we're referring to the same name,

67
00:03:36,580 --> 00:03:38,390
which we reset here,

68
00:03:38,390 --> 00:03:40,660
but that's just a little side effect here.

69
00:03:40,660 --> 00:03:42,790
Of course if you wanted to prevent that,

70
00:03:42,790 --> 00:03:45,510
we could use a separate value, which would be output here,

71
00:03:45,510 --> 00:03:49,200
which be confirmed upon hitting enter or anything like that.

72
00:03:49,200 --> 00:03:53,200
I showed this before, how we could work with two values,

73
00:03:53,200 --> 00:03:55,430
confirmed input and irregular input,

74
00:03:55,430 --> 00:03:57,760
but that's not what this is about.

75
00:03:57,760 --> 00:04:00,920
Instead, what this is about is about the fact that

76
00:04:00,920 --> 00:04:03,970
this is a pattern you could need in some occasions.

77
00:04:03,970 --> 00:04:07,460
You might have inputs where you don't just want

78
00:04:07,460 --> 00:04:10,220
to get the value the user entered,

79
00:04:10,220 --> 00:04:14,170
but where you also want to set the value

80
00:04:14,170 --> 00:04:16,790
of the input so that you, for example,

81
00:04:16,790 --> 00:04:19,990
can reset it with a button or any other logic

82
00:04:19,990 --> 00:04:22,130
you have on your page.

83
00:04:22,130 --> 00:04:24,030
And you can then achieve this

84
00:04:24,030 --> 00:04:26,220
by not just listening to the input,

85
00:04:26,220 --> 00:04:30,790
but by also sending the stored value back into the input

86
00:04:30,790 --> 00:04:32,900
by binding the value property.

87
00:04:32,900 --> 00:04:35,690
This is a common pattern you could need.

88
00:04:35,690 --> 00:04:37,840
And actually it's so common

89
00:04:37,840 --> 00:04:39,560
that you need something like this

90
00:04:39,560 --> 00:04:43,220
that Vue has a shortcut for this you could say.

91
00:04:43,220 --> 00:04:47,360
It has a special built in directive which simplifies this.

92
00:04:47,360 --> 00:04:52,360
If you bind the value and listen to input changes on input,

93
00:04:53,440 --> 00:04:56,270
you can get rid of all of that.

94
00:04:56,270 --> 00:05:00,520
So both of the value binding and the input event listening,

95
00:05:00,520 --> 00:05:04,760
get rid of both and instead add a new directive

96
00:05:04,760 --> 00:05:08,670
on the input, the v-model directive.

97
00:05:08,670 --> 00:05:12,950
And this v-model directive now simply wants

98
00:05:12,950 --> 00:05:16,690
the data property it should manage for you,

99
00:05:16,690 --> 00:05:19,780
so in our case, the name property.

100
00:05:19,780 --> 00:05:23,220
The name property now is managed by Vue

101
00:05:23,220 --> 00:05:27,180
such that it's updated on the input event

102
00:05:27,180 --> 00:05:30,710
and the name properties value is then sent back

103
00:05:30,710 --> 00:05:32,290
into the input element.

104
00:05:32,290 --> 00:05:37,290
So v-model is simply just a shortcut for v-bind value

105
00:05:38,450 --> 00:05:40,310
and v-on input,

106
00:05:40,310 --> 00:05:42,637
v-model is just a shortcut for this.

107
00:05:42,637 --> 00:05:44,480
And if I now save that and reload,

108
00:05:44,480 --> 00:05:46,850
we therefore get the same behavior as before

109
00:05:47,810 --> 00:05:49,590
but with less code.

110
00:05:49,590 --> 00:05:52,980
And this is a concept called two-way binding

111
00:05:52,980 --> 00:05:55,760
because we're communicating in both ways,

112
00:05:55,760 --> 00:05:58,610
we are listening to an event coming

113
00:05:58,610 --> 00:06:02,170
out of the input element you could say to the input event.

114
00:06:02,170 --> 00:06:06,050
And at the same time, we're writing the value back

115
00:06:06,050 --> 00:06:09,750
to the input element through its value attribute,

116
00:06:09,750 --> 00:06:11,900
through its value property.

117
00:06:11,900 --> 00:06:13,710
That's why it's called two-way binding

118
00:06:13,710 --> 00:06:16,630
because we communicate in both directions.

119
00:06:16,630 --> 00:06:18,120
And this is useful,

120
00:06:18,120 --> 00:06:21,480
it makes getting user input and updating it

121
00:06:21,480 --> 00:06:23,170
much easier as you can tell,

122
00:06:23,170 --> 00:06:25,760
it's less code and therefore absolutely

123
00:06:25,760 --> 00:06:29,280
a pattern and specifically a directive

124
00:06:29,280 --> 00:06:30,480
you should keep in mind.

