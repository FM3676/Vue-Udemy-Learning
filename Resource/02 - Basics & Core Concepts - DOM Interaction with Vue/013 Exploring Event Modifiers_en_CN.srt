1
00:00:02,160 --> 00:00:04,860
现在我们了解了有关事件的基础知识，

2
00:00:04,860 --> 00:00:07,160
让我们谈谈事件修饰符，

3
00:00:07,160 --> 00:00:10,023
这是 Vue 内置的另一个有用功能。

4
00:00:10,960 --> 00:00:13,030
这是事件修饰符的示例

5
00:00:13,030 --> 00:00:15,280
这有时很有用。

6
00:00:15,280 --> 00:00:18,780
假设您有一个表单 HTML 元素，

7
00:00:18,780 --> 00:00:23,780
在那里你有一些输入，你有一个按钮

8
00:00:25,550 --> 00:00:27,780
说，注册，无论如何，

9
00:00:27,780 --> 00:00:29,410
如果你重新加载，你在这里。

10
00:00:29,410 --> 00:00:31,650
现在默认情况下你会遇到的问题，

11
00:00:31,650 --> 00:00:33,270
如果你就这样离开它，

12
00:00:33,270 --> 00:00:36,410
即使它在 Vue 控制的 HTML 部分

13
00:00:36,410 --> 00:00:39,853
就是当你点击这个按钮时，这个页面会重新加载。

14
00:00:41,100 --> 00:00:44,650
原因是浏览器默认

15
00:00:44,650 --> 00:00:48,630
对于带有这样按钮的表单是提交该表单

16
00:00:48,630 --> 00:00:53,630
并向服务于该应用程序的服务器发送 HTTP 请求。

17
00:00:53,750 --> 00:00:55,720
在这种情况下，我们没有这样的服务器，

18
00:00:55,720 --> 00:00:57,110
我们在本地运行，

19
00:00:57,110 --> 00:00:59,800
但浏览器仍然只是发送一个请求

20
00:00:59,800 --> 00:01:02,730
因此，您可以说是到我们的本地机器。

21
00:01:02,730 --> 00:01:05,530
现在，当然，我们没有代码

22
00:01:05,530 --> 00:01:07,710
来处理这个请求。

23
00:01:07,710 --> 00:01:11,150
现在我们将在本课程的稍后部分到达那里，

24
00:01:11,150 --> 00:01:14,290
但通常使用像 Vue 这样的框架，

25
00:01:14,290 --> 00:01:17,510
你想阻止这个浏览器默认

26
00:01:17,510 --> 00:01:21,620
相反，您想手动处理

27
00:01:21,620 --> 00:01:25,620
在 Vue 应用程序中借助 Vue 在 JavaScript 中

28
00:01:25,620 --> 00:01:29,280
你想在那里阅读用户输入，验证它

29
00:01:29,280 --> 00:01:32,120
然后手动发送到后端服务器

30
00:01:32,120 --> 00:01:34,440
例如，并将其存储在数据库中。

31
00:01:34,440 --> 00:01:37,010
所以你想阻止浏览器默认

32
00:01:37,010 --> 00:01:38,893
自动发送。

33
00:01:40,100 --> 00:01:42,120
现在，有两种方法可以做到这一点。

34
00:01:42,120 --> 00:01:45,620
其中一个很酷，另一个更明显，

35
00:01:45,620 --> 00:01:46,810
我会说。

36
00:01:46,810 --> 00:01:49,690
你可以在这里收听提交事件，

37
00:01:49,690 --> 00:01:52,250
这又是一个默认的浏览器事件

38
00:01:52,250 --> 00:01:55,630
您可以在表单元素上收听。

39
00:01:55,630 --> 00:01:57,380
然后我们可以在这里有一个方法，

40
00:01:57,380 --> 00:02:00,270
提交这样的表格

41
00:02:00,270 --> 00:02:03,900
我们可以在这里指出，提交表单。

42
00:02:03,900 --> 00:02:06,870
现在我们告诉 Vue 每当提交表单时，

43
00:02:06,870 --> 00:02:09,509
提交表单应该被执行。

44
00:02:09,509 --> 00:02:11,270
在这里，我们可以为所欲为。

45
00:02:11,270 --> 00:02:13,763
例如，显示已提交的警报。

46
00:02:14,800 --> 00:02:17,640
现在，问题是我们还有

47
00:02:17,640 --> 00:02:18,473
浏览器默认。

48
00:02:18,473 --> 00:02:20,690
如果我点击这个，我会收到警报，

49
00:02:20,690 --> 00:02:24,130
但此后页面重新加载，当页面重新加载时，

50
00:02:24,130 --> 00:02:26,800
这意味着我们丢失了所有数据，对吗？

51
00:02:26,800 --> 00:02:30,320
如果我在这里有柜台并点击注册，

52
00:02:30,320 --> 00:02:32,070
你会看到所有数据都丢失了

53
00:02:32,070 --> 00:02:35,630
由于页面重新加载，Vue 应用程序重新启动

54
00:02:35,630 --> 00:02:36,630
可以这么说。

55
00:02:36,630 --> 00:02:39,440
所以我们还没有解决问题，

56
00:02:39,440 --> 00:02:43,330
但请记住，我们得到了这个默认事件对象，

57
00:02:43,330 --> 00:02:46,060
我在上一节课中谈到了这一点。

58
00:02:46,060 --> 00:02:49,320
现在我们可以调用 prevent default 。

59
00:02:49,320 --> 00:02:52,190
这是默认的浏览器机制，

60
00:02:52,190 --> 00:02:53,880
它是用 JavaScript 构建的，

61
00:02:53,880 --> 00:02:56,810
它完全独立于 Vue。

62
00:02:56,810 --> 00:03:00,130
即使我们只是使用 Vanilla JavaScript

63
00:03:00,130 --> 00:03:02,640
在我们得到的默认事件对象上，

64
00:03:02,640 --> 00:03:04,663
我们可以称之为防止默认。

65
00:03:05,545 --> 00:03:07,210
这会告诉浏览器表单

66
00:03:07,210 --> 00:03:08,890
不应该提交，

67
00:03:08,890 --> 00:03:11,383
我们不希望该浏览器默认。

68
00:03:12,220 --> 00:03:15,340
所以现在如果我重新加载，我可以改变我的计数器，

69
00:03:15,340 --> 00:03:18,990
点击注册，我们看到警报和计数器仍然

70
00:03:18,990 --> 00:03:21,740
是因为现在浏览器默认

71
00:03:21,740 --> 00:03:23,073
已被阻止。

72
00:03:24,190 --> 00:03:27,330
这行得通，没有任何问题，

73
00:03:27,330 --> 00:03:30,920
但是 Vue 为我们提供了更好的方法。

74
00:03:30,920 --> 00:03:32,690
我们可以删除所有代码

75
00:03:32,690 --> 00:03:37,010
而是使用所谓的事件修饰符。

76
00:03:37,010 --> 00:03:40,160
有某些内置修饰符，

77
00:03:40,160 --> 00:03:44,633
您可以连接到您正在收听的事件，

78
00:03:44,633 --> 00:03:46,740
假设要更改该事件行为，

79
00:03:46,740 --> 00:03:51,740
然后在事件名称后添加一个带点的修饰符

80
00:03:52,160 --> 00:03:53,810
v-on 之后。

81
00:03:53,810 --> 00:03:57,710
所以 v-on: 然后是事件名称，然后是一个点

82
00:03:57,710 --> 00:03:59,910
如果你想要修饰符。

83
00:03:59,910 --> 00:04:03,110
现在，只有几个受支持的修饰符。

84
00:04:03,110 --> 00:04:05,840
您可以在官方文档中找到完整列表。

85
00:04:05,840 --> 00:04:10,350
例如，有一个 prevent 修饰符和这个修饰符，

86
00:04:10,350 --> 00:04:14,680
内置在 Vue 中将阻止浏览器默认设置。

87
00:04:14,680 --> 00:04:19,209
所以它基本上会做我们一秒钟前手动做的事情

88
00:04:19,209 --> 00:04:20,942
只需更少的代码。

89
00:04:21,820 --> 00:04:25,830
总是有一个停止修饰符用于停止传播，

90
00:04:25,830 --> 00:04:28,850
但是这里我们需要防止修饰符。

91
00:04:28,850 --> 00:04:32,490
有了数据，如果你重新加载，我可以注册。

92
00:04:32,490 --> 00:04:35,600
我们看到了这个警报，但页面仍然没有重新加载，

93
00:04:35,600 --> 00:04:38,240
感谢这个修饰符。

94
00:04:38,240 --> 00:04:42,440
所以很高兴知道，稍后会派上用场。

95
00:04:42,440 --> 00:04:44,770
我们不仅有这样的事件修饰符

96
00:04:44,770 --> 00:04:47,590
更改事件和浏览器行为，

97
00:04:47,590 --> 00:04:51,340
我们还有可以连接到事件的修饰符

98
00:04:51,340 --> 00:04:54,460
在事件发生时更改。

99
00:04:54,460 --> 00:04:56,790
一个例子就是我们的按钮。

100
00:04:56,790 --> 00:04:59,440
让我们说无论出于何种原因，

101
00:04:59,440 --> 00:05:03,480
如果用户右键单击，我们只想减去五个

102
00:05:03,480 --> 00:05:04,800
按钮上。

103
00:05:04,800 --> 00:05:08,670
默认当然是对左键单击做出反应。

104
00:05:08,670 --> 00:05:10,750
但是，如果您希望它对右键单击做出反应，

105
00:05:10,750 --> 00:05:13,480
我们也可以在这里添加一个修饰符。

106
00:05:13,480 --> 00:05:15,513
我们可以将其设置为正确的。

107
00:05:16,400 --> 00:05:20,110
留下替代值，您无需指定

108
00:05:20,110 --> 00:05:24,470
因为它是默认的，中间很好，对。

109
00:05:24,470 --> 00:05:26,830
这告诉 Vue 在这里，

110
00:05:26,830 --> 00:05:30,220
您只想对右键单击做出反应。

111
00:05:30,220 --> 00:05:32,700
所以当你使用像点击这样的鼠标事件时，

112
00:05:32,700 --> 00:05:36,230
您可以使用右、左和中间事件修饰符

113
00:05:36,230 --> 00:05:40,223
更改触发此事件的鼠标按钮。

114
00:05:41,210 --> 00:05:42,710
所以如果我们现在保存这个，你看，

115
00:05:42,710 --> 00:05:45,660
我可以通过左键单击添加 10

116
00:05:45,660 --> 00:05:47,520
但是如果我点击减五

117
00:05:47,520 --> 00:05:49,740
用左键，什么也没有发生。

118
00:05:49,740 --> 00:05:52,150
但是，如果我使用鼠标右键，

119
00:05:52,150 --> 00:05:53,800
你可以告诉我在做什么，

120
00:05:53,800 --> 00:05:56,100
因为我的上下文菜单打开了，

121
00:05:56,100 --> 00:05:58,610
现在柜台变小了。

122
00:05:58,610 --> 00:06:01,920
当然我们可以争论这在这里是否有用，

123
00:06:01,920 --> 00:06:06,220
但了解这些修饰符绝对有用。

124
00:06:06,220 --> 00:06:08,860
还有最后一种修饰符。

125
00:06:08,860 --> 00:06:11,000
那将是关键修饰符

126
00:06:11,000 --> 00:06:13,610
当你在听键盘事件时

127
00:06:13,610 --> 00:06:15,890
就像在输入元素上一样。

128
00:06:15,890 --> 00:06:19,440
目前我们正在这里更新输入事件的名称，

129
00:06:19,440 --> 00:06:21,370
每次击键都如此。

130
00:06:21,370 --> 00:06:26,180
现在假设我们要更新内部存储的名称

131
00:06:26,180 --> 00:06:29,950
每次击键时作为名称财产出售，

132
00:06:29,950 --> 00:06:34,480
但是这里输出的名称应该只更新

133
00:06:34,480 --> 00:06:39,480
当用户在这个输入元素上按下回车键时吨。

134
00:06:40,710 --> 00:06:43,800
好吧，为此，我们可以有另一个数据属性

135
00:06:43,800 --> 00:06:47,540
确认名称，即实际名称

136
00:06:47,540 --> 00:06:49,420
我们想在这里输出。

137
00:06:49,420 --> 00:06:54,420
所以在这里我们得到了本段中确认的名称

138
00:06:55,570 --> 00:06:59,960
和确认的名称，与内部存储的名称不同，

139
00:06:59,960 --> 00:07:01,810
这只是命名的名字，

140
00:07:01,810 --> 00:07:04,930
确认的名称应该只在此处更新

141
00:07:04,930 --> 00:07:08,283
当用户在此输入字段中点击输入按钮时。

142
00:07:09,140 --> 00:07:13,190
为此，我们可以添加另一个事件监听器

143
00:07:13,190 --> 00:07:14,720
在输入元素上。

144
00:07:14,720 --> 00:07:16,600
是的，您可以拥有多个。

145
00:07:16,600 --> 00:07:20,370
所以这里我们用 v-on 输入来监听输入。

146
00:07:20,370 --> 00:07:24,040
现在我将添加另一个 v-on 指令并聆听

147
00:07:24,040 --> 00:07:27,140
到关键事件，

148
00:07:27,140 --> 00:07:31,080
当再次按下并释放一个键时触发。

149
00:07:31,080 --> 00:07:35,480
在这里，我想触发一个我还没有添加的方法，

150
00:07:35,480 --> 00:07:39,730
我将调用确认输入或确认名称，

151
00:07:39,730 --> 00:07:41,520
无论你想要什么。

152
00:07:41,520 --> 00:07:44,160
这里的目标是确认输入

153
00:07:44,160 --> 00:07:47,960
就是设置这个确认的名字，

154
00:07:47,960 --> 00:07:50,640
所以我们添加了这个新的数据属性，

155
00:07:50,640 --> 00:07:52,920
我们在本段中输出的，

156
00:07:52,920 --> 00:07:57,450
将此确认的名称设置为内部存储的名称，

157
00:07:57,450 --> 00:07:59,633
我们每次击键都会更新它。

158
00:08:01,640 --> 00:08:06,640
所以这里 v-on 键，我想指出确认输入。

159
00:08:08,270 --> 00:08:10,910
现在，这会在任何时候触发

160
00:08:10,910 --> 00:08:13,790
按下并释放任何键。

161
00:08:13,790 --> 00:08:17,480
所以目前，如果我在这里重新加载，我们基本上会有

162
00:08:17,480 --> 00:08:21,440
每次击键时的行为与以前相同

163
00:08:21,440 --> 00:08:25,220
输入事件，但也触发了按键事件

164
00:08:25,220 --> 00:08:27,440
因此我们基本上确认输入

165
00:08:27,440 --> 00:08:28,593
每次击键。

166
00:08:29,690 --> 00:08:33,620
所以这可能不是我们想要的最终行为。

167
00:08:33,620 --> 00:08:37,260
相反，我们可以在这里使用另一个带点的修饰符

168
00:08:37,260 --> 00:08:40,750
告诉 Vue，因为这是一个键盘事件，

169
00:08:40,750 --> 00:08:42,409
我们只想做出反应

170
00:08:42,409 --> 00:08:46,990
我们只想在某些特殊键上触发此事件

171
00:08:46,990 --> 00:08:49,160
被按下和释放。

172
00:08:49,160 --> 00:08:51,620
例如，回车键，

173
00:08:51,620 --> 00:08:56,070
您还可以收听控制或切换或向下翻页，

174
00:08:56,070 --> 00:08:58,720
所有的键盘键都可以在这里，

175
00:08:58,720 --> 00:09:01,163
但我想听回车键。

176
00:09:02,010 --> 00:09:05,140
有了这个，我说，嘿，当输入键

177
00:09:05,140 --> 00:09:07,040
被按下和释放，

178
00:09:07,040 --> 00:09:09,923
然后确认输入应该被执行。

179
00:09:10,850 --> 00:09:13,570
所以现在如果我保存并重新加载，

180
00:09:13,570 --> 00:09:18,570
我可以在这里进入马克西米利安，我们什么也看不到

181
00:09:18,770 --> 00:09:23,770
绿色框，但如果我将光标放在此处并按回车键，

182
00:09:24,010 --> 00:09:25,893
现在我们在这里看到了输出。

183
00:09:27,460 --> 00:09:30,370
所以这些是事件修饰符。

184
00:09:30,370 --> 00:09:33,570
现在我要快速自动格式化这段 HTML 代码

185
00:09:33,570 --> 00:09:36,940
在此处使用格式文档组合键

186
00:09:36,940 --> 00:09:39,460
在 Visual Studio Code 中使其更具可读性，

187
00:09:39,460 --> 00:09:40,770
但它与以前的代码相同

188
00:09:40,770 --> 00:09:42,530
只是结构不同。

189
00:09:42,530 --> 00:09:44,560
这就是我们刚刚处理的输入，

190
00:09:44,560 --> 00:09:46,880
我们有输入事件和按键事件

191
00:09:46,880 --> 00:09:49,890
使用 enter 修饰符更改时

192
00:09:49,890 --> 00:09:51,763
确认输入执行。