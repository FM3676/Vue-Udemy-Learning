1
00:00:02,209 --> 00:00:03,320
[Maximilian Schwarzmuller] 所以现在我们知道如何

2
00:00:03,320 --> 00:00:04,500
输出数据。

3
00:00:04,500 --> 00:00:06,290
在现代 Web 应用程序中，

4
00:00:06,290 --> 00:00:08,560
这只是你所做的一半。

5
00:00:08,560 --> 00:00:11,020
您还需要对用户输入做出反应。

6
00:00:11,020 --> 00:00:12,810
你需要对事件做出反应。

7
00:00:12,810 --> 00:00:15,260
你想制作动态页面。

8
00:00:15,260 --> 00:00:18,290
毕竟这是使用的主要原因之一

9
00:00:18,290 --> 00:00:19,760
像 Vue 这样的框架。

10
00:00:19,760 --> 00:00:22,810
它使构建具有高度的反应性和动态性，

11
00:00:22,810 --> 00:00:24,743
Web 应用程序更容易。

12
00:00:25,700 --> 00:00:28,470
因此，这就是我们接下来要关注的，

13
00:00:28,470 --> 00:00:31,220
并附上你会发现一个简单的启动项目，

14
00:00:31,220 --> 00:00:34,040
这与之前的并没有太大的不同。

15
00:00:34,040 --> 00:00:36,730
我们只是内容略有不同。

16
00:00:36,730 --> 00:00:39,350
现在仍然有一个具有不同 ID 的部分，

17
00:00:39,350 --> 00:00:43,510
在那里我们有两个按钮，添加和删除。

18
00:00:43,510 --> 00:00:47,130
我们还有一段，我输出一个计数器，

19
00:00:47,130 --> 00:00:49,290
在他的 Vue 应用程序中进行管理，

20
00:00:49,290 --> 00:00:51,940
这已经为您创建了。

21
00:00:51,940 --> 00:00:55,020
如您所知，这是一个非常简单的 Vue 应用程序，

22
00:00:55,020 --> 00:00:57,500
很空，只需要说明一个方法，

23
00:00:57,500 --> 00:00:59,260
我返回数据的地方，

24
00:00:59,260 --> 00:01:01,570
最后只包含一个计数器，

25
00:01:01,570 --> 00:01:03,480
这是一个数字，从零开始。

26
00:01:03,480 --> 00:01:06,720
然后将它安装到事件部分，

27
00:01:06,720 --> 00:01:10,490
这是包含所有标记的部分。

28
00:01:10,490 --> 00:01:12,810
现在，这些按钮没有任何作用。

29
00:01:12,810 --> 00:01:16,210
如果我按下它们，你会明白的，没有任何反应。

30
00:01:16,210 --> 00:01:18,610
这正是我们想要做的。

31
00:01:18,610 --> 00:01:21,400
我想向您展示如何对用户输入做出反应，

32
00:01:21,400 --> 00:01:24,520
以及你现在如何真正利用 Vue，

33
00:01:24,520 --> 00:01:28,940
制作更具交互性和反应性的 Web 应用程序。

34
00:01:28,940 --> 00:01:31,670
比方说，当这个按钮，添加按钮，

35
00:01:31,670 --> 00:01:33,220
当这个按钮被按下时，

36
00:01:33,220 --> 00:01:35,937
我们想在柜台上加一个。

37
00:01:35,937 --> 00:01:40,040
还有删除按钮，或者减少。

38
00:01:40,040 --> 00:01:42,040
按下缩小按钮时，

39
00:01:42,040 --> 00:01:45,720
我们想从柜台上扣除一个。

40
00:01:45,720 --> 00:01:48,650
让我们从添加按钮开始，我们该怎么做呢？

41
00:01:48,650 --> 00:01:51,050
在常规 JavaScript 中，

42
00:01:51,050 --> 00:01:55,710
我们可以访问带有文档的按钮，

43
00:01:55,710 --> 00:01:57,100
通过 ID 获取元素。

44
00:01:57,100 --> 00:02:00,710
如果该按钮有 ID 或带有查询选择器，

45
00:02:00,710 --> 00:02:03,190
并选择我们找到的第一个按钮，

46
00:02:03,190 --> 00:02:05,080
我们可以添加一个事件监听器，

47
00:02:05,080 --> 00:02:07,070
使用 addEventListener 方法。

48
00:02:07,070 --> 00:02:09,430
我们就是这样做的，

49
00:02:09,430 --> 00:02:13,140
在原生 JavaScript 中，没有 Vue。

50
00:02:13,140 --> 00:02:14,410
但是我们使用的是 Vue，

51
00:02:14,410 --> 00:02:16,530
这样我们就不必这样做了，

52
00:02:16,530 --> 00:02:20,310
这样我们就不必一步一步地定义，

53
00:02:20,310 --> 00:02:23,370
应该发生什么，但我们可以利用，

54
00:02:23,370 --> 00:02:26,850
这种声明性的方法，只是声明，

55
00:02:26,850 --> 00:02:31,110
我们的最终结果，让 Vue 弄清楚如何到达那里。

56
00:02:31,110 --> 00:02:32,810
因此，值得庆幸的是，

57
00:02:32,810 --> 00:02:36,455
Vue 为我们提供了一种更简单的添加 EventListener 的方法，

58
00:02:36,455 --> 00:02:38,720
到 HTML 元素。

59
00:02:38,720 --> 00:02:41,730
如果我们想给这个按钮添加一个点击监听器，

60
00:02:41,730 --> 00:02:44,660
我们可以使用 never Vue 指令。

61
00:02:44,660 --> 00:02:46,540
我们了解了 V-bind。

62
00:02:46,540 --> 00:02:51,250
V-bind 有助于设置属性的值。

63
00:02:51,250 --> 00:02:52,990
现在添加 EventListeners，

64
00:02:52,990 --> 00:02:56,720
我们还有另一个指令，那就是 V-on 指令，

65
00:02:56,720 --> 00:03:00,003
因为我们想对某个事件做出反应。

66
00:03:00,910 --> 00:03:05,420
V-on 接受一个所谓的参数，在冒号之后，

67
00:03:05,420 --> 00:03:08,970
就像V-bind一样，取了属性，

68
00:03:08,970 --> 00:03:10,330
应该绑定。

69
00:03:10,330 --> 00:03:13,390
V-on 把你想听的事件，

70
00:03:13,390 --> 00:03:14,730
在冒号之后。

71
00:03:14,730 --> 00:03:16,023
在这种情况下，单击。

72
00:03:17,310 --> 00:03:20,120
现在，如果您想知道可以收听哪些事件。

73
00:03:20,120 --> 00:03:22,950
好吧，您可以收听的所有默认事件

74
00:03:22,950 --> 00:03:25,010
在 HTML 元素上。

75
00:03:25,010 --> 00:03:29,670
那就是点击，鼠标输入，鼠标离开，

76
00:03:29,670 --> 00:03:31,650
真的任何你可以听的东西

77
00:03:31,650 --> 00:03:33,570
在 vanilla JavaScript 中也是如此。

78
00:03:33,570 --> 00:03:36,210
在这里，这是我想听的点击。

79
00:03:36,210 --> 00:03:38,170
然后在等号之后，

80
00:03:38,170 --> 00:03:40,900
在开始和结束双引号之间，

81
00:03:40,900 --> 00:03:43,660
我们现在指定应该运行的代码，

82
00:03:43,660 --> 00:03:45,210
当点击发生时。

83
00:03:45,210 --> 00:03:47,580
这可能是反加，加，

84
00:03:47,580 --> 00:03:50,560
这是写作和 JavaScript 的最短形式，

85
00:03:50,560 --> 00:03:53,090
我们想在柜台上加一个。

86
00:03:53,090 --> 00:03:57,520
这只是 JavaScript 代码，没有特定于 Vue 的代码。

87
00:03:57,520 --> 00:04:00,660
与双花括号处的 V-bind 一样，

88
00:04:00,660 --> 00:04:03,149
你可以有简单的 JavaScript 表达式，

89
00:04:03,149 --> 00:04:06,320
在您的 HTML 代码中，

90
00:04:06,320 --> 00:04:08,920
在由 Vue 管理的部分中。

91
00:04:08,920 --> 00:04:11,170
就像这里的V-on。

92
00:04:11,170 --> 00:04:14,310
如果我现在将其保存在重新加载中，我可以单击添加，

93
00:04:14,310 --> 00:04:17,269
你会看到柜台变大了

94
00:04:17,269 --> 00:04:20,910
每次我点击这个按钮，感谢这段代码。

95
00:04:20,910 --> 00:04:23,410
现在试着做，嗯，基本一样，

96
00:04:23,410 --> 00:04:26,693
只需在此按钮上减少计数器。

97
00:04:28,520 --> 00:04:29,860
你成功了吗。

98
00:04:29,860 --> 00:04:31,930
嗯，当然不应该太难，

99
00:04:31,930 --> 00:04:33,670
它本质上是相同的代码。

100
00:04:33,670 --> 00:04:37,140
我们想对点击事件做出反应，用 V-on 点击​​。

101
00:04:37,140 --> 00:04:41,010
然后在这里，我们只有计数器减号，减号，

102
00:04:41,010 --> 00:04:44,140
或者更长的形式当然也可以。

103
00:04:44,140 --> 00:04:46,140
这完全取决于你，你在那里写什么。

104
00:04:46,140 --> 00:04:48,440
有了它，您还可以减少计数器。

105
00:04:48,440 --> 00:04:51,070
所以现在我们可以添加和减少。

106
00:04:51,070 --> 00:04:53,310
这很漂亮，很好。

107
00:04:53,310 --> 00:04:58,050
这就是我们如何在 Vue 中监听用户事件。

108
00:04:58,050 --> 00:05:00,070
这是一件非常重要的事情，

109
00:05:00,070 --> 00:05:01,490
这很容易被忽视，

110
00:05:01,490 --> 00:05:06,490
这向我们展示了为什么，我们使用 Vue，以及 Vue 有多么强大。

111
00:05:07,890 --> 00:05:10,830
你可能会注意到我们这里没有太多代码，

112
00:05:10,830 --> 00:05:15,600
一些 HTML 代码，绝对不是很多 JavaScript 代码。

113
00:05:15,600 --> 00:05:19,860
我的意思是，这就是我们编写的所有 JavaScript 代码。

114
00:05:19,860 --> 00:05:23,710
然而，我们有两个 EventListeners 和一个变化的计数器，

115
00:05:23,710 --> 00:05:27,200
最重要的是，也很容易被忽视，

116
00:05:27,200 --> 00:05:29,620
我们有一个在这里输出的计数器，

117
00:05:29,620 --> 00:05:32,890
用户看到的页面，

118
00:05:32,890 --> 00:05:35,700
每次计数器更改时都会更改。

119
00:05:35,700 --> 00:05:39,150
这里的负六，变成负五，

120
00:05:39,150 --> 00:05:40,370
如果我点击按钮，

121
00:05:40,370 --> 00:05:43,810
这不是通常会发生的事情

122
00:05:43,810 --> 00:05:44,740
在一个网页中。

123
00:05:44,740 --> 00:05:47,660
您需要编写 JavaScript 代码，

124
00:05:47,660 --> 00:05:50,790
添加 EventListeners，更改计数器。

125
00:05:50,790 --> 00:05:52,930
然后当计数器改变时，

126
00:05:52,930 --> 00:05:55,120
伸手去那一段，

127
00:05:55,120 --> 00:05:58,110
更改那里显示的值。

128
00:05:58,110 --> 00:06:01,860
这正是 Vue 在幕后为您所做的。

129
00:06:01,860 --> 00:06:06,190
这是 Vue 等框架的核心资产。

130
00:06:06,190 --> 00:06:10,820
你只需声明，你想在哪里有 EventListeners，

131
00:06:10,820 --> 00:06:13,210
以及你想要输出值的地方，

132
00:06:13,210 --> 00:06:15,910
以及您应该注意哪些价值观。

133
00:06:15,910 --> 00:06:18,720
Vue 我们所有其余的添加

134
00:06:18,720 --> 00:06:20,910
并管理这些听众，

135
00:06:20,910 --> 00:06:23,110
在幕后更新计数器。

136
00:06:23,110 --> 00:06:24,741
而最重要的是，

137
00:06:24,741 --> 00:06:27,800
检测计数器何时改变，

138
00:06:27,800 --> 00:06:31,670
并更新真实渲染页面的各个部分，

139
00:06:31,670 --> 00:06:33,740
需要更新的地方，

140
00:06:33,740 --> 00:06:35,600
当那个计数器改变时。

141
00:06:35,600 --> 00:06:37,840
这就是 Vue 在幕后所做的。

142
00:06:37,840 --> 00:06:39,100
这是一个，

143
00:06:39,100 --> 00:06:41,100
Vue的核心功能。

144
00:06:41,100 --> 00:06:43,380
这种内置的反应性，

145
00:06:43,380 --> 00:06:46,510
它检测到计数器发生变化，

146
00:06:46,510 --> 00:06:50,400
当你点击一个按钮，然后它会找到这些地方，

147
00:06:50,400 --> 00:06:52,980
在使用计数器的页面上，

148
00:06:52,980 --> 00:06:55,440
更新用户看到的内容，

149
00:06:55,440 --> 00:06:58,690
在幕后使用 JavaScript。

150
00:06:58,690 --> 00:07:00,110
我真的要强调这一点

151
00:07:00,110 --> 00:07:02,933
因为了解 Vue 在这里做了什么非常重要，

152
00:07:02,933 --> 00:07:05,740
希望为什么这很神奇，

153
00:07:05,740 --> 00:07:10,540
并使我们作为开发人员的生活变得更加轻松。

154
00:07:10,540 --> 00:07:13,320
好吧，这就是我们如何开始使用 Vue 中的事件。

155
00:07:13,320 --> 00:07:15,520
现在让我们看看我们还能用它们做什么。