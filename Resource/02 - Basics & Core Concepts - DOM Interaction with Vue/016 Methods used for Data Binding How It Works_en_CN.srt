1
00:00:02,170 --> 00:00:03,590
所以此时此刻，

2
00:00:03,590 --> 00:00:05,870
我们知道几件事。

3
00:00:05,870 --> 00:00:08,770
我们学习了 DOM 交互，

4
00:00:08,770 --> 00:00:11,470
这是一个复杂的术语，我的意思是

5
00:00:11,470 --> 00:00:14,770
我们学会了如何制作 DOM 的一部分，

6
00:00:14,770 --> 00:00:19,530
通过将 Vue 应用程序安装到我们的 Vue 应用程序的模板。

7
00:00:19,530 --> 00:00:21,200
我们学习了数据绑定，

8
00:00:21,200 --> 00:00:26,080
使用绑定和字符串插值，以及 v-HTML，

9
00:00:26,080 --> 00:00:28,810
我们了解了使用 v-on 进行事件处理，

10
00:00:28,810 --> 00:00:31,470
而且还带有v-model。

11
00:00:31,470 --> 00:00:34,820
准确的说，v-model是双向绑定，

12
00:00:34,820 --> 00:00:37,240
因此数据绑定的组合

13
00:00:37,240 --> 00:00:39,620
和事件处理可以这么说。

14
00:00:39,620 --> 00:00:42,260
现在，是时候进入第三个了，

15
00:00:42,260 --> 00:00:44,620
组成 Vue 的大块。

16
00:00:44,620 --> 00:00:46,690
这个区块没有正式名称，

17
00:00:46,690 --> 00:00:50,750
但我喜欢称其为高级反应性。

18
00:00:50,750 --> 00:00:53,110
Vue 非常被动，

19
00:00:53,110 --> 00:00:55,780
我们已经在很多地方看到了这一点。

20
00:00:55,780 --> 00:00:58,930
当我在这里输入时，这里的名称会更新，

21
00:00:58,930 --> 00:01:00,700
Vue 为我们做到了这一点。

22
00:01:00,700 --> 00:01:04,223
如果我们改变计数器也是一样的，所以一切正常。

23
00:01:05,080 --> 00:01:06,870
但我们还有更多功能

24
00:01:06,870 --> 00:01:09,380
比我们迄今为止所知道的要多。

25
00:01:09,380 --> 00:01:12,770
我想从回到方法开始

26
00:01:12,770 --> 00:01:15,210
除了将它们用于事件之外，

27
00:01:15,210 --> 00:01:18,890
然后向您展示一种更好的方法替代方案

28
00:01:18,890 --> 00:01:20,513
对于某些用例。

29
00:01:21,490 --> 00:01:24,840
现在，在这个应用程序中，我们将它添加到绑定中，

30
00:01:24,840 --> 00:01:29,800
但要添加它，我们必须在这里去掉我们的姓氏。

31
00:01:29,800 --> 00:01:31,410
现在，这还不算太糟糕

32
00:01:31,410 --> 00:01:34,720
因为我们输入名字的方式，

33
00:01:34,720 --> 00:01:39,660
无论如何，通过添加姓氏来获得全名并不理想，

34
00:01:39,660 --> 00:01:43,730
使用这个 setName 方法，传入这个参数，

35
00:01:43,730 --> 00:01:47,470
它奏效了，但正如你所见，只要你想做更多，

36
00:01:47,470 --> 00:01:50,470
例如，添加重置功能，

37
00:01:50,470 --> 00:01:53,920
像这样实现它非常困难，

38
00:01:53,920 --> 00:01:56,200
这就是为什么我们必须摆脱它。

39
00:01:56,200 --> 00:02:00,680
不过没问题，我们可以在这里输出全名，

40
00:02:00,680 --> 00:02:02,630
以不同的方式。

41
00:02:02,630 --> 00:02:04,920
例如，我们可以添加一个新方法，

42
00:02:04,920 --> 00:02:07,080
顺便说一句，任何你想要的地方，

43
00:02:07,080 --> 00:02:10,180
这里的方法顺序不起作用。

44
00:02:10,180 --> 00:02:12,470
所以我会在顶部添加它。

45
00:02:12,470 --> 00:02:15,257
我们将其命名为 outputFullname，

46
00:02:18,100 --> 00:02:20,860
因为这就是这个方法应该做的。

47
00:02:20,860 --> 00:02:25,090
它应该返回一些东西，因为我不会使用它

48
00:02:25,090 --> 00:02:26,970
将其绑定到一个事件，

49
00:02:26,970 --> 00:02:31,230
但我会用它在这里调用它，

50
00:02:31,230 --> 00:02:32,500
在花括号中，

51
00:02:32,500 --> 00:02:35,793
我想像这样调用 outputFullname。

52
00:02:36,680 --> 00:02:39,560
因此我想在这里恢复全名，

53
00:02:39,560 --> 00:02:44,530
然后将其插入到这部分 HTML 代码中。

54
00:02:44,530 --> 00:02:47,400
因此在这里我想返回这个名字，

55
00:02:47,400 --> 00:02:49,060
这是输入的名称，

56
00:02:49,060 --> 00:02:52,723
所以这个 name 属性，我们用 v-model 管理，

57
00:02:53,930 --> 00:02:58,683
加上一个空格，加上施瓦茨米勒，

58
00:03:00,070 --> 00:03:03,270
当然这个施瓦茨米勒也可以拿来

59
00:03:03,270 --> 00:03:06,463
从另一个输入，这里只是硬编码。

60
00:03:07,640 --> 00:03:09,920
如果它现在被保存然后重新加载，

61
00:03:09,920 --> 00:03:12,380
我们一开始就在这里看到施瓦茨米勒，

62
00:03:12,380 --> 00:03:14,460
如果我进入马克西米利安，

63
00:03:14,460 --> 00:03:16,960
我们看到马克西米利安·施瓦茨穆勒。

64
00:03:16,960 --> 00:03:20,030
现在，由于我使用的是一种方法，我们甚至可以添加一个 if 检查

65
00:03:20,030 --> 00:03:24,823
并检查此名称当前是否为空，

66
00:03:26,850 --> 00:03:30,230
如果它是空的，我们只是在这里返回一个空字符串，

67
00:03:30,230 --> 00:03:35,230
所以我们只添加 Schwarzmuller 如果 na我不是空的。

68
00:03:35,440 --> 00:03:37,480
所以在这里我们利用了这个事实

69
00:03:37,480 --> 00:03:41,250
我们有一种方法可以基于返回不同的值

70
00:03:41,250 --> 00:03:43,400
关于不同的价值观和名称。

71
00:03:43,400 --> 00:03:46,020
如果我保存为重新加载，

72
00:03:46,020 --> 00:03:48,940
我们确保我们最初看不到任何东西，

73
00:03:48,940 --> 00:03:52,860
我们只看到包括施瓦茨米勒的全名

74
00:03:52,860 --> 00:03:55,020
如果我确实输入了真实姓名，

75
00:03:55,020 --> 00:03:58,373
一旦它再次为空，全名就消失了。

76
00:03:59,280 --> 00:04:00,780
所以挺好看的

77
00:04:00,780 --> 00:04:03,307
但是，这不是最好的方法。

78
00:04:03,307 --> 00:04:06,530
“现在为什么这不是最好的方法呢？”

79
00:04:06,530 --> 00:04:10,090
好吧，如果我在这里输入我们会更新名称

80
00:04:10,090 --> 00:04:12,180
并在那里输出，这很好。

81
00:04:12,180 --> 00:04:16,000
问题是如果我按下这个计数器按钮

82
00:04:16,000 --> 00:04:17,950
我们没有看到问题，

83
00:04:17,950 --> 00:04:20,649
但在幕后 Vue 做了一些事情，

84
00:04:20,649 --> 00:04:22,940
这并不理想。

85
00:04:22,940 --> 00:04:25,130
当我们更换计数器时，

86
00:04:25,130 --> 00:04:28,530
Vue基本上试图找出，

87
00:04:28,530 --> 00:04:33,530
在此页面上，它需要更新呈现的页面。

88
00:04:35,000 --> 00:04:38,360
例如，如果计数器发生变化，Vue 会看到

89
00:04:38,360 --> 00:04:40,920
在本段中我们用来反击

90
00:04:40,920 --> 00:04:45,020
因此它需要在这里很好地更新这部分

91
00:04:45,020 --> 00:04:48,580
在真实页面上，这正是我们使用 Vue 的原因，

92
00:04:48,580 --> 00:04:51,870
它会自动为我们更新页面。

93
00:04:51,870 --> 00:04:56,010
问题是如果我们在这里调用这样的方法，

94
00:04:56,010 --> 00:05:01,010
这个方法也会被Vue重新执行，

95
00:05:01,040 --> 00:05:04,320
每当页面上的任何内容发生变化时，

96
00:05:04,320 --> 00:05:08,520
因为 Vue 无法知道这个方法是做什么的。

97
00:05:08,520 --> 00:05:10,200
它不知道在哪里，

98
00:05:10,200 --> 00:05:13,460
也许柜台在那里被使用。

99
00:05:13,460 --> 00:05:15,230
好吧，如果计数器改变了，

100
00:05:15,230 --> 00:05:17,770
这种方法可能使用计数器

101
00:05:17,770 --> 00:05:21,140
这个方法应该重新执行吧？

102
00:05:21,140 --> 00:05:24,490
好吧，出于这个原因，Vue 继续前进，

103
00:05:24,490 --> 00:05:27,640
并重新执行任何方法

104
00:05:27,640 --> 00:05:30,570
您在 HTML 代码中的任何地方使用

105
00:05:31,480 --> 00:05:36,130
在花括号之间，或与绑定，或与 HTML，

106
00:05:36,130 --> 00:05:40,740
所以任何非事件绑定的方法都会被 Vue 重新执行，

107
00:05:40,740 --> 00:05:43,390
每当屏幕上的任何东西发生变化时。

108
00:05:43,390 --> 00:05:47,300
即使像在这种情况下，我们知道在这种方法中，

109
00:05:47,300 --> 00:05:48,690
我们没有使用计数器。

110
00:05:48,690 --> 00:05:51,060
我们知道，但 Vue 不知道。

111
00:05:51,060 --> 00:05:54,620
从性能的角度来看，这并不是很好。

112
00:05:54,620 --> 00:05:56,110
顺便说一下，我们可以看到这一点，

113
00:05:56,110 --> 00:06:00,033
我们可以在这里添加一个控制台日志再次运行，

114
00:06:02,210 --> 00:06:05,970
如果我现在，增加一点，

115
00:06:05,970 --> 00:06:07,860
打开浏览器开发者工具，

116
00:06:07,860 --> 00:06:10,750
并转到 JavaScript 控制台部分，

117
00:06:10,750 --> 00:06:13,160
你会看到，如果我在这里重新加载，

118
00:06:13,160 --> 00:06:15,800
我们看到最初再次运行，

119
00:06:15,800 --> 00:06:18,920
但是如果我换成 counter，我们也会看到它再次运行，

120
00:06:18,920 --> 00:06:21,330
被一遍又一遍地执行，

121
00:06:21,330 --> 00:06:24,080
即使我们只是改为反击。

122
00:06:24,080 --> 00:06:26,910
仍然 outputFullname 再次执行，

123
00:06:26,910 --> 00:06:29,423
由于我刚才指定的原因。

124
00:06:31,230 --> 00:06:33,310
这不是后盾，这就是 Vue 的工作方式。

125
00:06:33,310 --> 00:06:37,710
这就是为什么方法不是最好的解决方案

126
00:06:37,710 --> 00:06:42,240
像这样输出一些动态计算的值，

127
00:06:42,240 --> 00:06:44,113
但是什么是更好的解决方案呢？