1
00:00:02,490 --> 00:00:04,740
Now we learned about computed properties,

2
00:00:04,740 --> 00:00:07,920
a key feature for outputting dynamic values

3
00:00:07,920 --> 00:00:10,570
that depend on multiple input values,

4
00:00:10,570 --> 00:00:13,800
or like in this case here on one input value

5
00:00:13,800 --> 00:00:16,239
and one hard-coded value.

6
00:00:16,239 --> 00:00:19,840
They're all this and never reactivity feature

7
00:00:19,840 --> 00:00:23,790
built into Vue, and that would be watchers.

8
00:00:23,790 --> 00:00:25,860
What are Watchers?

9
00:00:25,860 --> 00:00:29,020
Well, a watcher is basically a function

10
00:00:29,020 --> 00:00:32,040
you can tell Vue to execute,

11
00:00:32,040 --> 00:00:34,750
when one of its dependencies changed.

12
00:00:34,750 --> 00:00:37,670
Okay, that sounds just like computed properties,

13
00:00:37,670 --> 00:00:39,060
doesn't it?

14
00:00:39,060 --> 00:00:41,430
Well, indeed you can use Watchers

15
00:00:41,430 --> 00:00:43,730
instead of computed properties

16
00:00:43,730 --> 00:00:45,820
and here's how that would work,

17
00:00:45,820 --> 00:00:47,973
and why you maybe don't wanna do it.

18
00:00:48,900 --> 00:00:53,900
Let me add a full name, data property here like this,

19
00:00:54,210 --> 00:00:57,440
and therefore let's comment out this full name,

20
00:00:57,440 --> 00:01:00,910
computed property so that we don't have a name clash.

21
00:01:00,910 --> 00:01:04,129
You don't wanna use a computed and a data property

22
00:01:04,129 --> 00:01:05,212
with the same name.

23
00:01:06,120 --> 00:01:08,620
Now we can add a new configuration here,

24
00:01:08,620 --> 00:01:12,520
a new option to this object we passed to create app,

25
00:01:12,520 --> 00:01:15,850
again anywhere in their, position doesn't matter.

26
00:01:15,850 --> 00:01:17,170
I'll add it here,

27
00:01:17,170 --> 00:01:22,170
And that's the watch option just like data computed

28
00:01:22,430 --> 00:01:24,530
and methods, this name is not up to you

29
00:01:24,530 --> 00:01:27,270
it's one of the supported features Vue has,

30
00:01:27,270 --> 00:01:29,393
and therefore this has to be watch.

31
00:01:30,350 --> 00:01:34,960
Watch wants an object, just like computed and methods.

32
00:01:34,960 --> 00:01:36,340
And, and here again,

33
00:01:36,340 --> 00:01:39,150
you'll define a bunch of methods.

34
00:01:39,150 --> 00:01:44,150
To be precise here, you can now use a name

35
00:01:44,550 --> 00:01:47,900
you used in a data or computed property

36
00:01:47,900 --> 00:01:51,020
as a name for a watcher method.

37
00:01:51,020 --> 00:01:51,853
For example,

38
00:01:51,853 --> 00:01:53,450
here we could use name,

39
00:01:53,450 --> 00:01:55,750
because we have that name data property

40
00:01:55,750 --> 00:01:59,040
and define it as a method here in watch.

41
00:01:59,040 --> 00:02:00,220
Technically, this is okay,

42
00:02:00,220 --> 00:02:03,020
we'll not have any name clashes here.

43
00:02:03,020 --> 00:02:06,320
This tells Vue one important thing.

44
00:02:06,320 --> 00:02:11,320
Whenever name changes, this watcher method will re execute

45
00:02:13,320 --> 00:02:15,150
and that's really important.

46
00:02:15,150 --> 00:02:19,330
This name here being used here sets up this connection.

47
00:02:19,330 --> 00:02:20,820
That's how watchers work.

48
00:02:20,820 --> 00:02:25,030
You repeat another data or computed property name

49
00:02:25,030 --> 00:02:28,000
in a watcher method as a method name there,

50
00:02:28,000 --> 00:02:29,323
and when you do that,

51
00:02:29,323 --> 00:02:34,000
that watcher method will be executed automatically by Vue,

52
00:02:34,000 --> 00:02:37,440
whenever a property of that name,

53
00:02:37,440 --> 00:02:41,250
so this case, whenever the name property changes.

54
00:02:41,250 --> 00:02:44,110
We could also watch the counter property instead,

55
00:02:44,110 --> 00:02:46,730
but here I wanna watch the name.

56
00:02:46,730 --> 00:02:50,100
And then in here we can specify any logic we want.

57
00:02:50,100 --> 00:02:53,290
We don't return anything because we're not going to use

58
00:02:53,290 --> 00:02:58,090
the watcher anywhere in our HTML code to use a return value.

59
00:02:58,090 --> 00:03:01,270
Instead in here we run logic that should be executed

60
00:03:01,270 --> 00:03:02,740
When the name changed.

61
00:03:02,740 --> 00:03:03,573
For example,

62
00:03:03,573 --> 00:03:05,947
we could update full name here, and set it,

63
00:03:05,947 --> 00:03:10,023
= to this.name + an empty space + Schwartzmuller.

64
00:03:12,170 --> 00:03:16,170
Actually, we don't even need to refer to this.name here,

65
00:03:16,170 --> 00:03:19,870
a watcher function automatically gets the last value,

66
00:03:19,870 --> 00:03:24,530
the latest value of the watch property as an argument.

67
00:03:24,530 --> 00:03:26,980
This is passed in automatically by Vue,

68
00:03:26,980 --> 00:03:29,930
this latest value of the watch property.

69
00:03:29,930 --> 00:03:32,050
Hence, we can accept it as an argument,

70
00:03:32,050 --> 00:03:34,943
name it however you want, and then use it in here.

71
00:03:35,930 --> 00:03:39,610
We actually also could accept a second argument here,

72
00:03:39,610 --> 00:03:43,840
besides the value and that would then be the previous value,

73
00:03:43,840 --> 00:03:46,590
the old value of the watch property.

74
00:03:46,590 --> 00:03:48,060
Here I'm just accepting one

75
00:03:48,060 --> 00:03:49,710
because we only need that one,

76
00:03:49,710 --> 00:03:53,060
but you could accept two arguments If you wanted to.

77
00:03:53,060 --> 00:03:55,113
New value and old value.

78
00:03:56,250 --> 00:03:59,210
And with that we would also update the full name

79
00:03:59,210 --> 00:04:01,330
whenever the name changes.

80
00:04:01,330 --> 00:04:04,570
If we save that and reload, indeed, if I type here,

81
00:04:04,570 --> 00:04:08,300
you have the same behavior as before with one difference

82
00:04:08,300 --> 00:04:10,560
we always see Schwartz Muller here,

83
00:04:10,560 --> 00:04:15,350
but we could also change this, check if value is empty...

84
00:04:15,350 --> 00:04:17,690
It's an empty string and if that's the case,

85
00:04:17,690 --> 00:04:20,803
we set full name equal to an empty string as well.

86
00:04:20,803 --> 00:04:23,980
That would be how we could ensure that full name is empty.

87
00:04:23,980 --> 00:04:27,380
If value is empty, actually of course,

88
00:04:27,380 --> 00:04:30,333
I should then put the other code into an else block Vue,

89
00:04:31,490 --> 00:04:34,173
and now we have that described behavior.

90
00:04:35,660 --> 00:04:37,280
So that's a watcher.

91
00:04:37,280 --> 00:04:38,113
And as you see,

92
00:04:38,113 --> 00:04:41,523
you could use it as an alternative to a computed property.

93
00:04:42,370 --> 00:04:44,110
Now we have a couple of problems

94
00:04:44,110 --> 00:04:46,090
if we use it for that though,

95
00:04:46,090 --> 00:04:46,923
for one,

96
00:04:46,923 --> 00:04:49,790
I would argue that the concept of a computed property

97
00:04:49,790 --> 00:04:52,920
is maybe a bit easier to understand,

98
00:04:52,920 --> 00:04:57,610
but the bigger problem arises If we have a computer property

99
00:04:57,610 --> 00:05:00,710
that would use more than one dependency,

100
00:05:00,710 --> 00:05:04,540
let's say we have a second input.

101
00:05:04,540 --> 00:05:06,680
I just duplicated my input here,

102
00:05:06,680 --> 00:05:09,403
and there we have a last name.

103
00:05:10,770 --> 00:05:13,540
Now we add a new data property,

104
00:05:13,540 --> 00:05:16,030
last name, which initially is an empty string,

105
00:05:16,030 --> 00:05:19,873
and this is bound with the model on that second input.

106
00:05:21,410 --> 00:05:23,600
Now we have these two names.

107
00:05:23,600 --> 00:05:27,790
Now we wanna update the full name whenever the name,

108
00:05:27,790 --> 00:05:29,963
or the last name changed.

109
00:05:31,000 --> 00:05:32,770
To achieve this with a watcher,

110
00:05:32,770 --> 00:05:36,010
we need to add a second watcher because the first one

111
00:05:36,010 --> 00:05:38,103
simply watches the name.

112
00:05:39,020 --> 00:05:40,860
Now we need to add a second one

113
00:05:40,860 --> 00:05:45,480
where we also watch last name and get the value of that.

114
00:05:45,480 --> 00:05:49,300
And in here we have almost the same code,

115
00:05:49,300 --> 00:05:51,697
but we wanna set the full name here,

116
00:05:51,697 --> 00:05:56,410
= to this.name + blank + lost + value

117
00:05:59,180 --> 00:06:02,320
because here we get the latest value of last name

118
00:06:02,320 --> 00:06:04,980
and up there in our first watcher,

119
00:06:04,980 --> 00:06:09,430
we wanna change this to value + blank + this.last name

120
00:06:09,430 --> 00:06:11,650
because we're watching name here.

121
00:06:11,650 --> 00:06:16,650
Now we have two watchers to reflect the full name,

122
00:06:17,210 --> 00:06:19,623
which is managed with two inputs.

123
00:06:20,640 --> 00:06:23,860
And yes, this works, but it's a lot of code,

124
00:06:23,860 --> 00:06:27,120
especially if we compare it to the computed property

125
00:06:27,120 --> 00:06:28,850
alternative.

126
00:06:28,850 --> 00:06:33,303
Let me comment out the full name, data property,

127
00:06:35,200 --> 00:06:38,840
and let's also comment out the watchers.

128
00:06:38,840 --> 00:06:40,130
We could remove them,

129
00:06:40,130 --> 00:06:42,840
but I'll keep them around for reference.

130
00:06:42,840 --> 00:06:45,090
And let's bring back the computed property,

131
00:06:45,090 --> 00:06:49,130
to see how much easier it is with a computed property.

132
00:06:49,130 --> 00:06:52,810
There if we want to use two dependencies,

133
00:06:52,810 --> 00:06:56,670
we simply reference two dependencies like this,

134
00:06:56,670 --> 00:06:58,503
pointing at this last name.

135
00:06:59,590 --> 00:07:03,730
And now we got the desired behavior with less code.

136
00:07:03,730 --> 00:07:06,170
Maybe we should also tweak df check here,

137
00:07:06,170 --> 00:07:10,190
and check if the name is empty or this last name is empty.

138
00:07:10,190 --> 00:07:11,740
If either of the two is empty,

139
00:07:11,740 --> 00:07:14,340
we return an empty full name.

140
00:07:14,340 --> 00:07:17,923
But with that, we got the desired behavior,

141
00:07:19,320 --> 00:07:21,250
and it's really not a lot of code.

142
00:07:21,250 --> 00:07:23,840
It's just this code to get a full name,

143
00:07:23,840 --> 00:07:28,350
dynamically compared that to our two watchers.

144
00:07:28,350 --> 00:07:31,250
Why do we have watchers then if we can use them,

145
00:07:31,250 --> 00:07:32,960
but they're worse?

146
00:07:32,960 --> 00:07:36,330
Because this works but it's not the main scenario

147
00:07:36,330 --> 00:07:37,710
for using watchers.

148
00:07:37,710 --> 00:07:39,350
Watchers are powerful,

149
00:07:39,350 --> 00:07:43,653
if you have a different kind of intent in mind.

150
00:07:45,470 --> 00:07:47,230
Let's come back to our counter here.

151
00:07:47,230 --> 00:07:52,190
Let's say when the counter exceeds 50, anything like that,

152
00:07:52,190 --> 00:07:54,160
we wanna reset it.

153
00:07:54,160 --> 00:07:57,840
That's the type of task where a watcher shines.

154
00:07:57,840 --> 00:08:01,040
We wanna change counter when something happens

155
00:08:01,040 --> 00:08:05,850
so we can watch counter and get its latest value,

156
00:08:05,850 --> 00:08:10,160
to then check if value,

157
00:08:10,160 --> 00:08:13,300
so the value of the counter is greater than 50,

158
00:08:13,300 --> 00:08:18,273
and if that's the case, we set this.counter = 0.

159
00:08:20,780 --> 00:08:24,150
That's the kind of thing where watchers can be helpful.

160
00:08:24,150 --> 00:08:25,890
If you wanna run logic,

161
00:08:25,890 --> 00:08:29,360
that may be all the updates a data property,

162
00:08:29,360 --> 00:08:31,580
but which shouldn't always do that.

163
00:08:31,580 --> 00:08:35,080
For example, here, I only want to set the counter to zero,

164
00:08:35,080 --> 00:08:36,950
if we exceed 50.

165
00:08:36,950 --> 00:08:40,860
A computed property would probably not be the best

166
00:08:40,860 --> 00:08:43,390
alternative here for this kind of task.

167
00:08:43,390 --> 00:08:45,840
You can try solving this with a computed property

168
00:08:45,840 --> 00:08:49,150
and you'll quickly see that you'll face some problems here.

169
00:08:49,150 --> 00:08:51,540
With a watcher, this is easy though.

170
00:08:51,540 --> 00:08:54,930
If we save that and now reload, we can change the counter,

171
00:08:54,930 --> 00:08:57,890
but you'll see if I press add 10 again

172
00:08:57,890 --> 00:09:01,350
and hence who would exceed 50 it's back to zero

173
00:09:01,350 --> 00:09:03,220
and starts again.

174
00:09:03,220 --> 00:09:06,390
That's the kind of task where a watcher can shine.

175
00:09:06,390 --> 00:09:09,940
Another example, would be HTTP requests,

176
00:09:09,940 --> 00:09:12,550
which you wanna send if certain data changes,

177
00:09:12,550 --> 00:09:16,890
or timers which you wanna set, if certain values change.

178
00:09:16,890 --> 00:09:20,850
For example, here, we could say if value exceeds 50,

179
00:09:20,850 --> 00:09:25,520
I want to set a timer to two seconds,

180
00:09:25,520 --> 00:09:30,250
and in the function that executes after the two seconds,

181
00:09:30,250 --> 00:09:33,400
I want to reset the counter.

182
00:09:33,400 --> 00:09:37,030
Like this, that won't work though, because this in here,

183
00:09:37,030 --> 00:09:39,070
won't refer to the same thing,

184
00:09:39,070 --> 00:09:42,730
this would refer to outside of this function

185
00:09:42,730 --> 00:09:46,980
and therefore we can work around that by storing,

186
00:09:46,980 --> 00:09:50,170
this in a number of constant and using that here,

187
00:09:50,170 --> 00:09:51,860
that's nothing Vue specific,

188
00:09:51,860 --> 00:09:53,840
that's just how JavaScript works,

189
00:09:53,840 --> 00:09:56,450
that this key word can be tricky there,

190
00:09:56,450 --> 00:09:58,650
but with that code if I reload,

191
00:09:58,650 --> 00:10:01,750
if I ramp up the timer, it goes above 50,

192
00:10:01,750 --> 00:10:03,890
but it's reset eventually.

193
00:10:03,890 --> 00:10:07,830
Because we set a time out every time the counter changes

194
00:10:07,830 --> 00:10:09,730
and is greater than 50.

195
00:10:09,730 --> 00:10:12,450
That's by the way, all the why it resets multiple times

196
00:10:12,450 --> 00:10:15,880
here, because if I exceed 50 and I keep on going,

197
00:10:15,880 --> 00:10:18,600
I trigger more and more watcher executions

198
00:10:18,600 --> 00:10:21,220
and more and more timers get set.

199
00:10:21,220 --> 00:10:24,540
That's the kind of task where a watcher can be useful

200
00:10:24,540 --> 00:10:28,090
if you wanna run some code, which may be,

201
00:10:28,090 --> 00:10:32,570
but not necessarily also updates some data property

202
00:10:32,570 --> 00:10:34,950
in reaction to a property changing.

203
00:10:34,950 --> 00:10:37,040
If you wanna do that execute code,

204
00:10:37,040 --> 00:10:40,680
because something changed, then watchers can be helpful.

205
00:10:40,680 --> 00:10:44,610
If you just want to calculate some output value dynamically,

206
00:10:44,610 --> 00:10:46,853
computed properties are your friend.

