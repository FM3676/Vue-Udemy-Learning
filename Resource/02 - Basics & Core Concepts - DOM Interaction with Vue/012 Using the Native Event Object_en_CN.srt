1
00:00:02,110 --> 00:00:03,760
所以这正在形成。

2
00:00:03,760 --> 00:00:08,310
现在让我们稍微增强一下他的迷你虚拟应用程序。

3
00:00:08,310 --> 00:00:12,650
让我们在这里添加一个文本类型的输入，就像这样。

4
00:00:12,650 --> 00:00:16,239
在我说你的名字的那段下面

5
00:00:16,239 --> 00:00:18,570
在这里，我想输出用户名。

6
00:00:18,570 --> 00:00:21,400
但是现在用户应该可以输入名字了

7
00:00:21,400 --> 00:00:25,500
在此输入中，这是新事物。

8
00:00:25,500 --> 00:00:28,833
所以我们可以在我们的数据中有一个名称字段。

9
00:00:29,730 --> 00:00:33,380
最初它可以是空的，也可以是你的名字，无论你想要什么。

10
00:00:33,380 --> 00:00:35,810
我们可以在这里输出名称

11
00:00:35,810 --> 00:00:37,453
用双花括号。

12
00:00:38,500 --> 00:00:40,600
但现在我这里也有这个输入

13
00:00:40,600 --> 00:00:44,030
每当我在这里输入时，我都想更新名称，

14
00:00:44,030 --> 00:00:46,473
在本段中输出。

15
00:00:47,320 --> 00:00:48,823
现在，我们怎么能这样做呢？

16
00:00:50,330 --> 00:00:53,260
好吧，既然我们了解了监听事件，

17
00:00:53,260 --> 00:00:56,130
我们应该拥有为此所需的所有工具。

18
00:00:56,130 --> 00:00:59,360
我们可以用 v-on 添加一个事件监听器

19
00:00:59,360 --> 00:01:02,270
现在当然，我不想听点击事件，

20
00:01:02,270 --> 00:01:04,360
但每次击键。

21
00:01:04,360 --> 00:01:07,170
我们可以像使用 keyup 或 keydown 一样，

22
00:01:07,170 --> 00:01:10,220
它们都有其特殊的行为。

23
00:01:10,220 --> 00:01:15,220
在输入 HTML 元素上监听的最佳事件

24
00:01:15,650 --> 00:01:17,640
是输入事件。

25
00:01:17,640 --> 00:01:19,820
这是一个默认的 Dom 事件

26
00:01:19,820 --> 00:01:23,650
可用于输入元素，没有 Vue 特定的。

27
00:01:23,650 --> 00:01:25,330
可以监听输入事件

28
00:01:25,330 --> 00:01:27,203
在 vanilla JavaScript 中也是如此。

29
00:01:28,180 --> 00:01:32,280
在这里，我用 v-on 告诉 Vue 我想听

30
00:01:32,280 --> 00:01:36,270
到此输入元素上的此输入事件。

31
00:01:36,270 --> 00:01:37,660
现在，再一次，

32
00:01:37,660 --> 00:01:41,020
我们可以指定在这些双引号之间编码

33
00:01:41,020 --> 00:01:44,330
当输入事件被允许时应该执行，

34
00:01:44,330 --> 00:01:46,860
每次击键都会出现这种情况。

35
00:01:46,860 --> 00:01:50,223
这就是默认情况下发出输入事件的方式。

36
00:01:51,330 --> 00:01:53,350
所以现在，我们可以把代码放在这里

37
00:01:53,350 --> 00:01:56,770
或使用这种更好的使用方法。

38
00:01:56,770 --> 00:02:00,333
所以我会这样做，在这里添加一个小方法，

39
00:02:00,333 --> 00:02:02,990
setName 可以是方法名，

40
00:02:02,990 --> 00:02:04,850
因为这就是我们要做的。

41
00:02:04,850 --> 00:02:06,060
再一次，名字由你决定，

42
00:02:06,060 --> 00:02:07,870
但当然你想命名方法

43
00:02:07,870 --> 00:02:10,490
这样它就描述了它将要做什么。

44
00:02:10,490 --> 00:02:11,890
所以在这里我将使用 setName

45
00:02:13,250 --> 00:02:15,630
然后我想设置这个名字。

46
00:02:15,630 --> 00:02:20,530
所以这个名称属性，我们添加到我们的数据对象中

47
00:02:20,530 --> 00:02:23,150
等于用户输入的内容。

48
00:02:23,150 --> 00:02:25,790
这会有点棘手，不是吗？

49
00:02:25,790 --> 00:02:28,280
因为我们怎么知道用户输入了什么？

50
00:02:28,280 --> 00:02:30,510
我们知道用户输入了一些东西

51
00:02:30,510 --> 00:02:32,560
因为我们正在听那个事件，

52
00:02:32,560 --> 00:02:35,883
但是我们如何获得用户输入的具体值呢？

53
00:02:37,460 --> 00:02:41,680
虽然 JavaScript 有一个内置的行为，

54
00:02:41,680 --> 00:02:44,570
不进入 Vue，我们可以利用它。

55
00:02:44,570 --> 00:02:48,440
首先，我们可以在这里指向setName方法，

56
00:02:48,440 --> 00:02:52,410
这是我们希望在每次击键时执行的方法。

57
00:02:52,410 --> 00:02:55,360
现在 JavaScript 中有一个很酷的行为，

58
00:02:55,360 --> 00:02:59,010
不在 Vue 中，Vue 也可以使用它。

59
00:02:59,010 --> 00:03:01,340
添加事件侦听器时

60
00:03:01,340 --> 00:03:04,180
然后你指向一个应该执行的函数

61
00:03:04,180 --> 00:03:05,780
当该事件发生时。

62
00:03:05,780 --> 00:03:10,680
该函数将自动获取一个参数。

63
00:03:10,680 --> 00:03:12,130
浏览器将确保

64
00:03:12,130 --> 00:03:14,360
可以这么说。

65
00:03:14,360 --> 00:03:16,760
那将是一个对象

66
00:03:16,760 --> 00:03:19,373
描述事件发生。

67
00:03:21,760 --> 00:03:23,510
所以在 setName 中，

68
00:03:23,510 --> 00:03:27,540
我们可以接受这一参数，这一参数。

69
00:03:27,540 --> 00:03:29,440
你可以随心所欲地命名它，

70
00:03:29,440 --> 00:03:32,223
但你总是会通过浏览器得到这个。

71
00:03:33,410 --> 00:03:37,160
我们也会在这里得到这个来添加和减少。

72
00:03:37,160 --> 00:03:38,640
我们只是覆盖了它

73
00:03:38,640 --> 00:03:42,530
使用我们自己的自定义参数，我们正在传递。

74
00:03:42,530 --> 00:03:44,640
但是因为我没有执行 setName

75
00:03:44,640 --> 00:03:47,470
这里有括号，但我指的是编辑，

76
00:03:47,470 --> 00:03:48,890
我不覆盖它。

77
00:03:48,890 --> 00:03:53,160
我让浏览器提供这个默认的事件对象。

78
00:03:53,160 --> 00:03:54,840
为什么这很有用？

79
00:03:54,840 --> 00:03:57,330
因为这个默认事件对象

80
00:03:57,330 --> 00:04:00,250
将充满有关该事件的信息。

81
00:04:00,250 --> 00:04:02,660
例如，它将为我们提供信息

82
00:04:02,660 --> 00:04:07,020
关于发生此事件的 HTML 元素，

83
00:04:07,020 --> 00:04:09,100
这是输入元素。

84
00:04:09,100 --> 00:04:13,760
然后我们可以读取存储在这个输入中的当前值

85
00:04:13,760 --> 00:04:16,630
从那个输入元素。

86
00:04:16,630 --> 00:04:19,459
我们可以在事件之外访问目标

87
00:04:19,459 --> 00:04:23,120
使用 events.target，这就是普通的 JavaScript。

88
00:04:23,120 --> 00:04:24,950
这不是 Vue 特有的。

89
00:04:24,950 --> 00:04:28,430
这也适用于原生 JavaScript。

90
00:04:28,430 --> 00:04:30,760
这使我们可以访问元素

91
00:04:30,760 --> 00:04:32,290
事件发生的地点。

92
00:04:32,290 --> 00:04:34,520
这是本例中的输入元素，

93
00:04:34,520 --> 00:04:37,020
这将具有价值属性。

94
00:04:37,020 --> 00:04:40,070
同样，这只是普通的 javaScript

95
00:04:40,070 --> 00:04:42,480
你可以搜索 MDN 输入

96
00:04:42,480 --> 00:04:46,090
查找有关此输入元素的更多文档。

97
00:04:46,090 --> 00:04:50,270
在这里你最终会在某个地方找到

98
00:04:50,270 --> 00:04:54,040
这有一个价值属性，

99
00:04:54,040 --> 00:04:57,680
您可以使用它来读取用户输入的内容。

100
00:04:57,680 --> 00:04:59,720
所以这将是用户输入的值，

101
00:04:59,720 --> 00:05:03,110
setName 将在每个输入事件上调用。

102
00:05:03,110 --> 00:05:06,850
所以在每次击键时，这应该更新名称，

103
00:05:06,850 --> 00:05:09,980
每次击键时，我们的数据和它的属性，

104
00:05:09,980 --> 00:05:13,153
与当前在此处输入的用户的值。

105
00:05:14,450 --> 00:05:16,600
然后我们在下面输出名称。

106
00:05:16,600 --> 00:05:18,630
如果我们现在将它保存在重新加载中，

107
00:05:18,630 --> 00:05:22,360
我可以进入马克西米利安，你会​​看到这是如何更新的

108
00:05:22,360 --> 00:05:23,903
在下面的段落中。

109
00:05:25,780 --> 00:05:29,040
这又是 Vue 的反应性。

110
00:05:29,040 --> 00:05:33,220
它允许我们监听这个事件并执行这个代码

111
00:05:33,220 --> 00:05:36,540
然后所有检测到名称已更改

112
00:05:36,540 --> 00:05:39,470
并在页面上的地方更新它

113
00:05:39,470 --> 00:05:41,710
需要更新的地方。

114
00:05:41,710 --> 00:05:43,120
作为旁注，

115
00:05:43,120 --> 00:05:46,050
如果我在 Chrome 开发工具中检查这个，

116
00:05:46,050 --> 00:05:49,900
我们可以注意到一些有趣的事情。

117
00:05:49,900 --> 00:05:54,360
如果您在此处观看此部分，请查看此 HTML 代码。

118
00:05:54,360 --> 00:05:55,730
你会看到这些部分

119
00:05:55,730 --> 00:05:59,160
重新渲染浏览器的 flash，

120
00:05:59,160 --> 00:06:02,690
你看到我名字的段落闪烁。

121
00:06:02,690 --> 00:06:04,010
现在你也会看到

122
00:06:04,010 --> 00:06:06,200
屏幕上没有其他任何东西闪烁。

123
00:06:06,200 --> 00:06:08,300
例如，计数器没有闪烁。

124
00:06:08,300 --> 00:06:12,370
该计数器仅闪烁。如果我改变了柜台。

125
00:06:12,370 --> 00:06:13,600
现在这些是零件

126
00:06:13,600 --> 00:06:16,510
它们实际上是在屏幕上重新渲染的。

127
00:06:16,510 --> 00:06:20,710
你会看到只有代码中真正改变的部分

128
00:06:20,710 --> 00:06:23,940
在屏幕上重新渲染，这很重要。

129
00:06:23,940 --> 00:06:27,770
如果 Vue 会更新整个屏幕，

130
00:06:27,770 --> 00:06:30,720
每当某处发生变化时，

131
00:06:30,720 --> 00:06:32,713
这对性能不利。

132
00:06:33,890 --> 00:06:36,810
相反，Vue 真的很聪明，它可以看到那

133
00:06:36,810 --> 00:06:39,890
这里的每一次击键，只有名字会改变。

134
00:06:39,890 --> 00:06:44,050
因此它只找到我使用这个名字的地方，

135
00:06:44,050 --> 00:06:47,260
在这种情况下，本段和更新统计

136
00:06:47,260 --> 00:06:50,130
其余的则保持原样。

137
00:06:50,130 --> 00:06:53,763
因此我们可以节省性能或获得更好的性能。

138
00:06:54,800 --> 00:06:58,210
现在，这就是我们处理事件的方式。

139
00:06:58,210 --> 00:07:02,540
关于这个默认事件对象只有一个注释。

140
00:07:02,540 --> 00:07:06,310
您可能需要调用一个场景

141
00:07:06,310 --> 00:07:09,170
你的方法在这里明确地由你自己

142
00:07:09,170 --> 00:07:11,760
正如我们使用 add 和 reduce 所做的那样。

143
00:07:11,760 --> 00:07:12,790
例如，

144
00:07:12,790 --> 00:07:16,420
因为你需要传入一些其他参数，

145
00:07:16,420 --> 00:07:19,913
像第二个名字，我一直想在这里使用。

146
00:07:21,880 --> 00:07:26,880
我们可以在这里接受这个，第二个名字或姓氏

147
00:07:27,620 --> 00:07:30,730
然后用用户输入的任何内容更新名称

148
00:07:30,730 --> 00:07:35,623
加上姓氏，也许还可以在它前面添加一个空格。

149
00:07:37,790 --> 00:07:40,920
问题是我们现在不再

150
00:07:40,920 --> 00:07:45,120
在此处获取此默认事件对象作为第一个参数。

151
00:07:45,120 --> 00:07:49,130
现在仍然传递它，有一个特殊的变量，

152
00:07:49,130​​ --> 00:07:51,100
您可以在模板中使用它

153
00:07:51,100 --> 00:07:53,570
这就是美元符号事件。

154
00:07:53,570 --> 00:07:57,470
这是一个保留名称，Vue 将这个变量提供给你

155
00:07:57,470 --> 00:08:01,630
让您可以访问这个内置的默认事件对象，

156
00:08:01,630 --> 00:08:04,560
您可以通过浏览器自动获得。

157
00:08:04,560 --> 00:08:07,430
这样您也可以在此代码中使用它。

158
00:08:07,430 --> 00:08:12,050
例如，仍然将它作为第一个参数传入

159
00:08:12,050 --> 00:08:13,693
设置名称，如果你想的话。

160
00:08:14,740 --> 00:08:18,350
因此，每当您发现自己在这里使用参数时

161
00:08:18,350 --> 00:08:21,510
或者你不能只指向一个函数

162
00:08:21,510 --> 00:08:25,040
无论出于何种原因，您都需要内置事件，

163
00:08:25,040 --> 00:08:28,190
您可以通过美元符号事件访问它。

164
00:08:28,190 --> 00:08:31,090
但同样，只有当你不只是

165
00:08:31,090 --> 00:08:33,970
像我们之前做的那样指向方法。

166
00:08:33,970 --> 00:08:38,299
因此，现在如果重新加载，这仍然像以前一样工作，

167
00:08:38,299 --> 00:08:41,280
但现在在美元符号事件的帮助下。

168
00:08:41,280 --> 00:08:42,860
这只是在我们的旁注中，

169
00:08:42,860 --> 00:08:46,040
因为有时这正是你所需要的

170
00:08:46,040 --> 00:08:48,670
访问两者以构建事件对象

171
00:08:48,670 --> 00:08:51,940
你会自动得到并且仍然执行代码

172
00:08:51,940 --> 00:08:53,460
明确地由你自己，

173
00:08:53,460 --> 00:08:56,983
例如，传递您自己的参数。