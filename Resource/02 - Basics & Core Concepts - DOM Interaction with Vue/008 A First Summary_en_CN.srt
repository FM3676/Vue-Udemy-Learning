1
00:00:02,310 --> 00:00:04,040
所以，现在在我们潜水之前

2
00:00:04,040 --> 00:00:05,550
进入我们的第一次实践

3
00:00:05,550 --> 00:00:07,970
您了解的那些关键功能。

4
00:00:07,970 --> 00:00:10,480
我们的第一个简短总结总是如此

5
00:00:10,480 --> 00:00:11,770
我们学到的东西。

6
00:00:11,770 --> 00:00:15,610
我们主要学习了如何创建 Vue 应用程序

7
00:00:15,610 --> 00:00:20,490
以及如何使用 mount 将它们连接到 HTML 代码。

8
00:00:20,490 --> 00:00:24,340
你应该在这里使用一些独特的 CSS 选择器，

9
00:00:24,340 --> 00:00:27,930
像这里的 ID 选择器，因为每个 Vue 应用程序

10
00:00:27,930 --> 00:00:32,380
只能连接到一个 HTML 元素。

11
00:00:32,380 --> 00:00:34,670
你也已经看到了

12
00:00:34,670 --> 00:00:37,630
如果你用 Vue 控制一个元素，

13
00:00:37,630 --> 00:00:41,750
就像这里，我们用 Vue 控制这个部分。

14
00:00:41,750 --> 00:00:45,780
您还自动控制所有子元素，

15
00:00:45,780 --> 00:00:48,530
但没有任何外部元素

16
00:00:48,530 --> 00:00:51,720
在这种情况下，这个 Vue 控制部分。

17
00:00:51,720 --> 00:00:55,860
所以一个 Vue 应用程序可以控制 HTML 代码中的一部分，

18
00:00:55,860 --> 00:00:57,930
但它会自动控制

19
00:00:57,930 --> 00:01:00,620
所有子元素也是如此。

20
00:01:00,620 --> 00:01:04,680
好吧，在这个 Vue 控制的 HTML 代码中，

21
00:01:04,680 --> 00:01:06,730
您可以使用特殊功能。

22
00:01:06,730 --> 00:01:11,460
像这种带有双花括号的插值语法

23
00:01:11,460 --> 00:01:15,460
或者这个绑定语法，这个绑定指令

24
00:01:15,460 --> 00:01:20,420
如您之前所见，使用 v-bind 或 v-html。

25
00:01:20,420 --> 00:01:22,970
这些是可用的功能

26
00:01:22,970 --> 00:01:26,520
在那个 Vue 控制的 HTML 代码中。

27
00:01:26,520 --> 00:01:28,680
现在你可以在那里输出数据，

28
00:01:28,680 --> 00:01:32,860
因此这个插值和这个绑定语法

29
00:01:32,860 --> 00:01:36,980
也在术语数据绑定下进行了总结。

30
00:01:36,980 --> 00:01:38,610
因为我们要绑定数据，

31
00:01:38,610 --> 00:01:43,610
在我们的 Vue 应用程序中管理到 HTML 代码，

32
00:01:43,760 --> 00:01:45,650
要么用插值

33
00:01:45,650 --> 00:01:48,800
或使用 v-bind 指令语法。

34
00:01:48,800 --> 00:01:50,700
这才是最重要的。

35
00:01:50,700 --> 00:01:54,010
你将一个对象传递给你的 Vue 应用程序，

36
00:01:54,010 --> 00:01:55,980
您使用 createApp 创建的。

37
00:01:55,980 --> 00:01:59,110
这个对象配置了这个应用程序。

38
00:01:59,110 --> 00:02:02,130
您可以设置各种选项，例如，

39
00:02:02,130 --> 00:02:05,540
数据选项或方法选项。

40
00:02:05,540 --> 00:02:07,180
显然我们要学习

41
00:02:07,180 --> 00:02:08,789
课程的其他选项。

42
00:02:08,789 --> 00:02:11,840
但这是两个非常重要的选择

43
00:02:11,840 --> 00:02:15,083
您可能会在您正在构建的任何应用程序中遇到它。

44
00:02:16,350 --> 00:02:19,560
data 选项有一个函数，

45
00:02:19,560 --> 00:02:21,030
因此你可以这样写。

46
00:02:21,030 --> 00:02:24,640
它应该返回一个充满数据的对象。

47
00:02:24,640 --> 00:02:26,330
然后将可用

48
00:02:26,330 --> 00:02:31,030
在你的 Vue 控制的 HTML 代码中，比如这里的 vueLink，

49
00:02:31,030 --> 00:02:32,820
并且也可以访问

50
00:02:32,820 --> 00:02:35,870
从 Vue 应用程序的其他部分内部。

51
00:02:35,870 --> 00:02:39,440
就像带有 this 关键字的方法一样。

52
00:02:39,440 --> 00:02:41,320
方法也很重要。

53
00:02:41,320 --> 00:02:43,630
这些是您可以调用的函数

54
00:02:43,630 --> 00:02:47,920
例如，从您的 Vue 控制的 HTML 代码内部。

55
00:02:47,920 --> 00:02:50,120
这就是你将学到的东西。

56
00:02:51,030 --> 00:02:55,580
因此，现在，当我们使用像 Vue 这样的框架时，

57
00:02:55,580 --> 00:02:59,960
我们通常说我们使用声明性方法

58
00:02:59,960 --> 00:03:03,490
或者 Vue 使用声明式方法。

59
00:03:03,490 --> 00:03:06,770
这只是我们说的一种花哨的方式，

60
00:03:06,770 --> 00:03:09,740
作为开发人员定义目标。

61
00:03:09,740 --> 00:03:12,310
我们定义了一个模板，你可以说，

62
00:03:12,310 --> 00:03:14,750
我们想要的内容。

63
00:03:14,750 --> 00:03:19,350
我们标记像这样动态的部分，

64
00:03:19,350 --> 00:03:21,610
或者在这里喜欢这个 href 属性，

65
00:03:21,610 --> 00:03:23,530
它与 v-bind 绑定，

66
00:03:23,530 --> 00:03:27,250
然后 Vue 将为我们完成剩下的工作。

67
00:03:27,250 --> 00:03:29,200
它在幕后发挥了所有魔力。

68
00:03:29,200 --> 00:03:33,020
它欧tputs 具体值在这里和这里。

69
00:03:33,020 --> 00:03:34,980
它会更新真实的 DOM。

70
00:03:34,980 --> 00:03:38,590
呈现在屏幕上的内容以及用户看到的内容

71
00:03:38,590 --> 00:03:41,790
代表我们在幕后。

72
00:03:41,790 --> 00:03:46,150
因此，作为开发人员，我们只需定义最终图片

73
00:03:46,150 --> 00:03:48,920
使用动态占位符，您可以说，

74
00:03:48,920 --> 00:03:51,039
我们没有定义所有的步骤

75
00:03:51,039 --> 00:03:53,850
把那张照片放到屏幕上。

76
00:03:53,850 --> 00:03:57,120
这就是我们对像 Vue 这样的框架所做的事情。

77
00:03:57,120 --> 00:04:00,090
这就是为什么我们通常也会说

78
00:04:00,090 --> 00:04:02,960
Vue 使用声明式方法。

79
00:04:02,960 --> 00:04:05,730
我们只是宣布我们的目标。

80
00:04:05,730 --> 00:04:08,600
我们不关心到达那里的步骤。

81
00:04:08,600 --> 00:04:10,263
现在是时候练习这个了。