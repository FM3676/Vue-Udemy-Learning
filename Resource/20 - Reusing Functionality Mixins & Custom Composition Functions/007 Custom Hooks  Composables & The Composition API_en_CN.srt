1
00:00:02,120 --> 00:00:05,760
所以现在让我们探索重用事物，

2
00:00:05,760 --> 00:00:08,690
跨组件重用逻辑

3
00:00:08,690 --> 00:00:10,640
使用组合 API。

4
00:00:10,640 --> 00:00:14,640
为此，您会找到与以前相同的起始项目，

5
00:00:14,640 --> 00:00:17,350
但现在它正在使用组合 API。

6
00:00:17,350 --> 00:00:21,240
所以数据和方法被我的设置方法替换了

7
00:00:21,240 --> 00:00:24,110
然后我在哪里使用 refs 等等。

8
00:00:24,110 --> 00:00:25,760
当然要确保你通过

9
00:00:25,760 --> 00:00:28,440
首先是组合API模块，

10
00:00:28,440 --> 00:00:30,523
在潜入这些讲座之前。

11
00:00:31,580 --> 00:00:33,200
所以和之前的项目是一样的

12
00:00:33,200 --> 00:00:35,270
只需使用组合 API。

13
00:00:35,270 --> 00:00:38,610
因此，当然，它也像以前一样工作。

14
00:00:38,610 --> 00:00:43,040
以前我们使用混合来共享功能。

15
00:00:43,040 --> 00:00:45,240
现在，我们可以使用不同的方法。

16
00:00:45,240 --> 00:00:46,890
但是哪种方法？

17
00:00:46,890 --> 00:00:48,740
最终这一切都在这里

18
00:00:48,740 --> 00:00:52,240
只是设置方法中的代码。

19
00:00:52,240 --> 00:00:55,950
如果你暂时离开 Vue，

20
00:00:55,950 --> 00:01:00,633
您通常如何重用 Java 脚本中的代码？

21
00:01:01,620 --> 00:01:03,590
您可能会创建一个函数。

22
00:01:03,590 --> 00:01:06,620
一个可能接收一些参数的函数

23
00:01:06,620 --> 00:01:09,020
然后可能返回一个值。

24
00:01:09,020 --> 00:01:11,130
这就是您通常外包的方式

25
00:01:11,130 --> 00:01:14,320
并在 JavaScript 中共享功能。

26
00:01:14,320 --> 00:01:17,500
好吧，这只是 JavaScript

27
00:01:17,500 --> 00:01:20,060
而设置方法只是一种方法

28
00:01:20,060 --> 00:01:22,000
有一堆不同的步骤。

29
00:01:22,000 --> 00:01:25,410
所以如果你想外包其中一些步骤，

30
00:01:25,410 --> 00:01:27,803
我们可以创建一个单独的函数。

31
00:01:28,790 --> 00:01:30,890
这就是我们要做的

32
00:01:30,890 --> 00:01:33,020
使用组合 API。

33
00:01:33,020 --> 00:01:36,040
以前这不是一个很好的选择，

34
00:01:36,040 --> 00:01:37,960
因为有了选项 API，

35
00:01:37,960 --> 00:01:41,260
它不仅仅是一种包含一堆步骤的方法，

36
00:01:41,260 --> 00:01:44,970
但它是一个具有不同属性的对象。

37
00:01:44,970 --> 00:01:47,100
因此使用函数的数组，

38
00:01:47,100 --> 00:01:49,823
并不是真正的替代方案，但它就在这里。

39
00:01:50,840 --> 00:01:54,180
所以我将在组件旁边创建一个新文件夹。

40
00:01:54,180 --> 00:01:56,790
现在由您决定如何称呼它。

41
00:01:56,790 --> 00:01:59,820
我将其命名为钩子，因为有时

42
00:01:59,820 --> 00:02:04,820
这些组合 API 函数称为钩子。

43
00:02:05,300 --> 00:02:08,289
这就是为什么我将遵循这种命名模式。

44
00:02:08,289 --> 00:02:10,430
您可能会遇到的其他名称

45
00:02:10,430 --> 00:02:12,330
对于这些特殊功能，

46
00:02:12,330 --> 00:02:15,850
与组合 API 结合使用，

47
00:02:15,850 --> 00:02:20,290
将是可组合的或自定义的组合功能。

48
00:02:20,290 --> 00:02:24,100
所以钩子，可组合，自定义组合功能。

49
00:02:24,100 --> 00:02:25,770
那是一样的。

50
00:02:25,770 --> 00:02:29,540
这是一个很可能的 JavaScript 函数

51
00:02:29,540 --> 00:02:32,950
使用一些组合，API 功能

52
00:02:32,950 --> 00:02:36,420
像 refs 或计算属性等等，

53
00:02:36,420 --> 00:02:38,710
那么这意味着被称为

54
00:02:38,710 --> 00:02:41,270
而不是设置方法。

55
00:02:41,270 --> 00:02:42,610
作为旁注，

56
00:02:42,610 --> 00:02:44,840
我们已经使用过这样的功能，

57
00:02:44,840 --> 00:02:46,220
不是我们建造的，

58
00:02:46,220 --> 00:02:49,260
但由 Vue Router 或 Vuex 团队

59
00:02:49,260 --> 00:02:52,310
使用路由或路由器对象

60
00:02:52,310 --> 00:02:54,300
例如，在设置方法中。

61
00:02:54,300 --> 00:02:58,513
您已经在主要组合 API 模块中看到了这一点。

62
00:02:59,960 --> 00:03:01,410
所以在这个钩子文件夹中，

63
00:03:01,410 --> 00:03:02,243
我将再次添加一个新文件和 alert.js 文件，

64
00:03:02,243 --> 00:03:05,377
当然，文件名和以前一样取决于您。

65
00:03:05,377 --> 00:03:09,620
当然，文件名和以前一样取决于您。

66
00:03:09,620 --> 00:03:13,250
在这里，我将创建一个函数。

67
00:03:13,250 --> 00:03:15,220
现在这里有一个特殊的命名，

68
00:03:15,220 --> 00:03:16,510
我想用的。

69
00:03:16,510 --> 00:03:17,900
你通常是哪个瑟

70
00:03:17,900 --> 00:03:22,900
对于这些组合 API 可重用函数。

71
00:03:23,070 --> 00:03:26,190
函数名应以 use 开头

72
00:03:26,190 --> 00:03:29,820
然后是描述功能的东西。

73
00:03:29,820 --> 00:03:32,103
所以在这里我将它命名为useAlert。

74
00:03:33,000 --> 00:03:34,740
因为这个功能会让我

75
00:03:34,740 --> 00:03:39,470
使用警报功能而不是设置方法。

76
00:03:39,470 --> 00:03:42,950
所以你的自定义钩子，你计划在这里使用

77
00:03:42,950 --> 00:03:45,450
在设置函数之间共享代码，

78
00:03:45,450 --> 00:03:47,730
应该从使用开始。

79
00:03:47,730 --> 00:03:50,150
虽然它仍然是一个常规功能。

80
00:03:50,150 --> 00:03:52,093
现在应该在这个函数中添加什么？

81
00:03:54,210 --> 00:03:55,043
嗯，最后，

82
00:03:55,043 --> 00:03:57,180
我想把所有的代码，DeleteUser

83
00:03:57,180 --> 00:03:59,940
和 AddUser 有共同点，而不是

84
00:03:59,940 --> 00:04:02,400
设置方法到这个函数中。

85
00:04:02,400 --> 00:04:06,350
所以我们可以抓住整个代码

86
00:04:06,350 --> 00:04:08,163
并把它移到这里。

87
00:04:09,290 --> 00:04:10,860
现在，由于我在这里使用了 ref，

88
00:04:10,860 --> 00:04:12,950
我还必须添加该导入。

89
00:04:12,950 --> 00:04:15,600
你总是必须导入你正在使用的东西

90
00:04:15,600 --> 00:04:17,670
在一个文件中放入该文件中。

91
00:04:17,670 --> 00:04:20,100
所以在这里，因为我在这个文件中使用了 ref，

92
00:04:20,100 --> 00:04:23,900
我还需要在此文件中导入 ref 。

93
00:04:23,900 --> 00:04:26,150
我们已经在导入它是不够的

94
00:04:26,150 --> 00:04:27,390
在另一个文件中。

95
00:04:27,390 --> 00:04:29,260
这不是它的工作方式。

96
00:04:29,260 --> 00:04:30,460
然而，有了这个，

97
00:04:30,460 --> 00:04:31,940
我们在这里创建一个参考，

98
00:04:31,940 --> 00:04:34,300
感谢 ref 函数的导入。

99
00:04:34,300 --> 00:04:36,220
我们已经把所有的逻辑都放在了这里

100
00:04:36,220 --> 00:04:37,700
在这个警报 JS 文件中

101
00:04:37,700 --> 00:04:39,423
在此使用警报功能。

102
00:04:40,290 --> 00:04:41,420
现在好了，

103
00:04:41,420 --> 00:04:44,100
但这有什么好处呢？

104
00:04:44,100 --> 00:04:48,320
好吧，现在我们可以将其导出为默认值，例如

105
00:04:48,320 --> 00:04:49,940
这个使用警报功能，

106
00:04:49,940 --> 00:04:52,220
就像其中包含所有代码一样。

107
00:04:52,220 --> 00:04:54,163
并使用此返回声明。

108
00:04:55,640 --> 00:04:59,070
我们现在可以回到 AddUser 让我们说，

109
00:04:59,070 --> 00:05:02,310
而不是从此处的视图中导入 ref，

110
00:05:02,310 --> 00:05:06,720
我会从上升中导入使用警报

111
00:05:06,720 --> 00:05:10,323
一级，钩子，警报JS。

112
00:05:11,860 --> 00:05:15,383
我们现在可以在这里调用 useAlert。

113
00:05:19,080 --> 00:05:19,913
这会做什么

114
00:05:19,913 --> 00:05:22,400
是否会执行使用提醒功能，

115
00:05:22,400 --> 00:05:25,090
必须编写用于创建 ref 的代码

116
00:05:25,090 --> 00:05:28,780
并用于创建这两个更改 ref 的函数。

117
00:05:28,780 --> 00:05:32,120
我们还在 useAlert 中返回一个对象。

118
00:05:32,120 --> 00:05:34,680
这让我们可以使用这些东西

119
00:05:34,680 --> 00:05:36,550
在函数中创建的

120
00:05:36,550 --> 00:05:38,480
也在函数之外。

121
00:05:38,480 --> 00:05:40,350
因为在 AddUser 中，只是调用，

122
00:05:40,350 --> 00:05:42,080
这还不够。

123
00:05:42,080 --> 00:05:47,080
我们仍然需要在这个 setup 方法中返回一个对象。

124
00:05:47,190 --> 00:05:50,460
这不是由我们自己的函数在这里代替的。

125
00:05:50,460 --> 00:05:51,950
因此，当然在这里，

126
00:05:51,950 --> 00:05:53,930
我仍然想归还我们正在使用的东西

127
00:05:53,930 --> 00:05:54,830
在模板中。

128
00:05:54,830 --> 00:05:58,990
所以 alertIsVisible、hideAlert 和 showAlert。

129
00:05:58,990 --> 00:06:02,200
useAlert 为我们提供了所有这些东西。

130
00:06:02,200 --> 00:06:03,320
在useAlert里面，

131
00:06:03,320 --> 00:06:05,600
顺便说一句，我们不必返回对象。

132
00:06:05,600 --> 00:06:06,870
这是我们的功能，

133
00:06:06,870 --> 00:06:08,840
所以我们可以返回任何我们想要的东西。

134
00:06:08,840 --> 00:06:12,610
我们总是可以在一个数组中返回这三个东西，

135
00:06:12,610 --> 00:06:13,790
如果我们愿意。

136
00:06:13,790 --> 00:06:16,120
我们可以有一个包含自由元素的数组

137
00:06:16,120 --> 00:06:19,690
在这种情况下，第一个元素是我们的数据。

138
00:06:19,690 --> 00:06:23,510
第二个和第三个元素是我们的功能。

139
00:06:23,510 --> 00:06:24,470
这取决于你。

140
00:06:24,470 --> 00:06:26,350
这是你的功能化。

141
00:06:26,350 --> 00:06:27,310
因此，为了明确这一点，

142
00:06:27,310 --> 00:06:29,520
我实际上会在这里使用一个数组。

143
00:06:29,520 --> 00:06:33,155
现在，由于 useAlert 返回这个数组，

144
00:06:33,155 --> 00:06:34,83​​0
在添加用户中，

145
00:06:34,83​​0 --> 00:06:39,283
我们可以将这个警报数组存储在一个常量中。

146
00:06:40,230 --> 00:06:42,580
我们知道第一个元素是，

147
00:06:42,580 --> 00:06:45,970
我们的数据和其他两个元素将是函数。

148
00:06:45,970 --> 00:06:48,890
我们也可以在这里使用数组解构，

149
00:06:48,890 --> 00:06:51,490
这是一个现代 JavaScript 功能

150
00:06:51,490 --> 00:06:54,210
将这些自由元素拉出数组

151
00:06:54,210 --> 00:06:57,130
并将它们存储在新的常量中。

152
00:06:57,130 --> 00:06:59,970
所以在这里我将重用我们在这里的相同名称，

153
00:06:59,970 --> 00:07:01,800
虽然你可以使用不同的名字

154
00:07:01,800 --> 00:07:04,340
因为这里的顺序很重要。

155
00:07:04,340 --> 00:07:05,840
但有了这个，我们说，

156
00:07:05,840 --> 00:07:08,480
拉出useAlert的第一个元素

157
00:07:08,480 --> 00:07:11,630
并将其存储在一个新的 alertIsVisible 常量中，

158
00:07:11,630 --> 00:07:13,053
这在设置中可用。

159
00:07:13,920 --> 00:07:15,360
拉第二个元素

160
00:07:15,360 --> 00:07:17,880
并将其存储在 showAlert 常量中

161
00:07:17,880 --> 00:07:19,610
并拉出第三个元素

162
00:07:19,610 --> 00:07:22,050
在 useAlert 返回的数组之外

163
00:07:22,050 --> 00:07:25,330
并将其存储在 hideAlert 常量中。

164
00:07:25,330 --> 00:07:27,570
所以现在这些自由常量在这里

165
00:07:27,570 --> 00:07:29,480
此设置方法中存在

166
00:07:29,480 --> 00:07:30,500
因此在这里。

167
00:07:30,500 --> 00:07:32,620
我们当然可以退货。

168
00:07:32,620 --> 00:07:37,620
第一个元素 alertIsVisible 是我们的参考。

169
00:07:37,780 --> 00:07:38,613
这个。

170
00:07:38,613 --> 00:07:39,930
因为它是一个参考，

171
00:07:39,930 --> 00:07:41,530
每当这里发生变化。

172
00:07:41,530 --> 00:07:43,440
而不是 useAlert 函数，

173
00:07:43,440 --> 00:07:46,400
我们使用的组件，useAlert

174
00:07:46,400 --> 00:07:48,580
将始终通过此通知。

175
00:07:48,580 --> 00:07:50,210
因为它是一个参考

176
00:07:50,210 --> 00:07:52,910
我们将这个 ref 暴露给模板。

177
00:07:52,910 --> 00:07:55,460
每当你这样做时，Vue 都会意识到这一点。

178
00:07:55,460 --> 00:07:57,360
每当数据参考发生变化时，

179
00:07:57,360 --> 00:08:00,213
这些变化反映在模板中。

180
00:08:01,210 --> 00:08:02,940
所以这是一个不同的心理模型，

181
00:08:02,940 --> 00:08:03,773
不过最终，

182
00:08:03,773 --> 00:08:06,670
它只是我们自己定义的一个函数，

183
00:08:06,670 --> 00:08:07,920
我们在这里打电话。

184
00:08:08,794 --> 00:08:10,390
我们现在可以复制该代码

185
00:08:10,390 --> 00:08:13,210
并在 deleteUser 中执行相同的操作。

186
00:08:13,210 --> 00:08:16,110
用复制的代码替换所有这些

187
00:08:16,110 --> 00:08:18,300
并摆脱 ref 导入。

188
00:08:18,300 --> 00:08:21,840
但改为导入 useAlert

189
00:08:21,840 --> 00:08:24,380
从上一级开始，

190
00:08:24,380 --> 00:08:26,477
钩子/alert.js'。

191
00:08:28,190 --> 00:08:29,820
如果你保存了这个，

192
00:08:29,820 --> 00:08:33,370
这应该像以前一样工作。

193
00:08:33,370 --> 00:08:34,230
但现在，

194
00:08:34,230 --> 00:08:36,520
使用我们自己的自定义函数。

195
00:08:36,520 --> 00:08:38,363
我们自己的自定义钩子。