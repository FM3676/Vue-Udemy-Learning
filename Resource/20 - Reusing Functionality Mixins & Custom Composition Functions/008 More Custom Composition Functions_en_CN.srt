1
00:00:02,150 --> 00:00:05,200
所以这就是你可以重用功能的方式

2
00:00:05,200 --> 00:00:08,920
使用 Composition API 时跨组件。

3
00:00:08,920 --> 00:00:11,830
现在，我们可以做的比目前所做的更多。

4
00:00:11,830 --> 00:00:15,210
例如，我们当然还可以

5
00:00:15,210 --> 00:00:17,600
在设置中设置其他东西。

6
00:00:17,600 --> 00:00:21,580
我们不仅限于在这里使用我们的重用逻辑。

7
00:00:21,580 --> 00:00:24,030
我们可以再次导入

8
00:00:24,030 --> 00:00:28,560
参考这里，来自 vue。如果我们有其他数据

9
00:00:28,560 --> 00:00:32,240
这应该是可变的，并在这里创建我们的额外参考，

10
00:00:32,240 --> 00:00:36,350
就像 alertTitle 一样，它可能是一个 ref

11
00:00:36,350 --> 00:00:40,033
具有删除用户的起始值？

12
00:00:41,760 --> 00:00:44,210
理论上，我不需要参考

13
00:00:44,210 --> 00:00:47,410
因为我不会添加任何逻辑来改变这一点。

14
00:00:47,410 --> 00:00:48,980
但我想告诉你，你可以，

15
00:00:48,980 --> 00:00:51,170
当然，有额外的参考

16
00:00:51,170 --> 00:00:53,800
以及计算属性和观察者，

17
00:00:53,800 --> 00:00:56,250
以及您可以在设置功能中使用的任何其他内容，

18
00:00:56,250 --> 00:00:59,593
无论您是否使用自定义挂钩。

19
00:01:00,570 --> 00:01:02,150
但是，例如，我可以，

20
00:01:02,150 --> 00:01:04,310
还公开我的 alertTitle，

21
00:01:05,650 --> 00:01:09,250
在这里，带有对我的模板的返回语句

22
00:01:09,250 --> 00:01:13,373
并将此处的标题绑定到 alertTitle。

23
00:01:14,776 --> 00:01:16,210
但我们绝对可以做到这一点。

24
00:01:16,210 --> 00:01:18,300
这是类似的事情

25
00:01:18,300 --> 00:01:21,120
与我之前使用 mixins 所做的一样。

26
00:01:21,120 --> 00:01:23,150
在那里，mixin 是自动的

27
00:01:23,150 --> 00:01:25,070
与您的其他选项合并。

28
00:01:25,070 --> 00:01:28,010
在这里，我们手动合并它

29
00:01:28,010 --> 00:01:31,400
只需用我们的自定义钩子做一件事

30
00:01:31,400 --> 00:01:34,713
并在我们的其余设置功能中做其他事情。

31
00:01:36,050 --> 00:01:38,650
现在，我们的自定义钩子也可以

32
00:01:38,650 --> 00:01:40,800
顺便接收论据，

33
00:01:40,800 --> 00:01:45,690
这里我有一个自定义钩子函数，它返回一些东西

34
00:01:45,690 --> 00:01:49,050
你的钩子通常会返回一些东西

35
00:01:49,050 --> 00:01:51,400
因为你想把东西放进钩子里

36
00:01:51,400 --> 00:01:54,600
然后仍然可以将其暴露给您的模板。

37
00:01:54,600 --> 00:01:57,720
为此，您的钩子需要使这些东西可用

38
00:01:57,720 --> 00:02:00,960
到它被调用的设置方法，

39
00:02:00,960 --> 00:02:04,340
但是你的钩子也可以接受参数。

40
00:02:04,340 --> 00:02:07,390
例如，假设删除用户，

41
00:02:07,390 --> 00:02:09,300
默认起始值

42
00:02:09,300 --> 00:02:12,760
对于 alertIsVisible 应该是真的。

43
00:02:12,760 --> 00:02:15,420
因此，默认情况下，警报是打开的。

44
00:02:15,420 --> 00:02:18,560
从应用程序的角度来看，这可能没有多大意义，

45
00:02:18,560 --> 00:02:20,580
但这是一个很好的做法。

46
00:02:20,580 --> 00:02:23,730
使用 mixins，这有点棘手。

47
00:02:23,730 --> 00:02:27,120
有了钩子，这很容易。这是你自己的功能。

48
00:02:27,120 --> 00:02:29,850
所以当然， useAlert 可以接受

49
00:02:29,850 --> 00:02:32,720
尽可能多的参数。

50
00:02:32,720 --> 00:02:35,370
例如，startingVisibility。

51
00:02:36,500 --> 00:02:38,310
当然，名字由你决定。

52
00:02:38,310 --> 00:02:40,640
你甚至可以在这里指定一个默认值，

53
00:02:40,640 --> 00:02:43,000
让我们说假，这样你就没有

54
00:02:43,000 --> 00:02:46,593
在编码 useAlert 时为该参数传入一个值。

55
00:02:48,210 --> 00:02:50,680
这是一个现代 JavaScript 功能，

56
00:02:50,680 --> 00:02:52,573
默认参数值。

57
00:02:53,570 --> 00:02:56,240
但是现在我们可以使用它并在这里分配它

58
00:02:56,240 --> 00:02:58,543
以我们的 ref 作为起始值。

59
00:02:59,550 --> 00:03:01,570
现在因为我们有一个默认值，

60
00:03:01,570 --> 00:03:04,173
我们仍然可以像以前一样编写 useAlert 代码，

61
00:03:05,090 --> 00:03:06,710
但我们也可以编码

62
00:03:06,710 --> 00:03:10,100
并为此参数传递一个额外的参数。

63
00:03:10,100 --> 00:03:12,470
所以传入 true 作为值

64
00:03:12,470 --> 00:03:16,030
对于此参数，而不是删除用户。

65
00:03:16,030 --> 00:03:18,340
结果，如果我保存它，

66
00:03:18,340 --> 00:03:21,270
我们从打开的模型开始

67
00:03:21,270 --> 00:03:23,623
对于删除用户组件，

68
00:03:24,500 --> 00:03:28,200
是我在这里传递的那个不同论点的原因。

69
00:03:28,200 --> 00:03:31,480
所以你的自定义钩子真的很灵活

70
00:03:31,480 --> 00:03:34,340
你可以接受任何你可能需要的论点，

71
00:03:34,340 --> 00:03:37,840
并且您可以使用其中的所有 Composition API 功能，

72
00:03:37,840 --> 00:03:39,790
做任何钩子需要做的事情，

73
00:03:39,790 --> 00:03:42,990
然后返回到你想要的组件

74
00:03:42,990 --> 00:03:46,343
使用钩子，该钩子应该向组件公开什么。