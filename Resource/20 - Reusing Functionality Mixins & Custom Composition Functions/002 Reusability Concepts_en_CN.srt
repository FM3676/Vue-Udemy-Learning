1
00:00:02,130 --> 00:00:03,300
为此，我再次，

2
00:00:03,300 --> 00:00:06,030
为你准备了一个小项目。

3
00:00:06,030 --> 00:00:07,580
这是一个简单的项目，

4
00:00:07,580 --> 00:00:10,450
你可以像往常一样从 NPM install 开始

5
00:00:10,450 --> 00:00:11,680
和 NPM 运行冲浪。

6
00:00:11,680 --> 00:00:15,170
当你这样做时，你会在屏幕上看到这个。

7
00:00:15,170 --> 00:00:18,040
我们这里有两个虚拟组件要添加

8
00:00:18,040 --> 00:00:20,020
并删除用户，大概。

9
00:00:20,020 --> 00:00:23,040
当我们点击添加用户时，我们打开一个，

10
00:00:23,040 --> 00:00:25,860
一个警报，一个添加用户的模型

11
00:00:25,860 --> 00:00:29,257
以及询问我们是否要添加用户的文本

12
00:00:29,257 --> 00:00:31,880
我们可以通过点击背景来关闭它

13
00:00:31,880 --> 00:00:34,200
或单击关闭按钮。

14
00:00:34,200 --> 00:00:36,050
当我们点击删除用户时，

15
00:00:36,050 --> 00:00:40,010
我们看到几乎相同的对话，相同的警报，

16
00:00:40,010 --> 00:00:43,530
但内容不同，文字不同，

17
00:00:43,530 --> 00:00:47,160
因此在 App Vue 中，

18
00:00:47,160 --> 00:00:49,880
我正在添加和删除用户这两个组件。

19
00:00:49,880 --> 00:00:51,360
在这些组件中，

20
00:00:51,360 --> 00:00:55,240
我将警报组件添加为本地组件，

21
00:00:55,240 --> 00:00:57,690
实际上在这两个组件中，

22
00:00:57,690 --> 00:01:00,280
我们也可以将其添加为全局组件，

23
00:01:00,280 --> 00:01:02,930
但在这里我选择了相同的组件，

24
00:01:02,930 --> 00:01:07,010
作为本地组件添加到不同的组件中。

25
00:01:07,010 --> 00:01:11,000
除此之外，添加用户和删除用户非常相似。

26
00:01:11,000 --> 00:01:13,430
他们有几乎相同的逻辑，

27
00:01:13,430 --> 00:01:15,880
但是他们有一个不同的模板，当然，

28
00:01:15,880 --> 00:01:19,170
因为这就是这些组件不同的地方。

29
00:01:19,170 --> 00:01:21,600
这已经把我们带到了核心话题

30
00:01:21,600 --> 00:01:25,320
这个模块，重用逻辑和代码。

31
00:01:25,320 --> 00:01:27,330
为此，让我们从简单的开始。

32
00:01:27,330 --> 00:01:31,040
我们可以在 Vue 应用程序中重用什么

33
00:01:31,040 --> 00:01:34,713
或者在任何网络应用程序中，如果我们考虑一下？

34
00:01:35,960 --> 00:01:40,040
好吧，当然是我们的 HTML 结构

35
00:01:40,040 --> 00:01:42,830
和造型，这是东西

36
00:01:42,830 --> 00:01:44,920
我们经常在我们的页面上重复使用。

37
00:01:44,920 --> 00:01:48,090
我们的页面上经常有不同的部分，

38
00:01:48,090 --> 00:01:52,350
它实际上使用相同的 HTML 结构和样式。

39
00:01:52,350 --> 00:01:55,883
想想每个列表项看起来都一样的列表项，

40
00:01:57,000 --> 00:02:00,580
但我们也经常想重用逻辑和事件，

41
00:02:00,580 --> 00:02:02,290
我们可能想要处理的。

42
00:02:02,290 --> 00:02:06,380
这正是我们有这个组件概念的原因

43
00:02:06,380 --> 00:02:09,250
这个核心概念内置在 Vue 中，

44
00:02:09,250 --> 00:02:13,280
我们有一种强大的封装结构的方法，

45
00:02:13,280 --> 00:02:15,890
样式和逻辑到组件中，

46
00:02:15,890 --> 00:02:19,560
然后在我们需要的任何地方使用该组件

47
00:02:19,560 --> 00:02:23,480
页面，感谢道具和插槽，

48
00:02:23,480 --> 00:02:27,363
我们仍然可以在一定程度上自定义这个组件。

49
00:02:28,650 --> 00:02:29,483
最后，

50
00:02:29,483 --> 00:02:32,720
这也是我在这个迷你应用程序中所做的。

51
00:02:32,720 --> 00:02:37,020
用户警报组件是一个可重用的组件，

52
00:02:37,020 --> 00:02:40,780
它定义了背景的结构和样式

53
00:02:40,780 --> 00:02:42,270
和覆盖。

54
00:02:42,270 --> 00:02:46,300
然后我在删除用户中都使用了这个组件，

55
00:02:46,300 --> 00:02:48,683
以及添加用户组件。

56
00:02:49,660 --> 00:02:51,820
当然，这些组件本身，

57
00:02:51,820 --> 00:02:56,070
也是封装的 HTML 代码片段

58
00:02:56,070 --> 00:02:58,203
以及与之相关的逻辑。

59
00:02:59,120 --> 00:03:02,320
这就是组件的想法。

60
00:03:02,320 --> 00:03:06,500
我们有 HTML 结构、样式

61
00:03:06,500 --> 00:03:09,140
可能还有一些像这里的逻辑

62
00:03:09,140 --> 00:03:13,060
用于在用户警报组件中发出此关闭事件，

63
00:03:13,060 --> 00:03:17,163
所有这些都封装在一个可重复使用的构建块中。

64
00:03:18,240 --> 00:03:19,870
不过现在这已经不是什么新鲜事了。

65
00:03:19,870 --> 00:03:24,420
我们已经在组件上工作了好几个小时

66
00:03:24,420 --> 00:03:26,490
课程中的这一点，他们提供

67
00:03:26,490 --> 00:03:27,560
这不是什么新鲜事，

68
00:03:27,560 --> 00:03:30,590
但它是核心概念

69
00:03:30,590 --> 00:03:33,163
在 Vue 中重用。

70
00:03:34,470 --> 00:03:36,550
但是，它并不止于此。

71
00:03:36,550 --> 00:03:38,480
这是我们迄今为止学到的东西。

72
00:03:38,480 --> 00:03:42,070
现在这是新的部分，即使有组件，

73
00:03:42,070 --> 00:03:44,870
这对于封装模板非常有用

74
00:03:44,870 --> 00:03:47,800
和逻辑，带有道具的自定义选项

75
00:03:47,800 --> 00:03:51,320
和自定义事件和插槽，即使使用这些组件。

76
00:03:51,320 --> 00:03:53,600
即使有了这个强大的概念，

77
00:03:53,600 --> 00:03:56,610
我们有时会留下一些代码，

78
00:03:56,610 --> 00:03:58,600
我们想要重用的，

79
00:03:58,600 --> 00:04:01,580
但要认真负责。

80
00:04:01,580 --> 00:04:04,750
因为如果我们有队列组件怎么办

81
00:04:04,750 --> 00:04:09,340
其中有相关或相似的逻辑，例如，

82
00:04:09,340 --> 00:04:12,360
具有搜索方法的用户列表组件，

83
00:04:12,360 --> 00:04:16,100
与搜索相关的数据和与搜索相关的观察者。

84
00:04:16,100 --> 00:04:19,110
然后我们必须在另一个组件中使用相同的逻辑

85
00:04:20,329 --> 00:04:23,830
在这种情况下，创建一个新组件，

86
00:04:23,830 --> 00:04:28,440
具有这种组合逻辑可能并不总是可能的

87
00:04:28,440 --> 00:04:31,400
因此在使用选项 API 时，

88
00:04:31,400 --> 00:04:33,860
你有一个叫做 mixins 的概念，

89
00:04:33,860 --> 00:04:37,630
它基本上允许您共享数据、方法、

90
00:04:37,630 --> 00:04:41,270
计算属性，观察者，生命周期钩子，

91
00:04:41,270 --> 00:04:45,940
您可能需要跨组件的任何配置。

92
00:04:45,940 --> 00:04:48,445
因此，让我们来探索 mixins

93
00:04:48,445 --> 00:04:50,480
让我们看看他们如何在这里帮助我们

94
00:04:50,480 --> 00:04:52,523
在这个示例项目中。