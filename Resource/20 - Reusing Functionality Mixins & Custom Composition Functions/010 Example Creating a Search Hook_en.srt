1
00:00:02,150 --> 00:00:04,710
Now maybe you remember that originally

2
00:00:04,710 --> 00:00:07,230
I showed a little bit of a bigger project

3
00:00:07,230 --> 00:00:10,210
as an example of why we might want

4
00:00:10,210 --> 00:00:13,580
to consider using the Composition API.

5
00:00:13,580 --> 00:00:15,770
I showed this example at the beginning

6
00:00:15,770 --> 00:00:17,830
of the Composition API module,

7
00:00:17,830 --> 00:00:19,640
and at the end of that module,

8
00:00:19,640 --> 00:00:23,520
we migrated that project from the Options API

9
00:00:23,520 --> 00:00:25,173
to the Composition API.

10
00:00:26,370 --> 00:00:30,700
Now you find that latest snapshot attached to this lecture,

11
00:00:30,700 --> 00:00:33,670
because I wanna pick up on that, I wanna start there

12
00:00:33,670 --> 00:00:37,230
and now talk about reusing functionality

13
00:00:37,230 --> 00:00:40,570
because that's something we haven't done in that project

14
00:00:40,570 --> 00:00:41,900
up to that point.

15
00:00:41,900 --> 00:00:46,410
We stopped when we migrated it to the Composition API,

16
00:00:46,410 --> 00:00:50,410
but now I wanna reuse some functionality.

17
00:00:50,410 --> 00:00:53,110
And there is one main functionality

18
00:00:53,110 --> 00:00:55,060
which I would like to reuse.

19
00:00:55,060 --> 00:00:59,780
In UserList.vue, I got my search functionality,

20
00:00:59,780 --> 00:01:02,950
two pieces of data, a computed property,

21
00:01:02,950 --> 00:01:06,150
and a watcher and this function here.

22
00:01:06,150 --> 00:01:10,410
And we have pretty much the same in ProjectsList

23
00:01:10,410 --> 00:01:13,040
we're dealing with different data there,

24
00:01:13,040 --> 00:01:15,960
here we have a list of projects which we filter,

25
00:01:15,960 --> 00:01:19,990
in UserList we have a list of users, but besides that,

26
00:01:19,990 --> 00:01:21,793
it's the same functionality.

27
00:01:22,760 --> 00:01:25,760
So let's see how we can now use a custom hook

28
00:01:25,760 --> 00:01:28,310
to outsource this into a function

29
00:01:28,310 --> 00:01:32,003
which we can then use in both UserList and ProjectsList.

30
00:01:33,070 --> 00:01:36,630
For this, I'll add a new folder next two components,

31
00:01:36,630 --> 00:01:38,400
and I will again, name it hooks.

32
00:01:38,400 --> 00:01:41,940
And in there I will add a search.js file.

33
00:01:41,940 --> 00:01:45,070
There I'll add a function, useSearch,

34
00:01:45,070 --> 00:01:48,400
following that naming pattern which I recommended,

35
00:01:48,400 --> 00:01:52,120
and I will already export it because I plan on using

36
00:01:52,120 --> 00:01:54,113
and calling useSearch in UserList and ProjectsList.

37
00:01:58,040 --> 00:01:58,960
Now, as I mentioned,

38
00:01:58,960 --> 00:02:02,240
there is a lot of functionality we have in common.

39
00:02:02,240 --> 00:02:05,080
So why don't we just go to UserList

40
00:02:05,080 --> 00:02:08,720
and maybe grab all that code here?

41
00:02:08,720 --> 00:02:13,560
So the two refs, the computed property, availableUsers,

42
00:02:13,560 --> 00:02:16,690
the watcher, and this updateSearch function

43
00:02:17,610 --> 00:02:20,530
and copy it into search.js

44
00:02:20,530 --> 00:02:24,103
into our useSearch function like this.

45
00:02:27,020 --> 00:02:28,700
Now we need to add a import

46
00:02:29,590 --> 00:02:31,850
because I'm using a bunch of features

47
00:02:31,850 --> 00:02:34,400
which are not available in that file yet.

48
00:02:34,400 --> 00:02:37,380
The ref functions, the computed function,

49
00:02:37,380 --> 00:02:40,800
the watch function, yeah, that should be it.

50
00:02:40,800 --> 00:02:42,880
So we should add an import

51
00:02:42,880 --> 00:02:45,460
and import from the view framework,

52
00:02:45,460 --> 00:02:46,670
And there specifically,

53
00:02:46,670 --> 00:02:49,630
I wanna import ref, computed and watch,

54
00:02:49,630 --> 00:02:51,450
since these are the three functions

55
00:02:51,450 --> 00:02:53,223
I'm using in this file now.

56
00:02:54,330 --> 00:02:57,800
With that, that code showed almost work,

57
00:02:57,800 --> 00:02:59,720
not entirely though.

58
00:02:59,720 --> 00:03:02,200
One problem which we will face

59
00:03:02,200 --> 00:03:05,860
is that we depend on props.users filter.

60
00:03:05,860 --> 00:03:08,950
Now in this function, props is not available.

61
00:03:08,950 --> 00:03:12,160
Even if we call it in our setup method later

62
00:03:12,160 --> 00:03:15,763
inside of the scope of dysfunction props doesn't exist.

63
00:03:17,020 --> 00:03:18,930
But of course we can work around that.

64
00:03:18,930 --> 00:03:22,650
We can simply add a parameter and maybe name it items

65
00:03:22,650 --> 00:03:26,300
to have a generic function that works on any kind of items,

66
00:03:26,300 --> 00:03:29,400
no matter if that's people or projects.

67
00:03:29,400 --> 00:03:32,300
That's why I'm just naming it items to make it clear

68
00:03:32,300 --> 00:03:35,050
that this should work on any kind of array.

69
00:03:35,050 --> 00:03:40,050
And then we could use items.filter here

70
00:03:40,300 --> 00:03:44,540
and also replace props.users with items

71
00:03:44,540 --> 00:03:47,423
in the other places here like this.

72
00:03:48,610 --> 00:03:51,990
And I'll rename my user's helper variable here

73
00:03:51,990 --> 00:03:56,530
to filteredItems and use that in all the places

74
00:03:59,180 --> 00:04:02,563
where I used users to make this more generic.

75
00:04:03,580 --> 00:04:06,500
I will also rename the entire computer property

76
00:04:06,500 --> 00:04:07,500
to a availableItems,

77
00:04:08,520 --> 00:04:11,120
because this is now no longer focused on users,

78
00:04:11,120 --> 00:04:13,483
but on any items we wanna search.

79
00:04:14,860 --> 00:04:16,820
Now, we will still have a problem though.

80
00:04:16,820 --> 00:04:19,860
The function which has passed to filter here

81
00:04:19,860 --> 00:04:23,070
has specific logic for filtering

82
00:04:23,070 --> 00:04:26,150
that will only work on our users

83
00:04:26,150 --> 00:04:28,573
because here I'm filtering on a full name.

84
00:04:29,430 --> 00:04:32,983
In ProjectsList, for example, I'm filtering on a title.

85
00:04:33,820 --> 00:04:36,910
Now there are two ways of making this work.

86
00:04:36,910 --> 00:04:40,010
We could accept this filtering function

87
00:04:40,010 --> 00:04:43,910
as a number parameter, a filter function,

88
00:04:43,910 --> 00:04:48,910
which we then, for example, just pass here like this,

89
00:04:50,720 --> 00:04:52,580
that would be one alternative.

90
00:04:52,580 --> 00:04:54,750
Then we have to pass in the function

91
00:04:54,750 --> 00:04:57,020
that should be used here from the place

92
00:04:57,020 --> 00:04:59,320
where we call useSearch.

93
00:04:59,320 --> 00:05:04,320
Or if we know that we will always operate on an item,

94
00:05:04,590 --> 00:05:07,720
but the property which holds the text

95
00:05:07,720 --> 00:05:09,200
we wanna use for filtering

96
00:05:09,200 --> 00:05:11,540
has a different name all the time,

97
00:05:11,540 --> 00:05:14,430
then we could also just accept a second argument,

98
00:05:14,430 --> 00:05:17,350
which stores that specific property name

99
00:05:17,350 --> 00:05:22,350
off the values we're trying to search in a given component.

100
00:05:22,480 --> 00:05:24,180
So then for example here,

101
00:05:24,180 --> 00:05:27,630
we could add a search prop or whatever you want to name it,

102
00:05:27,630 --> 00:05:32,303
parameter, and simply access userSearchProp.

103
00:05:34,870 --> 00:05:38,600
So dynamically access a property based on the value

104
00:05:38,600 --> 00:05:40,083
we get on this parameter.

105
00:05:40,950 --> 00:05:45,260
And maybe rename this from user to item.

106
00:05:45,260 --> 00:05:46,930
So both works, but with that,

107
00:05:46,930 --> 00:05:49,933
we have a more flexible filtering logic here.

108
00:05:51,960 --> 00:05:54,270
Now we also have a watcher here

109
00:05:54,270 --> 00:05:56,759
where we watch the enteredSearchTerm.

110
00:05:56,759 --> 00:05:57,880
And whenever that search term changes,

111
00:06:00,082 --> 00:06:03,540
we trigger this function and set this timer.

112
00:06:03,540 --> 00:06:06,630
Now, here we can leave everything the way it is

113
00:06:06,630 --> 00:06:10,230
because both enteredSearchTerm and activeSearchTerm

114
00:06:10,230 --> 00:06:12,600
are refs defined in this function

115
00:06:12,600 --> 00:06:14,373
and therefore will be available.

116
00:06:15,520 --> 00:06:18,640
And updateSearch should also work.

117
00:06:18,640 --> 00:06:19,473
So with that,

118
00:06:19,473 --> 00:06:20,740
the only thing we gotta do

119
00:06:20,740 --> 00:06:23,290
is we have to return a bunch of things

120
00:06:23,290 --> 00:06:24,530
so that we can use them

121
00:06:24,530 --> 00:06:26,380
in the components set up method,

122
00:06:26,380 --> 00:06:28,870
where we're going to call, useSearch.

123
00:06:30,030 --> 00:06:31,870
And as I mentioned, it's your function.

124
00:06:31,870 --> 00:06:34,920
So it's up to you, how you return these things

125
00:06:34,920 --> 00:06:38,350
if you bundle them together in an array or in an object.

126
00:06:38,350 --> 00:06:40,630
And here I'll go for an object.

127
00:06:40,630 --> 00:06:43,493
Before we saw an array, both is possible.

128
00:06:44,430 --> 00:06:46,010
Here I'll go for an object.

129
00:06:46,010 --> 00:06:49,610
And now let's think about what we wanna expose

130
00:06:49,610 --> 00:06:52,153
to the component that calls useSearch.

131
00:06:53,770 --> 00:06:55,970
For that let's maybe go back to UserList

132
00:06:55,970 --> 00:06:57,660
because that will be a component

133
00:06:57,660 --> 00:06:59,860
which will soon use this custom hook.

134
00:06:59,860 --> 00:07:01,960
And there let's see what we're exposing

135
00:07:01,960 --> 00:07:03,660
to the template here.

136
00:07:03,660 --> 00:07:05,630
We're exposing the enteredSearch

137
00:07:05,630 --> 00:07:08,230
and the updateSearch function.

138
00:07:08,230 --> 00:07:12,250
We also rely on the availableUsers here

139
00:07:12,250 --> 00:07:13,593
in our displayedUsers.

140
00:07:17,090 --> 00:07:19,760
So therefore in our custom hook,

141
00:07:19,760 --> 00:07:22,260
we should absolutely expose the enteredSearchTerm,

142
00:07:23,525 --> 00:07:28,160
the availableItems and the updateSearch function.

143
00:07:28,160 --> 00:07:30,010
So I'll expose the enteredSearchTerm,

144
00:07:31,421 --> 00:07:34,830
the availableItems and the updateSearch function.

145
00:07:34,830 --> 00:07:37,500
That's what I'll return here in my search,

146
00:07:37,500 --> 00:07:41,213
in my useSearch, sorry, in my useSearch function.

147
00:07:42,700 --> 00:07:45,700
And now we can go to UserList.vue

148
00:07:45,700 --> 00:07:50,440
and for the moment comment all of that out

149
00:07:50,440 --> 00:07:54,293
and instead import useSearch from,

150
00:07:58,380 --> 00:08:02,710
going up two levels, hooks/search.js.

151
00:08:02,710 --> 00:08:05,850
I'm not removing this Vue import up here

152
00:08:05,850 --> 00:08:07,950
because I'm still using a ref,

153
00:08:07,950 --> 00:08:11,160
a computed property and no watcher,

154
00:08:11,160 --> 00:08:13,470
but the ref and a computed property down there.

155
00:08:13,470 --> 00:08:15,200
So we have to keep that around,

156
00:08:15,200 --> 00:08:18,810
but we can remove, and we should remove the watch import

157
00:08:18,810 --> 00:08:21,750
because I'm not using watch in this file anymore,

158
00:08:21,750 --> 00:08:23,360
just ref and computed.

159
00:08:23,360 --> 00:08:25,830
Those are still used in my setup method,

160
00:08:25,830 --> 00:08:28,003
even with this code commented out.

161
00:08:29,290 --> 00:08:32,667
But now here we can call useSearch,

162
00:08:33,960 --> 00:08:35,919
so our own function here.

163
00:08:35,919 --> 00:08:39,472
And this function now needs two parameters,

164
00:08:40,370 --> 00:08:43,400
the items and our searchProp.

165
00:08:44,640 --> 00:08:49,640
Now the items that was props.user, if you remember.

166
00:08:50,230 --> 00:08:52,740
That is what we used here before.

167
00:08:52,740 --> 00:08:56,827
So props.user is what I wanna feed into useSearch.

168
00:08:58,470 --> 00:08:59,900
And for the property,

169
00:08:59,900 --> 00:09:03,350
which we wanted to use for filtering on every user,

170
00:09:03,350 --> 00:09:06,200
that was the fullName property,

171
00:09:06,200 --> 00:09:08,950
which we should pass in as a string.

172
00:09:08,950 --> 00:09:12,200
As a string because property names

173
00:09:12,200 --> 00:09:14,660
in JavaScript objects are strings,

174
00:09:14,660 --> 00:09:16,393
so we passed this in as a string.

175
00:09:17,690 --> 00:09:20,330
And then we get back some values here.

176
00:09:20,330 --> 00:09:21,440
In this case,

177
00:09:21,440 --> 00:09:25,070
we get back an object because I returned an object

178
00:09:25,070 --> 00:09:27,320
in my custom useSearch function.

179
00:09:27,320 --> 00:09:30,780
And in there we'll have these three properties.

180
00:09:30,780 --> 00:09:34,600
So we can again use object destructuring here

181
00:09:35,980 --> 00:09:39,924
with this syntax to get the enteredSearchterm,

182
00:09:39,924 --> 00:09:43,123
the availableItems and the updateSearch function.

183
00:09:43,990 --> 00:09:46,383
EnteredSearchTerm will be a ref,

184
00:09:46,383 --> 00:09:48,790
availableItems is a computed property,

185
00:09:48,790 --> 00:09:50,860
and therefore our read only ref

186
00:09:50,860 --> 00:09:52,823
and updateSearch is a function.

187
00:09:54,620 --> 00:09:57,270
Now we can use these things here.

188
00:09:57,270 --> 00:09:59,640
For example, in displayedUsers,

189
00:09:59,640 --> 00:10:01,970
I'm relying on availableUsers.

190
00:10:01,970 --> 00:10:04,490
This is now availableItems,

191
00:10:04,490 --> 00:10:06,650
and of course we could rename this here

192
00:10:06,650 --> 00:10:08,450
in this set up method,

193
00:10:08,450 --> 00:10:10,970
if you wanted to stick to availableUsers,

194
00:10:10,970 --> 00:10:13,593
but I will just go with availableItems.

195
00:10:16,190 --> 00:10:17,830
The rest should be fine.

196
00:10:17,830 --> 00:10:20,650
And then here I returned the enteredSearchTerm

197
00:10:20,650 --> 00:10:23,200
and updateSearch queue the template

198
00:10:23,200 --> 00:10:24,733
so that it's available there.

199
00:10:26,700 --> 00:10:31,700
If we now save this, this reloads, but I see no users.

200
00:10:32,710 --> 00:10:34,980
That is just a typo I have here though.

201
00:10:34,980 --> 00:10:38,330
I should pass in props.users

202
00:10:38,330 --> 00:10:41,620
since users is my prop name here.

203
00:10:41,620 --> 00:10:44,280
So if I use that then I am feeding in users,

204
00:10:44,280 --> 00:10:46,100
and now we see them here.

205
00:10:46,100 --> 00:10:49,540
Now sorting works, and what about searching?

206
00:10:49,540 --> 00:10:52,290
That is looking good as you can tell.

207
00:10:52,290 --> 00:10:56,360
Here, we are able to search and sort

208
00:10:56,360 --> 00:11:00,030
and select users just as we did it before,

209
00:11:00,030 --> 00:11:03,890
but now we're doing this with our own custom hook

210
00:11:03,890 --> 00:11:05,580
that supports us with that.

211
00:11:05,580 --> 00:11:07,680
And we've got this useSearch hook now

212
00:11:07,680 --> 00:11:10,823
and can therefore get rid of all that commented out code.

213
00:11:11,700 --> 00:11:13,510
And now this line here,

214
00:11:13,510 --> 00:11:17,010
or these three lines replace all the code

215
00:11:17,010 --> 00:11:18,980
we had in there before.

216
00:11:18,980 --> 00:11:22,080
And of course we can now use the same in ProjectsList

217
00:11:22,080 --> 00:11:24,380
because that was our main idea.

218
00:11:24,380 --> 00:11:26,893
We wanted to have reusable code.

