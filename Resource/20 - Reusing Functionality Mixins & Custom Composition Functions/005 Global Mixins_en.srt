1
00:00:02,070 --> 00:00:05,360
Now besides mixins as we added them thus far,

2
00:00:05,360 --> 00:00:07,960
or as we added it thus far,

3
00:00:07,960 --> 00:00:10,240
which has added locally to a component,

4
00:00:10,240 --> 00:00:12,560
you can also define global mixins,

5
00:00:12,560 --> 00:00:15,720
which affect all components and not just the components

6
00:00:15,720 --> 00:00:17,690
where you explicitly add them.

7
00:00:17,690 --> 00:00:21,150
Though to be honest global mixins probably have

8
00:00:21,150 --> 00:00:23,115
a very limited use case.

9
00:00:23,115 --> 00:00:25,570
Now, one use case could be some logging

10
00:00:25,570 --> 00:00:27,580
or analytics functionality,

11
00:00:27,580 --> 00:00:29,430
which you wanna add to every component.

12
00:00:29,430 --> 00:00:32,460
For example, to know when a component was mounted,

13
00:00:32,460 --> 00:00:34,020
anything like that.

14
00:00:34,020 --> 00:00:39,020
For that we could create a logger.js, mixins file

15
00:00:39,160 --> 00:00:40,560
in the Mixins folder,

16
00:00:40,560 --> 00:00:43,960
and in the there, export our mixin object

17
00:00:43,960 --> 00:00:47,180
and in this object now I don't wanna change any data,

18
00:00:47,180 --> 00:00:49,666
but instead I'll add the mount that lifecycle hook.

19
00:00:49,666 --> 00:00:52,730
Which of course can be added to any component

20
00:00:52,730 --> 00:00:55,440
and you can also define it in a mixin.

21
00:00:55,440 --> 00:00:56,520
As a side note,

22
00:00:56,520 --> 00:00:59,300
if this mixins would be merged with a component,

23
00:00:59,300 --> 00:01:01,830
which also has a mounted lifecycle hook,

24
00:01:01,830 --> 00:01:05,190
both lifecycle hooks would execute the one in the component,

25
00:01:05,190 --> 00:01:07,160
and the one in the mixins with the one

26
00:01:07,160 --> 00:01:09,610
from the component being executed last

27
00:01:09,610 --> 00:01:12,520
so that it is able to overwrite any changes made

28
00:01:12,520 --> 00:01:13,530
by to mixin.

29
00:01:13,530 --> 00:01:15,310
But that's just a side note.

30
00:01:15,310 --> 00:01:18,030
Here I'm defining mounted in this mixin

31
00:01:18,030 --> 00:01:20,080
which I wanna use as a global mixin

32
00:01:20,080 --> 00:01:23,400
and for the moment I will just log mounted here.

33
00:01:23,400 --> 00:01:26,760
So as simply some logging for me as a developer,

34
00:01:26,760 --> 00:01:30,650
maybe you wanna store something in some database here,

35
00:01:30,650 --> 00:01:32,180
some analytics data,

36
00:01:32,180 --> 00:01:35,003
things like that could be done in a global mixin.

37
00:01:35,850 --> 00:01:37,520
So here I'm just logging

38
00:01:37,520 --> 00:01:40,687
and now we can register this as a global mixin

39
00:01:40,687 --> 00:01:43,380
by going to our main.js file,

40
00:01:43,380 --> 00:01:46,830
where we also defined global components and so on.

41
00:01:46,830 --> 00:01:49,440
Here we can import the logger mixin

42
00:01:49,440 --> 00:01:53,669
from /mixins/logger.js

43
00:01:53,669 --> 00:01:55,980
and with that import that's simply added

44
00:01:55,980 --> 00:01:59,950
by calling app.mixin and you probably see a pattern.

45
00:01:59,950 --> 00:02:02,720
We had app component for global components,

46
00:02:02,720 --> 00:02:05,840
we have app.mixin for global mixins.

47
00:02:05,840 --> 00:02:10,229
And we simply point at our import here, LoggerMixins.

48
00:02:11,210 --> 00:02:14,370
Now this registers it as a global mixin

49
00:02:14,370 --> 00:02:16,143
and if we now save that,

50
00:02:17,070 --> 00:02:19,500
I get my alerts here, of course still,

51
00:02:19,500 --> 00:02:23,460
but we also now see mounted in the developer tools.

52
00:02:23,460 --> 00:02:27,230
And we see that whenever a component is well mounted

53
00:02:27,230 --> 00:02:28,063
to the screen.

54
00:02:28,063 --> 00:02:28,896
So for example,

55
00:02:28,896 --> 00:02:30,763
whenever we open a dialogue.

56
00:02:31,930 --> 00:02:35,060
And these are global mixins, as I said,

57
00:02:35,060 --> 00:02:37,840
probably a very limited use case

58
00:02:37,840 --> 00:02:41,990
or a limited number of use cases where they can be useful,

59
00:02:41,990 --> 00:02:44,550
but still something to be aware of in case

60
00:02:44,550 --> 00:02:47,420
you have some functionality that should be added

61
00:02:47,420 --> 00:02:50,173
to every component in your application.

