1
00:00:01,350 --> 00:00:03,620
不，有几个注释，

2
00:00:03,620 --> 00:00:06,810
我仍然想在这里讨论我们的解决方案。

3
00:00:06,810 --> 00:00:08,820
对于这里的一个增强项目。

4
00:00:08,820 --> 00:00:12,030
我也在使用道具用户项目。

5
00:00:12,030 --> 00:00:14,650
好吧，因为我们已经在提取用户

6
00:00:14,650 --> 00:00:16,973
在这一行中进入我们的参考。

7
00:00:18,080 --> 00:00:20,533
我们当然也可以在这里使用它。

8
00:00:21,510 --> 00:00:25,430
用户点值项目和访问统计。

9
00:00:25,430 --> 00:00:28,790
我要强调的另一件事是这个 watcher 。

10
00:00:28,790 --> 00:00:33,370
在这里，我正在更改输入的搜索词的值。

11
00:00:33,370 --> 00:00:34,540
现在请记住，

12
00:00:34,540 --> 00:00:39,030
输入的搜索词被我们的使用搜索钩子暴露。

13
00:00:39,030 --> 00:00:42,130
这是我在这里提取的值之一。

14
00:00:42,130 --> 00:00:46,450
它最初是在该钩子内部定义的。

15
00:00:46,450 --> 00:00:48,860
现在改变事物，改变参考。

16
00:00:48,860 --> 00:00:52,160
这是从内部定义在那个钩子中的，

17
00:00:52,160 --> 00:00:54,560
您使用钩子的组件，

18
00:00:54,560 --> 00:00:56,420
是你可以做的事情。

19
00:00:56,420 --> 00:00:58,320
如您所知，它会起作用，

20
00:00:58,320 --> 00:01:01,930
但也许这也是你想要强调的东西。

21
00:01:01,930 --> 00:01:03,420
出于一个简单的原因，

22
00:01:03,420 --> 00:01:07,120
使您的代码易于理解和维护。

23
00:01:07,120 --> 00:01:08,780
如果我看到这段代码。

24
00:01:08,780 --> 00:01:10,810
我可能认为输入的搜索词，

25
00:01:10,810 --> 00:01:12,810
应该是这个组件的引用，

26
00:01:12,810 --> 00:01:14,370
我不会在那里找到它。

27
00:01:14,370 --> 00:01:18,340
直到最终我看到它来自这个钩子。

28
00:01:18,340 --> 00:01:20,640
另外，这里改一下。

29
00:01:20,640 --> 00:01:21,580
钩子外

30
00:01:21,580 --> 00:01:25,130
可能会干扰我们在钩子内部的逻辑。

31
00:01:25,130 --> 00:01:26,230
这里没有，

32
00:01:26,230 --> 00:01:28,883
但它可以在其他应用程序和其他场景中。

33
00:01:30,120 --> 00:01:33,600
因此，一种更优雅的改变值的方式

34
00:01:33,600 --> 00:01:36,280
这是在钩子内部定义和使用的，

35
00:01:36,280 --> 00:01:38,810
可能是定义一个单独的函数

36
00:01:38,810 --> 00:01:40,570
这意味着要使用，

37
00:01:40,570 --> 00:01:42,113
如果你想改变一个值。

38
00:01:43,290 --> 00:01:46,530
我们得到了这样一个功能就绪的更新搜索，

39
00:01:46,530 --> 00:01:47,900
它需要一个值。

40
00:01:47,900 --> 00:01:49,330
并分配这个值'

41
00:01:49,330 --> 00:01:52,540
作为输入搜索词的新值。

42
00:01:52,540 --> 00:01:55,420
最后，这就是我在这里所做的，对吧？

43
00:01:55,420 --> 00:01:57,890
因此，我可以打电话更新。

44
00:01:57,890 --> 00:02:01,650
在此处搜索并将空字符串作为新值传递，

45
00:02:01,650 --> 00:02:02,980
因为这就是我想做的。

46
00:02:02,980 --> 00:02:06,043
我想将输入的搜索词设置为空字符串。

47
00:02:07,298 --> 00:02:08,889
有这个，我保证。

48
00:02:08,889 --> 00:02:12,100
如果我选择一个用户并进行过滤，

49
00:02:12,100 --> 00:02:14,943
当我选择不同的用户时，我仍然会重置它。

50
00:02:16,030 --> 00:02:18,210
所以这个观察者现在仍然有效。

51
00:02:18,210 --> 00:02:21,180
并且仍然重置我输入的搜索参考。

52
00:02:21,180 --> 00:02:23,800
但现在它以更好的方式做到了这一点。

53
00:02:23,800 --> 00:02:24,633
我会说。

54
00:02:26,290 --> 00:02:27,123
现在有了这个，

55
00:02:27,123 --> 00:02:29,720
我已经完成了搜索功能，

56
00:02:29,720 --> 00:02:33,360
作为你最后的练习任务。

57
00:02:33,360 --> 00:02:34,690
我要你

58
00:02:34,690 --> 00:02:36,100
现在想办法

59
00:02:36,100 --> 00:02:39,333
外包这种排序功能。

60
00:02:40,210 --> 00:02:42,540
我们只在一个组件中使用它。

61
00:02:42,540 --> 00:02:43,920
但从理论上讲，这可以，

62
00:02:43,920 --> 00:02:47,230
当然也可以在多个组件中使用。

63
00:02:47,230 --> 00:02:49,740
所以尝试为此创建一个自定义钩子。

64
00:02:49,740 --> 00:02:52,323
下节课我们一起做。