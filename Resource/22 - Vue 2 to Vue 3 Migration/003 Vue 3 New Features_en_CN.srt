1
00:00:02,120 --> 00:00:05,010
现在这就是您应该注意的更改。

2
00:00:05,010 --> 00:00:07,750
现在让我们深入了解新功能。

3
00:00:07,750 --> 00:00:10,140
这里我们有一个传送组件

4
00:00:10,140 --> 00:00:12,320
和一个称为片段的功能。

5
00:00:12,320 --> 00:00:13,903
现在是怎么回事。

6
00:00:14,820 --> 00:00:16,840
再次，我为你准备了一些东西。

7
00:00:16,840 --> 00:00:19,440
传送碎片文件夹。

8
00:00:19,440 --> 00:00:20,823
让我们深入研究一下。

9
00:00:23,490 --> 00:00:26,473
并且 NPM install 和 NPM run 服务。

10
00:00:27,700 --> 00:00:31,020
一旦启动并运行。如果我重新加载，

11
00:00:31,020 --> 00:00:33,380
这就是我得到的。如果我在这里点击一个按钮，

12
00:00:33,380 --> 00:00:36,230
我得到这个模态，我可以确认

13
00:00:36,230 --> 00:00:38,470
我想停用或取消。

14
00:00:38,470 --> 00:00:39,850
如果我确认它已经消失了，

15
00:00:39,850 --> 00:00:42,913
所以这里是一个非常简单的虚拟应用程序，使用 Vue 3。

16
00:00:43,790 --> 00:00:46,060
现在，在这里我们可以使用两个新功能，

17
00:00:46,060 --> 00:00:48,943
传送和碎片。让我们从传送开始。

18
00:00:49,820 --> 00:00:51,850
如果我打开这个模式，

19
00:00:51,850 --> 00:00:55,340
我们可以在开发工具中检查这一点。

20
00:00:55,340 --> 00:00:57,393
在元素选项卡中，

21
00:00:58,520 --> 00:01:02,280
我们实际上看到了这个对话和背景

22
00:01:02,280 --> 00:01:06,920
渲染嵌套在我们的元素树中的某个地方，对吗？

23
00:01:06,920 --> 00:01:09,070
所以这是真正的 DOM 和我们的背景

24
00:01:09,070 --> 00:01:11,603
对话深深地嵌套在 DOM 中。

25
00:01:12,510 --> 00:01:15,410
现在，视觉上没问题，

26
00:01:15,410 --> 00:01:19,150
但它实际上并不适合语义

27
00:01:19,150 --> 00:01:20,820
为了可访问性，也许。

28
00:01:20,820 --> 00:01:22,780
它甚至会破坏你的造型

29
00:01:22,780 --> 00:01:25,820
例如，如果您不使用 set index。

30
00:01:25,820 --> 00:01:29,530
一般来说，这当然应该是应用程序的覆盖。

31
00:01:29,530 --> 00:01:34,470
所以从逻辑上讲，它不应该深深嵌套在 DOM 树中。

32
00:01:34,470 --> 00:01:37,310
相反，它应该直接在体内，

33
00:01:37,310 --> 00:01:39,040
例如。

34
00:01:39,040 --> 00:01:41,450
现在这不是你在技术上需要的东西，

35
00:01:41,450 --> 00:01:44,620
但它在逻辑上会更好一些，

36
00:01:44,620 --> 00:01:47,400
在语义上，从可访问性的角度来看。

37
00:01:47,400 --> 00:01:50,140
因此，如果我们可以移动这个 div 那就太好了

38
00:01:50,140 --> 00:01:52,590
并将对话转移到 DOM 中的不同位置。

39
00:01:53,470 --> 00:01:56,210
使用 Vue 2，这是不可能的，

40
00:01:56,210 --> 00:01:58,070
使用 Vue 3 就是这样。

41
00:01:58,070 --> 00:02:00,340
我们现在有了一个叫做传送的功能。

42
00:02:00,340 --> 00:02:03,423
如果你知道，反应在那里，它被称为门户。

43
00:02:04,320 --> 00:02:05,890
现在，它是如何工作的？

44
00:02:05,890 --> 00:02:09,130
在要移动东西的组件中，

45
00:02:09,130​​ --> 00:02:12,100
例如，在确认对话组件中，

46
00:02:12,100 --> 00:02:17,100
你可以简单地在这里包装你的整个组件，

47
00:02:17,380 --> 00:02:22,380
您的整个模板带有一个新的内置传送组件，

48
00:02:22,730 --> 00:02:24,830
像这样。

49
00:02:24,830 --> 00:02:27,910
然后在传送时，你需要 to 道具

50
00:02:27,910 --> 00:02:30,980
例如，您传入 CSS 选择器的位置，

51
00:02:30,980 --> 00:02:33,250
选择 body 元素以使其清晰

52
00:02:33,250 --> 00:02:36,100
这里的一切都应该被渲染

53
00:02:36,100 --> 00:02:38,320
直接在体内。

54
00:02:38,320 --> 00:02:41,430
现在你仍然像以前一样使用这个组件。

55
00:02:41,430 --> 00:02:43,780
所以我仍然可以在模板中使用它

56
00:02:43,780 --> 00:02:45,940
另一个嵌套组件。

57
00:02:45,940 --> 00:02:50,210
正如我在管理员模式下所做的那样，这仍然是可能的。

58
00:02:50,210 --> 00:02:54,260
我们仍然可以将 props 传递给这个组件，监听事件。

59
00:02:54,260 --> 00:02:56,610
这一切都如你所见。

60
00:02:56,610 --> 00:02:59,380
但现在实际的 DOM 已经渲染

61
00:02:59,380 --> 00:03:02,090
将在不同的地方呈现。

62
00:03:02,090 --> 00:03:07,090
如果我们保存并重新加载，我仍然可以查看此模式，

63
00:03:07,320 --> 00:03:11,400
但是如果我们现在检查它，我们会看到这个 div，背景，

64
00:03:11,400 --> 00:03:13,860
对话和同时拥有的 div

65
00:03:13,860 --> 00:03:15,840
现在直接在体内。

66
00:03:15,840 --> 00:03:19,670
它没有深深嵌套在我们的 arbor 组件树中

67
00:03:19,670 --> 00:03:22,640
在我们的乔木节点树中，我应该说。

68
00:03:22,640 --> 00:03:25,450
所以这是传送一个不错的新功能，

69
00:03:25,450 --> 00:03:27,290
它允许您在语义上编写

70
00:03:27,290 --> 00:03:29,853
更正确的 HTML 代码，我猜。

71
00:03:31,330 --> 00:03:34,440
另一个不错的功能是片段功能。

72
00:03:34,440 --> 00:03:37,400
在管理员模式下，我得到了这个确认的对话

73
00:03:37,400 --> 00:03:38,980
在此列表项内。

74
00:03:38,980 --> 00:03:41,030
现在，从技术上讲，我可以把它放在任何地方

75
00:03:41,030 --> 00:03:42,500
因为我们刚刚学会了

76
00:03:42,500 --> 00:03:45,510
HTML 代码将在其他地方呈现。

77
00:03:45,510 --> 00:03:47,260
但还是要明确一点

78
00:03:47,260 --> 00:03:49,330
这实际上不在列表项中。

79
00:03:49,330 --> 00:03:51,760
它只是属于这个组件。

80
00:03:51,760 --> 00:03:54,100
我们可能想把它移出那里。

81
00:03:54,100 --> 00:03:56,480
而对于 Vue 2，这是不允许的。

82
00:03:56,480 --> 00:03:58,880
我的 IDE 在这里仍然给我一个错误，

83
00:03:58,880 --> 00:04:02,250
但我可以用 Vue 3 告诉你，这是允许的。

84
00:04:02,250 --> 00:04:06,950
使用 Vue 3，你可能有多个根元素

85
00:04:06,950 --> 00:04:09,190
在您的组件模板中。

86
00:04:09,190 --> 00:04:12,010
你不限于只有一个。

87
00:04:12,010 --> 00:04:14,290
你可以有多个兄弟元素

88
00:04:14,290 --> 00:04:16,160
直接在您的模板中。

89
00:04:16,160 --> 00:04:17,079
这是新的。

90
00:04:17,079 --> 00:04:21,230
Vue 2 不支持，现在 Vue 3 不支持，

91
00:04:21,230 --> 00:04:25,003
如您所知，这很有效，我们在这里没有错误。

92
00:04:25,950 --> 00:04:28,310
这就是瞬移和碎片。

93
00:04:28,310 --> 00:04:30,050
现在最大的新功能，

94
00:04:30,050 --> 00:04:34,400
100% 可选的是组合 API。

95
00:04:34,400 --> 00:04:39,310
组合 API 可以替换现有的选项 API。

96
00:04:39,310 --> 00:04:41,640
我真的想仔细看看

97
00:04:41,640 --> 00:04:44,850
在这个组合 API，因此我有这个

98
00:04:44,850 --> 00:04:47,780
在本次讲座之后的另一场讲座中。

99
00:04:47,780 --> 00:04:50,340
不过，在我们去看那个单独的视频之前，

100
00:04:50,340 --> 00:04:52,970
这是我想谈的最后一个新功能。

101
00:04:52,970 --> 00:04:55,560
这是一种新的 TypeScript 支持。

102
00:04:55,560 --> 00:04:58,600
你总是可以将 TypeScript 与 Vue 一起使用，

103
00:04:58,600 --> 00:05:02,830
使用 Vue 3，现在更容易，因为 Vue 3 内部

104
00:05:02,830 --> 00:05:04,770
是用 TypeScript 构建的。

105
00:05:04,770 --> 00:05:06,600
现在，如果你想了解更多，

106
00:05:06,600 --> 00:05:08,670
我推荐官方文档。

107
00:05:08,670 --> 00:05:11,420
在那里，您可以了解有关 TypeScript 支持的所有信息

108
00:05:11,420 --> 00:05:14,590
以及如何在 Vue 3 项目中使用 TypeScript，

109
00:05:14,590 --> 00:05:16,980
以及如何在那里编写 TypeScript 代码。

110
00:05:16,980 --> 00:05:20,190
这是一个替代方案。你不必使用 TypeScript。

111
00:05:20,190 --> 00:05:22,840
我在我的大部分项目中都使用 Java 脚本，

112
00:05:22,840 --> 00:05:25,543
但如果您愿意，可以使用 TypeScript。