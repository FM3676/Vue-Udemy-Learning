1
00:00:02,240 --> 00:00:05,070
最大的新功能介绍

2
00:00:05,070 --> 00:00:08,620
Vue 3 就是所谓的 Composition API。

3
00:00:08,620 --> 00:00:11,230
它是 100% 可选的

4
00:00:11,230 --> 00:00:14,470
它是选项 API 的替代方案。

5
00:00:14,470 --> 00:00:18,220
现在，Options API 就是我们目前使用的

6
00:00:18,220 --> 00:00:20,450
用于构建 Vue 应用程序和组件。

7
00:00:20,450 --> 00:00:22,483
当您像这样配置组件时

8
00:00:22,483 --> 00:00:25,110
带有数据和方法选项，

9
00:00:25,110 --> 00:00:27,560
那是使用选项 API。

10
00:00:27,560 --> 00:00:30,888
您正在通过或您正在设置各种选项

11
00:00:30,888 --> 00:00:34,500
在该 Vue 实例的配置对象中

12
00:00:34,500 --> 00:00:36,580
这个 Vue 组件。

13
00:00:36,580 --> 00:00:38,610
这种方法绝对没问题。

14
00:00:38,610 --> 00:00:41,490
它不会去任何地方，你可以坚持下去。

15
00:00:41,490 --> 00:00:42,947
这对我来说真的很重要。

16
00:00:42,947 --> 00:00:46,050
但我们现在有了替代方案。

17
00:00:46,050 --> 00:00:48,650
您可以替换数据、方法、计算

18
00:00:48,650 --> 00:00:51,460
并使用不同的选项观看，

19
00:00:51,460 --> 00:00:52,970
用不同的方法

20
00:00:52,970 --> 00:00:55,460
那就是Composition API。

21
00:00:55,460 --> 00:00:58,280
因为你可能会面临过于主要的限制

22
00:00:58,280 --> 00:01:01,360
或构建更大的 Vue 应用程序时的问题

23
00:01:01,360 --> 00:01:03,580
使用选项 API。

24
00:01:03,580 --> 00:01:06,644
一方面，逻辑上属于一起的代码

25
00:01:06,644 --> 00:01:10,820
可能分为多个不同的选项

26
00:01:10,820 --> 00:01:12,853
跨数据方法和计算。

27
00:01:13,870 --> 00:01:15,690
我实际上在这里举了一个例子，

28
00:01:15,690 --> 00:01:19,340
这不是我们将在本视频中深入探讨的示例。

29
00:01:19,340 --> 00:01:21,800
这取自我的 Vue 课程

30
00:01:21,800 --> 00:01:24,520
我将它完全更新到 Vue 3。

31
00:01:24,520 --> 00:01:26,443
例如，我在这里，

32
00:01:26,443 --> 00:01:27,940
我有几个组件

33
00:01:27,940 --> 00:01:30,480
在此处的 UserList 组件中，

34
00:01:30,480 --> 00:01:33,640
我有一些数据用于管理我的用户

35
00:01:33,640 --> 00:01:36,690
还有用户输入的 SearchTerm

36
00:01:36,690 --> 00:01:39,440
以及用户选择的排序逻辑。

37
00:01:39,440 --> 00:01:41,450
然后我计算了属性

38
00:01:41,450 --> 00:01:44,180
用于派生基于显示的用户

39
00:01:44,180 --> 00:01:46,240
关于选择的排序逻辑

40
00:01:46,240 --> 00:01:47,910
由这个应用程序的用户。

41
00:01:47,910 --> 00:01:51,490
而且我还有一个搜索方法，

42
00:01:51,490 --> 00:01:53,420
所以一种与搜索有关的方法。

43
00:01:53,420 --> 00:01:55,460
一种与排序有关的方法。

44
00:01:55,460 --> 00:01:57,860
我有一个与搜索相关的观察者。

45
00:01:57,860 --> 00:02:00,600
另一个与搜索有关的观察者。

46
00:02:00,600 --> 00:02:03,870
正如你所看到的，这种逻辑有点分裂，对吧？

47
00:02:03,870 --> 00:02:06,790
我们在数据选项中有搜索数据。

48
00:02:06,790 --> 00:02:09,900
我们有搜索方法，我们有搜索观察者

49
00:02:09,900 --> 00:02:12,310
对于排序，我们还有一个选项，

50
00:02:12,310 --> 00:02:14,670
计算属性，数据，

51
00:02:14,670 --> 00:02:16,616
到处都是。

52
00:02:16,616 --> 00:02:19,160
这不一定是可怕的

53
00:02:19,160 --> 00:02:21,920
但在更大的应用和更大的组件中，

54
00:02:21,920 --> 00:02:24,700
它可能会导致大量滚动

55
00:02:24,700 --> 00:02:26,820
更新您的搜索逻辑。

56
00:02:26,820 --> 00:02:28,320
如果我在这里改变一些东西，

57
00:02:28,320 --> 00:02:30,700
假设输入的SearchTerm 的名称，

58
00:02:30,700 --> 00:02:33,190
我必须在几个地方改变它。

59
00:02:33,190 --> 00:02:34,740
还有这么大的组件

60
00:02:34,740 --> 00:02:36,550
一切都分散在哪里

61
00:02:36,550 --> 00:02:39,600
可能变得难以管理或难以管理。

62
00:02:39,600 --> 00:02:43,100
此外，跨组件重用逻辑

63
00:02:43,100 --> 00:02:45,323
也可能很棘手或麻烦。

64
00:02:46,400 --> 00:02:47,870
在这个演示应用程序中，

65
00:02:47,870 --> 00:02:49,690
你在我的课程中找到的，

66
00:02:49,690 --> 00:02:52,230
我确实有 ProjectsList 组件，

67
00:02:52,230 --> 00:02:53,800
除了用户列表

68
00:02:53,800 --> 00:02:56,440
在那里我也有搜索逻辑。

69
00:02:56,440 --> 00:03:00,430
现在，我们可以混合共享这段代码，

70
00:03:00,430 --> 00:03:01,460
但混入其中，

71
00:03:01,460 --> 00:03:03,600
我们会新的困难。

72
00:03:03,600 --> 00:03:05,900
例如，它不会很明显

73
00:03:05,900 --> 00:03:08,020
这个逻辑是从哪里来的。

74
00:03:08,020 --> 00:03:10,420
我们必须调查所有的混音，

75
00:03:10,420 --> 00:03:12,160
如果我们使用多个混音

76
00:03:12,160 --> 00:03:16,040
找出哪个混合包含搜索逻辑。

77
00:03:16,040 --> 00:03:18,986
这在更大的应用程序中也可能很棘手。

78
00:03:18,986 --> 00:03:21,940
所以这些都不是技术问题。

79
00:03:21,940 --> 00:03:24,170
这些甚至可能是你的问题

80
00:03:24,170 --> 00:03:26,380
你曾经遇到过的，当然，

81
00:03:26,380 --> 00:03:27,510
一切都很好

82
00:03:27,510 --> 00:03:29,530
但这可能是您面临的问题

83
00:03:29,530 --> 00:03:32,820
在更大的 Vue 应用程序和更大的 Vue 组件中。

84
00:03:32,820 --> 00:03:34,610
这就是为什么你可以移动

85
00:03:34,610 --> 00:03:36,110
来自选项 API

86
00:03:36,110 --> 00:03:38,520
到新的 Composition API，

87
00:03:38,520 --> 00:03:42,122
合并计算的数据方法

88
00:03:42,122 --> 00:03:45,050
进入一种设置方法，

89
00:03:45,050 --> 00:03:48,130
您仍将其添加到组件配置对象中

90
00:03:48,130 --> 00:03:50,290
然后在哪里使用新功能

91
00:03:50,290 --> 00:03:53,840
管理这一切并解决这两个问题。

92
00:03:53,840 --> 00:03:55,240
所以看到这个在行动，

93
00:03:55,240 --> 00:03:58,390
我还在这里为我们准备了一个小项目。

94
00:03:58,390 --> 00:04:00,860
您会发现此视频附带的链接

95
00:04:00,860 --> 00:04:02,200
在视频说明中

96
00:04:02,200 --> 00:04:04,940
到所有更改的整个存储库，

97
00:04:04,940 --> 00:04:07,030
我也在另一个视频中介绍过

98
00:04:07,030 --> 00:04:08,160
在这个视频中，

99
00:04:08,160 --> 00:04:11,690
我想深入了解这个 composition-api 文件夹。

100
00:04:11,690 --> 00:04:13,630
导航到此文件夹后，

101
00:04:13,630 --> 00:04:16,390
运行 npm install 和 npm run serve

102
00:04:16,390 --> 00:04:18,060
安装所有依赖项

103
00:04:18,060 --> 00:04:20,550
并启动开发服务器。

104
00:04:20,550 --> 00:04:22,500
然后你会看到一个小应用程序，

105
00:04:22,500 --> 00:04:26,020
我准备的，它使用选项 API，

106
00:04:26,020 --> 00:04:28,680
它仍然适用于 Vue 3。

107
00:04:28,680 --> 00:04:30,220
这是我准备的应用程序。

108
00:04:30,220 --> 00:04:33,793
我可以输入一些目标，比如学习 Vue。

109
00:04:35,240 --> 00:04:40,020
探索新的 Vue 3 课程。

110
00:04:40,020 --> 00:04:43,100
但是如果你输入类似学习 React 的东西，

111
00:04:43,100 --> 00:04:44,820
那么这不会出现在这里

112
00:04:44,820 --> 00:04:47,510
因为我实际上有一些逻辑

113
00:04:47,510 --> 00:04:50,700
过滤 Angular 和 React

114
00:04:50,700 --> 00:04:54,440
并删除包含这些条款的此类目标。

115
00:04:54,440 --> 00:04:56,450
这就是我们这里的小应用程序。

116
00:04:56,450 --> 00:04:59,740
我在我的 App.vue 文件中使用了一个组件

117
00:04:59,740 --> 00:05:01,400
这就是 CourseGoals 组件。

118
00:05:01,400 --> 00:05:03,470
在那里我使用了另外两个组件，

119
00:05:03,470 --> 00:05:04,570
目标列表和添加目标。

120
00:05:05,720 --> 00:05:08,630
我在 CourseGoals 中管理一些数据。

121
00:05:08,630 --> 00:05:11,700
我有一个计算属性来过滤我的目标

122
00:05:11,700 --> 00:05:13,670
对于 Angular 和 React。

123
00:05:13,670 --> 00:05:16,710
而且我有添加精确目标的方法。

124
00:05:16,710 --> 00:05:19,070
一种创造新目标的方法

125
00:05:19,070 --> 00:05:21,350
并将其添加到数据属性中。

126
00:05:21,350 --> 00:05:25,290
在 AddGoal 中，我有一些输入文本的数据

127
00:05:25,290 --> 00:05:27,640
以及输入的有效性。

128
00:05:27,640 --> 00:05:29,060
我得到了 addGoal 方法

129
00:05:29,060 --> 00:05:30,770
我在哪里检查有效性

130
00:05:30,770 --> 00:05:33,800
并可能将其设置为 true

131
00:05:33,800 --> 00:05:36,650
以便显示此错误消息

132
00:05:36,650 --> 00:05:38,810
最终，如果一切都好，

133
00:05:38,810 --> 00:05:40,020
我发出一个自定义事件

134
00:05:40,020 --> 00:05:43,990
使用输入的文本，然后重置输入的文本。

135
00:05:43,990 --> 00:05:47,760
并且enteredText数据绑定到这个输入

136
00:05:47,760 --> 00:05:50,890
使用 v-model，因此使用双向绑定。

137
00:05:50,890 --> 00:05:52,800
另外，我有一个观察者

138
00:05:52,800 --> 00:05:55,030
我在哪里观察无效输入

139
00:05:55,030 --> 00:05:57,820
并将其记录到控制台。

140
00:05:57,820 --> 00:06:00,200
在目标列表中，我没有什么特别的。

141
00:06:00,200 --> 00:06:03,943
这里我只是拿一个道具and 输出我的列表项。

142
00:06:05,220 --> 00:06:07,510
现在，我在这里使用 Options API

143
00:06:07,510 --> 00:06:10,659
现在我想迁移到 Composition API。

144
00:06:10,659 --> 00:06:14,560
让我们从 CourseGoals 开始吧。

145
00:06:14,560 --> 00:06:17,323
正如我提到的，我们将替换计算的数据

146
00:06:17,323 --> 00:06:20,610
和新的方法。

147
00:06:20,610 --> 00:06:22,246
所以我要把它评论出来。

148
00:06:22,246 --> 00:06:25,760
我们将用这个设置方法替换它，

149
00:06:25,760 --> 00:06:29,600
您现在可以将其添加到组件配置对象中。

150
00:06:29,600 --> 00:06:32,260
设置由 Vue 自动调用

151
00:06:32,260 --> 00:06:35,120
当它创建这个 Vue 组件时。

152
00:06:35,120 --> 00:06:37,130
它大约在同一时间被调用

153
00:06:37,130 --> 00:06:41,566
当创建的生命周期钩子正常执行时。

154
00:06:41,566 --> 00:06:44,560
现在，在这里，你必须设置一切

155
00:06:44,560 --> 00:06:45,780
这个组件需要。

156
00:06:45,780 --> 00:06:48,040
所有的数据，所有的计算属性，

157
00:06:48,040 --> 00:06:51,010
所有的功能和所有的观察者。

158
00:06:51,010 --> 00:06:52,520
现在，我们如何做到这一点

159
00:06:52,520 --> 00:06:55,040
因为我们不再有这些选项了？

160
00:06:55,040 --> 00:06:59,220
井数据可以用 refs 替换，例如，

161
00:06:59,220 --> 00:07:02,240
你需要为此从 Vue 导入一些东西。

162
00:07:02,240 --> 00:07:04,200
所以从 vue 导入

163
00:07:04,200 --> 00:07:07,270
以及我们在大括号之间导入的内容

164
00:07:07,270 --> 00:07:09,483
是参考函数。

165
00:07:10,660 --> 00:07:14,830
Ref 只是您可以说的一段反应性数据。

166
00:07:14,830 --> 00:07:17,691
您创建了这样一个反应性数据

167
00:07:17,691 --> 00:07:20,030
通过在设置中调用 ref。

168
00:07:20,030 --> 00:07:23,080
它基本上是在创建一个 JavaScript 变量，

169
00:07:23,080 --> 00:07:23,990
你可以说，

170
00:07:23,990 --> 00:07:27,800
但是 Vue 知道对其所做的任何更改。

171
00:07:27,800 --> 00:07:30,780
然后 Vue 可以在哪里更新模板

172
00:07:30,780 --> 00:07:33,410
如果检测到这种变化。

173
00:07:33,410 --> 00:07:35,751
ref 可以采用默认值。

174
00:07:35,751 --> 00:07:38,150
所以在这里，因为我想替换目标，

175
00:07:38,150 --> 00:07:40,371
最终我会传入一个数组。

176
00:07:40,371 --> 00:07:44,270
现在我们可以存储这个 ref，这个反应变量

177
00:07:44,270 --> 00:07:46,210
在常量或变量中

178
00:07:46,210 --> 00:07:47,710
我将其命名为目标。

179
00:07:47,710 --> 00:07:49,010
一个常数就足够了

180
00:07:49,010 --> 00:07:51,560
因为我们永远不会为此分配新值。

181
00:07:51,560 --> 00:07:53,390
我们可以更改存储在 ref 中的值

182
00:07:53,390 --> 00:07:54,250
但在幕后，

183
00:07:54,250 --> 00:07:57,540
ref 将围绕这个数组创建一个包装对象，

184
00:07:57,540 --> 00:08:00,210
所以我们只会改变包装的值，

185
00:08:00,210 --> 00:08:02,113
不是整个 ref 对象。

186
00:08:03,160 --> 00:08:06,180
有了这个，我们得到了我们的反应变量，

187
00:08:06,180 --> 00:08:07,820
它拥有这个数组，

188
00:08:07,820 --> 00:08:09,960
这很重要

189
00:08:09,960 --> 00:08:13,760
Vue 知道，当我们改变这个数组时，

190
00:08:13,760 --> 00:08:15,930
Vue 会意识到这些变化

191
00:08:15,930 --> 00:08:17,970
如果我们在模板中使用这个数组，

192
00:08:17,970 --> 00:08:20,393
然后它将知道在哪里更新模板。

193
00:08:21,270 --> 00:08:23,240
所以这是重要的一步。

194
00:08:23,240 --> 00:08:25,731
这就是我们可以替换数据的方式。

195
00:08:25,731 --> 00:08:27,650
还有另一种替换数据的方法。

196
00:08:27,650 --> 00:08:29,830
还有一个反应功能，

197
00:08:29,830 --> 00:08:32,679
您可以使用它，但我不会在这里深入探讨。

198
00:08:32,679 --> 00:08:34,400
我在我的课程中详细介绍了它

199
00:08:34,400 --> 00:08:35,669
如果你对此感兴趣

200
00:08:35,669 --> 00:08:38,799
但 refs 是我最常用的

201
00:08:38,799 --> 00:08:40,880
你几乎可以用它们做任何事情，

202
00:08:40,880 --> 00:08:42,472
所以这就是我们所需要的。

203
00:08:43,559 --> 00:08:46,490
现在我们需要在设置中做一件重要的事情。

204
00:08:46,490 --> 00:08:47,888
我们需要让 Vue 知道

205
00:08:47,888 --> 00:08:51,050
关于它应该能够使用的东西

206
00:08:51,050 --> 00:08:52,700
在模板中。

207
00:08:52,700 --> 00:08:54,370
安装程序需要返回

208
00:08:54,370 --> 00:08:56,920
模板中应该有什么

209
00:08:56,920 --> 00:08:58,738
那总是一个对象

210
00:08:58,738 --> 00:09:02,420
你现在在哪里映射你在设置中拥有的不同的东西，

211
00:09:02,420 --> 00:09:03,980
像这个目标参考，

212
00:09:03,980 --> 00:09:06,080
到您选择的标识符。

213
00:09:06,080 --> 00:09:08,770
它可以是相同的名称、目标、

214
00:09:08,770 --> 00:09:12,350
或者像这样完全不同的东西。

215
00:09:12,350 --> 00:09:15,770
这些键现在可以在您的模板中使用

216
00:09:15,770 --> 00:09:16,970
这个组件的。

217
00:09:16,970 --> 00:09:20,650
例如，现在我可以在这里使用 userGoals

218
00:09:20,650 --> 00:09:23,630
如果我愿意，而不是过滤目标。

219
00:09:23,630 --> 00:09:26,440
我不想，但我们可以这样做。

220
00:09:26,440 --> 00:09:28,380
现在，我们实际上不需要这样的目标

221
00:09:28,380 --> 00:09:29,600
虽然在模板中

222
00:09:29,600 --> 00:09:32,810
因为我们过去只是使用了计算属性。

223
00:09:32,810 --> 00:09:34,870
所以我其实不打算曝光

224
00:09:34,870 --> 00:09:37,840
但我们很快就会向这个对象添加东西。

225
00:09:37,840 --> 00:09:40,540
那么让我们继续这个计算属性。

226
00:09:40,540 --> 00:09:42,720
使用设置时我们如何创建它

227
00:09:42,720 --> 00:09:44,233
和组合 API？

228
00:09:45,560 --> 00:09:48,290
好吧，我们从 Vue 导入另一个函数。

229
00:09:48,290 --> 00:09:50,030
计算函数，

230
00:09:50,030 --> 00:09:52,841
用于创建计算属性。

231
00:09:52,841 --> 00:09:55,260
您只需调用计算

232
00:09:55,260 --> 00:09:57,800
然后传递一个函数给它。

233
00:09:57,800 --> 00:10:00,300
这个函数必须返回一个值，

234
00:10:00,300 --> 00:10:02,440
您计算的财产的价值，

235
00:10:02,440 --> 00:10:04,160
例如，在这里，

236
00:10:04,160 --> 00:10:06,480
我可以使用以前使用的相同逻辑

237
00:10:06,480 --> 00:10:08,050
用于过滤我的目标。

238
00:10:08,050 --> 00:10:11,500
所以目标.filter 像这样。

239
00:10:11,500 --> 00:10:14,020
返回那个，评论它

240
00:10:14,020 --> 00:10:18,170
现在 Vue 会自动查看其他哪些 refs

241
00:10:18,170 --> 00:10:19,970
或您正在使用的其他数据

242
00:10:19,970 --> 00:10:21,301
在这个计算属性中

243
00:10:21,301 --> 00:10:24,740
然后它将重新计算这个计算属性

244
00:10:24,740 --> 00:10:28,300
每当这些反应值之一发生变化时。

245
00:10:28,300 --> 00:10:30,630
例如，这里每当目标改变时，

246
00:10:30,630 --> 00:10:34,240
然后它将重新计算计算的属性。

247
00:10:34,240 --> 00:10:36,650
现在，我们应该将计算的属性存储在某个地方

248
00:10:36,650 --> 00:10:38,880
我将其命名为filteredGoals

249
00:10:38,880 --> 00:10:40,770
因为这是我以前用的名字

250
00:10:40,770 --> 00:10:42,703
在选项 API 中也是如此。

251
00:10:43,700 --> 00:10:45,082
现在我们得到了过滤的目标

252
00:10:45,082 --> 00:10:48,020
我们确实需要模板中的那些。

253
00:10:48,020 --> 00:10:51,100
所以现在我将在返回的这个对象中公开它们

254
00:10:51,100 --> 00:10:54,790
通过设置，我将使用过滤目标作为键名

255
00:10:54,790 --> 00:10:57,320
然后指向filteredGoals常数，

256
00:10:57,320 --> 00:10:59,773
它持有应该暴露的价值。

257
00:11:01,970 --> 00:11:02,803
有了这个，

258
00:11:02,803 --> 00:11:05,840
我们公开了这个模板需要的所有数据。

259
00:11:05,840 --> 00:11:08,220
不过，它也需要一个方法。

260
00:11:08,220 --> 00:11:10,050
以及我们如何替换方法

261
00:11:10,050 --> 00:11:11,523
使用组合 API 时？

262
00:11:12,440 --> 00:11:17,000
好吧，您只需在 setup.xml 中定义一个函数。

263
00:11:17,000 --> 00:11:18,540
起初这可能看起来很奇怪

264
00:11:18,540 --> 00:11:21,250
但你绝对可以添加功能

265
00:11:21,250 --> 00:11:22,560
函数内部。

266
00:11:22,560 --> 00:11:25,280
所以你可以在 setup 里面定义一个函数

267
00:11:25,280 --> 00:11:26,660
我们在这里什么也不做

268
00:11:26,660 --> 00:11:29,210
顺便说一下这个匿名函数。

269
00:11:29,210 --> 00:11:30,690
所以我们可以添加一个函数。

270
00:11:30,690 --> 00:11:33,283
例如，将其命名为 addGoal。

271
00:11:34,83​​0 --> 00:11:37,560
在这个功能中，做任何你想做的事。

272
00:11:37,560 --> 00:11:39,610
现在再一次，我会像以前一样做。

273
00:11:39,610 --> 00:11:42,110
所以我将复制我之前在方法中的逻辑。

274
00:11:43,930 --> 00:11:45,123
在此处添加此内容。

275
00:11:47,810 --> 00:11:50,640
现在加上这里，

276
00:11:50,640 --> 00:11:52,530
我只需要调整一件事。

277
00:11:52,530 --> 00:11:54,150
不再是this.goals

278
00:11:54,150 --> 00:11:56,640
但只是目标，因为我指的是

279
00:11:56,640 --> 00:11:59,290
这个目标不变，这是设置的一部分

280
00:11:59,290 --> 00:12:02,140
因此，在这个嵌套函数中也可用。

281
00:12:03,010 --> 00:12:04,370
现在这将改变目标

282
00:12:04,370 --> 00:12:05,870
因为目标是一个参考，

283
00:12:05,870 --> 00:12:07,980
Vue 将出现这种变化。

284
00:12:07,980 --> 00:12:09,280
由于目标是一个参考，

285
00:12:09,280 --> 00:12:11,880
它会知道这个计算属性需要

286
00:12:11,880 --> 00:12:14,520
当目标改变时重新计算

287
00:12:14,520 --> 00:12:16,610
因此filteredGoals会更新

288
00:12:16,610 --> 00:12:18,580
每当目标改变时。

289
00:12:18,580 --> 00:12:21,270
并且filteredGoals 暴露给模板。

290
00:12:21,270 --> 00:12:23,810
这就是模板也将更新的原因

291
00:12:23,810 --> 00:12:25,420
当我们的目标改变时。

292
00:12:25,420 --> 00:12:27,580
这就是它的工作原理。

293
00:12:27,580 --> 00:12:30,330
现在，为了能够使用 addGoal

294
00:12:30,330 --> 00:12:32,730
并从我们的模板中引用它

295
00:12:32,730 --> 00:12:34,040
当我们在这里做的时候，

296
00:12:34,040 --> 00:12:37,470
不过，我们还需要将其公开给模板。

297
00:12:37,470 --> 00:12:40,160
因为默认情况下，什么都没有

298
00:12:40,160 --> 00:12:41,150
在模板中。

299
00:12:41,150 --> 00:12:43,400
我们明确地必须返回

300
00:12:43,400 --> 00:12:45,290
那里应该有什么。

301
00:12:45,290 --> 00:12:49,933
所以在这里我可以在 addGoal 键下公开 addGoal。

302
00:12:51,410 --> 00:12:54,680
如果我这样做，我会替换数据，

303
00:12:54,680 --> 00:12:57,690
此组件中的计算和方法

304
00:12:57,690 --> 00:13:00,500
与 Composition API 等效。

305
00:13:00,500 --> 00:13:04,300
所以如果我们现在保存这个，我会得到一个错误。

306
00:13:04,300 --> 00:13:08,790
必须使用 value 来读取或写入由 ref 包裹的值。

307
00:13:08,790 --> 00:13:11,810
这很重要，我是故意展示的

308
00:13:11,810 --> 00:13:13,480
因为我之前提到过

309
00:13:13,480 --> 00:13:15,910
那个 ref 创建了一个包装对象

310
00:13:15,910 --> 00:13:18,221
这一点很重要。

311
00:13:18,221 --> 00:13:20,390
然后，当您使用此 ref 时，

312
00:13:20,390 --> 00:13:22,880
你没有使用你传递的值

313
00:13:22,880 --> 00:13:24,420
到 ref 函数，

314
00:13:24,420 --> 00:13:27,570
您正在使用 ref 包装器对象。

315
00:13:27,570 --> 00:13:30,190
你可以访问包装的值

316
00:13:30,190 --> 00:13:33,378
通过访问 .value 上的参考。

317
00:13:33,378 --> 00:13:36,480
这必须是.value。

318
00:13:36,480 --> 00:13:39,080
这使您可以访问包装的值

319
00:13:39,080 --> 00:13:40,880
并允许您更改此值

320
00:13:40,880 --> 00:13:42,320
或从中读取。

321
00:13:42,320 --> 00:13:46,690
所以我们必须使用 .value 来推动一个新的目标

322
00:13:46,690 --> 00:13:48,013
并用于过滤。

323
00:13:49,780 --> 00:13:54,150
现在，另一个错误是没有定义文本。

324
00:13:54,150 --> 00:13:58,710
这只是来自这里的这条线。

325
00:13:58,710 --> 00:14:03,360
当然，addGoal 之前收到了一个文本参数。

326
00:14:03,360 --> 00:14:07,510
我仍然应该在此将其添加到此功能中。

327
00:14:07,510 --> 00:14:09,420
但是现在如果我们保存这个，

328
00:14:09,420 --> 00:14:11,850
并重新加载，这有效。

329
00:14:11,850 --> 00:14:13,760
我可以学习 Vue！

330
00:14:13,760 --> 00:14:16,610
但是学习 React 是这样写的

331
00:14:16,610 --> 00:14:17,683
不会显示。

332
00:14:18,740 --> 00:14:21,440
这就是Composition API 的实际应用。

333
00:14:21,440 --> 00:14:23,146
我也想强调

334
00:14:23,146 --> 00:14:26,530
在这个应用程序中，在这个迷你应用程序中，

335
00:14:26,530 --> 00:14:29,430
我在 CourseGoals 中使用 Composition API

336
00:14:29,430 --> 00:14:31,650
但不在 AddGoal 中。

337
00:14:31,650 --> 00:14:34,160
我仍然有选项 API。

338
00:14:34,160 --> 00:14:35,993
而不是在目标列表中。

339
00:14:36,830 --> 00:14:40,510
所以这不是一件事，也不是你拥有的功能

340
00:14:40,510 --> 00:14:42,290
在整个应用程序中使用。

341
00:14:42,290 --> 00:14:45,060
您可以迁移单个组件

342
00:14:45,060 --> 00:14:46,460
到组合 API

343
00:14:46,460 --> 00:14:48,210
并混合这些成分

344
00:14:48,210 --> 00:14:52,290
与仍然使用选项 API 的其他组件。

345
00:14:52,290 --> 00:14:54,000
您甚至可以使用选项

346
00:14:54,000 --> 00:14:56,380
和组合 API 并排

347
00:14:56,380 --> 00:14:57,650
在同一个组件中，

348
00:14:57,650 --> 00:14:59,980
虽然双方真的做不到

349
00:14:59,980 --> 00:15:02,250
与每个 ot 互动她，通常，

350
00:15:02,250 --> 00:15:06,023
您可能会迁移整个组件。

351
00:15:06,900 --> 00:15:09,390
现在，关于无法互动

352
00:15:09,390 --> 00:15:10,456
彼此点，

353
00:15:10,456 --> 00:15:14,120
在设置方法中，您无权访问它。

354
00:15:14,120 --> 00:15:17,550
您无法读取数据选项中可能拥有的任何数据。

355
00:15:17,550 --> 00:15:21,700
你不能在这里访问任何东西。

356
00:15:21,700 --> 00:15:23,990
当然，这可能是个问题

357
00:15:23,990 --> 00:15:27,700
如果您在需要一些道具的组件中

358
00:15:27,700 --> 00:15:30,840
因为通常情况下，你的道具是可用的

359
00:15:30,840 --> 00:15:32,770
通过 this 关键字。

360
00:15:32,770 --> 00:15:34,380
现在，我们在这里不需要道具

361
00:15:34,380 --> 00:15:37,410
但如果您需要在设置中访问道具，

362
00:15:37,410 --> 00:15:41,840
好消息是 setup 收到一个 props 参数。

363
00:15:41,840 --> 00:15:45,210
你在这里得到的第一个参数是一个 props 对象，

364
00:15:45,210 --> 00:15:48,530
它包含组件可能获得的所有道具。

365
00:15:48,530 --> 00:15:51,200
这个组件没有 props，所以我们不需要它

366
00:15:51,200 --> 00:15:53,250
但如果你需要它，这是你的朋友

367
00:15:53,250 --> 00:15:57,150
因为在设置中无法使用它。

368
00:15:57,150 --> 00:15:59,120
现在，对于所有其他边缘情况，

369
00:15:59,120 --> 00:16:03,180
比如你如何使用 this.$router 等等，

370
00:16:03,180 --> 00:16:05,530
你最好访问他们的官方文档

371
00:16:05,530 --> 00:16:08,150
或者你潜入其他资源，比如我的课程，

372
00:16:08,150 --> 00:16:10,970
例如，因为我在那里潜得更深

373
00:16:10,970 --> 00:16:12,710
进入组合 API

374
00:16:12,710 --> 00:16:16,270
我还介绍了如何使用路由器或 Vuex

375
00:16:16,270 --> 00:16:18,300
使用组合 API。

376
00:16:18,300 --> 00:16:20,652
但现在希望核心逻辑很清楚。

377
00:16:20,652 --> 00:16:23,960
我们也可以在 AddGoal 上再次练习。

378
00:16:23,960 --> 00:16:28,000
这里我们也有数据方法，现在是一个观察者。

379
00:16:28,000 --> 00:16:32,580
我们可以用 setup 方法替换所有这些

380
00:16:33,870 --> 00:16:35,500
现在在那里，我们有数据，

381
00:16:35,500 --> 00:16:37,700
两条数据，因此再次，

382
00:16:37,700 --> 00:16:39,900
在这里，我将使用 refs。

383
00:16:39,900 --> 00:16:41,210
我将导入 ref

384
00:16:43,740 --> 00:16:44,740
来自 vue

385
00:16:45,970 --> 00:16:49,563
然后简单地用一个空字符串创建一个新的 ref，

386
00:16:50,486 --> 00:16:51,990
这是我输入的文本

387
00:16:53,830 --> 00:16:56,137
还有无效输入，

388
00:16:58,500 --> 00:17:00,093
最初是错误的。

389
00:17:01,020 --> 00:17:03,750
然后在这里，我们可以返回enteredText

390
00:17:05,569 --> 00:17:08,470
您可以在此处使用 JavaScript 速记。

391
00:17:08,470 --> 00:17:12,339
如果值名和键名相等，

392
00:17:12,339 --> 00:17:14,579
你可以省略值和冒号

393
00:17:14,579 --> 00:17:17,589
它会自动扩展为更长的形式

394
00:17:17,589 --> 00:17:18,563
在幕后。

395
00:17:19,710 --> 00:17:24,300
并且 invalidInput 也是这样暴露的。

396
00:17:24,300 --> 00:17:27,800
所以现在这两个 refs 暴露在模板中。

397
00:17:27,800 --> 00:17:29,220
在我们使用它们的模板中，

398
00:17:29,220 --> 00:17:32,550
例如，用于双向绑定，也用于 v-if。

399
00:17:32,550 --> 00:17:36,400
还有一个关于 refs 和模板的重要说明，

400
00:17:36,400 --> 00:17:38,350
在模板中，您不需要

401
00:17:38,350 --> 00:17:41,210
访问 .value 以读取或写入。

402
00:17:41,210 --> 00:17:43,240
您无需在此处执行此操作

403
00:17:43,240 --> 00:17:47,220
因为在模板中，Vue 会自动钻取

404
00:17:47,220 --> 00:17:49,870
为您进入该价值属性。

405
00:17:49,870 --> 00:17:53,870
所以在你的 JavaScript 代码中，你需要使用 .value。

406
00:17:53,870 --> 00:17:55,610
在模板中，您没有。

407
00:17:55,610 --> 00:17:56,973
一个非常简单的规则。

408
00:17:58,060 --> 00:17:59,470
所以现在我们有了数据，

409
00:17:59,470 --> 00:18:03,160
我们还需要方法，addGoal 方法。

410
00:18:03,160 --> 00:18:05,113
所以我就复制到这里。

411
00:18:09,520 --> 00:18:13,793
并将其创建为这样的功能。

412
00:18:16,850 --> 00:18:20,260
现在，当然，我们不会将这个 invalidInput 设置为 false

413
00:18:20,260 --> 00:18:21,832
但无效的Input.value。

414
00:18:21,832 --> 00:18:26,832
我们不检查this.enteredText，而是检查enteredText.value。

415
00:18:27,100 --> 00:18:30,033
我们再次更新 invalidInput.value 。

416
00:18:31,640 --> 00:18:36,320
我们还设置enterText.value 到下面的一个空字符串。

417
00:18:36,320 --> 00:18:37,340
现在，发射呢？

418
00:18:37,340 --> 00:18:39,210
如果我们没有访问权限，我们该怎么做

419
00:18:39,210 --> 00:18:40,483
到 this 关键字？

420
00:18:41,480 --> 00:18:44,470
我提到 setup 接收一个 props 对象。

421
00:18:44,470 --> 00:18:46,830
它还接收第二个参数，

422
00:18:46,830 --> 00:18:51,230
一个上下文对象，它包含额外的信息

423
00:18:51,230 --> 00:18:53,320
或功能性。

424
00:18:53,320 --> 00:18:55,632
在这个上下文对象上，

425
00:18:55,632 --> 00:18:59,490
但是，您可以调用 emit，而不是使用美元符号

426
00:18:59,490 --> 00:19:00,756
但就像这样。

427
00:19:00,756 --> 00:19:03,880
Context 是一个带有 emit 方法的对象，

428
00:19:03,880 --> 00:19:06,480
它允许您发出自定义事件。

429
00:19:06,480 --> 00:19:09,385
当然，在这里，我们发出 enterText.value

430
00:19:09,385 --> 00:19:10,983
作为一个值。

431
00:19:12,210 --> 00:19:13,810
现在，我这里不需要道具

432
00:19:13,810 --> 00:19:15,870
所以我将其重命名为下划线

433
00:19:15,870 --> 00:19:17,800
所以我们仍然采取这个论点

434
00:19:17,800 --> 00:19:20,640
但我表示我不打算使用它。

435
00:19:20,640 --> 00:19:23,020
否则这个项目设置会抱怨

436
00:19:23,020 --> 00:19:24,623
关于一个未使用的论点。

437
00:19:25,640 --> 00:19:27,640
但是有了这个，我们添加了这个功能

438
00:19:27,640 --> 00:19:31,663
我们还可以将其名称暴露给模板。

439
00:19:33,160 --> 00:19:34,790
现在，观察者呢？

440
00:19:34,790 --> 00:19:36,460
在这里，这个观察者。

441
00:19:36,460 --> 00:19:39,110
我们还可以使用 Composition API 设置观察者。

442
00:19:40,490 --> 00:19:44,130
您可以为此从 Vue 导入手表

443
00:19:44,130 --> 00:19:46,350
并简单地调用手表

444
00:19:47,740 --> 00:19:49,403
在您的设置方法中。

445
00:19:50,260 --> 00:19:53,940
现在， watch 有两个参数。

446
00:19:53,940 --> 00:19:58,240
第一个参数是观察者的依赖。

447
00:19:58,240 --> 00:20:00,190
第二个参数是函数

448
00:20:00,190 --> 00:20:04,240
当依赖关系改变时应该执行。

449
00:20:04,240 --> 00:20:05,595
所以在这种情况下，

450
00:20:05,595 --> 00:20:08,940
我们在观察者中有这个逻辑。

451
00:20:08,940 --> 00:20:13,343
如果检查我想在哪里记录 invalidInput 输出。

452
00:20:14,850 --> 00:20:15,683
像这样。

453
00:20:16,830 --> 00:20:18,100
这应该被锁定

454
00:20:18,100 --> 00:20:20,700
每当 invalidInput 改变。

455
00:20:20,700 --> 00:20:23,530
所以 invalidInput 是我们的依赖。

456
00:20:23,530 --> 00:20:26,710
不是 .value 而是整个 ref。

457
00:20:26,710 --> 00:20:29,080
对于观察者，如果您提供参考，

458
00:20:29,080 --> 00:20:33,240
Vue 会自动钻取 value 属性。

459
00:20:33,240 --> 00:20:35,410
每当这个值发生变化时，

460
00:20:35,410 --> 00:20:37,670
现在将执行此功能。

461
00:20:37,670 --> 00:20:40,720
在这里，我们还可以访问最新的值。

462
00:20:40,720 --> 00:20:42,800
我们还可以访问 oldValue

463
00:20:42,800 --> 00:20:45,860
如果我们想要它作为第二个参数。

464
00:20:45,860 --> 00:20:47,420
现在我们可以运行这段代码

465
00:20:47,420 --> 00:20:48,690
我们应该打印这个

466
00:20:48,690 --> 00:20:52,053
每当这种情况发生变化并且为真时到控制台。

467
00:20:53,200 --> 00:20:54,033
就是这样。

468
00:20:54,033 --> 00:20:55,628
如果我们现在保存所有

469
00:20:55,628 --> 00:20:59,340
并在此处重新加载并打开控制台

470
00:20:59,340 --> 00:21:01,560
从观察者那里看到我们的日志，

471
00:21:01,560 --> 00:21:04,480
我可以添加学习 Vue，这很有效。

472
00:21:04,480 --> 00:21:06,370
但是如果我像这样点击添加目标，

473
00:21:06,370 --> 00:21:07,800
我在这里得到我的错误

474
00:21:07,800 --> 00:21:10,470
和这个观察者console.log

475
00:21:10,470 --> 00:21:13,700
每次我按这个没有值。

476
00:21:13,700 --> 00:21:14,533
然后，当然，

477
00:21:14,533 --> 00:21:16,840
我也可以再次输入有效值。

478
00:21:16,840 --> 00:21:21,220
所以现在我们也将其迁移到了 Composition API。

479
00:21:21,220 --> 00:21:24,540
现在，说到 App.vue 和GoalsList，

480
00:21:24,540 --> 00:21:26,540
我们不需要迁移到这里

481
00:21:26,540 --> 00:21:28,450
因为我们没有使用数据方法，

482
00:21:28,450 --> 00:21:30,340
计算或观察者在这里。

483
00:21:30,340 --> 00:21:33,700
当涉及到道具或组件时，

484
00:21:33,700 --> 00:21:37,830
组合 API 不涉及这些选项。

485
00:21:37,830 --> 00:21:39,530
如果您使用合成 API

486
00:21:39,530 --> 00:21:41,300
而不是 O选项 API，

487
00:21:41,300 --> 00:21:44,270
它实际上主要是关于数据、方法、

488
00:21:44,270 --> 00:21:45,830
计算和观察。

489
00:21:45,830 --> 00:21:48,457
生命周期钩子的使用方式也有所不同

490
00:21:48,457 --> 00:21:51,230
但这也不是我要在这里深入探讨的内容。

491
00:21:51,230 --> 00:21:53,150
你可以查看官方文档

492
00:21:53,150 --> 00:21:55,700
或者我的课程来了解这一切

493
00:21:55,700 --> 00:21:56,860
但有了这个视频，

494
00:21:56,860 --> 00:21:58,880
希望你有一个很好的介绍

495
00:21:58,880 --> 00:22:00,829
到组合 API。

496
00:22:00,829 --> 00:22:04,310
现在回到视频的开头

497
00:22:04,310 --> 00:22:07,170
组合 API 可以帮助我们

498
00:22:07,170 --> 00:22:10,440
在更大的项目和更大的组件中，

499
00:22:10,440 --> 00:22:12,593
这是从头开始的那个例子

500
00:22:12,593 --> 00:22:14,670
你在我的课程中发现了什么。

501
00:22:14,670 --> 00:22:17,690
我们有 ProjectsList 和 UserList

502
00:22:17,690 --> 00:22:20,860
我在 Options API 中提到过，

503
00:22:20,860 --> 00:22:24,270
不同种类的逻辑分散了

504
00:22:24,270 --> 00:22:28,510
重用逻辑既困难又麻烦。

505
00:22:28,510 --> 00:22:31,693
现在，我将它迁移到了 Composition API

506
00:22:31,693 --> 00:22:34,310
现在的优势可能是

507
00:22:34,310 --> 00:22:38,450
我们知道所有的搜索逻辑都在一个地方。

508
00:22:38,450 --> 00:22:41,430
实际上在这里是一个自定义的钩子，

509
00:22:41,430 --> 00:22:44,910
在我创建的自定义合成函数中，

510
00:22:44,910 --> 00:22:48,000
现在包含搜索数据，

511
00:22:48,000 --> 00:22:51,450
搜索计算属性，搜索观察者，

512
00:22:51,450 --> 00:22:53,200
搜索功能

513
00:22:53,200 --> 00:22:55,730
并将所有这些都暴露在这个地方

514
00:22:55,730 --> 00:22:59,110
这个自定义钩子在哪里使用这个自定义函数。

515
00:22:59,110 --> 00:23:00,659
例如，用户列表

516
00:23:00,659 --> 00:23:04,470
我可以在这里简单地调用我的自定义函数

517
00:23:04,470 --> 00:23:07,140
访问所有这些数据等等，

518
00:23:07,140 --> 00:23:09,400
在该函数内部进行管理。

519
00:23:09,400 --> 00:23:12,439
而且我仍然可以在这个设置方法中公开它

520
00:23:12,439 --> 00:23:14,850
到这个组件的模板。

521
00:23:14,850 --> 00:23:18,460
我可以使用相同的可重复使用的钩子

522
00:23:18,460 --> 00:23:21,770
或可组合的自定义组合功能，

523
00:23:21,770 --> 00:23:23,410
随便你怎么称呼

524
00:23:23,410 --> 00:23:26,330
例如，在 ProjectsList 中。

525
00:23:26,330 --> 00:23:30,110
这就是 Composition API 的好处。

526
00:23:30,110 --> 00:23:33,060
它允许你编写这样优雅的代码，

527
00:23:33,060 --> 00:23:35,910
重用逻辑并拥有所有逻辑

528
00:23:35,910 --> 00:23:39,600
以及属于一个地方的所有数据。

529
00:23:39,600 --> 00:23:43,293
它是可选的，但在更大的项目中，它可能很有用。