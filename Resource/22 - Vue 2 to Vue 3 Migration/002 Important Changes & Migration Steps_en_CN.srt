1
00:00:01,320 --> 00:00:03,160
我准备了一个小项目。

2
00:00:03,160 --> 00:00:05,340
您会找到指向 GitHub 存储库的链接

3
00:00:05,340 --> 00:00:08,380
所有这些示例都附在视频中。

4
00:00:08,380 --> 00:00:11,700
在这里，我们可以了解所有这些重要的变化。

5
00:00:11,700 --> 00:00:13,840
让我们从基本应用程序开始。

6
00:00:13,840 --> 00:00:15,940
使用基本应用程序 v2。

7
00:00:15,940 --> 00:00:20,890
在这里，我正在使用 Vue 版本 2 创建一个基本的 Vue 应用程序。

8
00:00:20,890 --> 00:00:22,170
创建我的 Vue 实例，

9
00:00:22,170 --> 00:00:23,060
有一些数据，

10
00:00:23,060 --> 00:00:25,280
有一种方法来更改该数据

11
00:00:25,280 --> 00:00:27,510
并拥有一个带有模板的组件，

12
00:00:27,510 --> 00:00:31,730
它基本上有一个按钮，我在其中发出自定义事件。

13
00:00:31,730 --> 00:00:33,340
这就是我在这里所做的。

14
00:00:33,340 --> 00:00:35,510
如果我们查看这个应用程序

15
00:00:35,510 --> 00:00:39,403
只需在浏览器中打开这个 HTML 文件，

16
00:00:40,340 --> 00:00:41,610
这就是我们所看到的

17
00:00:41,610 --> 00:00:43,880
当我们单击按钮时，它就起作用了。

18
00:00:43,880 --> 00:00:47,180
现在，这是 Vue 2，这可能就是你所知道的。

19
00:00:47,180 --> 00:00:50,940
使用 Vue 3，这里发生了一些变化。

20
00:00:50,940 --> 00:00:54,670
准确地说，我现在将介绍前三个更改，

21
00:00:54,670 --> 00:00:55,860
此处概述

22
00:00:55,860 --> 00:01:00,240
因为所有这些变化都会影响我们在这里看到的内容。

23
00:01:00,240 --> 00:01:02,363
所以让我们去basic-app-v3。

24
00:01:03,710 --> 00:01:05,780
在那里，我们首先必须确保

25
00:01:05,780 --> 00:01:09,740
我们导入最新版本的 Vue。

26
00:01:09,740 --> 00:01:12,900
为此，我目前必须在此处添加@next

27
00:01:12,900 --> 00:01:15,050
因为在我录制这个的时候，

28
00:01:15,050 --> 00:01:17,380
Vue 3 处于发布候选阶段

29
00:01:17,380 --> 00:01:19,900
并没有真正最终发布。

30
00:01:19,900 --> 00:01:20,950
未来，当然，

31
00:01:20,950 --> 00:01:22,580
此默认 CDN 链接

32
00:01:22,580 --> 00:01:25,600
将自动拉入 Vue 3。

33
00:01:25,600 --> 00:01:27,880
我将更新这个存储库

34
00:01:27,880 --> 00:01:31,450
确保所有 CDN 链接始终正确。

35
00:01:31,450 --> 00:01:34,470
所以在这里我现在通过添加这个来导入 Vue 3。

36
00:01:34,470 --> 00:01:37,260
加上这里，

37
00:01:37,260 --> 00:01:41,700
如果我现在打开这个 index.html 文件，我们会看到

38
00:01:41,700 --> 00:01:44,330
在浏览器中，这失败了。

39
00:01:44,330 --> 00:01:47,330
现在我们显然看不到这条消息了

40
00:01:47,330 --> 00:01:50,720
因为这里的基本语法改变了一点

41
00:01:50,720 --> 00:01:52,330
使用 Vue 3。

42
00:01:52,330 --> 00:01:54,840
在 app.js 的 v3 文件夹中，

43
00:01:54,840 --> 00:01:56,520
我得到了 Vue 2 语法

44
00:01:56,520 --> 00:01:58,620
但这将不再起作用。

45
00:01:58,620 --> 00:02:00,700
相反，要创建一个 Vue 应用程序，

46
00:02:00,700 --> 00:02:02,770
我们现在不再实例化

47
00:02:02,770 --> 00:02:05,180
这里的 Vue 构造函数。

48
00:02:05,180 --> 00:02:08,389
而在 Vue 上，我们计算 createApp。

49
00:02:08,389 --> 00:02:09,280
这是一种新方法

50
00:02:09,280 --> 00:02:12,030
这是 Vue 3 添加的。

51
00:02:12,030 --> 00:02:13,730
现在，对于这个 createApp 方法，

52
00:02:13,730 --> 00:02:16,810
我们现在需要传递我们的应用配置对象

53
00:02:16,810 --> 00:02:20,080
在这里我们几乎可以复制我们使用的对象

54
00:02:20,080 --> 00:02:22,140
在 Vue 2 中也是如此。

55
00:02:22,140 --> 00:02:25,070
但是您还应该注意另外两个变化。

56
00:02:25,070 --> 00:02:27,880
el 属性不再起作用。

57
00:02:27,880 --> 00:02:31,950
相反，我们现在将我们的应用程序挂载到 DOM

58
00:02:31,950 --> 00:02:36,120
通过在创建的应用程序对象上调用 mount。

59
00:02:36,120 --> 00:02:38,580
所以关于createApp的结果。

60
00:02:38,580 --> 00:02:41,740
为了挂载，我们通过那个 CSS 选择器，

61
00:02:41,740 --> 00:02:43,960
我们以前在 el.

62
00:02:43,960 --> 00:02:46,630
我们现在可以摆脱新的 Vue。

63
00:02:46,630 --> 00:02:48,950
这是第一个变化。

64
00:02:48,950 --> 00:02:50,740
另外，好吧，我提到了

65
00:02:50,740 --> 00:02:53,040
数据选项也改变了

66
00:02:53,040 --> 00:02:55,253
现在总是需要一种方法。

67
00:02:56,120 --> 00:02:58,670
现在，在 Vue 2 中，两者都被允许。

68
00:02:58,670 --> 00:03:00,410
你可以只有一个对象

69
00:03:00,410 --> 00:03:01,750
你可以有一个方法，

70
00:03:01,750 --> 00:03:04,980
尽管在 Vue 2 中也推荐了一种方法，

71
00:03:04,980 --> 00:03:08,330
特别是如果你和 mu 一起工作ltiple组件等，

72
00:03:08,330 --> 00:03:09,723
那么你需要一个方法。

73
00:03:10,670 --> 00:03:12,490
好吧，现在，有了 Vue 3，

74
00:03:12,490 --> 00:03:14,820
数据总是需要成为一种方法。

75
00:03:14,820 --> 00:03:17,970
所以我们只是应该把数据变成一个方法，

76
00:03:17,970 --> 00:03:21,830
然后返回我们的数据对象。

77
00:03:21,830 --> 00:03:24,090
所以这是我们需要在这里做的唯一改变。

78
00:03:24,090 --> 00:03:26,420
除此之外，它像以前一样工作。

79
00:03:26,420 --> 00:03:28,900
例如，在手表中计算的方法，

80
00:03:28,900 --> 00:03:32,060
这些东西都像你所学的那样有效。

81
00:03:32,060 --> 00:03:33,743
那里没有什么需要改变的。

82
00:03:34,810 --> 00:03:35,957
有了这个，我们已经涵盖了

83
00:03:35,957 --> 00:03:38,500
这里的前两个变化。

84
00:03:38,500 --> 00:03:39,950
现在，第三个变化，

85
00:03:39,950 --> 00:03:41,110
我们应该知道的，

86
00:03:41,110 --> 00:03:43,680
也会影响我准备的这个演示应用程序。

87
00:03:43,680 --> 00:03:46,300
组件，指令，他们的派对模块，

88
00:03:46,300 --> 00:03:49,340
所有这些东西现在都在应用程序上注册了

89
00:03:49,340 --> 00:03:51,688
而不是全局的 Vue 对象。

90
00:03:51,688 --> 00:03:56,160
所以调用 Vue.component，这不再是它的工作方式了。

91
00:03:56,160 --> 00:03:58,170
而是 createApp 创建一个应用程序

92
00:03:58,170 --> 00:04:00,450
我们可以将它存储在一个常量中

93
00:04:00,450 --> 00:04:03,393
然后在这个应用程序上，我们可以调用 mount，例如。

94
00:04:04,480 --> 00:04:06,500
现在，它也在这个应用程序上

95
00:04:06,500 --> 00:04:09,840
我们必须调用组件，指令

96
00:04:09,840 --> 00:04:12,750
并用于使用第三方模块，

97
00:04:12,750 --> 00:04:14,250
我们稍后会看到

98
00:04:14,250 --> 00:04:16,260
使用路由器和 Vuex。

99
00:04:16,260 --> 00:04:19,019
所以在这里，我们可以调用组件

100
00:04:19,019 --> 00:04:21,810
然后传递这个组件代码，

101
00:04:21,810 --> 00:04:24,790
我们之前也传给了组件方法，

102
00:04:24,790 --> 00:04:26,660
所以这两个论点，

103
00:04:26,660 --> 00:04:28,470
到这里的这个组件方法。

104
00:04:28,470 --> 00:04:30,610
所以它像以前一样工作

105
00:04:30,610 --> 00:04:34,934
但现在它在应用程序而不是全局 Vue 对象上。

106
00:04:34,934 --> 00:04:38,173
因此，我们也在这里摆脱了这条线。

107
00:04:39,380 --> 00:04:43,104
但是，如果我保存所有这些，

108
00:04:43,104 --> 00:04:46,100
我重新加载，我们收到了我们的信息，

109
00:04:46,100 --> 00:04:48,660
我们得到了按钮，它可以工作。

110
00:04:48,660 --> 00:04:50,500
现在，一个小小的改变，

111
00:04:50,500 --> 00:04:52,520
我没有在幻灯片上强调，

112
00:04:52,520 --> 00:04:53,890
如果你有一个组件

113
00:04:53,890 --> 00:04:57,140
发出自定义方法，

114
00:04:57,140 --> 00:04:58,810
就像这里，这个组件。

115
00:04:58,810 --> 00:05:00,230
它发出更新，

116
00:05:00,230 --> 00:05:02,740
还有一个新选项可以通过

117
00:05:02,740 --> 00:05:05,670
到这里的这个 Vue 实例配置对象

118
00:05:05,670 --> 00:05:08,020
这就是发射选项。

119
00:05:08,020 --> 00:05:11,480
它基本上是你可以说的道具的对应物。

120
00:05:11,480 --> 00:05:13,690
使用道具，您可以指定所有道具

121
00:05:13,690 --> 00:05:15,030
一个组件接收，

122
00:05:15,030 --> 00:05:17,950
Vue 2 已经是这样了。

123
00:05:17,950 --> 00:05:19,880
有了发射，你现在可以

124
00:05:19,880 --> 00:05:24,430
并且还应该指定组件发出的自定义事件。

125
00:05:24,430 --> 00:05:26,170
技术上不需要

126
00:05:26,170 --> 00:05:28,870
但它使您的组件更容易理解。

127
00:05:28,870 --> 00:05:31,630
现在我可以立即看到哪个自定义事件

128
00:05:31,630 --> 00:05:34,380
将在该组件的某处发出。

129
00:05:34,380 --> 00:05:37,443
这是一个很小的变化，但也需要注意。

130
00:05:38,387 --> 00:05:39,780
有了这个，

131
00:05:39,780 --> 00:05:43,700
我们介绍了您应该知道的前三个更改。

132
00:05:43,700 --> 00:05:46,840
现在，第四个变化与过渡有关。

133
00:05:46,840 --> 00:05:49,233
有一个 CSS 类名发生了变化。

134
00:05:50,160 --> 00:05:52,610
我也为此准备了一个例子。

135
00:05:52,610 --> 00:05:55,150
过渡文件夹在这里。

136
00:05:55,150 --> 00:05:58,030
让我们从transitions-v2 开始。

137
00:05:58,030 --> 00:06:00,050
如果我们在浏览器中打开它，

138
00:06:00,050 --> 00:06:01,860
我们得到这个按钮，然后，

139
00:06:01,860 --> 00:06:03,430
我们可以在这里切换框，

140
00:06:03,430 --> 00:06:05,800
它附有一个过渡。

141
00:06:05,800 --> 00:06:09,760
本次过渡工作s 只是因为我在包装盒子

142
00:06:09,760 --> 00:06:11,720
带有内置的过渡组件

143
00:06:11,720 --> 00:06:15,350
然后在那里添加我的过渡 CSS 类

144
00:06:15,350 --> 00:06:17,260
在 CSS 文件中。

145
00:06:17,260 --> 00:06:19,470
这一切都适用于 Vue 2。

146
00:06:19,470 --> 00:06:22,870
当然，因为这里是 Vue 2 示例。

147
00:06:22,870 --> 00:06:25,025
现在，有了 Vue 3，这种情况发生了变化。

148
00:06:25,025 --> 00:06:29,130
如果我确保在这里导入 Vue 3

149
00:06:29,130​​ --> 00:06:32,210
在 v3 文件夹中，这个例子，

150
00:06:32,210 --> 00:06:36,190
如果我加载 v3 示例中断。

151
00:06:36,190 --> 00:06:37,490
现在，它坏了，因为我们需要

152
00:06:37,490 --> 00:06:39,190
以不同的方式创建应用程序。

153
00:06:39,190 --> 00:06:40,743
因此，让我们快速做到这一点。

154
00:06:41,610 --> 00:06:42,443
Vue.createApp。

155
00:06:43,670 --> 00:06:47,310
而不是 el，在这里调用 mount。

156
00:06:49,105 --> 00:06:51,260
然后还要确保数据是一种方法。

157
00:06:51,260 --> 00:06:52,410
这就是我们刚刚学到的。

158
00:06:52,410 --> 00:06:54,913
我只是想再次在这里练习。

159
00:06:55,790 --> 00:06:58,100
但这当然是一个简单的改变。

160
00:06:58,100 --> 00:07:01,230
这样，我们就可以正确地创建应用程序。

161
00:07:01,230 --> 00:07:04,260
因此，如果我们重新加载，现在就可以了。

162
00:07:04,260 --> 00:07:07,000
但是您会注意到删除动画有效

163
00:07:07,000 --> 00:07:09,600
但进入动画不起作用。

164
00:07:09,600 --> 00:07:11,561
因为一个 CSS 类名改变了，

165
00:07:11,561 --> 00:07:16,561
-enter 类现在是 -enter-from。

166
00:07:16,890 --> 00:07:19,600
基本上，要与其他类名一致

167
00:07:19,600 --> 00:07:22,350
因为我们有 -enter-active

168
00:07:22,350 --> 00:07:24,760
和 -enter-to 已经。

169
00:07:24,760 --> 00:07:27,180
现在我们还有 -enter-from

170
00:07:27,180 --> 00:07:30,880
对于开始类，而不是仅仅-enter。

171
00:07:30,880 --> 00:07:32,610
离开也是一样。

172
00:07:32,610 --> 00:07:35,290
这里应该是-leave-from

173
00:07:35,290 --> 00:07:37,950
而不仅仅是-leave。

174
00:07:37,950 --> 00:07:41,110
所以一个简单的类名重命名就足够了

175
00:07:41,110 --> 00:07:43,620
一旦我们这样做，保存一切。

176
00:07:43,620 --> 00:07:47,163
现在我们在 Vue 3 中也恢复了动画。

177
00:07:48,010 --> 00:07:50,010
这就是过渡。

178
00:07:50,010 --> 00:07:53,910
当我们使用 Vue Router 时，我们也得到了改变。

179
00:07:53,910 --> 00:07:56,320
那么让我们看看那里发生了什么变化。

180
00:07:56,320 --> 00:07:58,440
为此，我还准备了两个项目。

181
00:07:58,440 --> 00:08:01,480
这是 Vue 2 版本，这是 Vue 3 版本。

182
00:08:01,480 --> 00:08:05,630
在这里，我使用 Vue CLI 创建项目，

183
00:08:05,630 --> 00:08:09,180
所以它不再只是一个 index.html 文件。

184
00:08:09,180 --> 00:08:12,540
因此，我将在 router-v2 中导航。

185
00:08:12,540 --> 00:08:14,370
运行 npm 安装

186
00:08:14,370 --> 00:08:16,200
然后 npm run serve

187
00:08:16,200 --> 00:08:18,500
这将安装所有依赖项

188
00:08:18,500 --> 00:08:20,680
然后还启动开发服务器

189
00:08:20,680 --> 00:08:23,913
在此处查看此应用程序的 Vue 2 版本。

190
00:08:25,180 --> 00:08:26,430
加载应用程序后，

191
00:08:26,430 --> 00:08:28,120
这是您应该在屏幕上看到的内容。

192
00:08:28,120 --> 00:08:29,080
你有两条路线

193
00:08:29,080 --> 00:08:30,550
你可以在它们之间切换

194
00:08:30,550 --> 00:08:32,123
我们有一个很好的动画。

195
00:08:34,240 --> 00:08:35,909
现在，这是如何建造的？

196
00:08:35,909 --> 00:08:39,919
我只是在 main.js 中设置了我的路由器

197
00:08:39,919 --> 00:08:41,429
通过使用 VueRouter，

198
00:08:41,429 --> 00:08:43,150
这是从 vue-router 导入的

199
00:08:43,150 --> 00:08:46,670
并将此处的路由器添加到全局 Vue 实例中。

200
00:08:46,670 --> 00:08:48,070
注册所有路线，

201
00:08:48,070 --> 00:08:49,580
将模式设置为历史

202
00:08:49,580 --> 00:08:52,070
我们有动画，因为路由器视图

203
00:08:52,070 --> 00:08:54,540
被这个过渡包裹着。

204
00:08:54,540 --> 00:08:56,330
这就是它在 Vue 2 中的工作方式。

205
00:08:56,330 --> 00:08:58,587
这也是你在我的课程中学到的。

206
00:08:58,587 --> 00:09:03,450
如果我们去 v3 版本

207
00:09:03,450 --> 00:09:05,490
并在那里安装所有东西

208
00:09:05,490 --> 00:09:07,610
并启动开发服务器，

209
00:09:07,610 --> 00:09:09,760
我们会看到不同。

210
00:09:09,760 --> 00:09:11,280
准确地说，最初，

211
00:09:11,280 --> 00:09:13,320
我们什么也看不到

212
00:09:13,320 --> 00:09:15,453
因为e 我还没有在那里添加路由。

213
00:09:16,380 --> 00:09:19,150
在 router-v3 文件夹的 main.js 中，

214
00:09:19,150 --> 00:09:22,120
我们仍然有充分的理由添加路由器

215
00:09:22,120 --> 00:09:25,340
因为我们现在添加的内容与以前不同。

216
00:09:25,340 --> 00:09:29,420
而不是从 vue-router 导入 VueRouter，

217
00:09:29,420 --> 00:09:31,910
我已经在这里安装了 vue-router 包。

218
00:09:31,910 --> 00:09:33,320
这就是它可用的原因。

219
00:09:33,320 --> 00:09:35,240
但不是像这样导入它，

220
00:09:35,240 --> 00:09:38,060
你从 vue-router 导入 createRouter。

221
00:09:38,060 --> 00:09:39,850
所以你可能会在这里看到一个主题。

222
00:09:39,850 --> 00:09:41,463
我们有来自 vue 的 createApp 来创建我们的应用程序。

223
00:09:42,525 --> 00:09:44,014
我们从路由器创建路由器

224
00:09:44,014 --> 00:09:45,295
创建路由器。

225
00:09:45,295 --> 00:09:49,150
这是在 Vue 3 中创建事物的新方法。

226
00:09:49,150 --> 00:09:50,508
现在，一旦这个被导入，

227
00:09:50,508 --> 00:09:55,508
我们可以通过调用 createRouter 创建我们的路由器。

228
00:09:55,750 --> 00:09:59,470
然后我们在我们的 Vue 应用程序上使用这个路由器。

229
00:09:59,470 --> 00:10:01,910
所以我们可以将应用程序存储在一个常量中

230
00:10:01,910 --> 00:10:04,260
然后在应用程序上调用使用

231
00:10:04,260 --> 00:10:07,320
而不是在全局对象上。

232
00:10:07,320 --> 00:10:09,770
我之前提到过，我们不再那样做。

233
00:10:09,770 --> 00:10:12,920
相反，我们调用 app.use 并使用路由器。

234
00:10:12,920 --> 00:10:15,130
这就是我们添加路由器的方式。

235
00:10:15,130 --> 00:10:17,360
但是现在我们还需要配置路由器。

236
00:10:17,360 --> 00:10:21,350
为此，我们仍然将配置对象传递给 createRouter

237
00:10:21,350 --> 00:10:24,700
现在我们一般可以抓取配置了

238
00:10:24,700 --> 00:10:26,100
来自 Vue 2。

239
00:10:26,100 --> 00:10:28,530
所以在这里，我会抓住物体，

240
00:10:28,530 --> 00:10:31,433
之前传递给 VueRouter

241
00:10:32,279 --> 00:10:37,279
并将其粘贴到我的 createRouter 函数调用中。

242
00:10:39,270 --> 00:10:41,270
路线配置有效

243
00:10:41,270 --> 00:10:42,470
就像你学到的一样。

244
00:10:42,470 --> 00:10:44,010
这就是好消息。

245
00:10:44,010 --> 00:10:46,250
但是，该模式的设置不同。

246
00:10:46,250 --> 00:10:48,500
而不是将模式设置为历史，

247
00:10:48,500 --> 00:10:51,620
你现在需要设置一个历史属性

248
00:10:51,620 --> 00:10:53,070
在这个配置对象中

249
00:10:53,070 --> 00:10:56,930
然后用另一个函数创建一个历史。

250
00:10:56,930 --> 00:11:00,560
在这里你通常导入 createWebHistory

251
00:11:00,560 --> 00:11:02,500
然后在这里简单地执行。

252
00:11:02,500 --> 00:11:06,355
其结果作为历史价值提供。

253
00:11:06,355 --> 00:11:08,700
这是您设置默认路由器的方式

254
00:11:08,700 --> 00:11:11,870
使用 HTML5 历史模式进行路由。

255
00:11:11,870 --> 00:11:14,780
有了这个，我们只需要添加导入

256
00:11:14,780 --> 00:11:17,240
到 WelcomeScreen 和 UsersList。

257
00:11:17,240 --> 00:11:19,370
从 v2 示例中复制它

258
00:11:19,370 --> 00:11:23,620
像这样进入 v3 示例中的 main.js

259
00:11:23,620 --> 00:11:27,910
现在，如果您重新加载，我们的路线将再次运行。

260
00:11:27,910 --> 00:11:30,460
但是您会注意到缺少过渡。

261
00:11:30,460 --> 00:11:32,200
我们没有动画。

262
00:11:32,200 --> 00:11:35,410
我还有一个小补充或说明，

263
00:11:35,410 --> 00:11:36,908
我想先提出来。

264
00:11:36,908 --> 00:11:41,360
在 TheHeader 组件中，在 v3 项目中，

265
00:11:41,360 --> 00:11:44,070
路由器链接上有确切的道具。

266
00:11:44,070 --> 00:11:46,680
Vue 2 需要这个道具

267
00:11:46,680 --> 00:11:48,480
和 Vue 2 的路由器

268
00:11:48,480 --> 00:11:52,490
确保未将主页链接标记为活动

269
00:11:52,490 --> 00:11:54,050
当我们在用户

270
00:11:54,050 --> 00:11:57,360
因为用户也以斜杠开头。

271
00:11:57,360 --> 00:12:00,120
使用 Vue 3 和 Vue 3 的路由器，

272
00:12:00,120 --> 00:12:02,530
路由器内部工作方式不同

273
00:12:02,530 --> 00:12:04,060
你不再需要这个。

274
00:12:04,060 --> 00:12:07,380
它会自动检测到家庭未激活

275
00:12:07,380 --> 00:12:08,844
如果您在用户上。

276
00:12:08,844 --> 00:12:12,820
这只是一件小事，但也值得注意。

277
00:12:12,820 --> 00:12:14,250
更重要的是，

278
00:12:14,250 --> 00:12:17,262
正如我刚才提到的，过渡不再起作用。

279
00:12:17,262 --> 00:12:21,130
原因在于 Vue 3

280
00:12:21,130 --> 00:12:22,968
和 Vue 3 的路由器，

281
00:12:22,968 --> 00:12:27,440
您不再可以使用转换包装路由器视图。

282
00:12:27,440 --> 00:12:29,790
相反，它需要反过来。

283
00:12:29,790 --> 00:12:34,240
现在您需要将转换传递到路由器视图中，

284
00:12:34,240 --> 00:12:37,057
所以路由器视图应该包含转换。

285
00:12:37,057 --> 00:12:40,830
这与内部所做的更改有关

286
00:12:40,830 --> 00:12:43,240
在视图路由器包中。

287
00:12:43,240 --> 00:12:46,660
所以router-view到底内部有一个槽

288
00:12:46,660 --> 00:12:48,400
并且需要这种转变。

289
00:12:48,400 --> 00:12:50,930
问题只是过渡，当然，

290
00:12:50,930 --> 00:12:54,450
应该包装被交换的组件。

291
00:12:54,450 --> 00:12:57,490
为此，您可以使用 Vue 内置的另一个功能。

292
00:12:57,490 --> 00:12:59,930
这是动态组件功能。

293
00:12:59,930 --> 00:13:02,230
您可以使用内置的组件组件。

294
00:13:02,230 --> 00:13:05,150
这告诉 Vue 要渲染哪个组件。

295
00:13:05,150 --> 00:13:07,710
现在，路由器确定哪个组件

296
00:13:07,710 --> 00:13:08,750
应该渲染。

297
00:13:08,750 --> 00:13:12,400
最后你可以在这个插槽中访问

298
00:13:12,400 --> 00:13:15,170
通过使用称为作用域插槽的功能。

299
00:13:15,170 --> 00:13:17,660
这个特性已经存在于 Vue 2 中。

300
00:13:17,660 --> 00:13:19,690
在我最新的课程更新中，

301
00:13:19,690 --> 00:13:20,950
Vue 3 课程更新，

302
00:13:20,950 --> 00:13:23,480
我添加到我现有的 Vue 课程中，

303
00:13:23,480 --> 00:13:25,879
我也详细介绍了它。

304
00:13:25,879 --> 00:13:28,810
你只需要一个指令，即 v-slot 指令，

305
00:13:28,810 --> 00:13:30,850
您添加到路由器视图。

306
00:13:30,850 --> 00:13:33,410
然后你可以在那里获得特殊道具，

307
00:13:33,410 --> 00:13:36,260
路由器视图向您公开的内容。

308
00:13:36,260 --> 00:13:37,950
你现在可以在这里使用这些道具

309
00:13:37,950 --> 00:13:39,600
在路由器视图标签之间

310
00:13:41,000 --> 00:13:43,840
并在组件上绑定 is 道具，

311
00:13:43,840 --> 00:13:45,520
需要哪个组件，

312
00:13:45,520 --> 00:13:50,510
到 slotProps.Component，大写 C。

313
00:13:50,510 --> 00:13:54,100
这里的这个道具是路由器暴露给你的

314
00:13:54,100 --> 00:13:56,980
它包含应该加载的组件

315
00:13:56,980 --> 00:13:59,150
为所选路线。

316
00:13:59,150 --> 00:14:01,430
这种语法看起来很奇怪

317
00:14:01,430 --> 00:14:04,180
但只有在您计划使用过渡时才需要它

318
00:14:04,180 --> 00:14:05,330
与路由器，

319
00:14:05,330 --> 00:14:07,390
否则你不需要它。

320
00:14:07,390 --> 00:14:09,883
然而，有了这个，如果我保存这个，

321
00:14:11,430 --> 00:14:14,240
现在过渡又回来了。

322
00:14:14,240 --> 00:14:16,040
好吧，至少差不多。

323
00:14:16,040 --> 00:14:18,740
我们还需要调整过渡名称。

324
00:14:18,740 --> 00:14:20,660
正如你在一秒钟前所学到的，

325
00:14:20,660 --> 00:14:25,140
现在是进入和离开。

326
00:14:25,140 --> 00:14:28,960
一旦我们这样做了，现在过渡就完全固定了

327
00:14:28,960 --> 00:14:33,490
现在我们有了很好的进出动画。

328
00:14:33,490 --> 00:14:35,097
您可能会注意到，如果您加载应用程序，

329
00:14:35,097 --> 00:14:38,020
你在这里也有一个初步的过渡

330
00:14:38,020 --> 00:14:39,300
这也是相关的

331
00:14:39,300 --> 00:14:41,860
Vue 路由器在内部是如何工作的。

332
00:14:41,860 --> 00:14:43,303
如果你想避免这种情况，

333
00:14:43,303 --> 00:14:46,280
您只需要在路由器上安装您的应用程序

334
00:14:46,280 --> 00:14:47,880
完全初始化

335
00:14:47,880 --> 00:14:49,840
你可以通过转到 main.js 来做到这一点

336
00:14:49,840 --> 00:14:52,220
并调用 router.isReady，

337
00:14:52,220 --> 00:14:53,370
它给你一个承诺，

338
00:14:53,370 --> 00:14:55,870
一旦路由器准备好，它就会解决。

339
00:14:55,870 --> 00:14:58,350
因此，如果您将应用程序安装在您传递的函数中

340
00:14:58,350 --> 00:14:59,690
对此然后阻止，

341
00:14:59,690 --> 00:15:02,150
然后您确保仅安装了该应用程序

342
00:15:02,150 --> 00:15:04,313
一旦路由器完全初始化。

343
00:15:06,350 --> 00:15:07,480
这将确保

344
00:15:07,480 --> 00:15:10,020
你没有得到这个初始过渡。

345
00:15:10,020 --> 00:15:12,640
因此，随着对 main.js 的更改，

346
00:15:12,640 --> 00:15:15,230
现在我们可以在没有初始转换的情况下加载

347
00:15:15,230 --> 00:15:18,200
我们仍然得到了路线变化的过渡。

348
00:15:18,200 --> 00:15:20,210
所以你可以ll，我们有一些变化

349
00:15:20,210 --> 00:15:22,930
到 Vue 路由器，而不是它的核心逻辑

350
00:15:22,930 --> 00:15:23,970
但是你是怎么设置的

351
00:15:23,970 --> 00:15:25,650
以及如何添加过渡

352
00:15:25,650 --> 00:15:28,430
现在我猜你已经知道这些变化了。

353
00:15:28,430 --> 00:15:29,280
伟大的。

354
00:15:29,280 --> 00:15:31,550
现在，我想在这里介绍的最后一个变化

355
00:15:31,550 --> 00:15:33,540
是对 Vuex 的更改。

356
00:15:33,540 --> 00:15:37,178
现在使用 createStore 创建了商店。

357
00:15:37,178 --> 00:15:40,550
我也有一个例子。

358
00:15:40,550 --> 00:15:44,050
您可以在 Vuex 文件夹中找到它

359
00:15:44,050 --> 00:15:46,680
如果我们在这里查看 Vue 2 版本

360
00:15:46,680 --> 00:15:49,470
使用 npm install 和 npm run serve，

361
00:15:49,470 --> 00:15:52,470
你会看到它就像你学习的那样工作。

362
00:15:52,470 --> 00:15:54,750
我们创建了我们的 Vuex 商店

363
00:15:54,750 --> 00:15:57,770
通过实例化新的 Vuex.Store

364
00:15:57,770 --> 00:15:59,850
并将我们的商店配置传递给它

365
00:15:59,850 --> 00:16:03,573
然后我们将商店添加到 Vue 应用程序中，就像这样。

366
00:16:05,060 --> 00:16:06,930
有了它，这就是我们得到的

367
00:16:06,930 --> 00:16:08,673
这里我们有一个基本的商店，

368
00:16:08,673 --> 00:16:11,323
在这里管理这个用户列表。

369
00:16:12,400 --> 00:16:15,180
现在，使用 Vue 3，这会有所不同。

370
00:16:15,180 --> 00:16:18,703
如果我深入研究这个的 v3 版本，

371
00:16:19,990 --> 00:16:21,570
开始这一切，

372
00:16:21,570 --> 00:16:24,510
我们首先，必须再次添加 Vuex，

373
00:16:24,510 --> 00:16:26,620
就像我们之前必须添加路由器一样

374
00:16:26,620 --> 00:16:30,520
因为现在我们添加了您可能猜到的不同方式。

375
00:16:30,520 --> 00:16:35,520
现在我们从 vuex 导入 createStore，

376
00:16:35,730 --> 00:16:40,270
再次符合我们在 Vue 3 中创建事物的方式。

377
00:16:40,270 --> 00:16:43,846
然后我们通过调用 createStore 创建我们的商店

378
00:16:43,846 --> 00:16:46,440
现在好消息是创建商店，

379
00:16:46,440 --> 00:16:50,250
我们传递完全相同的存储配置对象

380
00:16:50,250 --> 00:16:51,750
就像我们对 Vue 2 所做的那样

381
00:16:51,750 --> 00:16:53,820
和适用于 Vue 2 的 Vuex。

382
00:16:53,820 --> 00:16:56,049
所以我们可以在这里抓取这个对象，

383
00:16:56,049 --> 00:17:00,760
它保存状态、突变、动作和吸气剂

384
00:17:00,760 --> 00:17:03,713
我们在这里为 Vue 3 使用相同的对象。

385
00:17:06,000 --> 00:17:07,270
这很重要。

386
00:17:07,270 --> 00:17:09,140
你如何使用 Vuex

387
00:17:09,140 --> 00:17:10,930
以及它具有哪些功能，

388
00:17:10,930 --> 00:17:13,180
这一切都没有改变。

389
00:17:13,180 --> 00:17:16,920
你仍然有动作、吸气剂、突变、状态。

390
00:17:16,920 --> 00:17:18,700
您可以使用模块。

391
00:17:18,700 --> 00:17:20,200
那是一样的。

392
00:17:20,200 --> 00:17:21,997
但是现在我们像这样创建商店。

393
00:17:21,997 --> 00:17:24,380
然后我们将它添加到我们的应用程序中

394
00:17:24,380 --> 00:17:27,410
你可能也已经猜到了，

395
00:17:27,410 --> 00:17:29,300
通过使用它。

396
00:17:29,300 --> 00:17:33,070
所以在我们的应用程序上，我们只是使用商店。

397
00:17:33,070 --> 00:17:34,960
如果我们这里也有路由器，

398
00:17:34,960 --> 00:17:37,760
我们也可以简单地使用路由器。

399
00:17:37,760 --> 00:17:41,280
我们这里没有它，但这是您使用它的方式。

400
00:17:41,280 --> 00:17:44,680
有了这个，如果你重新加载 Vue 3 版本，

401
00:17:44,680 --> 00:17:48,823
这也可以在没有任何其他更改的情况下工作。