1
00:00:02,210 --> 00:00:03,930
Components are a great,

2
00:00:03,930 --> 00:00:07,450
if you have certain pieces of HTML.

3
00:00:07,450 --> 00:00:10,260
Certain HTML blocks like here,

4
00:00:10,260 --> 00:00:13,840
which you reuse in different parts of your page,

5
00:00:13,840 --> 00:00:17,340
like here, where we create multiple list items.

6
00:00:17,340 --> 00:00:20,250
Where you then have a certain functionality

7
00:00:20,250 --> 00:00:23,470
that should be enclosed in that HTML block.

8
00:00:23,470 --> 00:00:27,250
And that should be specific to this HTML block.

9
00:00:27,250 --> 00:00:28,720
Components can also be great

10
00:00:28,720 --> 00:00:30,720
to splitting your big application

11
00:00:30,720 --> 00:00:32,810
into multiple smaller chunks,

12
00:00:32,810 --> 00:00:35,900
but that's something we'll explore later automatically

13
00:00:35,900 --> 00:00:39,030
once we work more and more with components.

14
00:00:39,030 --> 00:00:42,540
So, since components seem to be very helpful,

15
00:00:42,540 --> 00:00:44,550
how can we create such a component?

16
00:00:44,550 --> 00:00:46,200
How does it work?

17
00:00:46,200 --> 00:00:50,510
A component is the official feature Vue.js knows,

18
00:00:50,510 --> 00:00:53,590
and we can create one on an app.

19
00:00:53,590 --> 00:00:57,150
So on an app we create it with create app,

20
00:00:57,150 --> 00:00:59,840
by using that app which in my case here

21
00:00:59,840 --> 00:01:02,400
is stored in that app constant

22
00:01:02,400 --> 00:01:05,750
and calling the component method on it.

23
00:01:05,750 --> 00:01:10,503
This tells Vue that we want to create a new component.

24
00:01:11,350 --> 00:01:14,870
Now this component method needs two things.

25
00:01:14,870 --> 00:01:17,880
The first thing is an identifier

26
00:01:17,880 --> 00:01:20,050
because a component and that's important,

27
00:01:20,050 --> 00:01:21,420
you have to memorize this.

28
00:01:21,420 --> 00:01:26,420
A component is basically like a custom HTML element.

29
00:01:26,430 --> 00:01:30,420
So here you define your own HTML tag

30
00:01:31,310 --> 00:01:32,650
and that could for example,

31
00:01:32,650 --> 00:01:36,480
be user dash contact

32
00:01:37,430 --> 00:01:40,590
or friend dash contact, something like this.

33
00:01:40,590 --> 00:01:45,340
You should always use an identifier that contains a dash.

34
00:01:45,340 --> 00:01:47,890
So you should always have component names,

35
00:01:47,890 --> 00:01:51,510
custom HTML tags therefor which contained a dash,

36
00:01:51,510 --> 00:01:54,260
so which are made up of two words.

37
00:01:54,260 --> 00:01:55,880
The reason for that is simple,

38
00:01:55,880 --> 00:01:58,690
this avoids that you potentially clash

39
00:01:58,690 --> 00:02:02,170
with official built in HTML elements.

40
00:02:02,170 --> 00:02:05,560
For example, if it would name my component h2,

41
00:02:05,560 --> 00:02:08,780
well, there already is h2 element,

42
00:02:08,780 --> 00:02:11,110
and that would therefore clash.

43
00:02:11,110 --> 00:02:13,830
Therefore, a simple rule is that you should use

44
00:02:13,830 --> 00:02:18,830
multi word component names, so custom HTML tags,

45
00:02:19,410 --> 00:02:22,500
because all built in HTML elements

46
00:02:22,500 --> 00:02:24,663
are a single word elements.

47
00:02:25,560 --> 00:02:29,290
So that's now my own HTML element name

48
00:02:29,290 --> 00:02:32,250
which we will later be able to use.

49
00:02:32,250 --> 00:02:36,190
This is the identifier of our components so to say.

50
00:02:36,190 --> 00:02:40,050
The second argument you pass to this component method,

51
00:02:40,050 --> 00:02:45,050
is a conflict object just as you pass it to create app

52
00:02:45,270 --> 00:02:47,860
because, and that's another important

53
00:02:47,860 --> 00:02:50,190
piece of information to keep in mind.

54
00:02:50,190 --> 00:02:54,320
A Vue component is essentially just another Vue app,

55
00:02:54,320 --> 00:02:57,483
just an app that belongs to another app.

56
00:02:58,420 --> 00:03:02,710
So this which we're creating here is a new Vue app,

57
00:03:02,710 --> 00:03:04,770
but, and that's the important thing,

58
00:03:04,770 --> 00:03:08,840
an app which will be connected to our main app.

59
00:03:08,840 --> 00:03:12,840
So components are like mini apps you could say.

60
00:03:12,840 --> 00:03:14,540
So therefore they can also have data,

61
00:03:14,540 --> 00:03:17,440
they can have methods and therefore a here,

62
00:03:17,440 --> 00:03:20,960
our component can have its own data,

63
00:03:20,960 --> 00:03:25,960
where we, for example, have a detailsAreVisible property

64
00:03:27,880 --> 00:03:29,453
which initially is false.

65
00:03:30,550 --> 00:03:33,060
We can also add methods to our component

66
00:03:33,060 --> 00:03:36,250
and add our toggle details method

67
00:03:36,250 --> 00:03:39,303
here to the methods of my own component.

68
00:03:40,520 --> 00:03:44,200
So that we then toggle this component specific data

69
00:03:44,200 --> 00:03:46,603
with this component specific method.

70
00:03:47,700 --> 00:03:50,740
And we can remove methods from the main app now,

71
00:03:50,740 --> 00:03:53,060
and also get rid of details are visible there.

72
00:03:53,060 --> 00:03:54,700
We could also keep it here,

73
00:03:54,700 --> 00:03:57,400
we wouldn't have a clash because this component

74
00:03:57,400 --> 00:03:59,470
is essentially encapsulated.

75
00:03:59,470 --> 00:04:02,860
It does not communicate with the parent app

76
00:04:02,860 --> 00:04:04,700
so with the app it belongs to,

77
00:04:04,700 --> 00:04:06,700
but we can still remove this property

78
00:04:06,700 --> 00:04:09,933
because we don't need it in the main app anymore.

79
00:04:11,770 --> 00:04:15,240
So now we got our component, friend contact

80
00:04:15,240 --> 00:04:17,930
and how do we now use this component?

81
00:04:17,930 --> 00:04:19,333
And how does it work?

82
00:04:20,220 --> 00:04:23,550
Well, this component misses one important thing

83
00:04:23,550 --> 00:04:24,960
before we can use it.

84
00:04:24,960 --> 00:04:28,050
And that's a template since this is a new app,

85
00:04:28,050 --> 00:04:30,200
it needs its own template.

86
00:04:30,200 --> 00:04:34,180
Our main app has a template, this whole section,

87
00:04:34,180 --> 00:04:36,490
which we mounted the app to,

88
00:04:36,490 --> 00:04:38,637
but our component now is a mini app

89
00:04:38,637 --> 00:04:41,270
and it needs its own template.

90
00:04:41,270 --> 00:04:43,490
Now, here we don't mount this component,

91
00:04:43,490 --> 00:04:45,950
we don't call mount on it,

92
00:04:45,950 --> 00:04:49,023
so that's not how we will connect it to HTML.

93
00:04:49,860 --> 00:04:52,200
Instead here for the moment,

94
00:04:52,200 --> 00:04:54,910
we'll add this template option,

95
00:04:54,910 --> 00:04:57,410
which I also showed in the deep dive

96
00:04:57,410 --> 00:04:59,403
in the behind the scenes module.

97
00:05:00,320 --> 00:05:01,750
In case you skipped that,

98
00:05:01,750 --> 00:05:03,430
yes there is a template option

99
00:05:03,430 --> 00:05:07,660
which you can add to your view apps also to the main app

100
00:05:07,660 --> 00:05:10,310
to define the template of that app.

101
00:05:10,310 --> 00:05:13,670
So to define the HTML code of that app

102
00:05:13,670 --> 00:05:16,173
and you need to do that for this component.

103
00:05:17,710 --> 00:05:20,140
Now I will already say that later in the course

104
00:05:20,140 --> 00:05:21,570
in the next modules,

105
00:05:21,570 --> 00:05:24,320
we will learn about a much nicer way

106
00:05:24,320 --> 00:05:26,120
of defining those templates.

107
00:05:26,120 --> 00:05:30,030
But for the moment, I'll just create a multiline string here

108
00:05:30,030 --> 00:05:31,500
with backticks.

109
00:05:31,500 --> 00:05:35,020
So these are not single quotes, these are backticks,

110
00:05:35,020 --> 00:05:37,750
which is a different character on the keyboard.

111
00:05:37,750 --> 00:05:41,120
And I will now grab this list item here,

112
00:05:41,120 --> 00:05:46,120
so these entire code and cut it from my HTML file

113
00:05:47,000 --> 00:05:52,000
and instead added here in this backticked string.

114
00:05:52,060 --> 00:05:55,060
And I'm using backticks because they allow me to write

115
00:05:55,060 --> 00:05:56,970
a multiline string like this.

116
00:05:56,970 --> 00:05:59,750
But in the end, that's just a JavaScript string now.

117
00:05:59,750 --> 00:06:02,463
With all those view features in it though,

118
00:06:03,550 --> 00:06:08,160
now, I will remove that v4 code on the list item

119
00:06:08,160 --> 00:06:10,440
and to make sure the interpolations work

120
00:06:10,440 --> 00:06:15,440
for the moment I will add a friend property

121
00:06:15,490 --> 00:06:17,490
to the data off that component

122
00:06:17,490 --> 00:06:19,343
so not friends, but friend.

123
00:06:20,930 --> 00:06:24,930
And I will just copy one friend which I defined here.

124
00:06:24,930 --> 00:06:29,930
Let's take manual and store him in this friend key.

125
00:06:31,230 --> 00:06:32,740
This is just temporary,

126
00:06:32,740 --> 00:06:35,180
we'll soon make it work with our list again,

127
00:06:35,180 --> 00:06:37,920
but to get started, we'll just use friend like that

128
00:06:39,170 --> 00:06:40,550
And now if I save that,

129
00:06:40,550 --> 00:06:44,000
we can finally start using our own component

130
00:06:44,000 --> 00:06:47,350
and therefore our own HTML element.

131
00:06:47,350 --> 00:06:50,150
Because now we can go to index HTML

132
00:06:50,150 --> 00:06:53,250
and instead of our main apps template,

133
00:06:53,250 --> 00:06:57,810
we can now use friend contact as if it would be

134
00:06:57,810 --> 00:07:00,363
an official HTML element.

135
00:07:01,500 --> 00:07:04,570
And it's not, I really want to emphasize it.

136
00:07:04,570 --> 00:07:08,780
This is not an HTML element which the browser would know.

137
00:07:08,780 --> 00:07:11,780
If you try to use that outside

138
00:07:11,780 --> 00:07:15,580
of the Vue app controlled part, this will do nothing

139
00:07:15,580 --> 00:07:17,660
the browser will ignore it.

140
00:07:17,660 --> 00:07:22,050
But inside of our main app Vue will understand this,

141
00:07:22,050 --> 00:07:24,150
it will understand this component

142
00:07:24,150 --> 00:07:28,020
because we registered this component to our main app

143
00:07:28,020 --> 00:07:29,600
with the component method,

144
00:07:29,600 --> 00:07:32,400
by giving it that exact identifier

145
00:07:32,400 --> 00:07:36,623
which I'm now using as an HTML tag in my template.

146
00:07:37,950 --> 00:07:39,280
And that's why we should use

147
00:07:39,280 --> 00:07:42,250
a non-default HTML tag name here,

148
00:07:42,250 --> 00:07:45,350
because if we would have named our component h2,

149
00:07:45,350 --> 00:07:49,560
Vue would not recognize it as a custom component of course.

150
00:07:49,560 --> 00:07:53,120
But since we have such a name with a dash in it,

151
00:07:53,120 --> 00:07:56,960
a two word name, which is this identifier we used here,

152
00:07:56,960 --> 00:08:00,540
Vue detects that here in the end,

153
00:08:00,540 --> 00:08:04,810
we wanna render this mini app with its template

154
00:08:04,810 --> 00:08:07,513
and all the dynamic pieces in the template.

155
00:08:08,760 --> 00:08:11,113
So now if we save this again and reload,

156
00:08:12,030 --> 00:08:14,460
we see Manual Lorenz on the screen

157
00:08:14,460 --> 00:08:16,860
and we can click show details and hide details

158
00:08:16,860 --> 00:08:18,890
and this just works.

159
00:08:18,890 --> 00:08:21,060
And now we can repeat that

160
00:08:21,060 --> 00:08:23,920
and simply add a number of component.

161
00:08:23,920 --> 00:08:26,900
And if I reload, we have Manuel Lorenz twice

162
00:08:26,900 --> 00:08:30,810
and the important thing is every Manual Lorenz,

163
00:08:30,810 --> 00:08:35,039
works, stand-alone, totally detached from the other one.

164
00:08:35,039 --> 00:08:37,630
Now, of course we have the same data twice now,

165
00:08:37,630 --> 00:08:39,580
that's something we're going to fix soon,

166
00:08:39,580 --> 00:08:42,200
but this shows you how components allow you

167
00:08:42,200 --> 00:08:47,200
to easily replicate and encapsulated piece of HTML code

168
00:08:47,820 --> 00:08:50,170
with, and that's the important part

169
00:08:50,170 --> 00:08:53,540
with attached data and logic.

170
00:08:53,540 --> 00:08:57,520
So components are reusable pieces of HTML

171
00:08:57,520 --> 00:09:00,700
with connected data and logic.

172
00:09:00,700 --> 00:09:03,180
And that is very, very powerful

173
00:09:03,180 --> 00:09:05,600
especially as you will soon see

174
00:09:05,600 --> 00:09:09,170
how we can also reuse one and the same component

175
00:09:09,170 --> 00:09:13,630
with different data that we pass into the component.

176
00:09:13,630 --> 00:09:15,120
That will be the next step,

177
00:09:15,120 --> 00:09:19,090
which will then really make components a powerful tool.

178
00:09:19,090 --> 00:09:21,350
But you can hopefully already see

179
00:09:21,350 --> 00:09:25,090
how a component helps us encapsulate structure,

180
00:09:25,090 --> 00:09:30,090
content and logic into small reusable pieces.

181
00:09:30,420 --> 00:09:33,730
And you can really add as many of these components

182
00:09:33,730 --> 00:09:36,350
here as you want, and they will all be rendered

183
00:09:36,350 --> 00:09:38,830
and they all work, stand-alone.

184
00:09:38,830 --> 00:09:41,620
So now we've got a bunch of Vue mini apps

185
00:09:41,620 --> 00:09:43,760
in the same main app.

186
00:09:43,760 --> 00:09:47,530
And these apps will then also be able to communicate

187
00:09:47,530 --> 00:09:50,020
with each other to share information

188
00:09:50,020 --> 00:09:52,970
and hence we'll have the best of both roles.

189
00:09:52,970 --> 00:09:56,740
Encapsulated, isolated pieces of code,

190
00:09:56,740 --> 00:09:59,230
which also makes it easier to work on that code

191
00:09:59,230 --> 00:10:01,340
in case you have bigger projects.

192
00:10:01,340 --> 00:10:02,920
And at the same time,

193
00:10:02,920 --> 00:10:06,070
we can combine all those isolated pieces

194
00:10:06,070 --> 00:10:08,500
to build a bigger app from them.

195
00:10:08,500 --> 00:10:10,420
Now that's our components

196
00:10:10,420 --> 00:10:12,550
and they will be super important

197
00:10:12,550 --> 00:10:13,550
and we're going to use them

198
00:10:13,550 --> 00:10:15,140
throughout the rest of the course.

199
00:10:15,140 --> 00:10:16,640
But at the same time,

200
00:10:16,640 --> 00:10:19,560
we're now already reaching a part

201
00:10:19,560 --> 00:10:24,560
where this setup we used thus far has certain limitations.

202
00:10:24,920 --> 00:10:28,320
We'll have more and more code in the same file

203
00:10:28,320 --> 00:10:32,380
and writing templates like this in such a string form,

204
00:10:32,380 --> 00:10:35,210
that will not be very nice to do.

205
00:10:35,210 --> 00:10:36,990
In addition we of course also need

206
00:10:36,990 --> 00:10:38,780
to learn more about components

207
00:10:38,780 --> 00:10:42,110
so that we can really make this component reusable

208
00:10:42,110 --> 00:10:44,310
and also work with different data

209
00:10:44,310 --> 00:10:46,640
so that the component acts like a shell

210
00:10:46,640 --> 00:10:48,410
to which we can pass different data.

211
00:10:48,410 --> 00:10:52,033
We'll take care of all of that in the next modules.

