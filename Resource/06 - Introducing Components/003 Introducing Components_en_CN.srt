1
00:00:02,210 --> 00:00:03,930
组件很棒，

2
00:00:03,930 --> 00:00:07,450
如果您有某些 HTML。

3
00:00:07,450 --> 00:00:10,260
像这里这样的某些 HTML 块，

4
00:00:10,260 --> 00:00:13,840
您在页面的不同部分重复使用它们，

5
00:00:13,840 --> 00:00:17,340
就像这里，我们创建多个列表项。

6
00:00:17,340 --> 00:00:20,250
然后你有一定的功能

7
00:00:20,250 --> 00:00:23,470
应该包含在该 HTML 块中。

8
00:00:23,470 --> 00:00:27,250
这应该特定于这个 HTML 块。

9
00:00:27,250 --> 00:00:28,720
组件也可以很棒

10
00:00:28,720 --> 00:00:30,720
拆分您的大型应用程序

11
00:00:30,720 --> 00:00:32,810
分成多个更小的块，

12
00:00:32,810 --> 00:00:35,900
但这是我们稍后会自动探索的东西

13
00:00:35,900 --> 00:00:39,030
一旦我们越来越多地使用组件。

14
00:00:39,030 --> 00:00:42,540
所以，既然组件似乎很有帮助，

15
00:00:42,540 --> 00:00:44,550
我们如何创建这样的组件？

16
00:00:44,550 --> 00:00:46,200
它是如何工作的？

17
00:00:46,200 --> 00:00:50,510
组件是 Vue.js 知道的官方特性，

18
00:00:50,510 --> 00:00:53,590
我们可以在应用程序上创建一个。

19
00:00:53,590 --> 00:00:57,150
因此，在一个应用程序上，我们使用 create app 创建它，

20
00:00:57,150 --> 00:00:59,840
通过使用在我这里的应用程序

21
00:00:59,840 --> 00:01:02,400
存储在该应用程序常量中

22
00:01:02,400 --> 00:01:05,750
并在其上调用组件方法。

23
00:01:05,750 --> 00:01:10,503
这告诉 Vue 我们要创建一个新组件。

24
00:01:11,350 --> 00:01:14,870
现在这个组件方法需要两件事。

25
00:01:14,870 --> 00:01:17,880
首先是标识符

26
00:01:17,880 --> 00:01:20,050
因为一个组件，这很重要，

27
00:01:20,050 --> 00:01:21,420
你必须记住这一点。

28
00:01:21,420 --> 00:01:26,420
组件基本上类似于自定义 HTML 元素。

29
00:01:26,430 --> 00:01:30,420
所以在这里你定义你自己的 HTML 标签

30
00:01:31,310 --> 00:01:32,650
例如，

31
00:01:32,650 --> 00:01:36,480
成为用户破折号联系人

32
00:01:37,430 --> 00:01:40,590
或朋友破折号联系人，类似这样的。

33
00:01:40,590 --> 00:01:45,340
您应该始终使用包含破折号的标识符。

34
00:01:45,340 --> 00:01:47,890
所以你应该总是有组件名称，

35
00:01:47,890 --> 00:01:51,510
包含破折号的自定义 HTML 标签，

36
00:01:51,510 --> 00:01:54,260
so 由两个词组成。

37
00:01:54,260 --> 00:01:55,880
原因很简单，

38
00:01:55,880 --> 00:01:58,690
这样可以避免您可能发生冲突

39
00:01:58,690 --> 00:02:02,170
带有官方内置的 HTML 元素。

40
00:02:02,170 --> 00:02:05,560
例如，如果它将我的组件命名为 h2，

41
00:02:05,560 --> 00:02:08,780
好吧，已经有 h2 元素，

42
00:02:08,780 --> 00:02:11,110
因此会发生冲突。

43
00:02:11,110 --> 00:02:13,830
因此，一个简单的规则是你应该使用

44
00:02:13,830 --> 00:02:18,830
多词组件名称，自定义 HTML 标签，

45
00:02:19,410 --> 00:02:22,500
因为所有内置的 HTML 元素

46
00:02:22,500 --> 00:02:24,663
是一个单词的元素。

47
00:02:25,560 --> 00:02:29,290
这就是我自己的 HTML 元素名称

48
00:02:29,290 --> 00:02:32,250
我们稍后将能够使用它。

49
00:02:32,250 --> 00:02:36,190
可以这么说，这是我们组件的标识符。

50
00:02:36,190 --> 00:02:40,050
您传递给此组件方法的第二个参数，

51
00:02:40,050 --> 00:02:45,050
是一个冲突对象，就像您将它传递给创建应用程序一样

52
00:02:45,270 --> 00:02:47,860
因为，这是另一个重要的

53
00:02:47,860 --> 00:02:50,190
要记住的信息。

54
00:02:50,190 --> 00:02:54,320
一个 Vue 组件本质上只是另一个 Vue 应用程序，

55
00:02:54,320 --> 00:02:57,483
只是属于另一个应用程序的应用程序。

56
00:02:58,420 --> 00:03:02,710
所以我们在这里创建的是一个新的 Vue 应用程序，

57
00:03:02,710 --> 00:03:04,770
但是，这是最重要的，

58
00:03:04,770 --> 00:03:08,840
将连接到我们的主应用程序的应用程序。

59
00:03:08,840 --> 00:03:12,840
所以组件就像你可以说的迷你应用程序。

60
00:03:12,840 --> 00:03:14,540
因此，他们也可以拥有数据，

61
00:03:14,540 --> 00:03:17,440
他们可以有方法，因此在这里，

62
00:03:17,440 --> 00:03:20,960
我们的组件可以有自己的数据，

63
00:03:20,960 --> 00:03:25,960
例如，我们有一个 detailsAreVisible 属性

64
00:03:27,880 --> 00:03:29,453
最初是错误的。

65
00:03:30,550 --> 00:03:33,060
我们还可以为我们的组件添加方法

66
00:03:33,060 --> 00:03:36,250
并添加我们的切换详细信息方法

67
00:03:36,250 --> 00:03:39,303
这里是我自己组件的方法。

68
00:03:40,520--> 00:03:44,200
这样我们就可以切换这个组件的特定数据

69
00:03:44,200 --> 00:03:46,603
使用此组件特定方法。

70
00:03:47,700 --> 00:03:50,740
我们现在可以从主应用程序中删除方法，

71
00:03:50,740 --> 00:03:53,060
并且还摆脱了那里可见的细节。

72
00:03:53,060 --> 00:03:54,700
我们也可以把它放在这里，

73
00:03:54,700 --> 00:03:57,400
我们不会发生冲突，因为这个组件

74
00:03:57,400 --> 00:03:59,470
本质上是封装的。

75
00:03:59,470 --> 00:04:02,860
它不与父应用程序通信

76
00:04:02,860 --> 00:04:04,700
所以对于它所属的应用程序，

77
00:04:04,700 --> 00:04:06,700
但我们仍然可以删除此属性

78
00:04:06,700 --> 00:04:09,933
因为我们不再需要在主应用程序中使用它。

79
00:04:11,770 --> 00:04:15,240
所以现在我们得到了我们的组件，朋友联系

80
00:04:15,240 --> 00:04:17,930
我们现在如何使用这个组件？

81
00:04:17,930 --> 00:04:19,333
它是如何工作的？

82
00:04:20,220 --> 00:04:23,550
好吧，这个组件错过了一件重要的事情

83
00:04:23,550 --> 00:04:24,960
在我们可以使用它之前。

84
00:04:24,960 --> 00:04:28,050
这是一个模板，因为这是一个新应用程序，

85
00:04:28,050 --> 00:04:30,200
它需要自己的模板。

86
00:04:30,200 --> 00:04:34,180
我们的主应用程序有一个模板，整个部分，

87
00:04:34,180 --> 00:04:36,490
我们将应用程序安装到其中，

88
00:04:36,490 --> 00:04:38,637
但是我们的组件现在是一个迷你应用程序

89
00:04:38,637 --> 00:04:41,270
它需要自己的模板。

90
00:04:41,270 --> 00:04:43,490
现在，这里我们不挂载这个组件，

91
00:04:43,490 --> 00:04:45,950
我们不调用 mount ，

92
00:04:45,950 --> 00:04:49,023
所以这不是我们将它连接到 HTML 的方式。

93
00:04:49,860 --> 00:04:52,200
而是暂时在这里，

94
00:04:52,200 --> 00:04:54,910
我们将添加此模板选项，

95
00:04:54,910 --> 00:04:57,410
我也在深潜中展示了

96
00:04:57,410 --> 00:04:59,403
在幕后模块中。

97
00:05:00,320 --> 00:05:01,750
如果你跳过了那个，

98
00:05:01,750 --> 00:05:03,430
是的，有一个模板选项

99
00:05:03,430 --> 00:05:07,660
您可以将其添加到视图应用程序中，也可以添加到主应用程序中

100
00:05:07,660 --> 00:05:10,310
定义该应用程序的模板。

101
00:05:10,310 --> 00:05:13,670
所以要定义那个应用程序的 HTML 代码

102
00:05:13,670 --> 00:05:16,173
您需要为此组件执行此操作。

103
00:05:17,710 --> 00:05:20,140
现在我会在课程后面说

104
00:05:20,140 --> 00:05:21,570
在接下来的模块中，

105
00:05:21,570 --> 00:05:24,320
我们将了解一个更好的方法

106
00:05:24,320 --> 00:05:26,120
定义这些模板。

107
00:05:26,120 --> 00:05:30,030
但目前，我将在这里创建一个多行字符串

108
00:05:30,030 --> 00:05:31,500
带反引号。

109
00:05:31,500 --> 00:05:35,020
所以这些不是单引号，这些是反引号，

110
00:05:35,020 --> 00:05:37,750
这是键盘上的不同字符。

111
00:05:37,750 --> 00:05:41,120
我现在将在此处获取此列表项，

112
00:05:41,120 --> 00:05:46,120
所以这些完整的代码并从我的 HTML 文件中删除

113
00:05:47,000 --> 00:05:52,000
而是在此反引号字符串中添加了此处。

114
00:05:52,060 --> 00:05:55,060
我使用反引号是因为它们允许我写

115
00:05:55,060 --> 00:05:56,970
像这样的多行字符串。

116
00:05:56,970 --> 00:05:59,750
但最后，这只是一个 JavaScript 字符串。

117
00:05:59,750 --> 00:06:02,463
有了所有这些视图功能，

118
00:06:03,550 --> 00:06:08,160
现在，我将删除列表项上的 v4 代码

119
00:06:08,160 --> 00:06:10,440
并确保插值工作

120
00:06:10,440 --> 00:06:15,440
目前我将添加一个朋友属性

121
00:06:15,490 --> 00:06:17,490
到该组件的数据

122
00:06:17,490 --> 00:06:19,343
所以不是朋友，而是朋友。

123
00:06:20,930 --> 00:06:24,930
我只会复制我在这里定义的一位朋友。

124
00:06:24,930 --> 00:06:29,930
让我们拿起手册并将他存储在这个朋友密钥中。

125
00:06:31,230 --> 00:06:32,740
这只是暂时的，

126
00:06:32,740 --> 00:06:35,180
我们很快就会让它再次与我们的列表一起工作，

127
00:06:35,180 --> 00:06:37,920
但要开始，我们就用这样的朋友

128
00:06:39,170 --> 00:06:40,550
现在如果我保存它，

129
00:06:40,550 --> 00:06:44,000
我们终于可以开始使用我们自己的组件了

130
00:06:44,000 --> 00:06:47,350
因此我们自己的 HTML 元素。

131
00:06:47,350 --> 00:06:50,150
因为现在我们可以去索引 HTML

132
00:06:50,150 --> 00:06:53,250
而不是我们的主要应用程序模板，

133
00:06:53,250 --> 00:06:57,810
我们现在可以像使用朋友联系一样使用

134
00:06:57,810 --> 00:07:00,363
一个官方的 HTML 元素。

135
00:07:01,500 --> 00:07:04,570
不是，我真的很想强调大小它。

136
00:07:04,570 --> 00:07:08,780
这不是浏览器知道的 HTML 元素。

137
00:07:08,780 --> 00:07:11,780
如果你尝试在外面使用它

138
00:07:11,780 --> 00:07:15,580
Vue 应用程序控制的部分，这不会做任何事情

139
00:07:15,580 --> 00:07:17,660
浏览器会忽略它。

140
00:07:17,660 --> 00:07:22,050
但是在我们的主应用程序内部，Vue 会理解这一点，

141
00:07:22,050 --> 00:07:24,150
它会理解这个组件

142
00:07:24,150 --> 00:07:28,020
因为我们将此组件注册到我们的主应用程序

143
00:07:28,020 --> 00:07:29,600
使用组件方法，

144
00:07:29,600 --> 00:07:32,400
通过给它确切的标识符

145
00:07:32,400 --> 00:07:36,623
我现在将其用作模板中的 HTML 标记。

146
00:07:37,950 --> 00:07:39,280
这就是为什么我们应该使用

147
00:07:39,280 --> 00:07:42,250
此处为非默认 HTML 标签名称，

148
00:07:42,250 --> 00:07:45,350
因为如果我们将组件命名为 h2，

149
00:07:45,350 --> 00:07:49,560
当然，Vue 不会将其识别为自定义组件。

150
00:07:49,560 --> 00:07:53,120
但既然我们有这样一个名字，里面有破折号，

151
00:07:53,120 --> 00:07:56,960
一个两个词的名称，这是我们在这里使用的标识符，

152
00:07:56,960 --> 00:08:00,540
Vue 最终检测到这里，

153
00:08:00,540 --> 00:08:04,810
我们想用它的模板渲染这个迷你应用

154
00:08:04,810 --> 00:08:07,513
以及模板中的所有动态片段。

155
00:08:08,760 --> 00:08:11,113
所以现在如果我们再次保存并重新加载，

156
00:08:12,030 --> 00:08:14,460
我们在屏幕上看到手动洛伦兹

157
00:08:14,460 --> 00:08:16,860
我们可以点击显示详细信息和隐藏详细信息

158
00:08:16,860 --> 00:08:18,890
这很有效。

159
00:08:18,890 --> 00:08:21,060
现在我们可以重复一遍

160
00:08:21,060 --> 00:08:23,920
并简单地添加一些组件。

161
00:08:23,920 --> 00:08:26,900
如果我重新加载，我们有两次 Manuel Lorenz

162
00:08:26,900 --> 00:08:30,810
重要的是每一个手动洛伦兹，

163
00:08:30,810 --> 00:08:35,039
作品，独立，完全脱离另一个。

164
00:08:35,039 --> 00:08:37,630
现在，当然我们现在有两次相同的数据，

165
00:08:37,630 --> 00:08:39,580
这是我们很快就会解决的问题，

166
00:08:39,580 --> 00:08:42,200
但这向您展示了组件如何让您

167
00:08:42,200 --> 00:08:47,200
轻松复制和封装一段 HTML 代码

168
00:08:47,820 --> 00:08:50,170
与，这是重要的部分

169
00:08:50,170 --> 00:08:53,540
附带数据和逻辑。

170
00:08:53,540 --> 00:08:57,520
所以组件是可重用的 HTML 片段

171
00:08:57,520 --> 00:09:00,700
具有连接的数据和逻辑。

172
00:09:00,700 --> 00:09:03,180
这是非常非常强大的

173
00:09:03,180 --> 00:09:05,600
特别是你很快就会看到

174
00:09:05,600 --> 00:09:09,170
我们如何也可以重用同一个组件

175
00:09:09,170 --> 00:09:13,630
使用我们传递给组件的不同数据。

176
00:09:13,630 --> 00:09:15,120
那将是下一步，

177
00:09:15,120 --> 00:09:19,090
这将真正使组件成为一个强大的工具。

178
00:09:19,090 --> 00:09:21,350
但你可以希望已经看到

179
00:09:21,350 --> 00:09:25,090
组件如何帮助我们封装结构，

180
00:09:25,090 --> 00:09:30,090
内容和逻辑成小的可重复使用的部分。

181
00:09:30,420 --> 00:09:33,730
你真的可以添加尽可能多的这些组件

182
00:09:33,730 --> 00:09:36,350
随心所欲地在这里，它们都将被渲染

183
00:09:36,350 --> 00:09:38,830
它们都可以独立工作。

184
00:09:38,830 --> 00:09:41,620
所以现在我们有了一堆 Vue 迷你应用

185
00:09:41,620 --> 00:09:43,760
在同一个主应用程序中。

186
00:09:43,760 --> 00:09:47,530
然后这些应用程序也将能够进行通信

187
00:09:47,530 --> 00:09:50,020
互相分享信息

188
00:09:50,020 --> 00:09:52,970
因此，我们将拥有两个角色中最好的。

189
00:09:52,970 --> 00:09:56,740
封装的、隔离的代码片段，

190
00:09:56,740 --> 00:09:59,230
这也使处理该代码变得更容易

191
00:09:59,230 --> 00:10:01,340
如果你有更大的项目。

192
00:10:01,340 --> 00:10:02,920
同时，

193
00:10:02,920 --> 00:10:06,070
我们可以结合所有这些孤立的部分

194
00:10:06,070 --> 00:10:08,500
从他们那里构建一个更大的应用程序。

195
00:10:08,500 --> 00:10:10,420
现在这是我们的组件

196
00:10:10,420 --> 00:10:12,550
他们将非常重要

197
00:10:12,550 --> 00:10:13,550
我们将使用它们

198
00:10:13,550 --> 00:10:15,140
在整个课程的其余部分。

199
00:10:15,140 --> 00:10:16,640
但与此同时，

200
00:10:16,640 --> 00:10:19,560
我们现在已经达到了一部分

201
00:10:19,560 --> 00:10:24,560
到目前为止，我们使用的这种设置有一定的局限性。

202
00:10:24,920 --> 00:10:28,320
我们将在同一个文件中有越来越多的代码

203
00:10:28,320 --> 00:10:32,380
并以这样的字符串形式编写这样的模板，

204
00:10:32,380 --> 00:10:35,210
那样做可不太好。

205
00:10:35,210 --> 00:10:36,990
另外我们当然还需要

206
00:10:36,990 --> 00:10:38,780
了解有关组件的更多信息

207
00:10:38,780 --> 00:10:42,110
这样我们才能真正让这个组件可重用

208
00:10:42,110 --> 00:10:44,310
并且还可以处理不同的数据

209
00:10:44,310 --> 00:10:46,640
这样组件就像一个外壳

210
00:10:46,640 --> 00:10:48,410
我们可以向其传递不同的数据。

211
00:10:48,410 --> 00:10:52,033
我们将在接下来的模块中处理所有这些。