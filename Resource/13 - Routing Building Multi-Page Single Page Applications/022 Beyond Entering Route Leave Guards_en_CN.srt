1
00:00:02,220 --> 00:00:05,490
现在这些是与

2
00:00:05,490 --> 00:00:06,810
来到一个页面，

3
00:00:06,810 --> 00:00:10,700
在之前调用并确认导航操作。

4
00:00:10,700 --> 00:00:12,340
还有一个有用的后卫，

5
00:00:12,340 --> 00:00:15,700
当用户想要离开页面时触发。

6
00:00:15,700 --> 00:00:18,630
当然，当你离开一个页面并转到多个页面时，

7
00:00:18,630 --> 00:00:20,800
所有“之前的守卫”都被触发，

8
00:00:20,800 --> 00:00:25,800
但也许您还想在组件上运行一些代码

9
00:00:26,340 --> 00:00:30,030
那是在它被离开之前被留下来的。

10
00:00:30,030 --> 00:00:33,157
你可能希望能够否认

11
00:00:33,157 --> 00:00:36,197
“离开此页面在此处执行。”

12
00:00:36,197 --> 00:00:37,593
但我的意思是什么？

13
00:00:38,450 --> 00:00:40,650
假设在用户的列表组件上，

14
00:00:40,650 --> 00:00:43,860
我们想在这个组件离开时运行代码。

15
00:00:43,860 --> 00:00:45,120
我们可以这样做

16
00:00:45,120 --> 00:00:48,830
使用 unmounted 生命周期钩子 vue 知道。

17
00:00:48,830 --> 00:00:50,860
如果我把这个锁在这里，

18
00:00:50,860 --> 00:00:54,713
这将在我们离开用户页面时执行。

19
00:00:56,150 --> 00:00:59,690
所以如果我去找用户，然后我离开团队，

20
00:00:59,690 --> 00:01:01,990
你在这里看到卸载。

21
00:01:01,990 --> 00:01:05,950
但问题是它在钩子之后运行，

22
00:01:05,950 --> 00:01:08,470
所以在导航确认后，

23
00:01:08,470 --> 00:01:12,220
这使我们无法取消导航。

24
00:01:12,220 --> 00:01:15,840
现在我们为什么要取消导航

25
00:01:15,840 --> 00:01:19,400
从我们要离开的组件内部？

26
00:01:19,400 --> 00:01:22,170
好吧，假设你有一个表格，

27
00:01:22,170 --> 00:01:27,170
你要确保在保存该表格之前，

28
00:01:28,580 --> 00:01:31,050
你至少想警告用户，

29
00:01:31,050 --> 00:01:33,770
有未保存的更改，

30
00:01:33,770 --> 00:01:37,220
如果页面离开，这将丢失。

31
00:01:37,220 --> 00:01:40,070
我们可以在这里用一个数字按钮来模拟这个，

32
00:01:40,070 --> 00:01:44,780
保存更改和新的数据属性，

33
00:01:44,780 --> 00:01:48,273
因此，我将数据添加到该用户的列表组件中，

34
00:01:49,180 --> 00:01:52,940
我必须更改为已保存的属性

35
00:01:52,940 --> 00:01:55,200
最初是错误的。

36
00:01:55,200 --> 00:01:58,260
当然，这里只是一些虚拟代码。

37
00:01:58,260 --> 00:02:01,880
然后我们可以有一个方法保存更改，

38
00:02:01,880 --> 00:02:05,783
然后在这里我将保存的更改设置为true，

39
00:02:06,950 --> 00:02:09,039
并应触发保存更改

40
00:02:09,039 --> 00:02:10,560
单击此处的此按钮时。

41
00:02:10,560 --> 00:02:12,540
所以让我们把它绑定到那个。

42
00:02:12,540 --> 00:02:14,850
同样，这只是一些虚拟代码，

43
00:02:14,850 --> 00:02:16,093
只是一个小例子。

44
00:02:17,430 --> 00:02:21,620
现在我们要确保只要这是错误的，

45
00:02:21,620 --> 00:02:23,220
我们至少会收到警告

46
00:02:23,220 --> 00:02:25,673
我们不会不小心离开页面，

47
00:02:27,110 --> 00:02:29,430
因为我们都知道你在那个页面上，

48
00:02:29,430 --> 00:02:31,190
您正在表格中输入内容

49
00:02:31,190 --> 00:02:34,110
不小心我们向右滑动

50
00:02:34,110 --> 00:02:37,180
所有的输入都丢失了，

51
00:02:37,180 --> 00:02:40,190
或者我们不小心点击了鼠标上的后退按钮。

52
00:02:40,190 --> 00:02:42,400
所以不小心离开了一个页面

53
00:02:42,400 --> 00:02:44,210
您在表格中输入的内容

54
00:02:44,210 --> 00:02:46,473
绝对是我们都知道的事情。

55
00:02:47,390 --> 00:02:50,780
这正是另一个导航守卫的地方

56
00:02:50,780 --> 00:02:52,220
可以帮助我们。

57
00:02:52,220 --> 00:02:56,130
在组件 convict 对象中的组件内部，

58
00:02:56,130 --> 00:03:01,057
您可以添加“路线前离开守卫”。

59
00:03:02,410 --> 00:03:05,130
如果您使用的是 vue 路由器，您可以添加它，

60
00:03:05,130 --> 00:03:07,930
然后路由器会先调用它

61
00:03:07,930 --> 00:03:10,700
在调用所有“之前的每个

62
00:03:10,700 --> 00:03:12,507
在进入警卫之前。”

63
00:03:13,400 --> 00:03:16,590
现在在这里，您还可以到达、从和下一个，

64
00:03:16,590 --> 00:03:20,200
就像进入守卫一样，

65
00:03:20,200 --> 00:03:22,450
但现在将首先调用它。

66
00:03:22,450 --> 00:03:23,900
在这里我们当然可以，

67
00:03:23,900 --> 00:03:28,900
控制台日志，用户在路由离开前列出组件。

68
00:03:34,110--> 00:03:37,620
当然，我们也可以通过控制台登录和登录

69
00:03:37,620 --> 00:03:41,200
看看这些路由对象里面有什么。

70
00:03:41,200 --> 00:03:45,660
但最重要的是，我们现在可以像你所学的那样使用 next，

71
00:03:45,660 --> 00:03:50,420
确认导航或仅偶尔确认。

72
00:03:50,420 --> 00:03:54,880
例如，我们可以检查保存的更改是否为真。

73
00:03:56,320 --> 00:03:58,410
如果是这样的话，我想打电话给下一个，

74
00:03:58,410 --> 00:04:00,390
因为如果保存更改，

75
00:04:00,390 --> 00:04:03,130
用户可能会离开页面。

76
00:04:03,130 --> 00:04:04,880
但如果不是这样的话，

77
00:04:04,880 --> 00:04:06,680
我想问用户，

78
00:04:06,680 --> 00:04:09,670
他或她真正想离开的地方。

79
00:04:09,670 --> 00:04:11,630
为此，这里还有其他，

80
00:04:11,630 --> 00:04:14,320
我们可以调用提示函数，

81
00:04:14,320 --> 00:04:15,780
它内置在浏览器中，

82
00:04:15,780 --> 00:04:17,529
显示内置警报，

83
00:04:17,529 --> 00:04:20,310
用户必须选择是或否。

84
00:04:20,310 --> 00:04:21,572
你确定吗？

85
00:04:22,870 --> 00:04:27,210
你有未保存的更改？

86
00:04:27,210 --> 00:04:30,210
我们可以在这里问什么。

87
00:04:30,210 --> 00:04:33,680
结果是一块金条，

88
00:04:33,680 --> 00:04:38,110
我们可以将其存储在用户想要保持不变的情况下。

89
00:04:38,110 --> 00:04:42,310
然后我们调用 next 并传递用户想要离开的信息。

90
00:04:42,310 --> 00:04:44,410
那是真的还是假的

91
00:04:44,410 --> 00:04:45,960
基于用户选择的内容

92
00:04:45,960 --> 00:04:48,800
并且此警报将呈现给他或她。

93
00:04:48,800 --> 00:04:50,990
如果我们将 true 传递给下一个，

94
00:04:50,990 --> 00:04:54,080
就像这样调用下一个，

95
00:04:54,080 --> 00:04:56,300
它将确认导航。

96
00:04:56,300 --> 00:04:58,570
如果我们将 false 传递给 next，

97
00:04:58,570 --> 00:05:00,340
这将取消导航

98
00:05:00,340 --> 00:05:02,463
并且用户将留在页面上。

99
00:05:03,460 --> 00:05:05,500
所以让我向你展示这个。

100
00:05:05,500 --> 00:05:08,090
如果我们保存它并且我重新加载用户，

101
00:05:08,090 --> 00:05:10,740
默认情况下不保存更改，

102
00:05:10,740 --> 00:05:13,200
默认情况下这是错误的。

103
00:05:13,200 --> 00:05:18,200
因此，如果我不点击保存更改然后我去团队，

104
00:05:18,200 --> 00:05:21,390
我现在提示无论我真正想去哪里，

105
00:05:21,390 --> 00:05:24,840
提示在这里是错误的功能

106
00:05:24,840 --> 00:05:26,453
我想用，

107
00:05:27,310 --> 00:05:29,120
确认，对不起。

108
00:05:29,120 --> 00:05:32,880
因此，让我们使用确认功能并重复此操作。

109
00:05:32,880 --> 00:05:35,410
我在用户上，我重新加载，

110
00:05:35,410 --> 00:05:38,500
更改未保存，我想去团队。

111
00:05:38,500 --> 00:05:41,420
现在我得到这个提示，如果我确定的话，

112
00:05:41,420 --> 00:05:44,500
如果我点击取消，我会留在用户身上。

113
00:05:44,500 --> 00:05:46,990
如果我不小心点击了返回按钮，也是一样的，

114
00:05:46,990 --> 00:05:48,810
我留在这里。

115
00:05:48,810 --> 00:05:51,250
如果我当然点击确定，

116
00:05:51,250 --> 00:05:54,883
导航已确认，我可以离开，

117
00:05:56,400 --> 00:05:58,400
但至少我得到了那些警告，

118
00:05:58,400 --> 00:06:01,090
如果我不小心点击了后退按钮

119
00:06:01,090 --> 00:06:02,600
或类似的东西，

120
00:06:02,600 --> 00:06:05,440
我不会丢弃所有未保存的更改，

121
00:06:05,440 --> 00:06:08,963
这可以极大地增强用户体验。

122
00:06:09,970 --> 00:06:12,220
当然，如果我点击保存更改，

123
00:06:12,220 --> 00:06:14,500
我可以在没有收到警告的情况下离开，

124
00:06:14,500 --> 00:06:18,430
因为那时保存的更改是真的。

125
00:06:18,430 --> 00:06:21,570
这就是为什么“前路离开守卫”的原因

126
00:06:21,570 --> 00:06:25,680
对于增强用户体验非常有用

127
00:06:25,680 --> 00:06:28,710
您通过确保向您的用户提供，

128
00:06:28,710 --> 00:06:31,263
他们不会意外丢失输入。

129
00:06:32,150 --> 00:06:35,420
好吧，这些是不同的导航守卫。

130
00:06:35,420 --> 00:06:37,610
他们在不同的时间点运行

131
00:06:37,610 --> 00:06:40,380
在代码的不同位置，

132
00:06:40,380 --> 00:06:43,880
您可以使用最适合您要求的地方，

133
00:06:43,880 --> 00:06:46,590
如果您想为每个导航运行警卫

134
00:06:46,590 --> 00:06:48,950
或仅针对某些路线，例如，

135
00:06:48,950 --> 00:06:50,500
和那些守卫，

136
00:06:50,500 --> 00:06:54,130
你实际上可以提供相当不错的用户经验。

137
00:06:54,130 --> 00:06:55,590
现在正如我之前提到的，

138
00:06:55,590 --> 00:06:58,120
我们会看到那些守卫在行动

139
00:06:58,120 --> 00:07:00,600
很快在我们正在构建的课程项目中，

140
00:07:00,600 --> 00:07:03,220
然后这可能更有意义，

141
00:07:03,220 --> 00:07:04,520
但希望现在，

142
00:07:04,520 --> 00:07:08,800
你已经明白我们为什么要使用它们，

143
00:07:08,800 --> 00:07:11,543
更重要的是它们是如何工作的。