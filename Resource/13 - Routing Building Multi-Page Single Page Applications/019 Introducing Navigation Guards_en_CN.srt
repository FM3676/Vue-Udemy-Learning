1
00:00:02,140 --> 00:00:03,480
最后一个特点，

2
00:00:03,480 --> 00:00:05,730
我想和你一起探索这个模块

3
00:00:05,730 --> 00:00:08,410
是导航守卫的特点。

4
00:00:08,410 --> 00:00:12,030
如果您添加诸如

5
00:00:12,030 --> 00:00:14,890
身份验证，例如，

6
00:00:14,890 --> 00:00:18,450
想要避免用户能够访问某个路由

7
00:00:18,450 --> 00:00:20,690
如果他或她未通过身份验证，

8
00:00:20,690 --> 00:00:22,080
但它们也很有用

9
00:00:22,080 --> 00:00:25,340
只需要注意页面的变化

10
00:00:25,340 --> 00:00:27,250
如果你想在那里运行一些代码

11
00:00:27,250 --> 00:00:30,310
或者它们可以用于确保用户

12
00:00:30,310 --> 00:00:33,240
不会意外离开页面

13
00:00:33,240 --> 00:00:38,240
例如，他或她在论坛中未保存的编辑。

14
00:00:38,640 --> 00:00:41,200
我们将看到守卫的实际示例

15
00:00:41,200 --> 00:00:43,040
在课程项目中，但当然，

16
00:00:43,040 --> 00:00:45,940
因为这是路由的介绍模块，

17
00:00:45,940 --> 00:00:48,260
我将开始向你展示所有这些守卫

18
00:00:48,260 --> 00:00:50,063
已经在这个模块中了。

19
00:00:51,180 --> 00:00:53,940
现在，当我说警卫时，我到底是什么意思？

20
00:00:53,940 --> 00:00:57,150
我说的是功能、方法、

21
00:00:57,150 --> 00:01:00,420
由视图路由器自动调用

22
00:01:00,420 --> 00:01:03,980
当页面更改或准确地说，

23
00:01:03,980 --> 00:01:06,653
当导航动作开始时。

24
00:01:07,870 --> 00:01:12,120
例如，在我们在主 JS 中创建的路由器上

25
00:01:12,120 --> 00:01:16,860
在我们将它传递给我们的视图应用程序之前，在这个主路由器上，

26
00:01:16,860 --> 00:01:21,410
我们可以在每个之前调用，就像这样。

27
00:01:21,410 --> 00:01:23,510
在每个之前都是一个内置方法

28
00:01:23,510 --> 00:01:28,110
它需要一个函数作为参数。

29
00:01:28,110 --> 00:01:31,350
在每个函数之前作为参数。

30
00:01:31,350 --> 00:01:34,760
这个函数会被视图路由器调用

31
00:01:34,760 --> 00:01:38,520
每当我们从一个页面导航到另一个页面时。

32
00:01:38,520 --> 00:01:43,173
在每次导航操作之前，都会调用此函数。

33
00:01:44,470 --> 00:01:46,300
然后这个函数将接收

34
00:01:46,300 --> 00:01:48,920
来自路由器的免费参数

35
00:01:48,920 --> 00:01:52,830
to，这是我们要去的页面之外的路由对象，

36
00:01:52,830 --> 00:01:55,310
from，它是路由对象

37
00:01:55,310 --> 00:01:57,030
来自的页面

38
00:01:57,030 --> 00:02:01,270
接下来，这是我们必须调用的函数

39
00:02:01,270 --> 00:02:06,270
确认或取消此导航操作。

40
00:02:06,300 --> 00:02:10,330
因为这是我们可以在导航守卫中做的事情

41
00:02:10,330 --> 00:02:12,510
这就是为什么他们被称为守卫。

42
00:02:12,510 --> 00:02:16,590
如果我们对导航不满意，我们可以取消它。

43
00:02:16,590 --> 00:02:20,320
例如，如果我们想要拒绝导航

44
00:02:20,320 --> 00:02:22,743
因为用户未通过身份验证。

45
00:02:24,100 --> 00:02:26,620
现在，这怎么可能？

46
00:02:26,620 --> 00:02:30,770
首先，我要控制台日志，往返

47
00:02:30,770 --> 00:02:32,490
这样我们就可以看到我们正在到达那里。

48
00:02:32,490 --> 00:02:37,270
然后我会这样调用next，没有特殊设置。

49
00:02:37,270 --> 00:02:41,030
我还将控制台登录全局

50
00:02:41,030 --> 00:02:43,850
beforeEach 表明我们在这

51
00:02:43,850 --> 00:02:48,463
全局在每个钩子之前注册的整个路由器上。

52
00:02:49,930 --> 00:02:54,040
如果我保存了它，请重新加载并清除控制台

53
00:02:54,040 --> 00:02:59,040
我去用户那里，我们在控制台中看到每个之前的全局

54
00:02:59,050 --> 00:03:01,243
然后我们看到两个日志。

55
00:03:02,090 --> 00:03:05,170
现在，这些日志之一来自滚动行为。

56
00:03:05,170 --> 00:03:08,260
所以为了避免混淆，我会注释掉

57
00:03:08,260 --> 00:03:10,540
并避免我的 IDE 投诉

58
00:03:10,540 --> 00:03:13,500
关于未使用的往返，

59
00:03:13,500 --> 00:03:17,790
我将它替换为下划线和下划线两个，

60
00:03:17,790 --> 00:03:19,520
这基本上是一个指标

61
00:03:19,520 --> 00:03:21,830
我必须接受这些论点

62
00:03:21,830 --> 00:03:23,690
为了达到第三个，

63
00:03:23,690 --> 00:03:25,633
但后来我不打算使用它们。

64
00:03:26,560 --> 00:03:30,280
这是我的 IDE 和我的本地设置将接受的。

65
00:03:30,280 --> 00:03:33,810
所以这些只是参数名称，如下约定

66
00:03:33,810 --> 00:03:35,920
这表明我的设置

67
00:03:35,920 --> 00:03:39,023
需要使用这些参数，但我不打算使用它们。

68
00:03:40,130 --> 00:03:41,830
因此，如果我重新加载

69
00:03:41,830 --> 00:03:43,920
我们现在从用户切换到团队，

70
00:03:43,920 --> 00:03:46,690
我们看到全局 beforeEach 然后一个日志

71
00:03:46,690 --> 00:03:50,280
使用 to 和 from 路由对象。

72
00:03:50,280 --> 00:03:52,830
To，当然是有团队的路径

73
00:03:52,830 --> 00:03:54,990
因为我们要去团队

74
00:03:54,990 --> 00:03:57,420
并且从有用户。

75
00:03:57,420 --> 00:04:00,160
除此之外，我们没有看到什么特别的

76
00:04:00,160 --> 00:04:02,730
因为我只是这样打电话给下一个。

77
00:04:02,730 --> 00:04:04,660
如果你像这样调用下一个，

78
00:04:04,660 --> 00:04:08,003
你允许导航，你确认它。

79
00:04:09,290 --> 00:04:12,350
不过，您也可以将 false 传递给 next。

80
00:04:12,350 --> 00:04:15,660
这将取消导航。

81
00:04:15,660 --> 00:04:16,920
让我们试试看。

82
00:04:16,920 --> 00:04:20,390
如果我保存了它，当我重新加载时我们已经看到了，

83
00:04:20,390 --> 00:04:22,190
屏幕上什么都没有

84
00:04:22,190 --> 00:04:23,870
因为加载页面失败

85
00:04:23,870 --> 00:04:27,280
因为我取消了这个初始导航。

86
00:04:27,280 --> 00:04:30,950
如果我尝试访问用户，我们不会出错。

87
00:04:30,950 --> 00:04:34,970
我们在每个方法运行之前看到我们的全局，

88
00:04:34,970 --> 00:04:37,780
但同样，我们在屏幕上什么也看不到

89
00:04:37,780 --> 00:04:40,773
因为用 false，我们取消它。

90
00:04:42,200 --> 00:04:44,050
现在在这里，当然不是

91
00:04:44,050 --> 00:04:47,690
太有用了，因为我们在这里取消了所有导航，

92
00:04:47,690 --> 00:04:49,700
但后来在课程项目中，

93
00:04:49,700 --> 00:04:54,190
我们还将了解如何组合使用该功能

94
00:04:54,190 --> 00:04:58,330
检查用户是否通过身份验证，

95
00:04:58,330 --> 00:05:01,140
取消或允许这样做。

96
00:05:01,140 --> 00:05:05,530
我们这里还有第三种选择。

97
00:05:05,530 --> 00:05:09,770
除了不传递或不传递 false 之外，我们还可以传递

98
00:05:09,770 --> 00:05:13,430
此处的字符串或位置对象。

99
00:05:13,430 --> 00:05:17,460
带有您想要导航到的路线的字符串，

100
00:05:17,460 --> 00:05:18,800
那当然应该是

101
00:05:18,800 --> 00:05:21,810
我们在那里注册的路线之一

102
00:05:21,810 --> 00:05:25,490
或描述它的导航对象。

103
00:05:25,490 --> 00:05:27,400
例如，通过使用名称

104
00:05:27,400 --> 00:05:30,290
然后也许设置任何参数。

105
00:05:30,290 --> 00:05:34,460
像这里一样，我可以确保每个导航动作

106
00:05:34,460 --> 00:05:37,900
通往名为 team-members 的路线

107
00:05:37,900 --> 00:05:41,490
并且 teamId 设置为 t2，

108
00:05:41,490 --> 00:05:43,650
这当然完全没有意义，

109
00:05:43,650 --> 00:05:46,550
但我只想告诉你这是如何工作的。

110
00:05:46,550 --> 00:05:50,420
但是，请确保您不要在此处保存并重新加载

111
00:05:50,420 --> 00:05:52,440
因为你会创建一个无限循环。

112
00:05:52,440 --> 00:05:55,290
因为即使我们走这条路，

113
00:05:55,290 --> 00:05:59,940
因为我们在这里重定向，所以我们会再次重定向我们。

114
00:05:59,940 --> 00:06:04,940
所以在这里我们应该实际检查是否 to.path

115
00:06:05,060 --> 00:06:09,200
或 to.name 等于团队成员。

116
00:06:09,200 --> 00:06:12,250
因此，如果我们已经进入团队成员页面，

117
00:06:12,250 --> 00:06:14,330
在这种情况下，我想打电话给下一个

118
00:06:14,330 --> 00:06:17,240
只有别的，如果我们要去不同的页面，

119
00:06:17,240 --> 00:06:20,403
我想转发，我想重定向到团队成员。

120
00:06:21,910 --> 00:06:25,510
现在我们可以保存并重新加载

121
00:06:25,510 --> 00:06:29,200
我们现在总是出现在这个团队的 t2 页面上，

122
00:06:29,200 --> 00:06:31,470
如果我们想去别的地方，

123
00:06:31,470 --> 00:06:34,200
但是对于另一个也可以工作的团队成员。

124
00:06:34,200 --> 00:06:37,620
但是如果我尝试去用户那里，我最终还是会加入团队 t2

125
00:06:37,620 --> 00:06:40,053
因为每个钩子之前都有这个全局。

126
00:06:41,090 --> 00:06:42,400
现在，我再说一遍。

127
00:06:42,400 --> 00:06:43,850
这当然不合逻辑

128
00:06:43,850 --> 00:06:46,520
在这个演示项目中真的很有意义，

129
00:06:46,520 --> 00:06:49,030
但重要的是你明白

130
00:06:49,030 --> 00:06:51,900
这个导航守卫是如何工作的，

131
00:06:51,900 --> 00:06:55,163
下一个方法在那里做什么以及如何使用它。

132
00:06:56,170 --> 00:06:58,410
但是，我将对此发表评论

133
00:06:58,410 --> 00:07:01,870
然后像这样调用 next 来确认导航

134
00:07:01,870 --> 00:07:06,120
这样我们就不会将我们重定向到一种页面。

135
00:07:06,120 --> 00:07:09,250
相反，现在我们可以像以前那样导航，

136
00:07:09,250 --> 00:07:11,310
但你现在有了第一个想法

137
00:07:11,310 --> 00:07:14,240
导航守卫能够做什么。

138
00:07:14,240 --> 00:07:15,510
正如你想象的那样，

139
00:07:15,510 --> 00:07:17,340
如果您愿意，这可能很有用

140
00:07:17,340 --> 00:07:20,110
检查用户是否经过身份验证

141
00:07:20,110 --> 00:07:22,490
并阻止访问某个页面，

142
00:07:22,490 --> 00:07:25,070
如果你是，她没有经过身份验证。

143
00:07:25,070 --> 00:07:27,060
那将是一个典型的场景

144
00:07:27,060 --> 00:07:29,193
我们稍后会看到。