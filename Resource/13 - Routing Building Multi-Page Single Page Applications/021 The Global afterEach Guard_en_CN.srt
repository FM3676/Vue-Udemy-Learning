1
00:00:02,220 --> 00:00:03,460
现在，还有一个

2
00:00:03,460 --> 00:00:07,060
我们可以在路由器上添加全局守卫

3
00:00:07,060 --> 00:00:10,370
那就是 afterEach 守卫。

4
00:00:10,370 --> 00:00:12,690
这还要一个功能，

5
00:00:12,690 --> 00:00:14,090
当然，和往常一样，

6
00:00:14,090 --> 00:00:16,660
不管你如何定义函数，

7
00:00:16,660 --> 00:00:19,080
如果你这样做或作为箭头函数，

8
00:00:19,080 --> 00:00:21,980
这也得到了 to 和 from 论点，

9
00:00:21,980 --> 00:00:26,490
但不是下一个功能，因为 afterEach

10
00:00:26,490 --> 00:00:30,353
只有在导航被确认后才会运行。

11
00:00:31,460 --> 00:00:35,100
所以在这里，你不能再改变它了。

12
00:00:35,100 --> 00:00:37,110
你不能拒绝导航。

13
00:00:37,110 --> 00:00:39,420
您只能在 before 钩子中执行此操作，

14
00:00:39,420 --> 00:00:41,860
在前面的守卫中。

15
00:00:41,860 --> 00:00:46,830
afterEach 守卫可以很好地发送分析数据

16
00:00:46,830 --> 00:00:48,740
到您自己的服务器，例如，

17
00:00:48,740 --> 00:00:51,010
记录每个导航动作

18
00:00:51,010 --> 00:00:53,650
并在用户更改页面时记录。

19
00:00:53,650 --> 00:00:55,793
这是你可以在这里做的事情。

20
00:00:56,640 --> 00:00:59,790
您不使用它来控制用户看到的内容

21
00:00:59,790 --> 00:01:03,310
在屏幕上，因为正如我刚才所说，现在为时已晚。

22
00:01:03,310 --> 00:01:06,720
您只需 console.log 往返

23
00:01:06,720 --> 00:01:10,920
或将数据发送到您的服务器，正如我所说，仅此而已。

24
00:01:10,920 --> 00:01:14,983
所以在这里，我将console.log Global afterEach。

25
00:01:15,820 --> 00:01:18,550
如果我这样做并保存它，

26
00:01:18,550 --> 00:01:21,330
我们看看我是否加载它，Global afterEach

27
00:01:21,330 --> 00:01:25,103
是我们在每个导航操作中看到的最后一件事。