1
00:00:02,240 --> 00:00:04,560
所以现在我们了解了嵌套路由。

2
00:00:04,560 --> 00:00:08,970
现在想象一个更大的视图应用程序，其中有几十个，

3
00:00:08,970 --> 00:00:11,660
甚至可能有数百条不同的路线，

4
00:00:11,660 --> 00:00:14,810
一些路线深深嵌套在我们的路线中。

5
00:00:14,810 --> 00:00:17,460
你也可以有多层嵌套，

6
00:00:17,460 --> 00:00:20,900
您也可以在这条嵌套路线上生孩子。

7
00:00:20,900 --> 00:00:22,460
所以想象一个应用程序

8
00:00:22,460 --> 00:00:25,650
你有很多这样的嵌套路线。

9
00:00:25,650 --> 00:00:27,600
如果你有这样的应用程序，

10
00:00:27,600 --> 00:00:30,583
构建链接，如经常这样做，

11
00:00:32,030 --> 00:00:34,730
像这样，很快就会变得笨重，

12
00:00:34,730 --> 00:00:37,890
您总是必须在此处添加完整路径，

13
00:00:37,890 --> 00:00:39,040
并像这样构建它。

14
00:00:39,040 --> 00:00:41,100
你必须建立这么长的字符串，

15
00:00:41,100 --> 00:00:43,963
它描述了您要导航到的路径。

16
00:00:45,140 --> 00:00:48,090
现在，因为这会变得很麻烦，

17
00:00:48,090 --> 00:00:52,460
视图路由器提供了两个非常有用的功能，

18
00:00:52,460 --> 00:00:55,000
这使得建立这样的链接，

19
00:00:55,000 --> 00:00:57,983
我们将其传递给路由器链接更方便。

20
00:00:59,150 --> 00:01:01,420
我们拥有的第一个有用的功能，

21
00:01:01,420 --> 00:01:05,160
事实是路由器链接上的两个道具，

22
00:01:05,160 --> 00:01:08,420
不只是采取这样的字符串链接。

23
00:01:08,420 --> 00:01:11,560
它确实需要，但不仅仅是。

24
00:01:11,560 --> 00:01:14,900
除了传递这样一个包含路径的字符串之外，

25
00:01:14,900 --> 00:01:19,340
您还可以使用一个对象作为两个的值。

26
00:01:19,340 --> 00:01:20,360
为此，您当然需要

27
00:01:20,360 --> 00:01:22,783
用冒号动态绑定两个。

28
00:01:23,700 --> 00:01:28,640
然后这个对象可能有各种选择，

29
00:01:28,640 --> 00:01:31,820
这使您可以描述要加载的路线。

30
00:01:31,820 --> 00:01:36,130
在这个对象中，你可以设置一个路径属性，

31
00:01:36,130 --> 00:01:37,700
然后需要一个字符串，

32
00:01:37,700 --> 00:01:41,510
可以是被削减的团队加上这个ID，

33
00:01:41,510 --> 00:01:44,150
所以你之前作为字符串返回的内容。

34
00:01:44,150 --> 00:01:46,680
现在，仅仅这样做，我们当然不会获得太多。

35
00:01:46,680 --> 00:01:48,750
我们基本上做我们以前做的，

36
00:01:48,750 --> 00:01:51,220
但现在在一个对象内部。

37
00:01:51,220 --> 00:01:52,810
这变得更有用，

38
00:01:52,810 --> 00:01:55,170
如果我们将它与另一个不错的功能结合起来，

39
00:01:55,170 --> 00:01:59,490
视图路由器提供，这将被命名为路由。

40
00:01:59,490 --> 00:02:02,503
我们可以为我们拥有的每条路线指定一个名称，

41
00:02:03,450 --> 00:02:07,770
只需将名称属性添加到路由配置即可。

42
00:02:07,770 --> 00:02:10,443
例如，我们可以将路线命名为团队。

43
00:02:11,290 --> 00:02:14,713
我们也可以在这里命名这个嵌套路由，

44
00:02:15,790 --> 00:02:17,960
团队冲刺成员，也许。

45
00:02:17,960 --> 00:02:19,520
名字完全由你决定，

46
00:02:19,520 --> 00:02:21,143
它们应该是字符串。

47
00:02:22,390 --> 00:02:24,180
所以现在我分配了两个名字，

48
00:02:24,180 --> 00:02:27,340
当然，您可以为您想要的任何路线指定名称。

49
00:02:27,340 --> 00:02:30,653
现在我们可以利用这个名字，团队成员。

50
00:02:31,750 --> 00:02:34,790
回到团队项目组件中，

51
00:02:34,790 --> 00:02:38,500
现在不是设置我们可以做的路径属性，

52
00:02:38,500 --> 00:02:42,660
我们可以在这个路由位置对象上的 name 属性，

53
00:02:42,660 --> 00:02:44,560
我们传给两个。

54
00:02:44,560 --> 00:02:47,620
例如，在这里我们可以使用团队冲刺成员，

55
00:02:47,620 --> 00:02:50,700
明确这个路由器链接，

56
00:02:50,700 --> 00:02:53,900
应该加载这个嵌套路由。

57
00:02:53,900 --> 00:02:57,030
当然，这条路线有一个动态段，

58
00:02:57,030 --> 00:02:58,930
所以我们也应该设置这个。

59
00:02:58,930 --> 00:03:02,580
我们通过向这个对象添加第二个属性来做到这一点，

60
00:03:02,580 --> 00:03:05,280
它描述了我们想去的目的地。

61
00:03:05,280 --> 00:03:07,710
这就是 params 属性。

62
00:03:07,710 --> 00:03:09,340
参数接受一个对象，

63
00:03:09,340 --> 00:03:12,820
您现在可以将您的参数设置为键值对。

64
00:03:12,820 --> 00:03:14,310
当然，我的意思是参数，

65
00:03:14,310 --> 00:03:17,630
这是具有该名称的路线所期望的。

66
00:03:17,630 --> 00:03:18,630
所以在这种情况下，

67
00:03:18,630 --> 00:03:21,730
该团队成员路由一次团队 ID 参数，

68
00:03:21,730 --> 00:03:25,280
因为这是我们在这里选择的名称作为动态细分，

69
00:03:25,280 --> 00:03:29,130
因此在这里，我们可以在这个嵌套对象中添加团队 ID，

70
00:03:29,130​​ --> 00:03:30,630
我们提供给参数，

71
00:03:30,630 --> 00:03:33,303
然后将我们的值设置为这个ID。

72
00:03:34,890 --> 00:03:38,230
现在可以说，这比以前多了一点代码，

73
00:03:38,230 --> 00:03:41,900
但我想说的是，它实际上有两个很大的优势。

74
00:03:41,900 --> 00:03:44,240
它非常可读和可维护，

75
00:03:44,240 --> 00:03:47,200
它还有一个额外的巨大优势。

76
00:03:47,200 --> 00:03:49,310
如果你应该决定

77
00:03:49,310 --> 00:03:51,650
你想走一条不同的路，

78
00:03:51,650 --> 00:03:54,573
让我们说团队而不是团队，

79
00:03:55,620 --> 00:04:00,620
那么你不需要去这个团队项目组件，

80
00:04:00,650 --> 00:04:04,200
并在您使用它的任何地方更新路径，

81
00:04:04,200 --> 00:04:06,040
相反，名称没有改变。

82
00:04:06,040 --> 00:04:08,670
所以你不需要在这里更新任何东西，

83
00:04:08,670 --> 00:04:11,670
你仍然可以方便地改变路径，

84
00:04:11,670 --> 00:04:13,490
你想要的频率。

85
00:04:13,490 --> 00:04:17,839
这就是为什么按名称而不是按路径导航的原因，

86
00:04:17,839 --> 00:04:21,360
可能是一个有用的模式，尤其是当然，

87
00:04:21,360 --> 00:04:24,260
在使用路由的更大应用程序中，

88
00:04:24,260 --> 00:04:26,720
在许多不同的组件中。

89
00:04:26,720 --> 00:04:29,430
然后，您不必更新所有这些组件，

90
00:04:29,430 --> 00:04:31,733
每当您决定更改路径时。

91
00:04:33,210 --> 00:04:35,670
这就是为什么要传递这样一个对象

92
00:04:35,670 --> 00:04:38,880
一个字符串到两个，可能很有用。

93
00:04:38,880 --> 00:04:41,540
顺便说一句，您可以提供相同的对象

94
00:04:41,540 --> 00:04:44,080
到这个路由器推送，

95
00:04:44,080 --> 00:04:47,030
如果您应该以编程方式导航。

96
00:04:47,030 --> 00:04:51,460
您可以向此推送方法提供相同类型的对象，

97
00:04:51,460 --> 00:04:52,893
但这只是一个旁注。

98
00:04:54,390 --> 00:04:58,230
如果我这样做并保存所有内容并重新加载，

99
00:04:58,230 --> 00:05:01,400
我们的链接在这里，因此仍然可以正常工作。

100
00:05:01,400 --> 00:05:04,890
我现在可以加载不同的团队成员，

101
00:05:04,890 --> 00:05:07,380
绕过这个对象到两个。

102
00:05:07,380 --> 00:05:10,200
而视图路由器会分析这个对象，

103
00:05:10,200 --> 00:05:12,300
将其与您设置的路线进行比较，

104
00:05:12,300 --> 00:05:14,700
并创建正确的锚技术，

105
00:05:14,700 --> 00:05:16,090
使用正确的链接

106
00:05:16,090 --> 00:05:19,593
到和要加载的路线，因此组件。