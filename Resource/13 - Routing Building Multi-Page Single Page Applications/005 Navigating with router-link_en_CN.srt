1
00:00:02,389 --> 00:00:04,320
（旁白）所以现在我们的路线注册了，

2
00:00:04,320 --> 00:00:06,470
让我们确保我们也可以到达这些路线

3
00:00:06,470 --> 00:00:08,960
从我们的应用程序内部。

4
00:00:08,960 --> 00:00:12,610
我们得到了这个navigation.vue文件

5
00:00:12,610 --> 00:00:14,550
我有两个按钮，

6
00:00:14,550 --> 00:00:16,420
我在哪里发出自定义事件

7
00:00:16,420 --> 00:00:19,730
我之前在应用程序视图中听到的。

8
00:00:19,730 --> 00:00:21,120
我还在听。

9
00:00:21,120 --> 00:00:24,400
但实际上，现在我们不会像这样导航，

10
00:00:24,400 --> 00:00:27,570
我们现在不需要手动管理

11
00:00:27,570 --> 00:00:29,800
应该加载哪个页面，

12
00:00:29,800 --> 00:00:33,830
我们可以摆脱应用视图中的活动页面数据属性，

13
00:00:33,830 --> 00:00:36,870
我们可以在这里摆脱这个事件监听器

14
00:00:36,870 --> 00:00:40,510
然后导航，因此我们也可以摆脱

15
00:00:40,510 --> 00:00:44,410
当然在这里设置活动页面的方法，

16
00:00:44,410 --> 00:00:47,403
因此，我们可以摆脱整个方法块。

17
00:00:48,410 --> 00:00:52,520
在导航中我们不再发出设置页面

18
00:00:54,400 --> 00:00:58,420
因此我们不再需要设置活动页面方法

19
00:00:58,420 --> 00:01:00,970
因此我们可以在这里摆脱整个方法。

20
00:01:00,970 --> 00:01:03,254
因此实际上，我们可以摆脱

21
00:01:03,254 --> 00:01:04,099
整个脚本块的自

22
00:01:04,099 --> 00:01:07,750
无论如何，我们在那里没有特定的组件配置

23
00:01:09,260 --> 00:01:11,710
相反，我们现在将以不同的方式导航

24
00:01:11,710 --> 00:01:13,700
并且不再使用按钮，

25
00:01:13,700 --> 00:01:16,846
相反，我们将使用另一个内置组件

26
00:01:16,846 --> 00:01:19,400
与视图路由器。

27
00:01:19,400 --> 00:01:23,710
那就是路由器链接组件。

28
00:01:23,710 --> 00:01:27,720
有点像内置的锚标签，

29
00:01:27,720 --> 00:01:29,920
HTML 元素，你可以说，

30
00:01:29,920 --> 00:01:32,330
但它是一个特殊的锚标签，

31
00:01:32,330 --> 00:01:33,680
一个特殊的锚标签，

32
00:01:33,680 --> 00:01:37,010
实际上不会加载不同的页面

33
00:01:37,010 --> 00:01:38,005
并重新加载整个应用程序，

34
00:01:38,005 --> 00:01:40,630
并因此失去当前状态。

35
00:01:40,630 --> 00:01:44,280
但取而代之的是浏览器默认的特殊锚标记

36
00:01:44,280 --> 00:01:46,720
防止加载不同的页面。

37
00:01:46,720 --> 00:01:49,300
相反，视图路由器接管，

38
00:01:49,300 --> 00:01:51,717
分析用户点击的链接

39
00:01:51,717 --> 00:01:54,410
并下载适当的组件

40
00:01:54,410 --> 00:01:55,443
并更新 URL。

41
00:01:56,400 --> 00:01:59,660
类似的事情由路由器链接处理。

42
00:01:59,660 --> 00:02:02,440
你仍然可以在它们之间传递你的文本，

43
00:02:02,440 --> 00:02:05,305
您实际上可以在其中传递任何 HTML 元素，

44
00:02:05,305 --> 00:02:08,009
你可能需要，因为

45
00:02:08,009 --> 00:02:10,850
路由器链路内部使用插槽。

46
00:02:10,850 --> 00:02:13,240
但在这里我只想要一些文字。

47
00:02:13,240 --> 00:02:16,430
现在当然，我们需要配置路由器链接。

48
00:02:16,430 --> 00:02:20,460
而这里最重要的配置就是to prop，

49
00:02:20,460 --> 00:02:22,010
它所期望的。

50
00:02:22,010 --> 00:02:25,490
to 道具采用各种不同的值。

51
00:02:25,490 --> 00:02:28,950
使用它的简单方法是为其提供一个字符串

52
00:02:28,950 --> 00:02:31,110
它包含您想要去的路径。

53
00:02:31,110 --> 00:02:34,040
所以在这种情况下，削减团队。

54
00:02:34,040 --> 00:02:36,200
所以当然，那应该是其中一条路线

55
00:02:36,200 --> 00:02:39,423
您在路线配置中提供支持。

56
00:02:41,250 --> 00:02:43,080
这已经是全部了

57
00:02:43,080 --> 00:02:45,470
我们也可以替换第二个按钮

58
00:02:45,470 --> 00:02:47,980
有了这样的路由器链接。

59
00:02:47,980 --> 00:02:51,260
在这里，我想去我的用户，

60
00:02:51,260 --> 00:02:53,863
因此在用户处有两个探测点。

61
00:02:55,460 --> 00:02:57,830
现在我们将在这里遇到一些样式问题

62
00:02:57,830 --> 00:02:59,530
因为之前我使用了一个按钮

63
00:02:59,530 --> 00:03:01,337
现在它是一个链接，因此我将替换

64
00:03:01,337 --> 00:03:05,760
按钮 CSS 选择器下方带有锚标记，

65
00:03:05,760 --> 00:03:09,170
因为引擎盖下的路由器链接将呈现

66
00:03:09,170 --> 00:03:12,683
一个锚标签，所以我们可以在这里设置一个锚标签的样式，

67
00:03:14,360 --> 00:03:18,190
我会删除这个字体 CSS 属性。

68
00:03:18,190 --> 00:03:19,840
剩下的留着，

69
00:03:19,840 --> 00:03:22,990
并替换按钮悬停和按钮活动

70
00:03:22,990 --> 00:03:26,610
带有锚标记，还添加一个新的 CSS 属性

71
00:03:26,610 --> 00:03:31,213
到这里的锚标记规则并将文本装饰设置为无。

72
00:03:34,440 --> 00:03:38,680
随着样式的更新，如果我们保存并重新加载，

73
00:03:38,680 --> 00:03:41,210
我们得到和以前一样的按钮，

74
00:03:41,210 --> 00:03:43,280
但现在这些实际上是链接

75
00:03:43,280 --> 00:03:44,800
如果我们点击它们，

76
00:03:44,800 --> 00:03:48,000
我们在这些不同的路线之间切换。

77
00:03:48,000 --> 00:03:50,040
如果我们检查这些元素，

78
00:03:50,040 --> 00:03:53,060
我们看到了我刚才在理论上解释的内容。

79
00:03:53,060 --> 00:03:54,980
我们这里有锚税，

80
00:03:54,980 --> 00:03:57,290
它具有 href 属性，但

81
00:03:57,290 --> 00:04:01,370
这个路由器链接组件实际上确保了，

82
00:04:01,370 --> 00:04:03,430
浏览器默认被阻止，

83
00:04:03,430 --> 00:04:05,540
并且浏览器并没有真正尝试

84
00:04:05,540 --> 00:04:08,320
加载不同的 HTML 文件。

85
00:04:08,320 --> 00:04:10,980
但是，路由器随后会分析

86
00:04:10,980 --> 00:04:13,150
ref 属性中的值

87
00:04:13,150 --> 00:04:15,220
并检查您的路由配置

88
00:04:15,220 --> 00:04:17,579
找到合适的视图组件

89
00:04:17,579 --> 00:04:18,680
应该加载。

90
00:04:19,529 --> 00:04:23,280
另外，你看到这里添加了一些 CSS 类，

91
00:04:23,280 --> 00:04:26,940
路由器链接活动和路由器链接完全活动。

92
00:04:26,940 --> 00:04:29,830
我们目前只在团队中使用此功能。

93
00:04:29,830 --> 00:04:31,219
如果我检查上面的列表项，

94
00:04:31,219 --> 00:04:33,770
我们那里没有课程。

95
00:04:33,770 --> 00:04:37,320
这些类由视图路由器自动添加

96
00:04:37,320 --> 00:04:39,710
在当前选择的链接上。

97
00:04:39,710 --> 00:04:42,010
因此，对于当前处于活动状态的路线，

98
00:04:42,010 --> 00:04:45,070
这样您就可以根据实际设置这些链接的样式

99
00:04:45,070 --> 00:04:48,200
关于选择给用户一个反馈

100
00:04:48,200 --> 00:04:51,380
关于他或她目前正在走的路线。

101
00:04:51,380 --> 00:04:52,610
现在，这就是我们要做的事情

102
00:04:52,610 --> 00:04:53,803
接下来探索。