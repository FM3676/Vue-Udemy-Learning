1
00:00:02,070 --> 00:00:05,350
如前所述，我想展示这一段

2
00:00:05,350 --> 00:00:07,270
如果我们没有目标，

3
00:00:07,270 --> 00:00:10,763
所以如果这里的这个目标数组是空的。

4
00:00:11,720 --> 00:00:15,580
如果我们确实有目标，我想展示这个无序列表。

5
00:00:15,580 --> 00:00:19,530
因此，如果我们在这个目标数组中至少有一项。

6
00:00:19,530 --> 00:00:21,860
这就是我的想法。

7
00:00:21,860 --> 00:00:24,270
现在我们该如何实现呢？

8
00:00:24,270 --> 00:00:26,460
首先，你已经注意到

9
00:00:26,460 --> 00:00:29,170
我不再使用这个分屏。

10
00:00:29,170 --> 00:00:33,340
我不再让 JavaScript 和 HTML 相互叠加，

11
00:00:33,340 --> 00:00:38,140
因为我认为我们已经习惯了 Vue 如何处理 HTML，

12
00:00:38,140 --> 00:00:41,000
我现在想要更多可用空间

13
00:00:41,000 --> 00:00:43,520
用于 HTML 和 JavaScript。

14
00:00:43,520 --> 00:00:46,060
因此，我将在这些文件之间切换。

15
00:00:46,060 --> 00:00:47,840
但这只是一个旁注。

16
00:00:47,840 --> 00:00:50,450
我们现在如何才能确保这一段

17
00:00:50,450 --> 00:00:53,200
只有在我们没有目标的情况下才会出现？

18
00:00:53,200 --> 00:00:55,550
所以如果目标是一个空数组。

19
00:00:55,550 --> 00:00:59,080
嗯，Vue 为我们提供了一个指令，

20
00:00:59,080 --> 00:01:02,080
我们可以在元素上添加的指令

21
00:01:02,080 --> 00:01:04,250
应该有条件地呈现。

22
00:01:04,250 --> 00:01:07,250
这就是 v-if 指令。

23
00:01:07,250 --> 00:01:12,250
所以它基本上就像 JavaScript 代码中的 if 语句。

24
00:01:12,800 --> 00:01:16,860
你检查一个特定的条件，然后你有代码

25
00:01:16,860 --> 00:01:19,253
如果满足该条件，则执行。

26
00:01:21,330 --> 00:01:25,280
我们可以用 v-if 在 HTML 中做同样的事情。

27
00:01:25,280 --> 00:01:29,580
我们在这里的双引号之间传递一个特定的条件，

28
00:01:29,580 --> 00:01:32,170
和使用 Vue 指令时一样

29
00:01:32,170 --> 00:01:33,900
在双引号之间

30
00:01:33,900 --> 00:01:37,010
我们可以添加一个 JavaScript 表达式，

31
00:01:37,010 --> 00:01:39,300
我们也可以参考我们的数据，

32
00:01:39,300 --> 00:01:42,540
我们的方法，我们的计算属性等等。

33
00:01:42,540 --> 00:01:47,530
在这里我们可以检查goals.length = 0

34
00:01:49,420 --> 00:01:54,420
目标就是我之前定义的这个数据属性。

35
00:01:55,010 --> 00:01:58,400
它是一个数组，因此它有一个长度属性，

36
00:01:58,400 --> 00:02:02,760
如果长度为零，这意味着我们没有目标，

37
00:02:02,760 --> 00:02:06,370
然后满足这个条件，这告诉 Vue。

38
00:02:06,370 --> 00:02:10,009
然后这一段及其所有内容，

39
00:02:10,009 --> 00:02:13,590
包括我们可能拥有的任何可能的子元素，

40
00:02:13,590 --> 00:02:14,563
应该渲染。

41
00:02:15,800 --> 00:02:17,860
所以当我保存并重新加载时，

42
00:02:17,860 --> 00:02:21,100
什么都没有改变，因为最初的目标是空的。

43
00:02:21,100 --> 00:02:24,220
但是如果我去 AppJS 并在这里添加一个目标，

44
00:02:24,220 --> 00:02:28,030
比如说完成课程，一个简单的字符串。

45
00:02:28,030 --> 00:02:29,890
如果我这样做并重新加载，

46
00:02:29,890 --> 00:02:32,670
现在您会看到该段落已消失。

47
00:02:32,670 --> 00:02:35,740
它不仅在屏幕上视觉上消失了，

48
00:02:35,740 --> 00:02:39,210
如果我们检查这个，我们会在开发者工具中看到，

49
00:02:39,210 --> 00:02:40,880
它真的不存在。

50
00:02:40,880 --> 00:02:44,570
我们有另一个列表，但我们没有段落。

51
00:02:44,570 --> 00:02:46,910
相反，我们有这个占位符，

52
00:02:46,910 --> 00:02:50,060
Vue 在内部使用哪个来找出

53
00:02:50,060 --> 00:02:52,130
在哪里添加段落

54
00:02:52,130 --> 00:02:54,163
如果我们的目标再次为空。

55
00:02:55,140 --> 00:02:58,380
但这就是我们通过 v-if 得到的。

56
00:02:58,380 --> 00:03:02,580
现在在一个静态应用程序中，这不是真正的动态

57
00:03:02,580 --> 00:03:05,260
因为我们现在无法改变目标，

58
00:03:05,260 --> 00:03:08,083
这不是太令人兴奋，但它是一个开始。

59
00:03:09,200 --> 00:03:11,710
现在让我们让它更令人兴奋一些。

60
00:03:11,710 --> 00:03:13,970
假设当这个按钮被按下时，

61
00:03:13,970 --> 00:03:16,810
我们想得到这个输入中输入的值

62
00:03:16,810 --> 00:03:18,510
并以此为目标

63
00:03:18,510 --> 00:03:21,300
然后将其添加到此目标数组中。

64
00:03:21,300 --> 00:03:23,490
为了实现它，我们可以添加一个方法

65
00:03:23,490 --> 00:03:25,908
在这里的方法选项中，

66
00:03:25,908 --> 00:03:28,770
addGoal 听起来很合适。

67
00:03:28,770 --> 00:03:33,770
在我的数据中bject 在这里，除了存储目标，

68
00:03:33,770 --> 00:03:37,050
我还想存储用户当前输入的任何内容

69
00:03:37,050 --> 00:03:38,620
在他的输入中。

70
00:03:38,620 --> 00:03:41,050
所以在这里我有我输入的GoalValue，

71
00:03:41,050 --> 00:03:42,670
这是一个空字符串。

72
00:03:42,670 --> 00:03:45,640
当然，您可以随意命名该属性。

73
00:03:45,640 --> 00:03:49,950
在 addGoal 方法中，我现在可以达到目标

74
00:03:49,950 --> 00:03:52,660
并使用可用的 push 方法

75
00:03:52,660 --> 00:03:55,900
在每个 JavaScript 数组上，因此当然，

76
00:03:55,900 --> 00:03:57,610
也在那个阵列上，

77
00:03:57,610 --> 00:04:00,200
推动这个进入的目标值，

78
00:04:00,200 --> 00:04:02,120
所以无论用户在这里输入什么，

79
00:04:02,120 --> 00:04:04,163
我的目标，作为一个新的目标。

80
00:04:05,860 --> 00:04:10,310
现在在 index HTML 中，我们可以绑定这两个东西。

81
00:04:10,310 --> 00:04:13,437
我们可以将输入与 v-model 绑定

82
00:04:13,437 --> 00:04:17,800
到这个输入的目标值数据属性，

83
00:04:17,800 --> 00:04:19,350
像这样，

84
00:04:19,350 --> 00:04:22,170
在带有@click 的按钮上，

85
00:04:22,170 --> 00:04:25,540
我们可以指出我们添加的这个方法，

86
00:04:25,540 --> 00:04:27,960
所以在 addGoal 方法中，

87
00:04:27,960 --> 00:04:30,650
并指向它以便执行此方法

88
00:04:30,650 --> 00:04:32,700
单击按钮时。

89
00:04:32,700 --> 00:04:35,983
现在我们确实有办法改变我们的目标。

90
00:04:36,870 --> 00:04:38,730
这意味着我们现在也可以摆脱

91
00:04:38,730 --> 00:04:40,590
这个硬编码的目标在这里

92
00:04:40,590 --> 00:04:43,150
所以我们再次从一个空数组开始。

93
00:04:43,150 --> 00:04:45,660
如果我们现在保存所有内容并重新加载，

94
00:04:45,660 --> 00:04:48,730
我们看到我们从这一段开始，

95
00:04:48,730 --> 00:04:53,080
但现在如果我添加一个目标，比如完成课程

96
00:04:53,080 --> 00:04:56,910
并单击按钮，您会看到该段落消失了。

97
00:04:56,910 --> 00:04:58,140
我们还没有看到目标

98
00:04:58,140 --> 00:05:00,920
因为我们还没有学会如何输出它，

99
00:05:00,920 --> 00:05:04,950
但是我们看到使用 v-if 的条件渲染是有效的。

100
00:05:04,950 --> 00:05:07,593
现在让我们更深入地研究一下 v-if。