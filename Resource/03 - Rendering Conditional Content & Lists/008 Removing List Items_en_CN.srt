1
00:00:02,080 --> 00:00:04,150
那么，我们怎样才能删除项目，

2
00:00:04,150 --> 00:00:05,573
从这里的列表中？

3
00:00:06,710 --> 00:00:08,440
好吧，我们有我们的清单项目，

4
00:00:08,440 --> 00:00:10,730
对于每个新目标都会重复此操作。

5
00:00:10,730 --> 00:00:13,840
它仍然是我们的常规 HTML 元素，

6
00:00:13,840 --> 00:00:16,020
即使我们之前使用过它。

7
00:00:16,020 --> 00:00:18,890
这意味着我们仍然可以向它添加事件侦听器。

8
00:00:18,890 --> 00:00:22,530
例如这里的点击监听器，

9
00:00:22,530 --> 00:00:25,440
做出反应，点击列表项。

10
00:00:25,440 --> 00:00:27,850
现在让我们说当一个列表项被点击时，

11
00:00:27,850 --> 00:00:31,513
我们想从 Goal 的数组中删除对 Goal 的尊重。

12
00:00:32,600 --> 00:00:35,630
现在，当然，在我们的 JavaScript 代码中，

13
00:00:35,630 --> 00:00:37,507
我们可以添加一个方法，

14
00:00:37,507 --> 00:00:40,653
removeGoal，听起来像是一个有意义的名字。

15
00:00:41,840 --> 00:00:45,090
现在，我们肯定需要一些标识符到目标，

16
00:00:45,090 --> 00:00:46,520
我们想删除。

17
00:00:46,520 --> 00:00:50,240
我想说，反正我们有索引，

18
00:00:50,240 --> 00:00:52,380
我们不能只使用它。

19
00:00:52,380 --> 00:00:54,940
所以在这个 removeGoal 方法中，

20
00:00:54,940 --> 00:00:58,510
我们可以期望将索引作为参数，

21
00:00:58,510 --> 00:01:02,070
然后，使用拼接方法，

22
00:01:02,070 --> 00:01:04,890
这也是 JavaScript 中的内置方法，

23
00:01:04,890 --> 00:01:08,770
在这个索引处拼接这个元素，

24
00:01:08,770 --> 00:01:10,710
如果你还不知道这个方法，

25
00:01:10,710 --> 00:01:12,550
这种方法像这样使用，

26
00:01:12,550 --> 00:01:16,420
我们会在这个索引处找到元素，然后简单地删除它

27
00:01:16,420 --> 00:01:17,623
来自目标数组。

28
00:01:18,660 --> 00:01:20,300
所以这个 removedGoal 方法，

29
00:01:20,300 --> 00:01:23,180
应删除此索引处的目标。

30
00:01:23,180 --> 00:01:27,460
现在我们只需要确保我们传入该索引。

31
00:01:27,460 --> 00:01:29,540
我们如何做到这一点？

32
00:01:29,540 --> 00:01:32,210
好吧，让我们回到 HTML，

33
00:01:32,210 --> 00:01:35,850
在这个点击监听器上，在这个列表项上，

34
00:01:35,850 --> 00:01:38,310
我们想指向removeGoal，

35
00:01:38,310 --> 00:01:40,700
但我们也想确保索引

36
00:01:40,700 --> 00:01:43,350
被转发到该方法。

37
00:01:43,350 --> 00:01:47,490
因此，我们可以通过添加括号来显式调用它，

38
00:01:47,490 --> 00:01:49,440
我们在这里得到了索引，

39
00:01:49,440 --> 00:01:51,990
以及目标和索引

40
00:01:51,990 --> 00:01:55,060
只能在这个元素内部使用，

41
00:01:55,060 --> 00:01:57,240
上面有 v-for 。

42
00:01:57,240 --> 00:01:59,990
所以这意味着在开始和结束标签之间，

43
00:01:59,990 --> 00:02:03,120
在任何子元素中，而且，

44
00:02:03,120 --> 00:02:07,260
这就是在元素本身上对我们有帮助的地方。

45
00:02:07,260 --> 00:02:10,650
所以，我们可以简单地转发索引，

46
00:02:10,650 --> 00:02:14,120
这是我们用 v-for 检索的索引，

47
00:02:14,120 --> 00:02:15,480
删除目标。

48
00:02:16,960 --> 00:02:20,830
那将是索引零一等等，

49
00:02:20,830 --> 00:02:22,883
离开目标，点击它。

50
00:02:23,800 --> 00:02:26,463
因此，如果我重新格式化并保存并重新加载，

51
00:02:27,360 --> 00:02:29,070
我们可以添加完成的课程，

52
00:02:29,070 --> 00:02:29,980
和

53
00:02:29,980 --> 00:02:31,660
维大师，

54
00:02:31,660 --> 00:02:34,400
并了解有关 Vue 的所有信息。

55
00:02:34,400 --> 00:02:36,600
如果我现在点击 Master Vue，

56
00:02:36,600 --> 00:02:40,003
你看它消失了，我们只有两个元素。

57
00:02:41,600 --> 00:02:44,780
我们可以对所有元素做到这一点，直到它们全部消失。

58
00:02:44,780 --> 00:02:49,170
然后，多亏了 v-if，我们又看到了我们的段落。

59
00:02:49,170 --> 00:02:51,290
这就是我们可以删除项目的方式，

60
00:02:51,290 --> 00:02:53,210
通过利用该指数，

61
00:02:53,210 --> 00:02:55,660
并通过点击监听器连接它，

62
00:02:55,660 --> 00:02:58,050
到一个更新数组的方法，

63
00:02:58,050 --> 00:03:03,050
因为我们告诉 Vue 用 v-for 输出这个数组，

64
00:03:03,500 --> 00:03:05,910
它具有内置的反应性，

65
00:03:05,910 --> 00:03:09,070
现在你肯定可以告诉 Vue 的全部内容，

66
00:03:09,070 --> 00:03:13,680
那，自动转到页面并更新列表，

67
00:03:13,680 --> 00:03:16,700
每当数组更改时，它都会添加更多项目

68
00:03:16,700 --> 00:03:19,930
如果我们向数组中添加更多项目，它会更新列表

69
00:03:19,930 --> 00:03:24,090
删除 Dom 元素，如果我们从数组中删除了项目。

70
00:03:24,090 --> 00:03:26,450
这就是 Vue 在幕后所做的一切。

71
00:03:26,450 --> 00:03:29,020
再说一次，我真的说了很多，我知道，

72
00:03:29,020 --> 00:03:31,260
但这就是 Vue 很棒的原因。

73
00:03:31,260 --> 00:03:35,340
这是我们在 JavaScript 中不必做的很多工作。

74
00:03:35,340 --> 00:03:38,450
我的意思是，看看我们的 JavaScript 代码是多么简单，

75
00:03:38,450 --> 00:03:40,710
它几乎没有任何代码。

76
00:03:40,710 --> 00:03:43,690
然而我们得到了一个完整的动态列表，

77
00:03:43,690 --> 00:03:45,460
我们可以添加项目，

78
00:03:45,460 --> 00:03:47,810
以及我们可以从中删除物品的地方。

79
00:03:47,810 --> 00:03:50,510
只用普通的 JavaScript 来写，

80
00:03:50,510 --> 00:03:53,400
以同样有效的方式，无需重新渲染

81
00:03:53,400 --> 00:03:55,020
整个列表一直，

82
00:03:55,020 --> 00:03:57,393
那肯定会更困难一些。