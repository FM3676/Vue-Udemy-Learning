1
00:00:02,210 --> 00:00:04,210
所以我们了解了v-if，

2
00:00:04,210 --> 00:00:07,230
这非常适合有条件地显示内容，

3
00:00:07,230 --> 00:00:10,930
但我们这里都有一系列内容，

4
00:00:10,930 --> 00:00:12,970
可能我们有多个目标，

5
00:00:12,970 --> 00:00:16,930
如果我们能输出那些实际的目标就好了

6
00:00:16,930 --> 00:00:18,970
我们存储在我们的视图应用程序中，

7
00:00:18,970 --> 00:00:22,163
而不是这个虚拟的目标。

8
00:00:23,090 --> 00:00:26,640
好吧，当然 view 也涵盖了这一点。

9
00:00:26,640 --> 00:00:30,100
我们现在需要输出一个内容列表，

10
00:00:30,100 --> 00:00:33,650
这也是你在应用程序中通常必须做的事情，

11
00:00:33,650 --> 00:00:36,960
考虑产品列表，用户的待办事项，

12
00:00:36,960 --> 00:00:40,020
列表在网络应用程序中无处不在。

13
00:00:40,020 --> 00:00:42,820
因此，当然，视图给了我们一个工具

14
00:00:42,820 --> 00:00:44,720
用于处理数据列表

15
00:00:44,720 --> 00:00:47,240
并输出重复的内容。

16
00:00:47,240 --> 00:00:50,520
在这里我们要重复这个列表项

17
00:00:50,520 --> 00:00:54,490
为我们所有的目标提供不同的内容。

18
00:00:54,490 --> 00:00:56,980
view 有另一个指令。

19
00:00:56,980 --> 00:00:58,633
v-for 指令。

20
00:00:59,740 --> 00:01:01,680
你可能会在这里看到一个模式。

21
00:01:01,680 --> 00:01:06,680
我们有 v-if，就像我们有 JavaScript 中的 if 语句一样。

22
00:01:07,700 --> 00:01:12,700
我们有 v-for 就像我们在 JavaScript 中的 for 循环一样

23
00:01:13,580 --> 00:01:16,320
用于处理重复的代码。

24
00:01:16,320 --> 00:01:18,223
这里也是同样的逻辑。

25
00:01:18,223 --> 00:01:22,873
V-for 可以帮助我们输出重复的内容。

26
00:01:24,370 --> 00:01:27,390
所以例如在这里，我们想要输出相同的列表项

27
00:01:27,390 --> 00:01:30,660
一遍又一遍地为我们拥有的每一个目标。

28
00:01:30,660 --> 00:01:33,870
我们可以通过将值设置为 v-for 来做到这一点，

29
00:01:33,870 --> 00:01:35,650
在那些双引号之间，

30
00:01:35,650 --> 00:01:38,000
与往常一样，使用这些视图功能，

31
00:01:38,000 --> 00:01:41,210
我们可以执行一个 JavaScript 表达式。

32
00:01:41,210 --> 00:01:44,660
在这里我们可以指出目标，

33
00:01:44,660 --> 00:01:48,450
这是我们保存目标数组的数据属性。

34
00:01:48,450 --> 00:01:50,030
但不仅如此，

35
00:01:50,030 --> 00:01:52,280
而是在 JavaScript 的 for 循环中，

36
00:01:52,280 --> 00:01:55,680
我们有类似 const 目标的东西。

37
00:01:55,680 --> 00:01:59,400
这就是 for 循环在 JavaScript 中的样子。

38
00:01:59,400 --> 00:02:01,640
它看起来非常相似。

39
00:02:01,640 --> 00:02:04,370
在这里，我们要完成所有目标，

40
00:02:04,370 --> 00:02:07,480
但当然我们也想抓住每一个目标，

41
00:02:07,480 --> 00:02:10,840
这样我们就可以以那个目标的文本为例，

42
00:02:10,840 --> 00:02:13,950
并在列表项文本之间输出。

43
00:02:13,950 --> 00:02:17,360
这就是为什么 v-for 语法看起来有点不同的原因，

44
00:02:17,360 --> 00:02:19,680
我们有目标。

45
00:02:19,680 --> 00:02:23,390
目标的目标也受支持，但您应该使用

46
00:02:23,390 --> 00:02:25,020
目标中的目标。

47
00:02:25,020 --> 00:02:26,130
这有点不同

48
00:02:26,130 --> 00:02:28,560
比 JavaScript 中的标准 for 循环

49
00:02:28,560 --> 00:02:31,300
但你只需要像这样记住它，

50
00:02:31,300 --> 00:02:34,810
v 使用 in 关键字循环遍历数组

51
00:02:34,810 --> 00:02:38,110
使用 v-for 时，现在在这里使用这个名称，

52
00:02:38,110 --> 00:02:39,400
在这种情况下的目标，

53
00:02:39,400 --> 00:02:40,450
完全取决于你。

54
00:02:40,450 --> 00:02:44,690
您可以将其命名为 G 或 GO 或 hello，随心所欲。

55
00:02:44,690 --> 00:02:46,310
我要朝着目标前进

56
00:02:46,310 --> 00:02:50,150
因为这将保持目标中的每一个目标，

57
00:02:50,150 --> 00:02:54,480
对于每一次迭代 v-for 都对我们有用。

58
00:02:54,480 --> 00:02:57,520
而 v-for 会遍历所有的目标

59
00:02:57,520 --> 00:03:00,430
并让我们访问这里的每一个目标。

60
00:03:00,430 --> 00:03:02,130
为什么这很有用？

61
00:03:02,130 --> 00:03:05,660
好吧，我们的目标最终只是字符串。

62
00:03:05,660 --> 00:03:07,840
我们只需添加用户输入的任何内容，

63
00:03:07,840 --> 00:03:10,040
这是一个字符串，目标。

64
00:03:10,040 --> 00:03:12,990
所以目标是一个充满字符串的数组。

65
00:03:12,990 --> 00:03:16,370
所以这里的每一个目标也只是一个字符串，

66
00:03:16,370 --> 00:03:17,290
在此之间增强

67
00:03:17,290 --> 00:03:19,690
关闭列表项的打开

68
00:03:19,690 --> 00:03:22,060
我们可以使用双花括号69
00:03:22,060 --> 00:03:23,983
像这样输出目标。

70
00:03:25,320 --> 00:03:27,180
这现在必须是这里的目标，

71
00:03:27,180 --> 00:03:28,650
如果你在这里使用目标。

72
00:03:28,650 --> 00:03:31,600
如果你在这里用你好，不管出于什么原因，

73
00:03:31,600 --> 00:03:34,730
它也必须在这里打招呼。

74
00:03:34,730 --> 00:03:37,423
但是我正在使用目标，所以让我们回到那个。

75
00:03:38,320 --> 00:03:40,550
现在它的作用是，它告诉视图

76
00:03:40,550 --> 00:03:42,620
它应该重复这个列表项

77
00:03:43,540 --> 00:03:46,150
对于目标中的所有目标，

78
00:03:46,150 --> 00:03:49,600
所以渲染尽可能多的列表项，因为我们有目标

79
00:03:49,600 --> 00:03:51,150
在目标数组中，

80
00:03:51,150 --> 00:03:53,000
让我们能够实现每一个目标，

81
00:03:53,000 --> 00:03:55,890
然后在里面，这真的很重要，

82
00:03:55,890 --> 00:03:58,590
在 v-for 受控元素的内部，

83
00:03:58,590 --> 00:04:02,330
所以在那个元素的开始标签和结束标签之间，

84
00:04:02,330 --> 00:04:04,540
以及元素本身，

85
00:04:04,540 --> 00:04:06,530
我们可以实现这一目标。

86
00:04:06,530 --> 00:04:08,300
我们无法访问目标

87
00:04:08,300 --> 00:04:11,650
在此处的列表项元素之外。

88
00:04:11,650 --> 00:04:15,860
所以如果我试图在这里输出目标，

89
00:04:15,860 --> 00:04:17,519
在另一段中，

90
00:04:17,519 --> 00:04:20,000
这不在此处的列表项中，

91
00:04:20,000 --> 00:04:21,990
那是行不通的。

92
00:04:21,990 --> 00:04:24,010
我想这很有意义。

93
00:04:24,010 --> 00:04:25,620
在常规 JavaScript 中，

94
00:04:25,620 --> 00:04:27,400
如果你有一个 for 循环，

95
00:04:27,400 --> 00:04:29,150
虽然看起来有点不一样

96
00:04:29,150 --> 00:04:33,480
如果你在这里有 for 循环，你也不能使用它

97
00:04:33,480 --> 00:04:35,990
在 for 循环之外是常量。

98
00:04:35,990 --> 00:04:37,707
v-for 也是如此。

99
00:04:38,940 --> 00:04:41,380
所以现在我们将重复尽可能多的列表项

100
00:04:41,380 --> 00:04:43,260
因为我们需要实现所有目标，

101
00:04:43,260 --> 00:04:46,280
并在我们的例子中输出目标文本

102
00:04:46,280 --> 00:04:48,200
列表项标签之间。

103
00:04:48,200 --> 00:04:51,840
所以现在我已经保存了它，然后重新加载这个页面，

104
00:04:51,840 --> 00:04:53,480
我们可以添加完成课程，

105
00:04:53,480 --> 00:04:56,220
点击添加目标，这是我们的目标。

106
00:04:56,220 --> 00:04:58,430
我们还可以添加主视图，

107
00:04:58,430 --> 00:05:01,080
点击添加目标，这是第二个目标。

108
00:05:01,080 --> 00:05:05,460
你会看到这个列表随着我们添加的每一个新项目而增长。

109
00:05:05,460 --> 00:05:07,850
这就是 v 以及为什么它很重要

110
00:05:07,850 --> 00:05:11,780
因为现在我们可以真正构建一个动态的应用程序

111
00:05:11,780 --> 00:05:16,320
我们在其中呈现内容列表并更新该列表

112
00:05:16,320 --> 00:05:18,260
当内容发生变化时。

113
00:05:18,260 --> 00:05:20,760
视图会为我们更新，

114
00:05:20,760 --> 00:05:23,253
它也以一种聪明的方式做到了。

115
00:05:24,090 --> 00:05:28,120
如果您使用深度工具检查此处的列表项，

116
00:05:28,120 --> 00:05:30,210
我之前提到过零件

117
00:05:30,210 --> 00:05:34,050
在 DOM 中更新的内容会闪烁。

118
00:05:34,050 --> 00:05:35,800
所以如果我添加一个新目标，

119
00:05:35,800 --> 00:05:38,840
看看右边发生了什么

120
00:05:38,840 --> 00:05:41,220
两个现有的列表项。

121
00:05:41,220 --> 00:05:42,053
你看？

122
00:05:42,053 --> 00:05:43,530
他们没有闪光。

123
00:05:43,530 --> 00:05:46,200
只有第三个，新的。

124
00:05:46,200 --> 00:05:48,730
这就是视图如何更新 DOM，

125
00:05:48,730 --> 00:05:51,110
它以非常有效的方式做到这一点，

126
00:05:51,110 --> 00:05:53,740
不理会未更改的列表项，

127
00:05:53,740 --> 00:05:55,790
并且只添加一个新的列表项，

128
00:05:55,790 --> 00:05:57,970
当然，这对性能非常有用。

129
00:05:57,970 --> 00:06:01,870
如果视图会重新渲染整个列表，那就太糟糕了

130
00:06:01,870 --> 00:06:03,660
我们添加的每一个新项目。

131
00:06:03,660 --> 00:06:05,700
这对性能不利

132
00:06:05,700 --> 00:06:08,430
谢天谢地，视图并没有做到这一点。

133
00:06:08,430 --> 00:06:11,160
了解这些事情很重要

134
00:06:11,160 --> 00:06:13,510
因为这可以帮助你了解更多

135
00:06:13,510 --> 00:06:16,240
视图如何在引擎盖下工作。

136
00:06:16,240 --> 00:06:18,343
现在让我们更深入地研究一下 v-for。