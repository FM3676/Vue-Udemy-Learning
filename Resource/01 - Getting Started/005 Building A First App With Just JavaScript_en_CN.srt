1
00:00:02,160 --> 00:00:04,900
所以，为了弄脏我们的手，

2
00:00:04,900 --> 00:00:08,890
我为你准备了一个非常简单的虚拟项目，

3
00:00:08,890 --> 00:00:11,280
你会发现它附在这个讲座上

4
00:00:11,280 --> 00:00:15,210
作为一个 zip 文件，您可以下载和解压缩，

5
00:00:15,210 --> 00:00:16,900
在那个提取的文件夹中，

6
00:00:16,900 --> 00:00:20,980
你会发现三个文件，一个 app.js 文件，

7
00:00:20,980 --> 00:00:24,773
一个 index.html 文件和一个 styles.css 文件。

8
00:00:25,750 --> 00:00:28,730
现在，在这里，我打开了这个提取的文件夹

9
00:00:28,730 --> 00:00:31,794
使用 Visual Studio Code，我是代码编辑器

10
00:00:31,794 --> 00:00:34,440
将在整个课程中使用。

11
00:00:34,440 --> 00:00:38,752
现在，您可以使用您选择的任何代码编辑器或 IDE。

12
00:00:38,752 --> 00:00:41,060
你不需要特定的工具，

13
00:00:41,060 --> 00:00:43,780
但是，我强烈推荐 Visual Studio Code，

14
00:00:43,780 --> 00:00:48,370
您可以从 code.visualstudio.com 免费获得。

15
00:00:48,370 --> 00:00:51,440
它适用于 macOS、Windows 和 Linux，

16
00:00:51,440 --> 00:00:53,640
所以你可以在任何平台上使用它，

17
00:00:53,640 --> 00:00:58,620
您可以从该页面简单地下载并安装它。

18
00:00:58,620 --> 00:01:01,950
而且，一旦你这样做了，你可以打开附件提取的

19
00:01:01,950 --> 00:01:06,950
带有文件的文件夹，打开，然后导航到该文件夹

20
00:01:07,650 --> 00:01:09,090
并打开它。

21
00:01:09,090 --> 00:01:11,700
您可以关闭您可能会看到的欢迎屏幕

22
00:01:11,700 --> 00:01:14,730
在 Visual Studio Code 中，如果你想得到完全相同的

23
00:01:14,730 --> 00:01:19,540
像我一样，在视图，外观下，你可以控制哪个

24
00:01:19,540 --> 00:01:23,460
侧边栏可见或不可见，我只有

25
00:01:23,460 --> 00:01:26,160
侧边栏和编辑器区域打开。

26
00:01:26,160 --> 00:01:29,040
例如，我没有活动栏，

27
00:01:29,040 --> 00:01:30,880
你可能还有。

28
00:01:30,880 --> 00:01:35,880
我也在此处放大，在代码、首选项下，

29
00:01:36,136 --> 00:01:41,136
颜色主题，我使用的是 Dark+ 主题。

30
00:01:41,170 --> 00:01:43,257
现在，您可以随意配置它，

31
00:01:43,257 --> 00:01:46,860
但这就是我正在使用的风格。

32
00:01:46,860 --> 00:01:50,120
现在，有了这个，让我们开始编写一些代码

33
00:01:50,120 --> 00:01:52,200
我会真正开始

34
00:01:52,200 --> 00:01:55,900
首先编写一些非视图代码，

35
00:01:55,900 --> 00:01:58,079
这样我们之后就可以看到

36
00:01:58,079 --> 00:02:02,683
为什么使用像 Vue.js 这样的框架可能是个好主意。

37
00:02:03,660 --> 00:02:06,070
在我准备的这个演示项目中，

38
00:02:06,070 --> 00:02:07,860
我们可以添加目标，

39
00:02:07,860 --> 00:02:10,120
我们现在有一个测试目标，

40
00:02:10,120 --> 00:02:12,216
我们很快就会删除它，

41
00:02:12,216 --> 00:02:15,010
但是，现在，每当我在这里添加一个新目标时，

42
00:02:15,010 --> 00:02:16,864
比如“完成课程”

43
00:02:16,864 --> 00:02:20,380
我想确保单击“添加目标”时，

44
00:02:20,380 --> 00:02:23,835
这个目标出现在下面的列表中。

45
00:02:23,835 --> 00:02:26,730
在 index.html 文件中，我们有一些

46
00:02:26,730 --> 00:02:30,420
标记该输入字段标签按钮，

47
00:02:30,420 --> 00:02:33,260
然后是带有虚拟列表项的列表，

48
00:02:33,260 --> 00:02:35,100
我们现在可以删除。

49
00:02:35,100 --> 00:02:38,250
而且，我正在导入一些我为你准备的样式，

50
00:02:38,250 --> 00:02:39,946
我们不必关心那些，

51
00:02:39,946 --> 00:02:42,860
毕竟这不是 CSS 课程，

52
00:02:42,860 --> 00:02:45,330
但我们做了所有的导入 app.js，

53
00:02:45,330 --> 00:02:47,950
在这里我们可以写一些 JavaScript 代码

54
00:02:47,950 --> 00:02:51,270
单击按钮时获取用户输入，

55
00:02:51,270 --> 00:02:52,890
创建一个新的列表项，

56
00:02:52,890 --> 00:02:56,640
并将其添加到此处的列表项列表中。

57
00:02:56,640 --> 00:02:58,795
而且，这就是我现在想做的第一件事，

58
00:02:58,795 --> 00:03:02,870
只有 JavaScript，所以没有 Vue。

59
00:03:02,870 --> 00:03:04,550
在 app.js 中，

60
00:03:04,550 --> 00:03:08,210
我们首先需要访问输入，

61
00:03:08,210 --> 00:03:11,570
这样我们就可以读取输入的值，

62
00:03:11,570 --> 00:03:13,530
我们需要访问按钮，

63
00:03:13,530 --> 00:03:17,198
这样我们就可以监听按钮上的点击事件，

64
00:03:17,198 --> 00:03:20,530
我们需要在这里访问无序列表，

65
00:03:20,530 --> 00:03:23,160
这样我们就可以添加新的列表项。

66
00:03:23,160 --> 00:03:25,490
因此，我将在这里创建三个常量

67
00:03:25,490 --> 00:03:26,630
在 app.js 中。

68
00:03:26,630 --> 00:03:29,872
第一个是 buttonEl 常量，可以说，

69
00:03:29,872 --> 00:03:32,310
这个名字当然取决于你，

70
00:03:32,310 --> 00:03:34,600
我在哪里使用 document.querySelector

71
00:03:35,448 --> 00:03:38,974
选择我们在此页面上拥有的唯一按钮。

72
00:03:38,974 --> 00:03:43,974
所以，现在，指向那个 dom 元素，那个 JavaScript

73
00:03:44,670 --> 00:03:48,300
该按钮元素的对象表示，

74
00:03:48,300 --> 00:03:51,003
存储在那个buttonEl const中。

75
00:03:52,200 --> 00:03:53,930
我将对输入元素做同样的事情，

76
00:03:53,930 --> 00:03:57,520
使用 document.querySelector ('input')

77
00:03:59,020 --> 00:04:04,020
以及带有 document.querySelector ('ul') 的 listEl

78
00:04:06,350 --> 00:04:07,563
对于未读列表。

79
00:04:09,400 --> 00:04:13,540
现在，我们可以使用 JavaScript 添加一个 click Lister

80
00:04:13,540 --> 00:04:15,310
伸手到这个按钮

81
00:04:15,310 --> 00:04:19,290
buttonEl 并调用 addEventListener，

82
00:04:19,290 --> 00:04:22,920
然后我们像这样监听点击事件

83
00:04:22,920 --> 00:04:25,080
通过将 click 作为字符串传递，

84
00:04:25,080 --> 00:04:26,603
作为第一个论点。

85
00:04:27,600 --> 00:04:29,900
第二个参数现在需要是

86
00:04:29,900 --> 00:04:34,270
单击发生时应执行的函数，

87
00:04:34,270 --> 00:04:37,564
为此，我们可以在这里定义一个新函数，

88
00:04:37,564 --> 00:04:40,543
addGoal 可以是名称，

89
00:04:41,430 --> 00:04:43,607
应该在点击时触发，

90
00:04:43,607 --> 00:04:47,140
所以在这里我们可以指向addGoal。

91
00:04:48,220 --> 00:04:51,550
我们这里不执行，我们只是指向它

92
00:04:51,550 --> 00:04:53,990
通过重复其名称，使函数

93
00:04:53,990 --> 00:04:57,590
当点击发生时为我们执行，

94
00:04:57,590 --> 00:04:59,710
现在，在这个函数中，我们想要得到

95
00:04:59,710 --> 00:05:01,670
无论用户输入什么。

96
00:05:01,670 --> 00:05:04,640
因此，我们可以通过

97
00:05:04,640 --> 00:05:09,640
到达 inputEl.value，作为输入元素，

98
00:05:09,970 --> 00:05:13,183
指向这里的，它将有一个 value 属性

99
00:05:13,183 --> 00:05:17,120
那是原生的 JavaScript，内置在 JavaScript 中

100
00:05:17,120 --> 00:05:20,560
我们在输入元素上有这个值属性，

101
00:05:20,560 --> 00:05:23,975
然后我们可以提取用户输入的值

102
00:05:23,975 --> 00:05:25,323
进入这个输入。

103
00:05:26,670 --> 00:05:31,670
现在，我们可以通过调用创建一个新的列表项元素

104
00:05:34,090 --> 00:05:39,090
document.createElement 是提供的内置方法

105
00:05:39,420 --> 00:05:43,890
通过浏览器，以编程方式创建新的 dom 元素

106
00:05:43,890 --> 00:05:45,850
使用 JavaScript。

107
00:05:45,850 --> 00:05:48,760
在这里，我们可以提供 'li' 来创建列表项

108
00:05:48,760 --> 00:05:53,210
元素，然后我们可以使用新创建的列表项

109
00:05:53,210 --> 00:05:57,570
元素来设置它的文本内容，所以文本之间

110
00:05:57,570 --> 00:06:01,330
该列表项的开始和结束文本，等于

111
00:06:01,330 --> 00:06:02,383
输入的值。

112
00:06:03,380 --> 00:06:06,670
然后，我们可以联系到 listEl，所以

113
00:06:06,670 --> 00:06:11,670
我们的整体列表，并调用 append 或 appendChild，

114
00:06:12,310 --> 00:06:15,773
两者都可以在这里工作，我会去 appendChild，

115
00:06:15,773 --> 00:06:18,540
并附加我们的列表项El，

116
00:06:18,540 --> 00:06:20,610
我们刚刚创建的。

117
00:06:20,610 --> 00:06:25,140
如果我们完成所有这些，并且我们重新加载，我可以添加

118
00:06:25,140 --> 00:06:28,230
“完成课程！”并添加此目标。

119
00:06:28,230 --> 00:06:33,230
然后，例如，还添加“学习 Vue！”

120
00:06:33,380 --> 00:06:34,930
作为目标。

121
00:06:34,930 --> 00:06:37,650
现在，假设我们还想重置输入

122
00:06:37,650 --> 00:06:40,900
一旦添加了一个目标，我们就可以通过，再次，

123
00:06:40,900 --> 00:06:43,830
使用我们的 inputEl 和设置

124
00:06:43,830 --> 00:06:46,080
值等于空字符串。

125
00:06:46,080 --> 00:06:49,240
这会将输入元素中的值设置为

126
00:06:49,240 --> 00:06:52,200
空文本，因此清除它。

127
00:06:52,200 --> 00:06:54,700
所以，如果我们再次重新加载，

128
00:06:54,700 --> 00:06:57,080
我'完成课程！'，现在这将是

129
00:06:57,080 --> 00:06:58,650
清除。

130
00:06:58,650 --> 00:07:02,740
现在，这只是 JavaScript，没有 Vue 在行动，

131
00:07:02,740 --> 00:07:07,500
它显然是一个非常非常非常琐碎的演示网站。

132
00:07:07,500 --> 00:07:10,670
不过，我们现在将使用 Vue，之后您将

133
00:07:10,670 --> 00:07:14,810
看看为什么 Vue 可能很有趣，因为它使构建

134
00:07:14,810 --> 00:07:16,450
网站更有趣。

135
00:07:16,450 --> 00:07:17,860
然后我也会谈谈

136
00:07:17,860 --> 00:07:20,840
Vue 和这种方法的区别，

137
00:07:20,840 --> 00:07:24,433
但首先，让我们在下一节课中切换到 Vue。