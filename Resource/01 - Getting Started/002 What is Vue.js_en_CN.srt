1
00:00:02,430 --> 00:00:05,630
那么什么是 Vue.js

2
00:00:05,630 --> 00:00:09,130
或者只是 vue，因为它也被称为。

3
00:00:09,130​​ --> 00:00:11,620
Vue.js 是一个 JavaScript 框架

4
00:00:11,620 --> 00:00:13,370
这使得建筑具有互动性

5
00:00:13,370 --> 00:00:15,660
和反应式网络前端，

6
00:00:15,660 --> 00:00:17,760
基本上是网络应用程序

7
00:00:17,760 --> 00:00:19,010
在浏览器中运行，

8
00:00:19,010 --> 00:00:22,320
所以最终用户所看到的，更容易。

9
00:00:22,320 --> 00:00:24,350
这是一个很好的句子

10
00:00:24,350 --> 00:00:26,690
这将是一个正确的定义，

11
00:00:26,690 --> 00:00:29,590
但它可能没有太大帮助，

12
00:00:29,590 --> 00:00:31,480
所以让我说得更清楚一点

13
00:00:31,480 --> 00:00:34,100
让我们在这里强调重要的部分。

14
00:00:34,100 --> 00:00:37,720
当然，一个重要的部分是 JavaScript，

15
00:00:37,720 --> 00:00:42,420
Vue.js 用于 JavaScript，它使用 JavaScript，

16
00:00:42,420 --> 00:00:44,210
一切都是关于 JavaScript

17
00:00:44,210 --> 00:00:47,330
因为 JavaScript 是编程语言

18
00:00:47,330 --> 00:00:49,610
我们可以在浏览器中使用。

19
00:00:49,610 --> 00:00:51,470
我们可以在浏览器中运行

20
00:00:51,470 --> 00:00:54,160
在用户加载页面之后。

21
00:00:54,160 --> 00:00:58,630
它允许我们操纵用户在屏幕上看到的内容

22
00:00:58,630 --> 00:01:01,720
无需从服务器获取新页面

23
00:01:01,720 --> 00:01:05,360
这使我们能够提供丰富的用户体验

24
00:01:05,360 --> 00:01:06,730
我会回到这个

25
00:01:06,730 --> 00:01:10,270
丰富的用户体验点在一秒钟。

26
00:01:10,270 --> 00:01:12,270
但这不仅适用于 JavaScript，

27
00:01:12,270 --> 00:01:15,800
确实 Vue.js 是一个 JavaScript 框架，

28
00:01:15,800 --> 00:01:18,180
现在框架是什么意思？

29
00:01:18,180 --> 00:01:21,210
一个框架，不仅仅是在 JavaScript 中，

30
00:01:21,210 --> 00:01:23,260
但在任何编程语言中

31
00:01:23,260 --> 00:01:25,630
基本上是第三方库

32
00:01:25,630 --> 00:01:28,010
这意味着它的代码不是你写的，

33
00:01:28,010 --> 00:01:29,660
但被别人

34
00:01:29,660 --> 00:01:32,960
它暴露了某些实用程序功能，

35
00:01:32,960 --> 00:01:35,160
某些方法，某些工具，

36
00:01:35,160 --> 00:01:37,200
你不必自己写

37
00:01:37,200 --> 00:01:41,510
这很重要，不像普通的图书馆，

38
00:01:41,510 --> 00:01:43,010
框架就是库

39
00:01:43,010 --> 00:01:46,680
这不仅为您提供了那些额外的功能，

40
00:01:46,680 --> 00:01:50,490
但这也给了你一套你可以说的规则。

41
00:01:50,490 --> 00:01:52,530
它给你一个明确的指导，

42
00:01:52,530 --> 00:01:55,530
您应该遵循的明确方法

43
00:01:55,530 --> 00:01:57,920
在构建应用程序时，

44
00:01:57,920 --> 00:02:00,330
它基本上给你一个清晰的想法

45
00:02:00,330 --> 00:02:03,570
以及如何编写应用程序代码的结构，

46
00:02:03,570 --> 00:02:07,370
所以它是实用函数加上规则。

47
00:02:07,370 --> 00:02:09,039
现在，我们为什么要使用 Vue.js？

48
00:02:09,039 --> 00:02:10,979
我们也有这个造句

49
00:02:10,979 --> 00:02:13,240
因为有了它我们可以建立交互式

50
00:02:13,240 --> 00:02:16,250
和反应式网络前端。

51
00:02:16,250 --> 00:02:18,130
反应性是一个非常花哨的术语，

52
00:02:18,130 --> 00:02:20,450
但最终的意思是

53
00:02:20,450 --> 00:02:24,840
我们的应用程序应该对用户所做的事情非常敏感。

54
00:02:24,840 --> 00:02:27,330
如果用户在屏幕上输入内容，

55
00:02:27,330 --> 00:02:29,430
我们希望能够对此做出反应，

56
00:02:29,430 --> 00:02:33,710
例如，要在输入字段下方显示验证错误，

57
00:02:33,710 --> 00:02:37,000
我们希望能够显示带有警告消息的叠加层，

58
00:02:37,000 --> 00:02:40,800
我们想给用户一个非常现代的外观

59
00:02:40,800 --> 00:02:43,710
并在我们的 Web 应用程序中感受。

60
00:02:43,710 --> 00:02:47,690
我们经常尝试从移动应用程序中实现我们所知道的

61
00:02:47,690 --> 00:02:50,090
我也会回到那个问题上。

62
00:02:50,090 --> 00:02:53,340
因此，我们希望最终提供出色的用户体验

63
00:02:53,340 --> 00:02:57,430
而 Vue.js 让我们更容易实现这一目标

64
00:02:57,430 --> 00:03:00,540
而网络前端部分是最重要的。

65
00:03:00,540 --> 00:03:04,240
这基本上意味着 Vue.js 涉及

66
00:03:04,240 --> 00:03:06,170
用户看到了什么，

67
00:03:06,170 --> 00:03:08,260
它不是服务器端框架，

68
00:03:08,260 --> 00:03:11,610
我们不将它与 PHP 或节点一起使用，

69
00:03:11,610 --> 00:03:13,225好吧，我们可以将它与所有这些一起使用，
70

00:03:13,225 --> 00:03:15,730
但简单地结合起来，

71
00:03:15,730 --> 00:03:20,080
但这并不能帮助我们编写更好的 PHP 或 node.js 代码

72
00:03:20,080 --> 00:03:24,110
因为 vue.js 是针对浏览器端 JavaScript 的。

73
00:03:24,110 --> 00:03:26,900
使用 HTML、CSS 和 JavaScript

74
00:03:26,900 --> 00:03:29,490
可能还有浏览器中的 Vue.js，

75
00:03:29,490 --> 00:03:31,600
我们可以控制用户看到的内容

76
00:03:31,600 --> 00:03:36,210
我们可以在网络上提供丰富的用户界面。

77
00:03:36,210 --> 00:03:37,920
而 Vue.js 是一个框架

78
00:03:37,920 --> 00:03:40,310
这有助于我们构建这样的 JavaScript

79
00:03:40,310 --> 00:03:43,640
在浏览器中运行的驱动用户界面

80
00:03:43,640 --> 00:03:47,430
对于我们可能正在与服务器通信的 Web 应用程序，

81
00:03:47,430 --> 00:03:49,920
但这都是关于浏览器端代码的

82
00:03:49,920 --> 00:03:51,513
这有助于我们实现这一目标。

83
00:03:53,270 --> 00:03:55,790
现在我们为什么要使用像 Vue.js 这样的东西？

84
00:03:55,790 --> 00:03:59,640
为什么我们需要这个响应式 Web 前端？

85
00:03:59,640 --> 00:04:01,370
好吧，让我们退后一步

86
00:04:01,370 --> 00:04:04,060
让我们不要考虑网络应用程序，

87
00:04:04,060 --> 00:04:07,270
让我们考虑一下移动应用程序。

88
00:04:07,270 --> 00:04:11,160
移动应用程序反应灵敏，

89
00:04:11,160 --> 00:04:12,910
事情瞬间发生，

90
00:04:12,910 --> 00:04:15,410
我们基本上有一个屏幕

91
00:04:15,410 --> 00:04:16,860
我们添加叠加层的地方，

92
00:04:16,860 --> 00:04:18,279
我们渲染列表的地方，

93
00:04:18,279 --> 00:04:20,390
我们可以导航到不同的屏幕

94
00:04:20,390 --> 00:04:22,200
用流畅的动画，

95
00:04:22,200 --> 00:04:26,270
感觉就像你可以说的一个单元。

96
00:04:26,270 --> 00:04:30,470
所以移动应用程序和桌面应用程序感觉非常被动，

97
00:04:30,470 --> 00:04:33,420
我们不必等待新页面加载，

98
00:04:33,420 --> 00:04:36,300
我们不必等待下载 HTML

99
00:04:36,300 --> 00:04:38,020
并由浏览器呈现，

100
00:04:38,020 --> 00:04:41,320
相反，整个用户界面已经存在，

101
00:04:41,320 --> 00:04:44,490
整个用户界面是移动应用程序的一部分

102
00:04:44,490 --> 00:04:45,630
用户安装

103
00:04:45,630 --> 00:04:48,910
以及唯一可能在幕后加载的东西

104
00:04:48,910 --> 00:04:50,370
是数据。

105
00:04:50,370 --> 00:04:52,610
现在在网络应用程序中，传统上，

106
00:04:52,610 --> 00:04:55,980
我们点击一​​个链接，我们等待一个新的页面加载

107
00:04:55,980 --> 00:04:58,230
这一次又一次地发生。

108
00:04:58,230 --> 00:05:00,280
我们可能会在表格中输入一些数据，

109
00:05:00,280 --> 00:05:01,410
我们点击一​​个按钮，

110
00:05:01,410 --> 00:05:03,710
该数据已提交并作为响应，

111
00:05:03,710 --> 00:05:05,840
我们得到一个新的 HTML 页面。

112
00:05:05,840 --> 00:05:08,240
所以在一个传统的网页中，

113
00:05:08,240 --> 00:05:11,163
我们一直在等待回应。

114
00:05:12,020 --> 00:05:14,180
JavaScript 可以在这里帮助我们，

115
00:05:14,180 --> 00:05:16,460
JavaScript 可以加快速度

116
00:05:16,460 --> 00:05:18,580
和浏览器中的 JavaScript

117
00:05:18,580 --> 00:05:21,840
允许我们提供更现代的 Web 应用程序，

118
00:05:21,840 --> 00:05:24,350
更现代的用户界面。

119
00:05:24,350 --> 00:05:27,670
JavaScript 具有在浏览器中运行的巨大优势

120
00:05:27,670 --> 00:05:29,360
在加载的页面上，

121
00:05:29,360 --> 00:05:32,370
这意味着我们在浏览器中运行了一种语言，

122
00:05:32,370 --> 00:05:35,480
可用于更改该页面

123
00:05:35,480 --> 00:05:38,920
无需在幕后获取新的 HTML。

124
00:05:38,920 --> 00:05:42,260
相反，我们可以操纵 HTML 结构，

125
00:05:42,260 --> 00:05:45,620
所谓DOM，Document Object Model

126
00:05:45,620 --> 00:05:48,040
使用 JavaScript 的页面。

127
00:05:48,040 --> 00:05:49,790
这意味着在现代

128
00:05:49,790 --> 00:05:52,460
JavaScript 驱动的 Web 应用程序，

129
00:05:52,460 --> 00:05:56,290
我们不会发送获取新 HTML 页面的请求，

130
00:05:56,290 --> 00:05:59,040
相反，我们只做一次

131
00:05:59,040 --> 00:06:02,800
之后，我们只是在幕后交换数据

132
00:06:02,800 --> 00:06:05,410
我们使用客户端 JavaScript

133
00:06:05,410 --> 00:06:07,700
可能还有像 Vue 这样的框架

134
00:06:07,700 --> 00:06:10,710
更新屏幕上的内容。

135
00:06:10,710 --> 00:06:13,930
我们正在使用像 Vue.js 这样的解决方案

136
00:06:13,930 --> 00:06:18,190
因为只有 JavaScript 可能并不理想。

137
00:06:18,190 --> 00:06:21,320
理论上，我们可以构建任何类型的 Web 应用程序

138
00:06:21,320 --> 00:06:23,910
仅使用香草 JavaScript，

139
00:06:23,910 --> 00:06:28,060
所以只有 JavaScript 没有任何额外的框架

140
00:06:28,060 --> 00:06:29,580
或图书馆。

141
00:06:29,580 --> 00:06:32,660
现实中不需要像Vue这样的框架，

142
00:06:32,660 --> 00:06:36,860
但是只使用 JavaScript 不会很有趣

143
00:06:36,860 --> 00:06:39,090
因为我们必须编写所有代码，

144
00:06:39,090 --> 00:06:41,140
我们自己的所有逻辑，

145
00:06:41,140 --> 00:06:45,060
我们必须一遍又一遍地重新发明轮子。

146
00:06:45,060 --> 00:06:47,500
我们甚至可以编写次优代码

147
00:06:47,500 --> 00:06:49,680
并引入错误和错误

148
00:06:49,680 --> 00:06:52,050
因为我们必须从头开始编写所有内容

149
00:06:52,050 --> 00:06:54,450
我们必须正确地做这些事情，

150
00:06:54,450 --> 00:06:59,050
否则我们可能会遇到性能不佳或安全问题。

151
00:06:59,050 --> 00:07:01,410
在团队中工作也可能更难

152
00:07:01,410 --> 00:07:04,150
因为不是每个人都知道我们的代码结构，

153
00:07:04,150 --> 00:07:05,970
我们代码背后的理念

154
00:07:05,970 --> 00:07:07,800
以及如何使用我们的代码。

155
00:07:07,800 --> 00:07:10,230
这就是为什么我们使用像 Vue 这样的东西，

156
00:07:10,230 --> 00:07:12,840
它为我们提供了明确的规则集

157
00:07:12,840 --> 00:07:14,300
我们必须在其中工作，

158
00:07:14,300 --> 00:07:16,930
团队中的每个人都必须使用

159
00:07:16,930 --> 00:07:18,450
我们不必弄清楚

160
00:07:18,450 --> 00:07:21,120
所有的小细节

161
00:07:21,120 --> 00:07:23,900
比如更新页面上的某个部分，

162
00:07:23,900 --> 00:07:28,490
相反，我们可以使用 Vue 专注于我们的核心业务逻辑

163
00:07:28,490 --> 00:07:32,380
并让 Vue 完成更新页面的繁重工作

164
00:07:32,380 --> 00:07:34,270
和做所有烦人的事情

165
00:07:34,270 --> 00:07:36,320
否则我们将不得不这样做。

166
00:07:36,320 --> 00:07:38,400
这就是为什么我们使用像 Vue 这样的框架

167
00:07:38,400 --> 00:07:40,750
对于课程，这将变得显而易见

168
00:07:40,750 --> 00:07:43,970
一旦我们深入了解 Vue 提供的所有功能

169
00:07:43,970 --> 00:07:46,170
以及这些功能使它变得多么容易

170
00:07:46,170 --> 00:07:49,773
构建令人惊叹的 Web 应用程序和用户界面。