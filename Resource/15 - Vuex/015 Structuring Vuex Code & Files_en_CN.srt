1
00:00:02,120 --> 00:00:03,700
有了这个，我们几乎完成了

2
00:00:03,700 --> 00:00:07,810
有了基础，但有一个，也许是明显的问题，

3
00:00:07,810 --> 00:00:10,320
主 JS 文件很大。

4
00:00:10,320 --> 00:00:14,120
它有整个商店，甚至还有一个额外的模块，

5
00:00:14,120 --> 00:00:16,850
它可能适用于这个应用程序，

6
00:00:16,850 --> 00:00:18,660
但即使在这里，也有很多代码。

7
00:00:18,660 --> 00:00:19,560
在更大的应用程序中，

8
00:00:19,560 --> 00:00:23,023
我绝对不想在主 JS 中拥有所有这些。

9
00:00:23,940 --> 00:00:26,270
相反，就像生根一样，

10
00:00:26,270 --> 00:00:29,030
您通常会为此创建额外的文件。

11
00:00:29,030 --> 00:00:31,610
您可以从商店 JS 文件开始

12
00:00:31,610 --> 00:00:34,820
并将您的整个商店外包给它。

13
00:00:34,820 --> 00:00:37,070
这可能是一个好的开始。

14
00:00:37,070 --> 00:00:41,020
所以让我们抓住模块和这个商店，

15
00:00:41,020 --> 00:00:45,863
从主 JS 中删除所有内容，然后将其添加到商店 JS 中。

16
00:00:46,820 --> 00:00:48,320
然后，当然，

17
00:00:48,320 --> 00:00:51,050
削减创建商店导入，

18
00:00:51,050 --> 00:00:52,520
去商店JS

19
00:00:53,430 --> 00:00:55,150
并在此处添加导入

20
00:00:55,150 --> 00:00:58,170
因为我们在他的文件中使用了 create store，

21
00:00:58,170 --> 00:01:02,340
然后最后，将商店导出为默认值

22
00:01:02,340 --> 00:01:05,530
这样我们就可以在主 JS 中导入它。

23
00:01:05,530 --> 00:01:08,940
从商店 JS 导入商店

24
00:01:09,970 --> 00:01:12,470
有了这个，一切都应该重新开始。

25
00:01:13,330 --> 00:01:16,570
是的。但这只是一个开始。

26
00:01:16,570 --> 00:01:21,200
Store JS 仍然非常庞大，并且在具有许多模块的大型应用程序中，

27
00:01:21,200 --> 00:01:23,873
这很快就变成了一个超大文件。

28
00:01:24,760 --> 00:01:28,110
因此，通常情况下，我们会走得更远。

29
00:01:28,110 --> 00:01:31,690
通常，您添加一个名为 store 的单独文件夹，

30
00:01:31,690 --> 00:01:35,610
然后在那里，你有你的索引 JS 文件，

31
00:01:35,610 --> 00:01:39,023
它包含您的主要商店创建逻辑，

32
00:01:39,880 --> 00:01:44,880
然后你有单独的动作和突变文件，

33
00:01:48,430 --> 00:01:51,283
如果您愿意，可能是所有的吸气剂。

34
00:01:53,310 --> 00:01:55,710
然后我们创建单独的子文件夹

35
00:01:55,710 --> 00:01:57,590
对于我们可能拥有的所有模块，

36
00:01:57,590 --> 00:01:59,450
像计数器模块。

37
00:01:59,450 --> 00:02:02,090
然后再一次，你可以有一个索引 JS 文件，

38
00:02:02,090 --> 00:02:05,580
动作 JS 结束于将事物合并在一起。

39
00:02:05,580 --> 00:02:07,740
现在我要像这样拆分它

40
00:02:07,740 --> 00:02:09,889
向您展示这是如何工作的，

41
00:02:09,889 --> 00:02:12,330
我也会对这个演示诚实，

42
00:02:12,330 --> 00:02:14,583
当然，这都是矫枉过正。

43
00:02:15,890 --> 00:02:17,780
但是对于 Deb，我们有一堆文件

44
00:02:17,780 --> 00:02:21,310
现在让我们看看我们如何将代码拆分成这些文件。

45
00:02:21,310 --> 00:02:23,440
在这里的商店JS中，

46
00:02:23,440 --> 00:02:27,023
我会从我的主店里抢，

47
00:02:29,350 --> 00:02:33,623
创建商店的整个逻辑，包括导出。

48
00:02:35,860 --> 00:02:40,090
我将删除它并将其添加到存储中的索引 JS 中。

49
00:02:40,090 --> 00:02:43,653
所以不是计数器内部的索引，而是商店内部的索引。

50
00:02:44,643 --> 00:02:48,370
我还将在此处获取 create store 的导入

51
00:02:48,370 --> 00:02:51,853
并将其添加到 store 文件夹中的索引 JS 中。

52
00:02:53,420 --> 00:02:56,660
现在，我抓住我的突变，

53
00:02:56,660 --> 00:03:00,093
在这种情况下，我在这里有一个根突变，

54
00:03:02,060 --> 00:03:07,060
在此处和突变 JS 文件中获取此对象，

55
00:03:07,100 --> 00:03:10,620
我现在将简单地导出这个对象。

56
00:03:10,620 --> 00:03:12,210
再次，这是矫枉过正。

57
00:03:12,210 --> 00:03:14,360
文件中只有一个对象，

58
00:03:14,360 --> 00:03:17,560
在索引 JS 中使用它不会有任何问题。

59
00:03:17,560 --> 00:03:20,270
我会告诉你最终的解决方案

60
00:03:20,270 --> 00:03:21,923
对于非常大的应用程序。

61
00:03:23,140 --> 00:03:26,340
因此，我正在导出我的变异对象

62
00:03:26,340 --> 00:03:29,660
然后在索引 JS 中重新导入它。

63
00:03:29,660 --> 00:03:34,660
从突变 JS 导入突变。

64
00:03:36,823 --> 00:03:39,870
也许也被称为根突变

65
00:03:39,870 --> 00:03:42,530
明确这些是突变

66
00:03:42,530 --> 00:03:45,250
这会影响我们这里的根状态。

67
00:03:45,250 --> 00:03:48,813
然后我将根突变分配给突变。

68
00:03:50,410 --> 00:03:52,079
相同的为行动。

69
00:03:52,079 --> 00:03:55,450
你可以抓取动作，实际上是对象，

70
00:03:55,450 --> 00:03:59,140
转到 store 文件夹中的操作 JS 文件，

71
00:03:59,140 --> 00:04:03,480
将其导出为默认值，像这样，

72
00:04:03,480 --> 00:04:05,240
并返回索引 JS，

73
00:04:05,240 --> 00:04:10,240
然后我们从动作 JS 中导入根动作。

74
00:04:13,707 --> 00:04:17,700
然后将此处的根操作分配给操作。

75
00:04:20,300 --> 00:04:21,560
同时，如果你愿意，

76
00:04:21,560 --> 00:04:23,823
对于吸气剂，抓住吸气剂，

77
00:04:24,680 --> 00:04:28,223
像这样将它们导出到 getters JS 文件中。

78
00:04:29,490 --> 00:04:31,170
回到索引 JS，

79
00:04:31,170 --> 00:04:36,170
我从 ./gettersjs 导入我的根吸气剂

80
00:04:39,610 --> 00:04:42,193
并将根吸气剂分配给吸气剂。

81
00:04:44,530 --> 00:04:46,700
现在，这是一个非常精简的文件。

82
00:04:46,700 --> 00:04:49,093
顺便说一句，国家就在这里。

83
00:04:50,390 --> 00:04:52,310
现在是模块。

84
00:04:52,310 --> 00:04:55,023
在商店JS中，我仍然有计数器模块。

85
00:04:56,380 --> 00:04:58,670
我现在抓住这个代码，

86
00:04:58,670 --> 00:05:00,410
所以商店JS是空的

87
00:05:00,410 --> 00:05:03,130
因此我们当然可以删除文件

88
00:05:03,130 --> 00:05:05,950
并转到商店文件夹中的柜台文件夹，

89
00:05:05,950 --> 00:05:08,513
在那里，在索引 JS 中，我将其粘贴进去。

90
00:05:09,390 --> 00:05:11,540
我导出了整个对象

91
00:05:11,540 --> 00:05:13,833
作为默认值，就像这样。

92
00:05:16,680 --> 00:05:19,230
我在这里留下命名空间，我将在这里留下状态，

93
00:05:19,230 --> 00:05:21,650
但我抓住了突变对象

94
00:05:21,650 --> 00:05:24,620
并将其移动到 mutation JS 文件夹

95
00:05:24,620 --> 00:05:26,900
在这个计数器子文件夹中

96
00:05:26,900 --> 00:05:29,660
并在此处导出。

97
00:05:29,660 --> 00:05:31,510
再一次，在索引 JS 中，

98
00:05:31,510 --> 00:05:34,890
但现在在柜台内的索引 JS 中，

99
00:05:34,890 --> 00:05:39,890
我从 ./mutationsjs 导入反突变

100
00:05:42,600 --> 00:05:46,463
并将此处分配给突变。

101
00:05:47,860 --> 00:05:49,710
动作也一样。

102
00:05:49,710 --> 00:05:53,540
抓取对象，执行 JS 操作，

103
00:05:53,540 --> 00:05:55,953
将它们导出为默认值，

104
00:05:57,550 --> 00:06:02,550
像这样，在索引 JS 中，导入它们。

105
00:06:03,320 --> 00:06:08,320
从动作 JS 导入计数器动作

106
00:06:08,730 --> 00:06:11,063
并在此处将它们分配给操作。

107
00:06:13,000 --> 00:06:13,910
最后但并非最不重要，

108
00:06:13,910 --> 00:06:17,240
我们可以在这里为 getter 做同样的事情。

109
00:06:17,240 --> 00:06:19,200
抓住 getters 对象，

110
00:06:19,200 --> 00:06:22,323
在计数器内添加一个 getters JS 文件，

111
00:06:23,270 --> 00:06:25,983
像这样导出我们的 getters 对象，

112
00:06:27,370 --> 00:06:28,793
然后导入它。

113
00:06:30,140 --> 00:06:32,300
当然，顺便说一下，您可以调整文件名，

114
00:06:32,300 --> 00:06:34,900
您不必使用这些确切的文件名，

115
00:06:34,900 --> 00:06:37,070
我只是在这里遵循一些约定，

116
00:06:37,070 --> 00:06:39,570
但您也可以在此处使用不同的文件名。

117
00:06:41,200 --> 00:06:46,200
所以在这里我必须对抗 getters JS 的 getters。

118
00:06:48,450 --> 00:06:49,963
所以我会把它们分配在这里。

119
00:06:51,160 --> 00:06:53,370
而现在，这一切都分裂了，

120
00:06:53,370 --> 00:06:55,200
我在这里导出我的模块，

121
00:06:55,200 --> 00:06:58,730
所以现在在这里的索引 JS 中，在 store 文件夹中，

122
00:06:58,730 --> 00:07:02,490
我可以导入我的计数器模块

123
00:07:02,490 --> 00:07:07,430
来自计数器索引 JS。

124
00:07:07,430 --> 00:07:11,473
现在将我的计数器模块分配给数字。

125
00:07:13,650 --> 00:07:18,450
现在在 main JS 中，我们不再从 store JS 中导入 store，

126
00:07:18,450 --> 00:07:22,003
但从商店文件夹中输入索引 JS 文件。

127
00:07:23,840 --> 00:07:28,430
有了所有这些，它就像以前一样工作，

128
00:07:28,430 --> 00:07:31,230
但现在有了不同的文件夹结构。

129
00:07:31,230 --> 00:07:33,680
现在，如果你想要那个结构，知道这取决于你，

130
00:07:33,680 --> 00:07:35,760
但这是一种选择。

131
00:07:35,760 --> 00:07:37,340
你也可以多改变一点。

132
00:07:37,340 --> 00:07:39,280
如果你有多个模块，

133
00:07:39,280 --> 00:07:41,880
您还可以在此处添加模块文件夹

134
00:07:41,880 --> 00:07:44,940
并将计数器移动到模块中

135
00:07:44,940 --> 00:07:49,390
然后有其他模块，如产品模块文件夹，

136
00:07:49,390 --> 00:07:52,270
如果你有一些，也在模块文件夹中。

137
00:07:52,270 --> 00:07:55,763
为了更清楚地说明你在这里管理你的模块，

138
00:07:56,610 --> 00:07:58,860
然后你只需要调整导入

139
00:07:58,860 --> 00:08:03,693
并从模块计数器索引导入计数器模块。

140
00:08:04,550 --> 00:08:05,720
正如我之前提到的，

141
00:08:05,720 --> 00:08:07,460
您还可以调整文件名

142
00:08:07,460 --> 00:08:09,570
让它们对你有意义。

143
00:08:09,570 --> 00:08:11,880
你也可以拆分动作，吸气剂，

144
00:08:11,880 --> 00:08:14,480
突变等，对于根状态，

145
00:08:14,480 --> 00:08:16,720
但不适用于模块。

146
00:08:16,720 --> 00:08:19,070
这取决于你，你想要什么样的结构，

147
00:08:19,070 --> 00:08:21,930
我只是向你展示一种可能的方法

148
00:08:21,930 --> 00:08:25,750
确保您有小的可维护文件

149
00:08:25,750 --> 00:08:28,310
而不是一个超级大文件，

150
00:08:28,310 --> 00:08:31,580
然后你必须一直搜索东西。

151
00:08:31,580 --> 00:08:32,990
因此，这里，

152
00:08:32,990 --> 00:08:36,350
是构建它的一种可能方式。

153
00:08:36,350 --> 00:08:38,530
这个演示有点矫枉过正，

154
00:08:38,530 --> 00:08:41,763
但当然，它向您展示了您可以在更大的应用程序中做什么。