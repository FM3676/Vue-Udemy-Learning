1
00:00:02,150 --> 00:00:05,656
那么，究竟是 Vuex 吗？

2
00:00:05,656 --> 00:00:10,500
Vuex 是一个用于管理全局状态的库。

3
00:00:10,500 --> 00:00:12,780
好吧，这是一个很好的句子。

4
00:00:12,780 --> 00:00:14,180
这是什么意思？

5
00:00:14,180 --> 00:00:15,840
什么是状态？

6
00:00:15,840 --> 00:00:19,090
状态可以简单地用数据翻译，

7
00:00:19,090 --> 00:00:23,850
您的应用程序需要的数据和影响的数据

8
00:00:23,850 --> 00:00:26,530
用户在屏幕上看到的内容。

9
00:00:26,530 --> 00:00:30,560
因此，您可以将状态视为反应数据，

10
00:00:30,560 --> 00:00:34,450
可能更改的数据以及此类更改的位置

11
00:00:34,450 --> 00:00:37,630
然后应该在屏幕上触发一些东西。

12
00:00:37,630 --> 00:00:41,630
当然，Vue.js 就是关于这种反应性的，

13
00:00:41,630 --> 00:00:43,590
在整个课程中学习。

14
00:00:43,590 --> 00:00:47,620
但是管理数据、状态会影响

15
00:00:47,620 --> 00:00:51,310
您的应用程序的不同组件可能很棘手。

16
00:00:51,310 --> 00:00:52,940
不过，这很重要，

17
00:00:52,940 --> 00:00:56,740
区分两种主要的状态，

18
00:00:56,740 --> 00:00:59,473
本地状态和全局状态。

19
00:01:00,670 --> 00:01:04,830
本地状态是数据的状态

20
00:01:04,830 --> 00:01:07,110
您在一个组件内部进行管理，

21
00:01:07,110 --> 00:01:11,620
这只影响这一个组件，并且可能，

22
00:01:11,620 --> 00:01:15,590
间接通过道具，也是一个子组件。

23
00:01:15,590 --> 00:01:18,370
这里的例子可能是用户输入

24
00:01:18,370 --> 00:01:21,940
输入到输入元素中，或者例如，

25
00:01:21,940 --> 00:01:25,940
显示或隐藏某个容器的按钮。

26
00:01:25,940 --> 00:01:27,810
我有一个例子给你。

27
00:01:27,810 --> 00:01:31,350
这是我们早些时候建立的一个课程项目

28
00:01:31,350 --> 00:01:35,020
在主要组成部分之后的课程中。

29
00:01:35,020 --> 00:01:37,340
就是这个学习资源管理器

30
00:01:38,780 --> 00:01:42,470
并在 AddResource.Vue 文件中

31
00:01:42,470 --> 00:01:45,940
在 AddResource 组件中，我们，例如，

32
00:01:45,940 --> 00:01:49,480
有一个我们获取用户输入的表单。

33
00:01:49,480 --> 00:01:53,950
以及用户输入，以及整体表单的有效性

34
00:01:53,950 --> 00:01:56,210
只对这个组件很重要。

35
00:01:56,210 --> 00:02:00,720
例如，这里我们有这个 inputisInvalid 数据

36
00:02:00,720 --> 00:02:04,490
因此这将是该组件的状态

37
00:02:04,490 --> 00:02:09,490
这会影响我们是否展示这种对话。

38
00:02:10,889 --> 00:02:15,590
所以，这个 inputisInvalid 数据片就是 state

39
00:02:15,590 --> 00:02:18,730
因为它会影响用户在屏幕上看到的内容。

40
00:02:18,730 --> 00:02:21,130
我们展示或不展示这种对话。

41
00:02:21,130 --> 00:02:24,090
它真的只对这个组件很重要。

42
00:02:24,090 --> 00:02:27,050
我们在这个组件内部管理它。

43
00:02:27,050 --> 00:02:29,913
所以，这将是一个地方州的例子。

44
00:02:30,870 --> 00:02:35,417
另一方面，全局状态是状态数据

45
00:02:36,280 --> 00:02:41,280
这会影响多个组件，可能是整个应用程序。

46
00:02:41,800 --> 00:02:45,060
因此，您在很多不同的地方都需要数据。

47
00:02:45,060 --> 00:02:49,440
此处的示例可能是用户身份验证状态，

48
00:02:49,440 --> 00:02:52,070
用户是否登录，

49
00:02:52,070 --> 00:02:54,85​​0
可能出现的购物卡物品

50
00:02:54,85​​0 --> 00:02:59,470
在应用程序的不同部分以及类似的示例中。

51
00:02:59,470 --> 00:03:01,790
同样，在这个应用程序中，我刚刚向您展示了

52
00:03:01,790 --> 00:03:04,760
可以找到一个全局状态的例子

53
00:03:04,760 --> 00:03:07,710
在 TheResources.vue 文件中。

54
00:03:07,710 --> 00:03:11,510
在那里我得到了这些存储的资源

55
00:03:11,510 --> 00:03:15,250
并且那些存储的资源被改变了

56
00:03:15,250 --> 00:03:18,154
通过 addResource 方法，例如，

57
00:03:18,154 --> 00:03:20,790
但是这个方法被触发了

58
00:03:20,790 --> 00:03:24,580
从另一个组件和 StoredResources 内部

59
00:03:24,580 --> 00:03:28,020
也用于此应用程序的其他组件。

60
00:03:28,020 --> 00:03:32,313
所以，这是一个应用程序范围，或者至少是一个多组件状态。

61
00:03:33,270 --> 00:03:37,090
它是跨多个组件使用的数据。

62
00:03:37,090 --> 00:03:41,580
这是 Vuex 可以帮助我们的全局状态。

63
00:03:41,580 --> 00:03:43,400
因为到目前为止，例如，

64
00:03:43,400 --> 00:03:45,610
在这个应用程序中，我刚刚向您展示了，

65
00:03:45,610 --> 00:03:50,610
我们通过提供和注入来管理这个状态。

66
00:03:50,850 --> 00:03:53,856
这行得通，这不一定是坏事，

67
00:03:53,856 --> 00:03:56,600
但它有几个缺点

68
00:03:56,600 --> 00:03:59,520
这可能对你来说很重要，也可能不重要。

69
00:03:59,520 --> 00:04:02,670
例如，一个潜在的劣势，

70
00:04:02,670 --> 00:04:05,670
是你最终得到了所有的数据

71
00:04:05,670 --> 00:04:09,430
以及更改一个组件中数据的所有方法。

72
00:04:09,430 --> 00:04:12,470
在这种情况下，TheResources 组件，

73
00:04:12,470 --> 00:04:14,650
因此变得相当大

74
00:04:14,650 --> 00:04:17,500
它有很多数据和很多方法

75
00:04:17,500 --> 00:04:20,209
在里面，这并不是真正需要的

76
00:04:20,209 --> 00:04:22,440
对于该组件的模板，

77
00:04:22,440 --> 00:04:25,790
但这只是其他组件所需要的。

78
00:04:25,790 --> 00:04:27,800
所以，得到这么大的组件，

79
00:04:27,800 --> 00:04:30,062
管理跨组件状态，

80
00:04:30,062 --> 00:04:34,540
随着应用程序的增长，这可能很难维护

81
00:04:34,540 --> 00:04:36,470
因为你可能有越来越多

82
00:04:36,470 --> 00:04:38,053
全局状态来管理。

83
00:04:38,990 --> 00:04:41,690
此外，提供并注入

84
00:04:41,690 --> 00:04:46,690
在反应性方面可能会遇到一些棘手的问题。

85
00:04:46,790 --> 00:04:50,080
这取决于您提供和注入的数据。

86
00:04:50,080 --> 00:04:52,210
虽然有解决方案

87
00:04:52,210 --> 00:04:54,530
对于您可能面临的所有可能的问题，

88
00:04:54,530 --> 00:04:58,723
最终像 Vuex 这样的解决方案可能是最好的解决方案。

89
00:04:59,640 --> 00:05:03,010
现在，为什么 Vuex 是一个很好的解决方案呢？

90
00:05:03,010 --> 00:05:04,993
为什么值得一看？

91
00:05:05,850 --> 00:05:08,650
正如我刚刚概述的那样，在应用范围内管理

92
00:05:08,650 --> 00:05:11,320
或全局状态可能很困难。

93
00:05:11,320 --> 00:05:13,860
你最终会得到这样的脂肪成分，

94
00:05:13,860 --> 00:05:15,650
其中有很多逻辑，

95
00:05:15,650 --> 00:05:18,490
组件的模板不需要它，

96
00:05:18,490 --> 00:05:20,890
但在应用程序的其他组件中。

97
00:05:20,890 --> 00:05:23,890
你也可能有不可预测的行为

98
00:05:23,890 --> 00:05:26,330
在您的应用程序中，因为它并不总是

99
00:05:26,330 --> 00:05:30,143
状态改变的地方立即显而易见

100
00:05:30,143 --> 00:05:33,124
或者也许可以改变状态

101
00:05:33,124 --> 00:05:36,570
以你不希望它被改变的方式。

102
00:05:36,570 --> 00:05:40,010
它也可能容易出错，因为意外

103
00:05:40,010 --> 00:05:43,460
或错过状态更新可能发生。

104
00:05:43,460 --> 00:05:47,040
回到组件中的这个例子

105
00:05:47,040 --> 00:05:51,610
我们注入资源的地方，我们得到资源数组，

106
00:05:51,610 --> 00:05:55,250
我们也在 TheResources.vue 中管理它。

107
00:05:55,250 --> 00:05:58,300
现在，理论上，我们可以编辑这个数组

108
00:05:58,300 --> 00:06:00,700
在注射的地方，

109
00:06:00,700 --> 00:06:04,920
我们将在内存中编辑完全相同的数组。

110
00:06:04,920 --> 00:06:08,530
我们不在这里这样做，但你可能会不小心这样做，

111
00:06:08,530 --> 00:06:11,060
或者可能是因为一位同事正在编写代码

112
00:06:11,060 --> 00:06:12,783
谁没有密切关注。

113
00:06:13,680 --> 00:06:15,700
这正是我的意思

114
00:06:15,700 --> 00:06:18,520
它是不可预测的或容易出错的。

115
00:06:18,520 --> 00:06:20,800
您可以在地方编辑数据

116
00:06:20,800 --> 00:06:22,870
它不应该被真正编辑的地方。

117
00:06:22,870 --> 00:06:24,290
当然，如果你自己工作，

118
00:06:24,290 --> 00:06:25,620
这可能不是问题，

119
00:06:25,620 --> 00:06:27,890
但在更大的项目和更大的团队中，

120
00:06:27,890 --> 00:06:29,253
这可能会成为一个问题。

121
00:06:30,120 --> 00:06:32,530
这正是 Vuex 帮助我们的地方

122
00:06:32,530 --> 00:06:37,530
因为使用 Vuex，我们将状态管理外包。

123
00:06:37,660 --> 00:06:40,460
它不再是这样的脂肪成分，

124
00:06:40,460 --> 00:06:42,610
相反，它在一个单独的地方，

125
00:06:42,610 --> 00:06:44,833
从组件中分离出来。

126
00:06:45,840 --> 00:06:48,684
这也是一个更可预测的，因为 Vuex 有

127
00:06:48,684 --> 00:06:52,870
关于应在何处管理状态的一些明确规则

128
00:06:52,870 --> 00:06:55,760
以及它应该如何更新和共享。

129
00:06:55,760 --> 00:06:58,610
因此它也不容易出错

130
00:06:58,610 --> 00:07:01,510
因为我们有明确定义的数据流，

131
00:07:01,510 --> 00:07:03,680
我们必须遵守。

132
00:07:03,680 --> 00:07:05,920
所以，这就是什么和为什么。

133
00:07:05,920 --> 00:07:09,963
现在让我们安装 Vuex 并开始使用它。