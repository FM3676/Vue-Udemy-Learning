1
00:00:02,130 --> 00:00:04,920
现在我们知道了 Vuex 的核心功能，

2
00:00:04,920 --> 00:00:08,400
稍后我们将在更真实的应用程序中看到它。

3
00:00:08,400 --> 00:00:10,410
不过，在我们去那里之前，

4
00:00:10,410 --> 00:00:13,440
让我们谈谈几个实用功能，

5
00:00:13,440 --> 00:00:17,480
这使我们作为开发人员的生活更轻松。

6
00:00:17,480 --> 00:00:20,470
让我们从映射器开始。

7
00:00:20,470 --> 00:00:22,470
以柜台为例，

8
00:00:22,470 --> 00:00:26,800
我们有这个计数器计算属性，

9
00:00:26,800 --> 00:00:27,700
我们到底在哪里，

10
00:00:27,700 --> 00:00:30,503
只需访问我们的最终计数器吸气剂。

11
00:00:31,470 --> 00:00:36,090
所以我们这里有这段代码只是为了访问我们的getter。

12
00:00:36,090 --> 00:00:38,160
现在，这显然不是很多代码，

13
00:00:38,160 --> 00:00:40,580
但我们什么也没做

14
00:00:40,580 --> 00:00:43,180
钻进我们的商店。

15
00:00:43,180 --> 00:00:44,250
这并不可怕。

16
00:00:44,250 --> 00:00:46,210
但如果你对此不满意

17
00:00:46,210 --> 00:00:48,920
Vuex 有一个你可以使用的助手。

18
00:00:48,920 --> 00:00:51,550
你可以从 Vuex 导入一些东西，

19
00:00:51,550 --> 00:00:56,363
那是一个mapGetters函数。

20
00:00:57,740 --> 00:01:00,400
您可以在此计算对象内部使用它。

21
00:01:00,400 --> 00:01:03,940
而不是自己定义计算属性，

22
00:01:03,940 --> 00:01:06,770
你可以在这里调用 mapGetters。

23
00:01:06,770 --> 00:01:10,270
这将返回一个您可以传播的对象

24
00:01:10,270 --> 00:01:12,610
使用 free.spread 运算符

25
00:01:12,610 --> 00:01:15,543
到您的计算属性对象中。

26
00:01:16,400 --> 00:01:20,050
所以 mapGetters 给你一个对象，我们现在合并

27
00:01:20,050 --> 00:01:22,073
到计算的属性对象中。

28
00:01:22,950 --> 00:01:25,500
因为对象 mapGetters 会给你

29
00:01:25,500 --> 00:01:28,170
是一个充满计算属性的对象，

30
00:01:28,170 --> 00:01:30,853
这是自动为您定义的。

31
00:01:31,710 --> 00:01:32,560
现在好了，

32
00:01:32,560 --> 00:01:35,250
我们在这里得到哪些计算属性？

33
00:01:35,250 --> 00:01:38,560
好吧，mapGetters 将数组作为参数。

34
00:01:38,560 --> 00:01:43,420
在这里，您将所有 getter 名称列为字符串，

35
00:01:43,420 --> 00:01:44,710
你想拥有的

36
00:01:44,710 --> 00:01:47,480
作为该组件中的计算属性。

37
00:01:47,480 --> 00:01:50,320
所以在这种情况下，例如，最后一个计数器，

38
00:01:50,320 --> 00:01:52,870
但当然，我们可以在这里有多个吸气剂。

39
00:01:53,740 --> 00:01:55,980
现在这将给我们一个最后的计数器

40
00:01:55,980 --> 00:01:58,360
此组件中的计算属性，

41
00:01:58,360 --> 00:02:02,053
它自动指向 finalCounter getter。

42
00:02:03,970 --> 00:02:04,803
有了这个，

43
00:02:04,803 --> 00:02:07,340
我们只需要把这里的这个改成finalCounter，

44
00:02:07,340 --> 00:02:10,289
因为那将是计算的属性名称。

45
00:02:10,289 --> 00:02:12,240
然后如果我们重新加载，

46
00:02:12,240 --> 00:02:14,370
它仍然像以前一样工作。

47
00:02:14,370 --> 00:02:16,120
但是现在有了 mapGetters，

48
00:02:16,120 --> 00:02:18,500
尤其是当您使用多个 getter 时

49
00:02:18,500 --> 00:02:19,860
在给定的组件中，

50
00:02:19,860 --> 00:02:21,980
你也许可以保存一些代码

51
00:02:21,980 --> 00:02:25,973
并且不要一直不必要地钻进商店。

52
00:02:27,660 --> 00:02:31,370
现在，对于状态和突变，我们有类似的东西，

53
00:02:31,370 --> 00:02:34,840
但无论如何，您并没有真正在组件中使用它们。

54
00:02:34,840 --> 00:02:37,320
那么让我们看一下mapActions，

55
00:02:37,320 --> 00:02:41,800
它也存在于将 mapActions 映射到您的组件中。

56
00:02:41,800 --> 00:02:43,440
这看起来怎么样？

57
00:02:43,440 --> 00:02:44,980
假设在找零柜台，

58
00:02:44,980 --> 00:02:47,980
我们不想手动定义方法，

59
00:02:47,980 --> 00:02:50,950
最后也只是钻进商店

60
00:02:50,950 --> 00:02:53,533
在这里发送一些动作。

61
00:02:54,730 --> 00:02:57,860
相反，我们可以像使用 getter 一样，

62
00:02:57,860 --> 00:03:02,090
从 Vuex 导入一些东西，

63
00:03:02,090 --> 00:03:05,620
这里的东西是mapActions。

64
00:03:07,350 --> 00:03:11,140
现在，就像使用 mapGetters 一样，我们调用 mapActions。

65
00:03:11,140 --> 00:03:13,590
现在在方法内部，

66
00:03:13,590 --> 00:03:15,160
不在计算范围内，

67
00:03:15,160 --> 00:03:17,110
但在方法内部。

68
00:03:17,110 --> 00:03:20,610
我们像这样调用mapActions。

69
00:03:20,610 --> 00:03:23,840
并再次取回我们 m 的对象尔格

70
00:03:23,840 --> 00:03:27,173
通过使用扩展运算符与方法对象。

71
00:03:28,040 --> 00:03:31,250
MapActions 现在也需要一个数组。

72
00:03:31,250 --> 00:03:34,090
现在我们在这里定义所有的动作名称，

73
00:03:34,090 --> 00:03:37,840
我们希望将其作为此组件中的方法。

74
00:03:37,840 --> 00:03:39,820
所以在这种情况下，增加。

75
00:03:39,820 --> 00:03:42,660
但是当然，我们也可以在这里添加增加动作

76
00:03:42,660 --> 00:03:46,820
将这两个操作映射到此组件中的方法。

77
00:03:46,820 --> 00:03:50,310
这些方法将由 mapActions 为您创建。

78
00:03:50,310 --> 00:03:52,163
这就是使用它背后的想法。

79
00:03:53,750 --> 00:03:56,960
现在，我们可以添加第二个按钮

80
00:03:56,960 --> 00:04:00,300
在第一个按钮上，调用增量。

81
00:04:00,300 --> 00:04:01,760
这是方法的名称

82
00:04:01,760 --> 00:04:05,090
这将为增量操作创建

83
00:04:05,090 --> 00:04:07,853
并指向第二个按钮上的增加。

84
00:04:08,750 --> 00:04:11,470
现在，当然我们需要一个有效载荷。

85
00:04:11,470 --> 00:04:16,350
然后，您可以简单地将有效负载作为参数传递。

86
00:04:16,350 --> 00:04:20,360
所以在这种情况下，一个值为 10 的对象。

87
00:04:20,360 --> 00:04:23,670
因为我们希望我们的商店中有一个有效载荷，

88
00:04:23,670 --> 00:04:25,163
这将是一个对象，

89
00:04:26,030 --> 00:04:28,680
它具有 value 属性。

90
00:04:28,680 --> 00:04:31,780
所以这就是为什么我们在这里传递一个带有 value 属性的对象

91
00:04:31,780 --> 00:04:36,260
简单地作为这个自动创建的方法的参数。

92
00:04:36,260 --> 00:04:39,350
有了它，我们可以改变这个按钮的标题

93
00:04:39,350 --> 00:04:42,650
也许到 11 来区分它与其他按钮，

94
00:04:42,650 --> 00:04:44,050
也改变值。

95
00:04:44,050 --> 00:04:45,900
有了这个，

96
00:04:45,900 --> 00:04:49,200
现在我们有了这个新按钮，它也可以工作。

97
00:04:49,200 --> 00:04:51,510
所以现在我们也在映射动作

98
00:04:51,510 --> 00:04:53,610
这为我们节省了时间

99
00:04:53,610 --> 00:04:55,973
我们自己添加到这些方法中。

100
00:04:57,210 --> 00:05:00,700
还有另一种映射动作的方法，

101
00:05:00,700 --> 00:05:03,800
如果您对默认名称不满意，

102
00:05:03,800 --> 00:05:06,060
你也可以调用 mapActions

103
00:05:06,060 --> 00:05:10,360
而不是将数组传递给它，而是传递一个对象。

104
00:05:10,360 --> 00:05:12,780
然后您可以定义方法名称

105
00:05:12,780 --> 00:05:16,920
你想在你的组件中作为键。

106
00:05:16,920 --> 00:05:18,410
例如，公司，

107
00:05:18,410 --> 00:05:20,330
然后按住动作

108
00:05:20,330 --> 00:05:23,573
它应该作为一个值映射到这个方法。

109
00:05:25,130 --> 00:05:30,130
因此，我们可以使用 inc 并像这样增加。

110
00:05:30,190 --> 00:05:32,220
有了这个，增量动作

111
00:05:32,220 --> 00:05:34,110
将映射到 inc 方法，

112
00:05:34,110 --> 00:05:37,160
增加将映射到增加的方法。

113
00:05:37,160 --> 00:05:38,960
因此我们必须调用

114
00:05:38,960 --> 00:05:41,353
现在通过调用 inc 来增加，

115
00:05:42,860 --> 00:05:44,060
增加停留增加，

116
00:05:44,060 --> 00:05:46,510
因为这就是我映射它的方式。

117
00:05:46,510 --> 00:05:48,520
当然还有数据，

118
00:05:48,520 --> 00:05:51,363
如果我们尝试这个，那仍然有效。

119
00:05:52,250 --> 00:05:55,563
所以 mapActions 和 mapGetters 会非常非常有用。