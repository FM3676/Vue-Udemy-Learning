1
00:00:02,130 --> 00:00:03,710
所以让我们现在继续。

2
00:00:03,710 --> 00:00:04,970
一方面，我得到一个错误

3
00:00:04,970 --> 00:00:08,060
在 main.js 中找不到 store.js。

4
00:00:08,060 --> 00:00:11,460
是的，因为我是从 store/index.js 导入的。

5
00:00:11,460 --> 00:00:12,890
那是正确的。

6
00:00:12,890 --> 00:00:15,683
因此，请确保您正确设置了此导入。

7
00:00:17,010 --> 00:00:18,740
但除此之外，我们现在还需要

8
00:00:18,740 --> 00:00:21,620
用不同的组件连接我们的商店

9
00:00:21,620 --> 00:00:24,830
并清理 App.vue 组件。

10
00:00:24,830 --> 00:00:28,850
在那里，我不想再提供任何东西

11
00:00:28,850 --> 00:00:32,220
因为我不想再管理那里的任何数据了。

12
00:00:32,220 --> 00:00:34,550
我们仍然有 isLoggedIn 在那里

13
00:00:34,550 --> 00:00:36,820
但我们也会尽快删除它，

14
00:00:36,820 --> 00:00:38,120
就像这些方法一样。

15
00:00:38,120 --> 00:00:40,260
暂时，让我们忽略它们。

16
00:00:40,260 --> 00:00:42,930
但是现在让我们开始使用我们的模块。

17
00:00:42,930 --> 00:00:44,086
现在，我忘记了一件事

18
00:00:44,086 --> 00:00:48,190
在此购物车模块的 cart.js 中，

19
00:00:48,190 --> 00:00:50,320
我也想命名这个。

20
00:00:50,320 --> 00:00:52,713
所以在这里设置命名空间为真。

21
00:00:53,690 --> 00:00:56,303
现在让我们在这个应用程序的不同部分使用它。

22
00:00:57,280 --> 00:00:59,740
为此，我们可以从 ProductsList 开始。

23
00:00:59,740 --> 00:01:02,720
在这里，我以前注射过产品。

24
00:01:02,720 --> 00:01:04,750
我们不再这样做了。

25
00:01:04,750 --> 00:01:07,740
相反，我现在想访问 Vuex。

26
00:01:07,740 --> 00:01:10,050
所以我们可以添加一个计算属性。

27
00:01:10,050 --> 00:01:12,530
并且要么使用地图收集助手

28
00:01:12,530 --> 00:01:14,930
或添加我们自己的计算属性，

29
00:01:14,930 --> 00:01:16,530
这就是我要做的。

30
00:01:16,530 --> 00:01:18,280
也许将其命名为产品

31
00:01:19,250 --> 00:01:22,700
并返回 this.$store

32
00:01:22,700 --> 00:01:24,290
现在让我们看看。

33
00:01:24,290 --> 00:01:27,520
在产品模块中，我有产品吸气剂

34
00:01:27,520 --> 00:01:29,180
但请记住，这个模块

35
00:01:29,180 --> 00:01:32,883
是命名空间，命名空间是 prods。

36
00:01:33,830 --> 00:01:36,970
那么我们应该在 ProductsList.vue 中访问什么

37
00:01:36,970 --> 00:01:38,790
在页面文件夹中

38
00:01:38,790 --> 00:01:43,790
是 .getters，然后是产品/产品。

39
00:01:46,550 --> 00:01:49,450
这给了我们一个 products 计算属性，

40
00:01:49,450 --> 00:01:51,783
我们可以使用它来查找所有产品。

41
00:01:52,840 --> 00:01:54,400
现在，我们目前无法预览

42
00:01:54,400 --> 00:01:56,270
因为我们仍然在页面上遇到错误

43
00:01:56,270 --> 00:01:57,493
但这应该可行。

44
00:01:58,730 --> 00:02:00,590
现在，让我们修复其他错误。

45
00:02:00,590 --> 00:02:03,257
让我们确保我们也获得购物车数据

46
00:02:03,257 --> 00:02:05,192
和正确的标题。

47
00:02:05,192 --> 00:02:07,530
它不再是 cart.qty

48
00:02:07,530 --> 00:02:11,180
但是让我们说 cartQuantity 像这样

49
00:02:11,180 --> 00:02:15,210
作为将来使用此名称的计算属性。

50
00:02:15,210 --> 00:02:17,620
我们不再在这里注入任何东西

51
00:02:17,620 --> 00:02:19,890
但相反，我们添加计算，

52
00:02:19,890 --> 00:02:23,530
添加此 cartQuantity 计算属性，

53
00:02:23,530 --> 00:02:25,933
我刚刚在模板中提到过。

54
00:02:27,240 --> 00:02:30,210
在那里，返回 this.$store

55
00:02:32,340 --> 00:02:35,570
现在在这里，我们还命名了购物车。

56
00:02:35,570 --> 00:02:38,830
所以我们访问这个 store.getters

57
00:02:38,830 --> 00:02:42,730
然后使用购物车命名空间，即购物车

58
00:02:42,730 --> 00:02:46,070
在 store 文件夹中的 index.js 文件中。

59
00:02:46,070 --> 00:02:48,930
所以访问购物车/

60
00:02:48,930 --> 00:02:51,140
然后是我感兴趣的吸气剂

61
00:02:51,140 --> 00:02:54,253
在我的情况下是这里的数量。

62
00:02:55,990 --> 00:02:58,743
这就是/数量。

63
00:03:01,080 --> 00:03:01,913
让我们保存它。

64
00:03:03,430 --> 00:03:04,890
如果你现在重新加载，

65
00:03:04,890 --> 00:03:06,590
你应该再次看到产品

66
00:03:06,590 --> 00:03:08,020
至少看到购物车。

67
00:03:08,020 --> 00:03:11,270
您不能去购物车，否则您将看不到任何东西

68
00:03:11,270 --> 00:03:12,780
应用程序中断

69
00:03:12,780 --> 00:03:16,203
但至少第一部分现在正在工作。

70
00:03:17,590 --> 00:03:21,000
所以现在让我们来处理其他部分。

71
00:03:21,000 --> 00:03:24,870
在 UserCart 中，我对 cart.items 感兴趣。

72
00:03:24,870 --> 00:03:28,160
所以在这里我会改变这个并期待cartItems，

73
00:03:28,160 --> 00:03:31,170
我很快会将其添加为计算属性。

74
00:03:31,170 --> 00:03:33,363
我也在这里使用 cartTotal。

75
00:03:34,550 --> 00:03:36,750
我们不再在这里注入购物车。

76
00:03:36,750 --> 00:03:39,700
相反，cartTotal 的计算属性

77
00:03:40,920 --> 00:03:44,080
现在将引用 this.$store.getters

78
00:03:44,920 --> 00:03:47,470
然后购物车/，

79
00:03:47,470 --> 00:03:48,620
它以前如何？

80
00:03:48,620 --> 00:03:49,473
这是总和，

81
00:03:51,400 --> 00:03:55,260
所以在这里参考totalSum。

82
00:03:55,260 --> 00:03:59,367
并添加另一个名为 cartItems 的计算属性，

83
00:04:00,520 --> 00:04:03,773
或您在 v-for 循环中使用的任何内容。

84
00:04:05,448 --> 00:04:10,448
在这里，返回 this.$store.getters cart/

85
00:04:12,790 --> 00:04:15,373
然后是我认为的产品。

86
00:04:16,420 --> 00:04:18,403
是的，products 是吸气剂名称。

87
00:04:20,970 --> 00:04:22,540
有了这个，如果我们去购物车，

88
00:04:22,540 --> 00:04:24,790
这也可以再次使用。

89
00:04:24,790 --> 00:04:26,840
现在让我们确保我们也可以添加东西

90
00:04:26,840 --> 00:04:28,310
到购物车并删除它们。

91
00:04:28,310 --> 00:04:30,733
因此，为此，我们需要调度操作。

92
00:04:31,860 --> 00:04:33,600
所以对于动作，

93
00:04:33,600 --> 00:04:38,260
在组件文件夹中，产品，ProductItem，

94
00:04:38,260 --> 00:04:40,713
我得到了向购物车添加东西的按钮。

95
00:04:41,660 --> 00:04:45,110
以前，我为此注入了 addProductToCart 。

96
00:04:45,110 --> 00:04:47,060
现在我们可以删除这个

97
00:04:47,060 --> 00:04:52,003
而是调用 this.$store.dispatch

98
00:04:54,650 --> 00:04:58,160
然后调度一个函数，

99
00:04:58,160 --> 00:05:02,080
它被命名为 addProductToCart。

100
00:05:04,050 --> 00:05:05,610
不，对不起，那是突变，

101
00:05:05,610 --> 00:05:08,283
这就是名为 addToCart 的操作。

102
00:05:09,210 --> 00:05:11,560
所以发送这个

103
00:05:11,560 --> 00:05:15,023
但它是命名空间的，所以它是购物车/addToCart。

104
00:05:18,130 --> 00:05:23,130
现在，当然，这里的这个对象就是有效载荷，

105
00:05:25,970 --> 00:05:28,130
我想传达的。

106
00:05:28,130 --> 00:05:30,970
实际上在这里，我们必须小心。

107
00:05:30,970 --> 00:05:34,220
在模块中，Vuex 模块，

108
00:05:34,220 --> 00:05:37,340
我们将该有效载荷转发给突变

109
00:05:37,340 --> 00:05:40,130
在 addProductToCart 突变中，

110
00:05:40,130 --> 00:05:44,380
我希望在我的有效载荷上获得一个产品密钥，

111
00:05:44,380 --> 00:05:47,363
然后有我试图提取的所有字段。

112
00:05:48,670 --> 00:05:51,280
现在，如果我像这样传递整个对象

113
00:05:51,280 --> 00:05:54,159
作为有效载荷，那里没有产品。

114
00:05:54,159 --> 00:05:57,470
所以我们要么把这些数据嵌套在这里

115
00:05:57,470 --> 00:06:00,210
进入关键产品下的另一个对象

116
00:06:00,210 --> 00:06:02,300
在这个有效载荷对象中

117
00:06:02,300 --> 00:06:05,040
或者我们像这样传递有效载荷

118
00:06:05,040 --> 00:06:07,810
并在突变中调整我们的逻辑

119
00:06:07,810 --> 00:06:10,610
简单地设置有效载荷，因为我们得到它相等

120
00:06:10,610 --> 00:06:13,900
到 productData，然后我们从中提取 id 等等。

121
00:06:13,900 --> 00:06:15,210
这就是我要做的

122
00:06:15,210 --> 00:06:17,723
因为这意味着更少的代码更改。

123
00:06:20,220 --> 00:06:25,030
现在，在 CartItem 中，组件、购物车、CartItem、

124
00:06:25,030 --> 00:06:27,640
我们得到了删除项目的逻辑。

125
00:06:27,640 --> 00:06:29,910
以前，我注射过这个。

126
00:06:29,910 --> 00:06:31,410
不再需要。

127
00:06:31,410 --> 00:06:32,974
所以让我们摆脱它。

128
00:06:32,974 --> 00:06:37,974
而在这里，我想简单地调用 this.$store.dispatch

129
00:06:42,420 --> 00:06:47,420
cart/ 然后动作名称是 removeFromCart

130
00:06:49,320 --> 00:06:50,460
在有效载荷上，

131
00:06:50,460 --> 00:06:53,180
我们想要的突变，

132
00:06:53,180 --> 00:06:56,630
我希望在对象中获得一个 productId 字段

133
00:06:56,630 --> 00:06:58,190
我明白了。

134
00:06:58,190 --> 00:07:01,150
所以在 CartItem 中，我发送 cart/removeFromCart

135
00:07:02,300 --> 00:07:04,323
并将对象作为有效负载传递，

136
00:07:04,323 --> 00:07:06,330
其中有一个 productId 字段，

137
00:07:06,330 --> 00:07:08,250
指向这个prodId，

138
00:07:08,250 --> 00:07:10,787
这是保存productId的这个道具。

139
00:07:13,690 --> 00:07:16,170
有了这个，理论上，希望，

140
00:07:16,170 --> 00:07:18,710
我们应该能够添加和删除项目。

141
00:07:18,710 --> 00:07:20,920
你会看到，这里的徽章更新了

142
00:07:20,920 --> 00:07:23,150
当我添加我购物车。

143
00:07:23,150 --> 00:07:24,440
如果我去购物车，

144
00:07:24,440 --> 00:07:25,780
总看起来不错。

145
00:07:25,780 --> 00:07:27,700
我们看到购物车项目

146
00:07:27,700 --> 00:07:28,870
如果我删除它们，

147
00:07:28,870 --> 00:07:31,310
总和调度更新。

148
00:07:31,310 --> 00:07:32,753
所以这似乎有效。

149
00:07:34,100 --> 00:07:36,140
现在，我收到有关 isLoggedIn 的警告

150
00:07:36,140 --> 00:07:37,340
但我们很快就会解决这个问题。

151
00:07:38,820 --> 00:07:42,380
这里最主要的是我们现在迁移了产品

152
00:07:42,380 --> 00:07:44,683
和购物车功能。

153
00:07:45,830 --> 00:07:48,570
现在，要在这里获得一些奖励积分，

154
00:07:48,570 --> 00:07:52,870
我们实际上也可以改变我们的 addToCart 逻辑。

155
00:07:52,870 --> 00:07:56,653
在 ProductItem 中，我当前正在传递整个产品数据。

156
00:07:57,790 --> 00:08:00,370
我们可以争辩说所有的产品数据

157
00:08:00,370 --> 00:08:04,110
在 products.js 中已经在我们的商店中。

158
00:08:04,110 --> 00:08:06,210
在这里，我们拥有所有产品。

159
00:08:06,210 --> 00:08:09,250
所以我们真正必须在这里通过的唯一一件事

160
00:08:09,250 --> 00:08:13,320
addToCart 应该是产品的 ID。

161
00:08:13,320 --> 00:08:14,430
所以让我们这样做。

162
00:08:14,430 --> 00:08:17,733
让我们在这里摆脱图像和标题和价格。

163
00:08:19,010 --> 00:08:19,940
让我们删除它

164
00:08:19,940 --> 00:08:23,303
只需转发 id 字段上的 ID。

165
00:08:24,560 --> 00:08:29,560
现在在购物车中，在 addProductToCart 中，

166
00:08:29,730 --> 00:08:30,810
我得到了我的有效载荷，

167
00:08:30,810 --> 00:08:33,913
它不再包含所有产品数据。

168
00:08:35,010 --> 00:08:38,722
相反，现在我在这里得到了我的 prodId

169
00:08:40,030 --> 00:08:42,100
通过访问 id 字段

170
00:08:42,100 --> 00:08:42,933
在有效载荷上。

171
00:08:42,933 --> 00:08:44,203
这就是我在这里的全部。

172
00:08:45,830 --> 00:08:47,580
当然，这还不够。

173
00:08:48,640 --> 00:08:51,400
现在，问题是因为一切都是命名空间的

174
00:08:51,400 --> 00:08:55,170
并且模块内部的状态无论如何都是本地的，

175
00:08:55,170 --> 00:08:58,380
我们到达这里的状态就是这个状态。

176
00:08:58,380 --> 00:09:01,610
它没有关于产品的信息。

177
00:09:01,610 --> 00:09:04,310
因此，我们实际上应该得到这个产品ID

178
00:09:04,310 --> 00:09:06,090
在行动中，

179
00:09:06,090 --> 00:09:08,160
在 addToCart 动作中

180
00:09:08,160 --> 00:09:10,390
因为在这种情况下，

181
00:09:10,390 --> 00:09:12,800
我们实际上也可以访问

182
00:09:12,800 --> 00:09:15,470
到 Vuex 商店的其他部分，

183
00:09:15,470 --> 00:09:17,453
不仅仅是这个模块。

184
00:09:18,610 --> 00:09:23,400
在这里，在上下文中，我们将拥有我们的 rootState 对象，

185
00:09:23,400 --> 00:09:25,750
可以访问根状态

186
00:09:25,750 --> 00:09:27,170
但更重要的是，

187
00:09:27,170 --> 00:09:29,583
我们可以访问 rootGetters。

188
00:09:30,800 --> 00:09:33,210
在 rootGetters 上，我们可以访问

189
00:09:33,210 --> 00:09:35,980
也适用于其他命名空间的 getter。

190
00:09:35,980 --> 00:09:39,980
即这里给我的产品吸气剂

191
00:09:39,980 --> 00:09:41,683
在产品模块中。

192
00:09:42,630 --> 00:09:43,810
如何？

193
00:09:43,810 --> 00:09:47,040
只需访问方括号，

194
00:09:47,040 --> 00:09:50,890
然后是命名空间名称，在本例中为 prods。

195
00:09:50,890 --> 00:09:51,950
对于产品

196
00:09:53,530 --> 00:09:57,760
然后是吸气剂名称，这里是产品

197
00:09:57,760 --> 00:09:59,113
在产品模块中。

198
00:10:00,370 --> 00:10:05,180
有了它，我们实际上得到了我们的产品

199
00:10:05,180 --> 00:10:08,610
现在我们可以过滤掉具有此 ID 的产品。

200
00:10:08,610 --> 00:10:11,720
所以现在我们可以得到我们的产品

201
00:10:11,720 --> 00:10:15,210
通过使用 find 方法搜索产品

202
00:10:15,210 --> 00:10:17,330
对于 prod.id 所在的产品

203
00:10:17,330 --> 00:10:19,793
等于我们在这里得到的 prodId。

204
00:10:21,160 --> 00:10:22,300
这是一个内置方法

205
00:10:22,300 --> 00:10:24,330
用于搜索数组中的所有项目

206
00:10:24,330 --> 00:10:26,500
当这个函数返回真时，

207
00:10:26,500 --> 00:10:28,270
我们得到了我们想要的物品

208
00:10:28,270 --> 00:10:31,040
然后它返回这个项目。

209
00:10:31,040 --> 00:10:33,570
然后就是这个产品，

210
00:10:33,570 --> 00:10:36,060
我们可以将其作为第二个参数传递

211
00:10:36,060 --> 00:10:39,763
作为我们提交方法的有效负载。

212
00:10:41,000 --> 00:10:44,650
所以现在我们收到了这个突变中的整个产品

213
00:10:44,650 --> 00:10:46,620
和有效载荷再一次

214
00:10:46,620 --> 00:10:48,683
是整个产品数据。

215
00:10:50,810 --> 00:10:52,640
如果我们现在保存这个，

216
00:10:52,640 --> 00:10:56,420
希望添加到购物车仍然有效。

217
00:10:56,420 --> 00:10:58,440
这看起来不错

218
00:10:58,440 --> 00:11:00,680
我们仍然在这里看到我们的数据

219
00:11:00,680 --> 00:11:03,550
但现在我们得到了不同的结果，

220
00:11:03,550 --> 00:11:06,630
稍微精简一点，利用行动

221
00:11:06,630 --> 00:11:09,610
并且不将所有数据作为有效负载传递，

222
00:11:09,610 --> 00:11:13,810
至少当我们在组件内部调度它时不会。

223
00:11:13,810 --> 00:11:16,090
取决于您喜欢哪种方法

224
00:11:16,090 --> 00:11:17,740
但这是一种常见的情况。

225
00:11:17,740 --> 00:11:20,240
因此，我也想在这里向您展示。

226
00:11:22,410 --> 00:11:25,653
有了这个，唯一剩下的就是登录状态。