1
00:00:02,220 --> 00:00:05,120
现在我们有了“Mutations and Getters”

2
00:00:05,120 --> 00:00:06,860
可能缺少什么？

3
00:00:06,860 --> 00:00:08,453
还有一个重要的概念，

4
00:00:08,453 --> 00:00:12,230
Vuex 公开的另一个重要特性。

5
00:00:12,230 --> 00:00:14,560
但为了理解它，

6
00:00:14,560 --> 00:00:16,760
让我们回到我们的代码。

7
00:00:16,760 --> 00:00:21,130
比方说，在增量突变中，

8
00:00:21,130 --> 00:00:24,180
我们不想立即增加。

9
00:00:24,180 --> 00:00:26,510
相反，我们想等待两秒钟

10
00:00:26,510 --> 00:00:28,760
然后递增。

11
00:00:28,760 --> 00:00:31,140
现在这可能是一个愚蠢的例子，

12
00:00:31,140 --> 00:00:33,060
但一个更好的例子可能是一个应用程序

13
00:00:33,060 --> 00:00:35,870
发送 HTTP 请求的位置

14
00:00:35,870 --> 00:00:37,730
你等待回应。

15
00:00:37,730 --> 00:00:39,810
只有当响应出现时，

16
00:00:39,810 --> 00:00:41,463
你想改变你的状态。

17
00:00:42,600 --> 00:00:45,630
换句话说，你有时有代码，

18
00:00:45,630 --> 00:00:47,820
它异步运行，

19
00:00:47,820 --> 00:00:49,940
这不会立即完成，

20
00:00:49,940 --> 00:00:51,683
但有时在未来。

21
00:00:52,620 --> 00:00:57,430
问题是突变必须是同步的。

22
00:00:57,430 --> 00:01:01,040
你不能在那里有任何异步代码。

23
00:01:01,040 --> 00:01:03,370
因此，如果您运行 Mutation，

24
00:01:03,370 --> 00:01:07,090
它需要一步一步地执行，没有任何停顿

25
00:01:07,090 --> 00:01:09,610
并立即改变状态。

26
00:01:09,610 --> 00:01:14,290
不允许做任何可能需要更长时间的事情。

27
00:01:14,290 --> 00:01:17,070
原因很简单，如果多个

28
00:01:17,070 --> 00:01:18,550
突变执行，

29
00:01:18,550 --> 00:01:21,820
每个突变都应该得到最新的状态。

30
00:01:21,820 --> 00:01:24,540
如果发生了另一个突变，

31
00:01:24,540 --> 00:01:26,330
但是还没完结

32
00:01:26,330 --> 00:01:30,540
这是意料之外的，会导致您的程序出错。

33
00:01:30,540 --> 00:01:33,680
这就是为什么 Mutations 的一个关键要求

34
00:01:33,680 --> 00:01:37,150
是它们必须是同步的。

35
00:01:37,150 --> 00:01:40,770
但是如果我确实想等待两秒钟呢？

36
00:01:40,770 --> 00:01:43,140
我们可以这样做，因为我们已经设置了超时。

37
00:01:43,140 --> 00:01:45,600
在那里，我们可以等两秒钟，

38
00:01:45,600 --> 00:01:47,350
然后这里的功能，

39
00:01:47,350 --> 00:01:49,800
然后在两秒钟后执行，

40
00:01:49,800 --> 00:01:51,283
我们更新我们的状态。

41
00:01:52,220 --> 00:01:53,910
但这实际上是不允许的。

42
00:01:53,910 --> 00:01:55,570
试一试就会有效果

43
00:01:55,570 --> 00:01:59,320
但这是一种非常糟糕的做法，你不应该做任何事情。

44
00:01:59,320 --> 00:02:02,700
相反，Vuex 有一个更好的概念

45
00:02:02,700 --> 00:02:05,550
用于处理异步代码。

46
00:02:05,550 --> 00:02:10,169
除了 Mutations 和 Getters，它还有 Actions。

47
00:02:10,169 --> 00:02:13,200
组件应该触发动作，

48
00:02:13,200 --> 00:02:15,863
然后依次提交突变。

49
00:02:16,810 --> 00:02:21,810
因为 Actions 现在可以使用异步代码了。

50
00:02:21,880 --> 00:02:22,820
正因为如此，

51
00:02:22,820 --> 00:02:26,410
一般来说，这实际上被认为是一种很好的做法，

52
00:02:26,410 --> 00:02:31,270
始终将动作放在组件和突变之间，

53
00:02:31,270 --> 00:02:34,790
即使组件可以自己提交突变。

54
00:02:34,790 --> 00:02:36,760
这不会是一个问题

55
00:02:36,760 --> 00:02:39,380
如果您只有同步代码。

56
00:02:39,380 --> 00:02:43,300
但即使有这样一个事实，即直接提交 Mutations

57
00:02:43,300 --> 00:02:46,580
从内部组件通常不会成为问题。

58
00:02:46,580 --> 00:02:50,000
即使这样，这也被认为是一种好习惯

59
00:02:50,000 --> 00:02:52,300
始终将 Actions 放在两者之间

60
00:02:52,300 --> 00:02:57,040
确保您永远不会意外放置异步代码

61
00:02:57,040 --> 00:02:58,483
进入突变。

62
00:02:59,570 --> 00:03:00,900
那么 Actions 是如何工作的呢？

63
00:03:00,900 --> 00:03:02,633
我们如何将它们添加到我们的商店？

64
00:03:03,640 --> 00:03:05,280
在主js中，

65
00:03:05,280 --> 00:03:08,320
除了 Mutations、Getters 和 State，

66
00:03:08,320 --> 00:03:10,770
我们可以添加动作。

67
00:03:10,770 --> 00:03:14,063
我在这里做这个，我会在这里添加动作。

68
00:03:15,710 --> 00:03:17,880
并且 Action 也需要一个对象

69
00:03:17,880 --> 00:03:20,403
就像 Getters 和 Mutations 一样。

70
00:03:21,520 --> 00:03:24,350
又是一个动作只是一种方法。

71
00:03:24,350 --> 00:03:29,140
比如increment：这里可以使用同名

72
00:03:29,140 --> 00:03:31,820
就像你在突变中所做的那样。

73
00:03:31,820 --> 00:03:33,840
所以在这里我有一个增量突变。

74
00:03:33,840 --> 00:03:36,143
我也在使用增量动作。

75
00:03:37,100 --> 00:03:38,890
你不必使用相同的名字，

76
00:03:38,890 --> 00:03:42,360
但通常你会，因为通常你只是有一个动作

77
00:03:42,360 --> 00:03:45,080
在组件和突变之间。

78
00:03:45,080 --> 00:03:47,513
因此，使用相同的名称是有意义的。

79
00:03:49,120 --> 00:03:53,970
现在，这个动作将得到一个对象作为参数，

80
00:03:53,970 --> 00:03:56,030
一个上下文对象。

81
00:03:56,030 --> 00:04:00,700
而这个上下文对象充满了有趣的东西。

82
00:04:00,700 --> 00:04:04,360
实际由 Vuex 自动获取这个参数，

83
00:04:04,360 --> 00:04:06,503
就像所有这些 Veux 功能一样。

84
00:04:07,630 --> 00:04:11,470
例如，现在 context 有一个 commit 方法，

85
00:04:11,470 --> 00:04:12,750
你可以打电话。

86
00:04:12,750 --> 00:04:17,750
它会按照你的想法去做，它会发生突变，

87
00:04:18,040 --> 00:04:21,709
就像您可以从组件内部提交它一样。

88
00:04:21,709 --> 00:04:24,300
您可以将第二个参数作为有效负载传递

89
00:04:24,300 --> 00:04:27,280
你也可以传递一个对象

90
00:04:27,280 --> 00:04:30,150
到使用它的两个参数的方式。

91
00:04:30,150 --> 00:04:32,100
但在这里我只需要一个论点

92
00:04:32,100 --> 00:04:34,230
这将是突变的名称

93
00:04:34,230 --> 00:04:35,480
应该这样做。

94
00:04:36,370 --> 00:04:38,240
现在我们来看看其他的东西

95
00:04:38,240 --> 00:04:40,530
在一秒钟内进入上下文，

96
00:04:40,530 --> 00:04:42,690
但就目前而言，让我们这样吧。

97
00:04:42,690 --> 00:04:45,810
现在我们得到了一个提交增量的动作。

98
00:04:45,810 --> 00:04:48,310
有趣的是，Actions，

99
00:04:48,310 --> 00:04:52,603
不像 Mutations 允许运行异步代码。

100
00:04:53,780 --> 00:04:56,460
所以我们可以在这里超时

101
00:04:57,890 --> 00:05:00,663
并用它包装上下文提交。

102
00:05:02,140 --> 00:05:05,530
这样，突变再次同步，

103
00:05:05,530 --> 00:05:07,940
但动作是异步的，

104
00:05:07,940 --> 00:05:10,450
这是 Veux 允许的。

105
00:05:10,450 --> 00:05:12,650
它只是简单地提交突变

106
00:05:12,650 --> 00:05:14,493
一旦两秒钟过去了。

107
00:05:15,640 --> 00:05:18,280
现在我们需要更改我们的组件代码

108
00:05:18,280 --> 00:05:20,290
并确保我们不承诺

109
00:05:20,290 --> 00:05:21,970
从组件内部，

110
00:05:21,970 --> 00:05:24,690
但我们使用动作代替。

111
00:05:24,690 --> 00:05:26,950
那么我们如何使用一个动作呢？

112
00:05:26,950 --> 00:05:30,343
这在 Veux 是如何发生的？

113
00:05:31,210 --> 00:05:33,090
好吧，在组件内部

114
00:05:33,090 --> 00:05:35,430
我们之前承诺的地方，

115
00:05:35,430 --> 00:05:39,000
我们现在可以调度一个动作。

116
00:05:39,000 --> 00:05:42,070
最酷的是调度的语法

117
00:05:42,070 --> 00:05:44,830
与提交几乎相同。

118
00:05:44,830 --> 00:05:48,270
您可以使用两个参数进行调度

119
00:05:48,270 --> 00:05:51,480
其中第一个参数是动作名称。

120
00:05:51,480 --> 00:05:54,010
所以在我的情况下在这里增加。

121
00:05:54,010 --> 00:05:57,910
第二个参数是你想要的潜在有效载荷，

122
00:05:57,910 --> 00:06:01,293
或者您使用一个参数语法。

123
00:06:02,160 --> 00:06:04,640
然而，在这里，我正在调度增加，

124
00:06:04,640 --> 00:06:06,990
尚不作为动作存在。

125
00:06:06,990 --> 00:06:10,240
所以我也会很快添加一个增加动作

126
00:06:10,240 --> 00:06:12,080
这样就可以了。

127
00:06:12,080 --> 00:06:15,050
只需添加一个名为“增加”的新操作，

128
00:06:15,050 --> 00:06:18,173
和上下文提交在这里增加。

129
00:06:19,410 --> 00:06:22,190
您的操作将收到有效负载

130
00:06:22,190 --> 00:06:24,890
已添加到调度功能

131
00:06:25,790 --> 00:06:28,830
喜欢这里的价值，或者喜欢这第二个对象

132
00:06:28,830 --> 00:06:30,530
作为一个额外的论点。

133
00:06:30,530 --> 00:06:32,830
所以这里我们会自动获取payload，

134
00:06:32,830 --> 00:06:36,263
然后我们可以将其转发到已提交的突变。

135
00:06:37,560 --> 00:06:39,860
所以这就是我们如何设置一个动作

136
00:06:39,860 --> 00:06:41,730
也有一个有效载荷

137
00:06:41,730 --> 00:06:44,930
并将该有效载荷转发给突变。

138
00:06:44,930 --> 00:06:47,270
当然，你合作还可以更改有效负载

139
00:06:47,270 --> 00:06:49,240
在你提交这个突变之前。

140
00:06:49,240 --> 00:06:51,990
你可以在这个动作中做任何你想做的事情。

141
00:06:51,990 --> 00:06:54,860
无论您的应用程序需要做什么

142
00:06:54,860 --> 00:06:56,033
正常工作。

143
00:06:57,670 --> 00:06:59,490
但是让我们回到组件。

144
00:06:59,490 --> 00:07:04,170
我们在提交 Mutations 时发送 Actions

145
00:07:04,170 --> 00:07:06,370
不同的是我们现在运行 Actions

146
00:07:06,370 --> 00:07:07,633
而不是突变。

147
00:07:08,540 --> 00:07:11,230
因此我们也可以这样做并更改计数器

148
00:07:11,230 --> 00:07:14,263
并在此处简单地发送增量操作。

149
00:07:15,440 --> 00:07:18,160
随着所有这些变化的到位，

150
00:07:18,160 --> 00:07:21,580
如果你回去，这仍然有效。

151
00:07:21,580 --> 00:07:23,540
仅在两秒钟后

152
00:07:23,540 --> 00:07:27,100
你添加两个按钮点击是否有效果。

153
00:07:27,100 --> 00:07:30,903
但现在我们正在使用 Actions 以正确的方式执行此操作。