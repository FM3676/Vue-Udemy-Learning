1
00:00:02,340 --> 00:00:05,310
为此，让我向您展示一个真正的错误

2
00:00:05,310 --> 00:00:06,760
可能发生在这里。

3
00:00:06,760 --> 00:00:09,640
我们可以简单地操纵这个 URL。

4
00:00:09,640 --> 00:00:11,280
当然，这是一个错误

5
00:00:11,280 --> 00:00:13,240
你通常可以避免

6
00:00:13,240 --> 00:00:16,093
因为您作为开发人员添加了该 URL。

7
00:00:17,010 --> 00:00:19,990
但是由于我对这里的服务器端代码没有影响，

8
00:00:19,990 --> 00:00:22,460
我不能伪造服务器端错误。

9
00:00:22,460 --> 00:00:25,220
因此向无效 URL 发送请求

10
00:00:25,220 --> 00:00:27,670
是我现在能做的最好的事情。

11
00:00:27,670 --> 00:00:29,623
让我们在最后删除点 .json。

12
00:00:30,800 --> 00:00:33,140
这是 Firebase 不喜欢的，

13
00:00:33,140 --> 00:00:36,290
如果您随后将请求发送到此无效 URL，

14
00:00:36,290 --> 00:00:39,273
Firebase 将响应一条错误消息。

15
00:00:40,690 --> 00:00:45,690
所以让我们保存并重新加载，一切都是红色的。

16
00:00:45,740 --> 00:00:48,673
我们看到一堆红色，很明显这失败了。

17
00:00:51,300 --> 00:00:53,160
我们可以处理这样的错误，

18
00:00:53,160 --> 00:00:56,890
在这种情况下，实际上是由浏览器在这里抛出的。

19
00:00:56,890 --> 00:01:00,670
我们可以通过添加另一个块来处理此类错误

20
00:01:00,670 --> 00:01:02,870
在我们的 then 链中。

21
00:01:02,870 --> 00:01:06,770
在所有这些 then 块之后，我们可以添加一个 catch 方法。

22
00:01:06,770 --> 00:01:11,203
所以 .catch 就在这长长的链条上。

23
00:01:12,610 --> 00:01:17,250
捕获所有关于 Promise 的工作，它需要一个函数。

24
00:01:17,250 --> 00:01:19,240
我也会在这里使用箭头函数，

25
00:01:19,240 --> 00:01:22,800
每当发生任何错误时都会触发

26
00:01:22,800 --> 00:01:25,170
与前一个相关，然后是块。

27
00:01:25,170 --> 00:01:27,740
所以与原始请求有关

28
00:01:27,740 --> 00:01:30,583
或在稍后的 then 块中抛出。

29
00:01:31,810 --> 00:01:35,230
在这里，我们会得到错误，在这里我们可以处理它。

30
00:01:35,230 --> 00:01:36,150
以这里为例，

31
00:01:36,150 --> 00:01:39,083
我们可以控制台记录错误以开始。

32
00:01:40,550 --> 00:01:44,143
如果我这样做并重新加载，这就是我的控制台日志。

33
00:01:45,760 --> 00:01:48,160
当然，我不是来这里只是记录它。

34
00:01:48,160 --> 00:01:51,200
所以相反，我想向用户展示一些东西

35
00:01:51,200 --> 00:01:52,240
屏幕上，

36
00:01:52,240 --> 00:01:55,410
因为通常您的用户不会打开

37
00:01:55,410 --> 00:01:56,740
开发者工具。

38
00:01:56,740 --> 00:01:59,784
所以他们只是看到加载，他们想知道

39
00:01:59,784 --> 00:02:03,760
他们最终是否会看到一些数据。

40
00:02:03,760 --> 00:02:06,864
所以我想改善这种体验并展示一个实际的

41
00:02:06,864 --> 00:02:08,984
给用户的错误信息，

42
00:02:08,984 --> 00:02:12,350
无论是对话还是在我这里，

43
00:02:12,350 --> 00:02:14,033
只是下面的一条消息。

44
00:02:14,870 --> 00:02:18,770
为此，我们可以简单地管理另一个数据属性

45
00:02:18,770 --> 00:02:21,723
在我们发送请求的组件中。

46
00:02:22,900 --> 00:02:26,250
例如错误属性，

47
00:02:26,250 --> 00:02:28,950
名称由您决定，不一定是错误。

48
00:02:28,950 --> 00:02:30,853
就像所有这些属性一样。

49
00:02:32,010 --> 00:02:33,800
最初，我将其设置为 null

50
00:02:33,800 --> 00:02:36,205
因为最初我们没有错误，

51
00:02:36,205 --> 00:02:39,440
但在这里我们确实有一个错误。

52
00:02:39,440 --> 00:02:41,900
所以在这里我将这个错误设置为

53
00:02:42,877 --> 00:02:47,877
“无法获取数据 - 请稍后再试。”

54
00:02:49,770 --> 00:02:53,570
当然你也可以分析这个错误对象，

55
00:02:53,570 --> 00:02:56,980
我们得到了，看看你是否有更详细的指导

56
00:02:56,980 --> 00:03:00,483
并向您的用户显示更具体的错误消息。

57
00:03:01,330 --> 00:03:03,800
这真的取决于你的应用程序，

58
00:03:03,800 --> 00:03:06,823
您要处理哪种错误等等。

59
00:03:07,760 --> 00:03:10,560
但这至少是一个通用的错误消息

60
00:03:10,560 --> 00:03:13,163
告诉用户出了点问题。

61
00:03:14,620 --> 00:03:19,583
所以在这里我现在想使用错误来显示错误消息。

62
00:03:21,790 --> 00:03:25,170
为此，我将在此处添加另一段

63
00:03:26,210 --> 00:03:31,020
在那长长的 v-else 语句块中使用 v-else-if

64
00:03:31,020 --> 00:03:33,410
并检查我们是否没有加载，

65
00:03:33,410 --> 00:03:34,960
因为当然如果我们正在加载，

66
00:03:34,960 --> 00:03:37,270
我绝对不想展示错误信息，

67
00:03:37,270 --> 00:03:39,323
如果我有错误。

68
00:03:40,190 --> 00:03:43,330
如果我这样做了，我只是在这里输出错误

69
00:03:43,330 --> 00:03:48,030
因为错误在这里被简单地设置为一个字符串，

70
00:03:48,030 --> 00:03:50,723
所以我们当然不能只在模板中输出它。

71
00:03:52,320 --> 00:03:55,280
现在我们最后也可以在这里使用v-else，

72
00:03:55,280 --> 00:03:58,270
因为我们知道如果我们到达这里的那个街区，

73
00:03:58,270 --> 00:04:00,320
我们将得到可以输出的结果，

74
00:04:00,320 --> 00:04:02,179
因为我们正在处理我们所有的案件

75
00:04:02,179 --> 00:04:05,573
在我们在这里处理这个案子之前。

76
00:04:08,030 --> 00:04:10,330
当然，我也想重置错误

77
00:04:10,330 --> 00:04:12,160
每当我们发送新请求时。

78
00:04:12,160 --> 00:04:14,860
所以当我们在这里开始发送一个新的请求时，

79
00:04:14,860 --> 00:04:16,600
当我们将 isLoading 设置为 true 时，

80
00:04:16,600 --> 00:04:18,890
我还将错误设置回null，

81
00:04:18,890 --> 00:04:21,163
此时重置错误。

82
00:04:22,079 --> 00:04:23,263
现在有了这个，

83
00:04:27,160 --> 00:04:31,690
我的项目在这里抱怨这个错误参数

84
00:04:31,690 --> 00:04:34,780
永远不会被使用，所以我们将在此处进行控制台记录

85
00:04:36,900 --> 00:04:37,970
像这样，

86
00:04:37,970 --> 00:04:40,870
或者，我们只是将其留空，

87
00:04:40,870 --> 00:04:43,890
但我想告诉你你会得到这个错误对象

88
00:04:43,890 --> 00:04:46,310
在这里作为错误抛出。

89
00:04:46,310 --> 00:04:50,020
因此，如果我重新加载，

90
00:04:50,020 --> 00:04:52,063
我们仍然看到加载。

91
00:04:56,120 --> 00:04:57,633
让我看看为什么？

92
00:04:58,540 --> 00:05:00,380
哦，是的，因为当然在这里，

93
00:05:00,380 --> 00:05:03,230
我只是在检查我们是否正在加载，如果是，

94
00:05:03,230 --> 00:05:05,330
我总是设置加载。

95
00:05:05,330 --> 00:05:08,530
现在的问题是如果出现错误，我们正在加载，

96
00:05:08,530 --> 00:05:11,140
因为我们只设置了 isLoading 为 false

97
00:05:11,140 --> 00:05:13,360
如果我们能够读取一些数据，

98
00:05:13,360 --> 00:05:15,913
如果我们发现错误，这不会在这里发生。

99
00:05:18,660 --> 00:05:22,230
所以当然我们应该在这里设置这个 isLoading 为 false

100
00:05:22,230 --> 00:05:24,050
在错误情况下，

101
00:05:24,050 --> 00:05:26,283
因为我们不再加载了。

102
00:05:27,310 --> 00:05:30,440
我们没有成功，但我们不再加载。

103
00:05:30,440 --> 00:05:33,610
所以我们也需要在这里重置它。

104
00:05:33,610 --> 00:05:37,700
但我也注意到另一个问题，这里的顺序。

105
00:05:37,700 --> 00:05:39,020
我们正在检查我们是否正在加载，

106
00:05:39,020 --> 00:05:41,420
但他们随后会检查我们是否没有加载，

107
00:05:41,420 --> 00:05:44,200
但是如果我们可能没有得到结果数据，

108
00:05:44,200 --> 00:05:48,490
如果是这种情况，我们将显示我们的无数据消息。

109
00:05:48,490 --> 00:05:50,690
其实我想换个顺序

110
00:05:50,690 --> 00:05:53,000
首先检查我们是否有错误，

111
00:05:53,000 --> 00:05:55,900
这样就可以覆盖没有数据的情况，

112
00:05:55,900 --> 00:05:57,610
我们显示错误信息

113
00:05:57,610 --> 00:06:00,713
如果我们有错误，而不是没有数据消息。

114
00:06:02,700 --> 00:06:05,150
所以有了这一切，让我们保存它，

115
00:06:05,150 --> 00:06:06,070
现在如果重新加载，

116
00:06:06,070 --> 00:06:08,793
我们在这里看到这个“无法获取数据”消息。

117
00:06:10,570 --> 00:06:13,570
另一方面，如果我们在这里修复这个 URL，

118
00:06:13,570 --> 00:06:15,483
如果我添加 .json，

119
00:06:17,840 --> 00:06:19,160
然后你看看我是否重新加载，

120
00:06:19,160 --> 00:06:22,053
数据被加载并再次正确显示。

121
00:06:23,190 --> 00:06:27,240
如果我在这里删除我的数据，让我们也检查一下这个案例。

122
00:06:27,240 --> 00:06:30,573
如果我现在加载数据，我们会看到无数据消息。

123
00:06:31,910 --> 00:06:33,510
如果我再次添加数据

124
00:06:34,980 --> 00:06:37,110
然后加载它，这行得通。

125
00:06:37,110 --> 00:06:39,803
所以现在这也是我们处理错误的方式。