1
00:00:02,210 --> 00:00:03,090
现在，还有一件事

2
00:00:03,090 --> 00:00:05,630
你必须知道与此相关。

3
00:00:05,630 --> 00:00:09,380
fetch 方法的工作原理是，从技术上讲，错误，

4
00:00:09,380 --> 00:00:13,060
就像我用无效的 URL 生成的一样

5
00:00:13,060 --> 00:00:17,513
最后是用这样的 catch 方法处理的。

6
00:00:18,880 --> 00:00:21,840
您也可能是正在阻止的错误

7
00:00:21,840 --> 00:00:26,840
来自服务器站点，因此源自 Firebase，

8
00:00:27,140 --> 00:00:29,170
这不是技术错误。

9
00:00:29,170 --> 00:00:32,400
所以在你得到定期回复的地方，

10
00:00:32,400 --> 00:00:36,500
但是响应只是告诉您出了点问题。

11
00:00:36,500 --> 00:00:39,340
并且默认情况下不会处理

12
00:00:39,340 --> 00:00:40,593
用这个 catch 块。

13
00:00:41,490 --> 00:00:43,990
我也可以给你看。

14
00:00:43,990 --> 00:00:46,290
让我向您展示一个服务器站点错误。

15
00:00:46,290 --> 00:00:47,420
这是我能做的

16
00:00:47,420 --> 00:00:49,920
在 LearningSurvey.vue 文件中。

17
00:00:49,920 --> 00:00:52,250
在这里，我们正在发送数据，在那里，

18
00:00:52,250 --> 00:00:55,480
我们实际上根本没有使用 then 或 catch 。

19
00:00:55,480 --> 00:00:57,700
那时我不使用，因为我不在乎

20
00:00:57,700 --> 00:01:01,020
关于这里的回应，但我实际上应该关心

21
00:01:01,020 --> 00:01:03,293
关于一切是否正常。

22
00:01:04,430 --> 00:01:07,370
所以我也想向用户显示一条错误消息

23
00:01:07,370 --> 00:01:09,143
如果发送数据失败。

24
00:01:10,470 --> 00:01:14,440
为此，当然，我们可以添加一个错误属性

25
00:01:14,440 --> 00:01:17,050
数据也在这里。

26
00:01:17,050 --> 00:01:20,670
然后在这里简单地添加一个 catch 方法

27
00:01:20,670 --> 00:01:23,163
等待潜在的错误。

28
00:01:24,130 --> 00:01:26,080
如果我们确实遇到错误，

29
00:01:26,080 --> 00:01:30,350
我们可以设置 this.error 等于出错了。

30
00:01:30,350 --> 00:01:33,133
稍后再试或类似的事情。

31
00:01:34,660 --> 00:01:37,550
我想在我们开始获取之前重置它。

32
00:01:37,550 --> 00:01:39,663
在这里，我将再次将 error 设置为 null。

33
00:01:41,710 --> 00:01:46,663
所以现在我们也在发送数据的情况下处理错误，

34
00:01:47,630 --> 00:01:50,220
我们现在可以使用 error 属性，

35
00:01:50,220 --> 00:01:54,020
例如，此处显示错误消息。

36
00:01:54,020 --> 00:01:56,270
当然，您也可以改为显示警报，

37
00:01:56,270 --> 00:01:58,480
不管你想做什么，但我会在这里检查

38
00:01:58,480 --> 00:02:03,480
如果错误是真实的，如果它是一个错误字符串，

39
00:02:03,530 --> 00:02:05,663
在这种情况下，我输出错误。

40
00:02:08,039 --> 00:02:11,743
现在，当然，我可以产生和以前一样的错误，

41
00:02:12,940 --> 00:02:15,060
如果我在这里删除 .json 。

42
00:02:15,060 --> 00:02:17,423
现在以发送数据为例。

43
00:02:18,630 --> 00:02:23,170
如果我这样做并尝试发送数据，

44
00:02:23,170 --> 00:02:25,593
我最终得到这个错误输出。

45
00:02:26,460 --> 00:02:29,253
但这只是我所说的技术错误。

46
00:02:32,470 --> 00:02:35,140
但现在让我告诉你另一种错误，

47
00:02:35,140 --> 00:02:37,810
不是技术错误的错误

48
00:02:37,810 --> 00:02:40,040
由浏览器抛出，而是，

49
00:02:40,040 --> 00:02:42,290
服务器产生的错误，

50
00:02:42,290 --> 00:02:45,090
然后仍然会导致定期响应

51
00:02:45,090 --> 00:02:48,650
被发回，但回复不正常，

52
00:02:48,650 --> 00:02:50,840
但它有一个状态码

53
00:02:50,840 --> 00:02:53,843
这表明服务器上出现了问题。

54
00:02:54,770 --> 00:02:57,200
我们可以强制 Firebase 这样做

55
00:02:57,200 --> 00:03:00,650
通过删除 .json 字符串化。

56
00:03:00,650 --> 00:03:02,840
有了这个，我们告诉 Firebase

57
00:03:02,840 --> 00:03:04,390
我们正在发送 .json 数据

58
00:03:04,390 --> 00:03:08,070
这就是我们应该发送的内容以及 Firebase 的期望。

59
00:03:08,070 --> 00:03:11,730
但是我们实际上是在发送一个 JavaScript 对象，

60
00:03:11,730 --> 00:03:13,663
这不是 .json 数据。

61
00:03:14,810 --> 00:03:19,810
如果我们这样做，请重新加载并尝试提交新评级，

62
00:03:21,800 --> 00:03:23,560
我们什么也看不到。

63
00:03:23,560 --> 00:03:25,470
在这里，我们看不到错误消息，

64
00:03:25,470 --> 00:03:27,690
但如果我加载我提交的体验，

65
00:03:27,690 --> 00:03:31,520
我刚刚提交的新评级不存在。

66
00:03:31,520 --> 00:03:33,370
我可以随心所欲地这样做。

67
00:03:33,370 --> 00:03:34,350
它是不在那里。

68
00:03:34,350 --> 00:03:36,650
这一切都在 Firebase 中完成。

69
00:03:36,650 --> 00:03:39,200
错误，我们只有以前的旧评级。

70
00:03:41,040 --> 00:03:43,920
如果我打开开发者工具，我们可以看到问题，

71
00:03:43,920 --> 00:03:46,910
我们在这里遇到错误，无法加载请求。

72
00:03:46,910 --> 00:03:50,620
服务器响应状态为 400。

73
00:03:50,620 --> 00:03:52,070
这是重要的部分。

74
00:03:52,070 --> 00:03:55,280
现在这不是浏览器抛出的技术错误

75
00:03:55,280 --> 00:03:58,410
我们以前有过，但这是定期回复，

76
00:03:58,410 --> 00:04:01,860
它只有一个状态码 400。

77
00:04:01,860 --> 00:04:06,373
成功响应的状态代码始终为 200 或 201。

78
00:04:07,530 --> 00:04:12,320
如果您有 400 次或 500 次以上的响应，

79
00:04:12,320 --> 00:04:14,313
这意味着出了点问题。

80
00:04:15,510 --> 00:04:18,470
这可能会发生，但问题是抓住了

81
00:04:18,470 --> 00:04:20,600
没有捡起来。

82
00:04:20,600 --> 00:04:23,260
好吧，这就是这个 fetch 方法的工作原理。

83
00:04:23,260 --> 00:04:27,673
然后我们需要添加并查看我们的响应。

84
00:04:28,750 --> 00:04:32,360
此处的 then 函数将始终被触发

85
00:04:32,360 --> 00:04:34,440
如果我们有定期回复，

86
00:04:34,440 --> 00:04:36,623
所以如果我们没有技术错误。

87
00:04:37,620 --> 00:04:40,450
在这里我们可以检查响应是否正常，

88
00:04:40,450 --> 00:04:44,320
然后做点什么，但如果不行，

89
00:04:44,320 --> 00:04:48,920
如果我们有 400 或 500 状态码，则不会，

90
00:04:48,920 --> 00:04:52,160
然后我也想设置我的错误。

91
00:04:52,160 --> 00:04:55,020
我们可以通过设置 this.error 来实现，

92
00:04:55,020 --> 00:04:57,460
但我们也可以通过投掷来做到这一点

93
00:04:57,460 --> 00:04:59,683
这里有一个新的错误对象。

94
00:05:01,560 --> 00:05:04,020
无法保存数据，可能是消息

95
00:05:04,020 --> 00:05:05,233
我传递给那个。

96
00:05:06,160 --> 00:05:08,760
您传递给错误构造函数的参数

97
00:05:08,760 --> 00:05:11,223
是将为错误设置的消息。

98
00:05:12,720 --> 00:05:17,040
而这里的这个错误构造函数是内置在 JavaScript 中的。

99
00:05:17,040 --> 00:05:19,160
这会引发一个新错误，

100
00:05:19,160 --> 00:05:22,573
然后这将自动到达这个 catch 块。

101
00:05:23,860 --> 00:05:27,060
然后在这里我可以实际设置 this.error 等于

102
00:05:27,060 --> 00:05:30,883
到 error.message 在这里使用我的消息。

103
00:05:32,640 --> 00:05:36,610
message 属性将出现在此错误对象上

104
00:05:36,610 --> 00:05:40,300
因为这个错误构造函数创建了这样一个对象

105
00:05:40,300 --> 00:05:42,910
您在此处传递的内容将存储在哪里

106
00:05:42,910 --> 00:05:44,323
在消息属性上。

107
00:05:46,090 --> 00:05:48,890
如果我们这样做并保存它，

108
00:05:48,890 --> 00:05:52,170
如果我现在重新加载并再次尝试这样做，

109
00:05:52,170 --> 00:05:54,600
现在我们看到无法在此处保存数据。

110
00:05:54,600 --> 00:05:57,680
现在我们正在向用户展示一些信息

111
00:05:57,680 --> 00:06:00,250
允许用户，嗯，

112
00:06:00,250 --> 00:06:03,073
至少稍后再试一次或类似的事情。

113
00:06:04,620 --> 00:06:07,130
现在这里，当然，问题是问题，

114
00:06:07,130 --> 00:06:09,070
作为开发人员，我们应该避免。

115
00:06:09,070 --> 00:06:12,230
我应该把它串起来，但实际上，

116
00:06:12,230 --> 00:06:16,170
您可能会遇到服务器生成的情况

117
00:06:16,170 --> 00:06:20,910
没有您，作为开发人员，这样的错误响应，

118
00:06:20,910 --> 00:06:24,760
前端，由 Vue 开发人员负责。

119
00:06:24,760 --> 00:06:26,980
这就是为什么这仍然是一个很好的例子，

120
00:06:26,980 --> 00:06:29,940
即使那，当然，在现实中不会发生，

121
00:06:29,940 --> 00:06:32,120
但它向您展示了如何处理

122
00:06:32,120 --> 00:06:34,703
此类服务站点错误响应。

123
00:06:35,710 --> 00:06:38,760
有了这个，我们真的可以处理所有事情。

124
00:06:38,760 --> 00:06:40,870
我们处理成功案例。

125
00:06:40,870 --> 00:06:42,390
我们可以加载数据。

126
00:06:42,390 --> 00:06:44,960
如果我们没有数据，我们可以显示消息

127
00:06:44,960 --> 00:06:47,343
我们也可以处理错误。