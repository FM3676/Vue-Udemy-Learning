1
00:00:02,210 --> 00:00:03,090
Now, there's one more thing

2
00:00:03,090 --> 00:00:05,630
you gotta know related to that though.

3
00:00:05,630 --> 00:00:09,380
The fetch method works such that technically, errors,

4
00:00:09,380 --> 00:00:13,060
like the one I generated with the invalid URL

5
00:00:13,060 --> 00:00:17,513
are in the end handled with this catch method like that.

6
00:00:18,880 --> 00:00:21,840
You also could be errors that are stemming

7
00:00:21,840 --> 00:00:26,840
from the server site, so that are stemming from Firebase,

8
00:00:27,140 --> 00:00:29,170
which are not technically errors.

9
00:00:29,170 --> 00:00:32,400
So where you do get a regular response,

10
00:00:32,400 --> 00:00:36,500
but the response simply tells you that something went wrong.

11
00:00:36,500 --> 00:00:39,340
And that would by default not be handled

12
00:00:39,340 --> 00:00:40,593
with this catch block.

13
00:00:41,490 --> 00:00:43,990
And I can show this to you as well.

14
00:00:43,990 --> 00:00:46,290
Let me show you a server site error.

15
00:00:46,290 --> 00:00:47,420
And that's something I can do

16
00:00:47,420 --> 00:00:49,920
in the LearningSurvey.vue file.

17
00:00:49,920 --> 00:00:52,250
Here, we're sending the data and there,

18
00:00:52,250 --> 00:00:55,480
we are actually not using then or a catch at all.

19
00:00:55,480 --> 00:00:57,700
I'm not using then because I don't care

20
00:00:57,700 --> 00:01:01,020
about the response here, but I actually should care

21
00:01:01,020 --> 00:01:03,293
about whether everything worked or not.

22
00:01:04,430 --> 00:01:07,370
So I also wanna show the user an error message

23
00:01:07,370 --> 00:01:09,143
if sending the data failed.

24
00:01:10,470 --> 00:01:14,440
For that, of course, we can add an error property

25
00:01:14,440 --> 00:01:17,050
to data here as well.

26
00:01:17,050 --> 00:01:20,670
And then simply add a catch method here

27
00:01:20,670 --> 00:01:23,163
to wait for a potential error.

28
00:01:24,130 --> 00:01:26,080
And if we do get an error,

29
00:01:26,080 --> 00:01:30,350
we can set this.error equal to something went wrong.

30
00:01:30,350 --> 00:01:33,133
Try again later or anything like that.

31
00:01:34,660 --> 00:01:37,550
And I wanna reset it right before we start fetching.

32
00:01:37,550 --> 00:01:39,663
Here, I'll set error to null again.

33
00:01:41,710 --> 00:01:46,663
So now we also handle errors here in the send data case,

34
00:01:47,630 --> 00:01:50,220
and we can use the error property now,

35
00:01:50,220 --> 00:01:54,020
for example, here to show an error message.

36
00:01:54,020 --> 00:01:56,270
Of course, you could also instead show an alert,

37
00:01:56,270 --> 00:01:58,480
whatever you wanna do, but here I'll check

38
00:01:58,480 --> 00:02:03,480
if error is truthy, if it is an error string,

39
00:02:03,530 --> 00:02:05,663
and in that case, I output the error.

40
00:02:08,039 --> 00:02:11,743
And now, of course, I can generate the same error as before,

41
00:02:12,940 --> 00:02:15,060
if I remove the .json here.

42
00:02:15,060 --> 00:02:17,423
Now in the case for sending data.

43
00:02:18,630 --> 00:02:23,170
If I do that and I try to send data,

44
00:02:23,170 --> 00:02:25,593
I eventually get this error output.

45
00:02:26,460 --> 00:02:29,253
But that's just technically error I was talking about.

46
00:02:32,470 --> 00:02:35,140
But now let me show you another kind of error,

47
00:02:35,140 --> 00:02:37,810
an error which will not be a technical error

48
00:02:37,810 --> 00:02:40,040
thrown by the browser but instead,

49
00:02:40,040 --> 00:02:42,290
an error generated by the server,

50
00:02:42,290 --> 00:02:45,090
which is then still resulting in a regular response

51
00:02:45,090 --> 00:02:48,650
being sent back, but a response which is not okay,

52
00:02:48,650 --> 00:02:50,840
but which instead has a status code

53
00:02:50,840 --> 00:02:53,843
that indicates that something went wrong on the server.

54
00:02:54,770 --> 00:02:57,200
And we can force Firebase to do that

55
00:02:57,200 --> 00:03:00,650
by removing .json stringify.

56
00:03:00,650 --> 00:03:02,840
With that, we're telling Firebase

57
00:03:02,840 --> 00:03:04,390
that we're sending .json data

58
00:03:04,390 --> 00:03:08,070
and that is what we should send and what Firebase expects.

59
00:03:08,070 --> 00:03:11,730
But then we're actually sending a JavaScript object,

60
00:03:11,730 --> 00:03:13,663
which is not .json data.

61
00:03:14,810 --> 00:03:19,810
If we do that, reload and try to submit a new rating,

62
00:03:21,800 --> 00:03:23,560
we'll see nothing.

63
00:03:23,560 --> 00:03:25,470
Here, we see no error message,

64
00:03:25,470 --> 00:03:27,690
but if I load my submitted experiences,

65
00:03:27,690 --> 00:03:31,520
the new rating, which I just submitted is not there.

66
00:03:31,520 --> 00:03:33,370
I can do this as often as I want.

67
00:03:33,370 --> 00:03:34,350
It's not there.

68
00:03:34,350 --> 00:03:36,650
And it's all done out here in Firebase.

69
00:03:36,650 --> 00:03:39,200
The error, we just have the old rating from before.

70
00:03:41,040 --> 00:03:43,920
We can see the problem if I open the developer tools,

71
00:03:43,920 --> 00:03:46,910
we got an error here, failed to load request.

72
00:03:46,910 --> 00:03:50,620
The server responded with a status of 400.

73
00:03:50,620 --> 00:03:52,070
And that's the important part.

74
00:03:52,070 --> 00:03:55,280
Now it's not a technically error thrown by the browser

75
00:03:55,280 --> 00:03:58,410
which we had before, but it's a regular response,

76
00:03:58,410 --> 00:04:01,860
which just has a status code of 400.

77
00:04:01,860 --> 00:04:06,373
Success responses always have status codes of 200 or 201.

78
00:04:07,530 --> 00:04:12,320
If you have 400-ish or a 500-ish responses,

79
00:04:12,320 --> 00:04:14,313
that means something went wrong.

80
00:04:15,510 --> 00:04:18,470
And that can happen but the problem is catch

81
00:04:18,470 --> 00:04:20,600
is not picking it up.

82
00:04:20,600 --> 00:04:23,260
Well, that's just how this fetch methods works.

83
00:04:23,260 --> 00:04:27,673
We need to add then and have a look at our response.

84
00:04:28,750 --> 00:04:32,360
This then function here will always be triggered

85
00:04:32,360 --> 00:04:34,440
if we have a regular response,

86
00:04:34,440 --> 00:04:36,623
so if we don't have a technical error.

87
00:04:37,620 --> 00:04:40,450
And here we can check if the response is okay,

88
00:04:40,450 --> 00:04:44,320
and then do something, but if it's not okay,

89
00:04:44,320 --> 00:04:48,920
which it will not be if we have a 400 or 500 status code,

90
00:04:48,920 --> 00:04:52,160
then I wanna also set my error.

91
00:04:52,160 --> 00:04:55,020
We could this by setting this.error,

92
00:04:55,020 --> 00:04:57,460
but we could also do this by throwing

93
00:04:57,460 --> 00:04:59,683
a new error object here.

94
00:05:01,560 --> 00:05:04,020
Could not save data, could be the message

95
00:05:04,020 --> 00:05:05,233
which I pass to that.

96
00:05:06,160 --> 00:05:08,760
The argument you pass to the error constructor

97
00:05:08,760 --> 00:05:11,223
is the message that will be set for the error.

98
00:05:12,720 --> 00:05:17,040
And this error constructor here is built into JavaScript.

99
00:05:17,040 --> 00:05:19,160
This throws a new error,

100
00:05:19,160 --> 00:05:22,573
and this will then automatically reach this catch block.

101
00:05:23,860 --> 00:05:27,060
And here I can then actually set this.error equal

102
00:05:27,060 --> 00:05:30,883
to error.message to use my message here.

103
00:05:32,640 --> 00:05:36,610
The message property will be present on this error object

104
00:05:36,610 --> 00:05:40,300
because this error constructor creates such an object

105
00:05:40,300 --> 00:05:42,910
where what you pass here will be stored

106
00:05:42,910 --> 00:05:44,323
on a message property.

107
00:05:46,090 --> 00:05:48,890
And if we do that and save this,

108
00:05:48,890 --> 00:05:52,170
if I now reload and try doing this again,

109
00:05:52,170 --> 00:05:54,600
now we see Could not save data here.

110
00:05:54,600 --> 00:05:57,680
And now we're showing the users some message

111
00:05:57,680 --> 00:06:00,250
that allows the user to, well,

112
00:06:00,250 --> 00:06:03,073
at least try again later or anything like that.

113
00:06:04,620 --> 00:06:07,130
Now here, of course, the problem is a problem,

114
00:06:07,130 --> 00:06:09,070
we, as a developer, should avoid.

115
00:06:09,070 --> 00:06:12,230
I should stringify this but in reality,

116
00:06:12,230 --> 00:06:16,170
you could have circumstances where the server generates

117
00:06:16,170 --> 00:06:20,910
such an error response without you, as developer,

118
00:06:20,910 --> 00:06:24,760
the front end, the Vue developer being responsible for it.

119
00:06:24,760 --> 00:06:26,980
That's why this still was a great example,

120
00:06:26,980 --> 00:06:29,940
even though that, of course, in reality would not occur,

121
00:06:29,940 --> 00:06:32,120
but it shows you how you can handle

122
00:06:32,120 --> 00:06:34,703
such service site error responses.

123
00:06:35,710 --> 00:06:38,760
And with that, we really handle everything.

124
00:06:38,760 --> 00:06:40,870
We handle success cases.

125
00:06:40,870 --> 00:06:42,390
We can load data.

126
00:06:42,390 --> 00:06:44,960
We can show messages if we have no data

127
00:06:44,960 --> 00:06:47,343
and we can also handle errors.

