1
00:00:02,040 --> 00:00:03,500
因此，随着 Firebase 的设置，

2
00:00:03,500 --> 00:00:06,880
我们如何与它或任何后端进行通信

3
00:00:06,880 --> 00:00:08,403
从我们的 Vue 应用程序内部？

4
00:00:09,410 --> 00:00:11,440
实际上，我们不小心，

5
00:00:11,440 --> 00:00:16,050
之前已经看到了一种发送 HTTP 请求的方法。

6
00:00:16,050 --> 00:00:20,010
在我们的表格中，表格中的学习调查组件，

7
00:00:20,010 --> 00:00:21,990
我们有一个提交按钮。

8
00:00:21,990 --> 00:00:24,990
我在课程前面提到过

9
00:00:24,990 --> 00:00:27,540
我们想阻止浏览器默认

10
00:00:27,540 --> 00:00:29,380
提交该表格时

11
00:00:29,380 --> 00:00:33,283
因为如果我们不这样做，就会发送一个 HTTP 请求。

12
00:00:34,260 --> 00:00:38,170
如果我在这里暂时删除 prevent 修饰符，

13
00:00:38,170 --> 00:00:43,170
重新加载并单击提交，在此处观看此重新加载图标。

14
00:00:43,350 --> 00:00:47,060
你会看到它短暂地变成了一个十字架。

15
00:00:47,060 --> 00:00:48,600
每次点击这个，

16
00:00:48,600 --> 00:00:52,860
发生的事情是浏览器使用其默认行为

17
00:00:52,860 --> 00:00:55,623
也就是发送一个 HTTP 请求。

18
00:00:56,840 --> 00:00:58,200
问题只是，

19
00:00:58,200 --> 00:01:01,240
它不会将该请求发送到我们的后端，

20
00:01:01,240 --> 00:01:03,300
到我们的 Firebase 服务器，

21
00:01:03,300 --> 00:01:06,403
而是将请求发送到相同的地址

22
00:01:06,403 --> 00:01:08,823
用于服务此页面。

23
00:01:09,660 --> 00:01:14,520
而对于通常不是页面的 Vue 应用程序

24
00:01:14,520 --> 00:01:16,390
应该处理这个请求。

25
00:01:16,390 --> 00:01:20,420
在这种情况下，它是我们的本地计算机和我们的本地计算机

26
00:01:20,420 --> 00:01:24,200
没有任何期望此请求的代码。

27
00:01:24,200 --> 00:01:27,193
因此，此默认请求变为白色。

28
00:01:29,040 --> 00:01:31,250
现在您可以构建应用程序

29
00:01:31,250 --> 00:01:33,500
您还使用 Vue 的地方，

30
00:01:33,500 --> 00:01:37,130
您的 Vue 应用程序由同一台服务器提供服务

31
00:01:37,130 --> 00:01:39,010
那应该是处理请求。

32
00:01:39,010 --> 00:01:41,773
在这种情况下，此浏览器默认设置可能没问题。

33
00:01:42,890 --> 00:01:45,210
但在绝大多数情况下，

34
00:01:45,210 --> 00:01:48,630
您将为您的 Vue 应用程序提供一个单独的服务器，

35
00:01:48,630 --> 00:01:52,610
这只是将这个 Vue 应用程序交付给您的用户，

36
00:01:52,610 --> 00:01:55,980
那么您可以自由处理用户数据。

37
00:01:55,980 --> 00:01:58,220
这正是场景

38
00:01:58,220 --> 00:02:01,250
在您不希望此浏览器默认的地方，

39
00:02:01,250 --> 00:02:03,310
但是你想在哪里阻止它

40
00:02:03,310 --> 00:02:07,130
并使用 Vue.js 在 JavaScript 中处理提交的数据。

41
00:02:07,130 --> 00:02:09,488
例如，还要验证它

42
00:02:09,488 --> 00:02:12,560
并显示这样的客户站点错误消息。

43
00:02:12,560 --> 00:02:15,620
所以显示这个错误段落，例如，

44
00:02:15,620 --> 00:02:17,590
那是你可能想做的事情。

45
00:02:17,590 --> 00:02:20,890
一旦你验证它，你就会想要获取数据

46
00:02:20,890 --> 00:02:23,750
并将其发送到您选择的服务器，

47
00:02:23,750 --> 00:02:26,300
不一定到同一台服务器

48
00:02:26,300 --> 00:02:28,053
那就是服务于这个应用程序。

49
00:02:28,990 --> 00:02:31,123
这正是我们想要在这里做的。

50
00:02:31,960 --> 00:02:35,270
那么我们如何向 Firebase 发送请求，

51
00:02:35,270 --> 00:02:38,610
在这种情况下，我们选择的后端是哪个？

52
00:02:38,610 --> 00:02:41,380
好吧，这个 Firebase 服务器的好处

53
00:02:41,380 --> 00:02:43,320
他们是实时数据库

54
00:02:43,320 --> 00:02:47,160
是它具有您在此处看到的这个 HTTP 地址。

55
00:02:47,160 --> 00:02:50,870
如果您发送特定格式的请求

56
00:02:50,870 --> 00:02:55,050
到这个地址，数据会被自动取走

57
00:02:55,050 --> 00:02:58,093
由 Firebase 写入，并将写入数据库。

58
00:02:59,310 --> 00:03:03,000
现在，看起来我们正在直接交谈

59
00:03:03,000 --> 00:03:06,270
到一个数据库，但我们实际上不是。

60
00:03:06,270 --> 00:03:10,280
这是一个指向一些服务器端代码的 HTTP 地址，

61
00:03:10,280 --> 00:03:13,720
我们看不到，这是由 Firebase 团队编写的，

62
00:03:13,720 --> 00:03:17,640
它通过了我们将发送的请求

63
00:03:17,640 --> 00:03:22,090
然后提取数据，然后将其写入数据库。

64
00:03:22,090 --> 00:03:25,110
所以对我们来说，看起来我们是在直接交谈

65
00:03:25,110 --> 00:03:28,130
到数据库，但我们实际上不是。

66
00:03:28,130 --> 00:03:31,630
但这是地址或地址的一部分

67
00:03:31,630 --> 00:03:34,090
我们要向其发送请求。

68
00:03:34,090 --> 00:03:35,950
当然，请确保您选择地址

69
00:03:35,950 --> 00:03:38,980
您在仪表板中看到。不是我的。

70
00:03:38,980 --> 00:03:41,820
此地址在您访问时将不再可用

71
00:03:41,820 --> 00:03:42,883
观看本课程。

72
00:03:44,430 --> 00:03:46,630
所以我们想向它发送请求。

73
00:03:46,630 --> 00:03:48,930
但是我们现在如何发送请求

74
00:03:48,930 --> 00:03:51,283
从我们这里的 Vue 代码里面？

75
00:03:52,730 --> 00:03:55,390
好吧，有几个选择。

76
00:03:55,390 --> 00:03:59,340
我们可以使用第三方包，比如 axios，

77
00:03:59,340 --> 00:04:03,280
这是一个非常流行的用于发送的 JavaScript 包

78
00:04:03,280 --> 00:04:06,900
来自 JavaScript 内部的 HTTP 请求。

79
00:04:06,900 --> 00:04:09,910
它非常强大且易于使用

80
00:04:09,910 --> 00:04:11,523
绝对值得一看。

81
00:04:12,684 --> 00:04:16,130
或者，浏览器也有内置方法

82
00:04:16,130 --> 00:04:18,279
用于发送 HTTP 请求。

83
00:04:18,279 --> 00:04:21,610
正好有 fetch 方法，

84
00:04:21,610 --> 00:04:24,640
听起来它只是为了获取数据

85
00:04:24,640 --> 00:04:27,610
但它实际上是一个允许我们发送数据的函数

86
00:04:27,610 --> 00:04:29,023
到服务器也是如此。

87
00:04:30,280 --> 00:04:33,870
Fetch 将 URL 作为第一个参数

88
00:04:33,870 --> 00:04:37,470
然后我们可以将其配置为从该 URL 获取数据

89
00:04:37,470 --> 00:04:39,703
或将数据发送到该 URL。

90
00:04:40,540 --> 00:04:43,380
我将在这里与 Fetch 合作

91
00:04:43,380 --> 00:04:45,020
因为它内置在浏览器中，

92
00:04:45,020 --> 00:04:49,063
但是您绝对也可以查看 axios 之类的软件包。

93
00:04:50,050 --> 00:04:53,310
axios 和 fetch 都会发送所谓的

94
00:04:53,310 --> 00:04:56,250
幕后 HTTP 请求。

95
00:04:56,250 --> 00:04:59,490
这意味着我们不会重新加载页面，

96
00:04:59,490 --> 00:05:03,300
我们的应用程序不会被杀死并重新启动，

97
00:05:03,300 --> 00:05:06,411
相反，Vue 应用程序将继续运行

98
00:05:06,411 --> 00:05:11,120
并且 HTTP 请求只是在幕后发送的

99
00:05:11,120 --> 00:05:12,990
到我们的后端。

100
00:05:12,990 --> 00:05:15,700
这正是我们想要的行为。

101
00:05:15,700 --> 00:05:19,600
我们要确保我们的请求被发送

102
00:05:19,600 --> 00:05:21,963
无需重新启动应用程序。