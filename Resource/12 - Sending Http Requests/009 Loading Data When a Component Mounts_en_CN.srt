1
00:00:02,170 --> 00:00:04,320
发送和获取数据工作，

2
00:00:04,320 --> 00:00:07,600
这就是本课程的主要目标。

3
00:00:07,600 --> 00:00:09,680
但是我们可以添加更多内容。

4
00:00:09,680 --> 00:00:12,390
例如，当我们重新加载这个页面时，

5
00:00:12,390 --> 00:00:15,440
我们当然可以随时加载所有提交的体验。

6
00:00:15,440 --> 00:00:17,470
顺便说一句，这就是伟大的事情。

7
00:00:17,470 --> 00:00:21,090
现在，当我们重新加载页面时，数据不会丢失

8
00:00:21,090 --> 00:00:23,623
因为它存储在这个后端服务器上。

9
00:00:24,910 --> 00:00:28,060
但是当我们重新加载时，我们可能还想获取

10
00:00:28,060 --> 00:00:30,910
自动提交的所有体验，

11
00:00:30,910 --> 00:00:33,576
无需先按此按钮。

12
00:00:33,576 --> 00:00:36,450
这很容易实现

13
00:00:36,450 --> 00:00:37,940
在 Vue.js 中。

14
00:00:37,940 --> 00:00:40,120
在用户体验组件中，

15
00:00:40,120 --> 00:00:42,680
我们有获取数据的代码，

16
00:00:42,680 --> 00:00:44,930
我们有加载体验方法。

17
00:00:44,930 --> 00:00:48,390
嗯，当然我们也可以触发这个方法，

18
00:00:48,390 --> 00:00:50,770
不仅在单击此按钮时，

19
00:00:50,770 --> 00:00:54,450
但是当第一次加载整个组件时。

20
00:00:54,450 --> 00:00:56,250
我们怎么能这样做呢？

21
00:00:56,250 --> 00:00:59,600
好吧，你可能还记得这个 Vue 生命周期，

22
00:00:59,600 --> 00:01:03,070
每个实例，因此每个组件都有，

23
00:01:03,070 --> 00:01:04,553
我们可以利用它。

24
00:01:05,700 --> 00:01:08,170
每个组件都遵循该生命周期

25
00:01:08,170 --> 00:01:11,565
因此在用户体验方面，

26
00:01:11,565 --> 00:01:15,950
我们可以简单地添加，也许在底部。

27
00:01:15,950 --> 00:01:19,483
例如，我们可以简单地添加挂载的钩子。

28
00:01:20,350 --> 00:01:23,530
这将在安装 Vue 应用程序时触发，

29
00:01:23,530 --> 00:01:25,550
这意味着当它完全初始化时

30
00:01:25,550 --> 00:01:27,730
并准备开始。

31
00:01:27,730 --> 00:01:32,260
在这里，我们现在可以触发加载体验方法，

32
00:01:32,260 --> 00:01:36,315
确保当这个组件变得可见时，

33
00:01:36,315 --> 00:01:40,483
然后它将继续加载所有体验。

34
00:01:42,150 --> 00:01:44,373
如果我这样做并重新加载，

35
00:01:46,020 --> 00:01:49,130
你会看到体验自动出现

36
00:01:49,130​​ --> 00:01:53,190
过了一会儿，我没有按下这个按钮。

37
00:01:53,190 --> 00:01:56,580
现在，我想说，这是一个有用的改进。

38
00:01:56,580 --> 00:01:57,973
我们还能改进什么？