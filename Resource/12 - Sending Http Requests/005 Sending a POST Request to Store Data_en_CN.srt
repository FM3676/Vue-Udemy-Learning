1
00:00:02,040 --> 00:00:04,310
那么 fetch 是如何工作的呢？

2
00:00:04,310 --> 00:00:08,170
正如我提到的，我们想提供一个快速的论点，

3
00:00:08,170 --> 00:00:12,050
这是此请求应发送到的 URL。

4
00:00:12,050 --> 00:00:15,210
现在这是我从 Firebase 获得的 URL，但实际上，

5
00:00:15,210 --> 00:00:17,180
我们需要稍微调整一下。

6
00:00:17,180 --> 00:00:19,730
您可以在此处的斜线之后添加，

7
00:00:19,730 --> 00:00:22,570
您选择的任何标识符。

8
00:00:22,570 --> 00:00:25,130
我将其命名为调查。

9
00:00:25,130 --> 00:00:28,873
然后，重要的是在那之后添加 .JSON。

10
00:00:30,050 --> 00:00:32,290
这不是 Vue 需要的

11
00:00:32,290 --> 00:00:34,220
或一般需要的后端。

12
00:00:34,220 --> 00:00:36,500
这个 .JSON 最后只是

13
00:00:36,500 --> 00:00:38,923
Firebase 特定要求。

14
00:00:39,810 --> 00:00:42,010
当您使用不同的后端时，

15
00:00:42,010 --> 00:00:44,110
你很有可能不需要它。

16
00:00:44,110 --> 00:00:45,973
但是对于 Firebase，我们需要添加它。

17
00:00:47,120 --> 00:00:50,380
而这里的关键，调查，这取决于你。

18
00:00:50,380 --> 00:00:53,350
Firebase 然后会自动创建一个注释

19
00:00:53,350 --> 00:00:57,113
在此数据库中并将我们的数据存储在该注释下。

20
00:00:58,540 --> 00:01:01,010
这是第一部分。

21
00:01:01,010 --> 00:01:04,180
在这里，我们得到了这个 Fetch 函数。

22
00:01:04,180 --> 00:01:08,030
现在，默认情况下，这将尝试从这里获取数据。

23
00:01:08,030 --> 00:01:12,010
现在在这里我不想获取数据，相反，我想发送数据。

24
00:01:12,010 --> 00:01:15,000
因此，我们可以将第二个参数传递给 Fetch。

25
00:01:15,000 --> 00:01:17,030
那是一个（模糊的）对象

26
00:01:17,030 --> 00:01:19,033
我们可以在哪里配置这个请求。

27
00:01:20,450 --> 00:01:23,410
这里我们有一个可以设置的方法属性。

28
00:01:23,410 --> 00:01:26,620
默认情况下，该值是一个字符串 get，

29
00:01:26,620 --> 00:01:28,520
但我们可以将其设置为发布。

30
00:01:28,520 --> 00:01:32,363
这会影响我们发送哪种 http 请求。

31
00:01:33,470 --> 00:01:36,410
有获取和发布请求。

32
00:01:36,410 --> 00:01:40,950
Get 用于获取数据，post 用于发布，以便发送数据。

33
00:01:40,950 --> 00:01:44,200
还有其他的词，比如delete

34
00:01:44,200 --> 00:01:47,623
或用于删除和更新的补丁。

35
00:01:48,810 --> 00:01:52,073
但是这里我们需要 post 来发送一条新的数据，

36
00:01:53,520 --> 00:01:56,460
我们还需要添加一些标题，

37
00:01:56,460 --> 00:01:59,140
此传出请求的一些元数据。

38
00:01:59,140 --> 00:02:03,230
准确地说，我们应该设置内容类型标头

39
00:02:03,230 --> 00:02:07,370
到应用程序/JSON，告诉服务器

40
00:02:07,370 --> 00:02:09,910
我们将在此请求中添加一些数据

41
00:02:09,910 --> 00:02:12,730
它将采用 JSON 格式。

42
00:02:12,730 --> 00:02:15,160
这基本上只是文本，

43
00:02:15,160 --> 00:02:17,900
但是以特定方式显示方法的文本，

44
00:02:17,900 --> 00:02:21,203
这很容易让机器通过和阅读。

45
00:02:22,150 --> 00:02:24,050
这就是我们要添加的下一件事。

46
00:02:24,050 --> 00:02:26,770
我们必须为这个请求添加一个正文。

47
00:02:26,770 --> 00:02:28,423
这是我们要添加的数据。

48
00:02:29,280 --> 00:02:33,250
当然，这应该是我的调查结果。

49
00:02:33,250 --> 00:02:35,003
名称和等级。

50
00:02:36,820 --> 00:02:40,790
所以在这里我将添加一个新的 JavaScript 对象作为主体，

51
00:02:40,790 --> 00:02:44,090
我将名称设置为此用户名，

52
00:02:44,090 --> 00:02:47,130
以及对该评级的评级，

53
00:02:47,130 --> 00:02:48,910
对不起，选择的评级。

54
00:02:48,910 --> 00:02:51,820
所以我过去发出的价值观，

55
00:02:51,820 --> 00:02:54,450
现在已添加到此对象。

56
00:02:54,450 --> 00:02:57,330
因此，这里当然应该输入名称。

57
00:02:57,330 --> 00:02:59,780
所以，之前提交的值，

58
00:02:59,780 --> 00:03:01,240
输入名称和选择的评级，

59
00:03:01,240 --> 00:03:04,533
这些是现在在此对象中编码的值。

60
00:03:06,070 --> 00:03:08,870
但正如我刚才所说，这是一个 JavaScript 对象，

61
00:03:08,870 --> 00:03:10,640
我们想发送 JSON 数据，

62
00:03:10,640 --> 00:03:14,700
JavaScript 有一个方便的方法，我们可以使用它。

63
00:03:14,700 --> 00:03:16,460
有一个 JSON 对象

64
00:03:16,460 --> 00:03:18,800
您可以在其上调用 stringify 方法，

65
00:03:18,800 --> 00:03:20,500
你可以将你的对象传递给它。

66
00:03:21,520 --> 00:03:25,690
这会将这个 JavaScript 对象转换成这个 JSON 格式

67
00:03:25,690 --> 00:03:28,283
变成一个有这个的字符串我们要发送的格式。

68
00:03:30,400 --> 00:03:35,210
现在，它将向 Firebase 发送一个 http 请求。

69
00:03:35,210 --> 00:03:36,580
这也意味着

70
00:03:36,580 --> 00:03:40,030
我们不再需要在这里发出我们的自定义事件，

71
00:03:40,030 --> 00:03:41,880
因此它将注释掉所有内容

72
00:03:41,880 --> 00:03:43,770
那是相关的。

73
00:03:43,770 --> 00:03:45,800
当然这也意味着

74
00:03:45,800 --> 00:03:49,363
我们不再在 App.vue 中管理我们的数据。

75
00:03:50,320 --> 00:03:51,510
现在，我们可以这样做，

76
00:03:51,510 --> 00:03:53,580
你可以有一个应用程序

77
00:03:53,580 --> 00:03:55,130
你想发送请求，

78
00:03:55,130 --> 00:03:58,460
并且仍然在本地管理您的数据。

79
00:03:58,460 --> 00:04:00,550
这可能是您遇到的情况。

80
00:04:00,550 --> 00:04:03,660
在这里，这不是我所拥有的场景。

81
00:04:03,660 --> 00:04:06,240
所以我将Appvue中的数据注释掉，

82
00:04:06,240 --> 00:04:09,640
我将在这里注释掉这些方法块，

83
00:04:09,640 --> 00:04:11,390
用店铺调查法。

84
00:04:11,390 --> 00:04:14,020
因为我们将不再在本地执行此操作

85
00:04:14,020 --> 00:04:16,660
在我们的 Vue 应用程序中，至少对于这个应用程序。

86
00:04:16,660 --> 00:04:18,550
我们不会再在本地做，

87
00:04:18,550 --> 00:04:20,029
因此我们不需要这些数据

88
00:04:20,029 --> 00:04:21,480
和这里的方法了。

89
00:04:22,570 --> 00:04:24,770
这也意味着我们不再

90
00:04:24,770 --> 00:04:28,310
将在这里绑定调查提交，关于学习调查，

91
00:04:28,310 --> 00:04:32,203
我们将不再为用户体验提供结果。

92
00:04:33,560 --> 00:04:36,910
这当然意味着，而不是用户体验，

93
00:04:36,910 --> 00:04:37,880
暂时，

94
00:04:37,880 --> 00:04:40,720
我们将不再获得结果的价值。

95
00:04:40,720 --> 00:04:42,370
我们稍后会处理这个问题。

96
00:04:44,040 --> 00:04:45,900
回到我们的学习调查，

97
00:04:45,900 --> 00:04:49,510
我们现在正在发送这个 http 请求。

98
00:04:49,510 --> 00:04:51,610
让我们看看（模糊）有效。

99
00:04:51,610 --> 00:04:55,280
让我们保存所有内容，重新加载此应用程序

100
00:04:55,280 --> 00:04:58,963
让我们在这里提交我们的调查结果。

101
00:04:59,930 --> 00:05:01,400
现在，它奏效了吗？

102
00:05:01,400 --> 00:05:03,720
让我们看一下 Firebase。

103
00:05:03,720 --> 00:05:04,920
它应该工作，

104
00:05:04,920 --> 00:05:07,890
在这里你应该看到一个调查记录，

105
00:05:07,890 --> 00:05:10,700
你在哪里看到这个随机文本

106
00:05:10,700 --> 00:05:13,300
这对你来说绝对不同，

107
00:05:13,300 --> 00:05:15,250
在那里，你应该看到你的数据。

108
00:05:16,620 --> 00:05:19,910
现在这个随机文本只是一个唯一的 ID

109
00:05:19,910 --> 00:05:22,800
这是由 Firebase 自动生成的。

110
00:05:22,800 --> 00:05:26,483
太好了，我们以后可以在前端使用该 ID。

111
00:05:27,530 --> 00:05:31,933
但是现在，我们将数据存储在 Firebase 上。

112
00:05:32,870 --> 00:05:34,090
那太好了。

113
00:05:34,090 --> 00:05:37,740
我们现在如何将这些数据返回到前端

114
00:05:37,740 --> 00:05:41,160
当我们点击这个加载提交的体验按钮时，

115
00:05:41,160 --> 00:05:43,260
哪个目前没有做任何事情？