1
00:00:02,240 --> 00:00:04,550
附上你找到另一个开始

2
00:00:04,550 --> 00:00:07,013
应用程序下载，提取。

3
00:00:07,013 --> 00:00:10,639
运行，npm install 然后是 npm run serve

4
00:00:10,639 --> 00:00:13,210
这带来了另一个 Vue 应用程序

5
00:00:13,210 --> 00:00:14,803
我为你准备的。

6
00:00:16,090 --> 00:00:17,840
这是一个基本的视图应用程序。

7
00:00:17,840 --> 00:00:19,967
这个，哪里可以

8
00:00:19,967 --> 00:00:21,814
填写这份基本调查表，

9
00:00:21,814 --> 00:00:25,030
提供您对此学习经历的看法

10
00:00:25,030 --> 00:00:26,730
然后您的数据将被保存

11
00:00:26,730 --> 00:00:28,596
并在那里输出。

12
00:00:28,596 --> 00:00:29,886
这个应用程序

13
00:00:29,886 --> 00:00:32,862
使用我们已经了解的功能。

14
00:00:32,862 --> 00:00:34,331
我们有

15
00:00:34,331 --> 00:00:37,640
App.vue 文件中的两个主要组件。

16
00:00:37,640 --> 00:00:40,270
调查组件和组件

17
00:00:40,270 --> 00:00:43,231
最后输出提交的结果。

18
00:00:43,231 --> 00:00:45,270
我正在管理我的清单

19
00:00:45,270 --> 00:00:47,954
在 App.vue 中提交了调查结果。

20
00:00:47,954 --> 00:00:50,921
在这里，我得到了一种添加新结果的方法

21
00:00:50,921 --> 00:00:54,060
学习调查本身就是一个组成部分

22
00:00:54,060 --> 00:00:57,202
使用输入元素保存此表单，

23
00:00:57,202 --> 00:00:59,880
与模型绑定

24
00:00:59,880 --> 00:01:01,920
和一堆单选按钮

25
00:01:01,920 --> 00:01:04,208
它们也与 v-model 绑定。

26
00:01:04,208 --> 00:01:06,400
然后管理这个表格

27
00:01:06,400 --> 00:01:09,450
就像您在表单模块中学到的一样。

28
00:01:09,450 --> 00:01:10,920
有一个提交方法。

29
00:01:10,920 --> 00:01:12,470
我正在验证输入，

30
00:01:12,470 --> 00:01:14,110
显示错误消息

31
00:01:14,974 --> 00:01:16,030
这里。

32
00:01:16,030 --> 00:01:18,616
如果一个或多个输入字段无效，

33
00:01:18,616 --> 00:01:21,140
发出自定义事件，

34
00:01:21,140 --> 00:01:23,160
调查提交事件

35
00:01:23,160 --> 00:01:25,735
其中包含输入的用户名和评级

36
00:01:25,735 --> 00:01:28,053
并且该调查提交事件

37
00:01:28,053 --> 00:01:29,386
然后陷入

38
00:01:29,386 --> 00:01:31,990
应用程序.vue。

39
00:01:31,990 --> 00:01:34,700
这里是学习调查组件

40
00:01:34,700 --> 00:01:37,890
然后触发商店调查方法

41
00:01:37,890 --> 00:01:40,659
此调查数据使用 ID 丰富

42
00:01:40,659 --> 00:01:42,337
然后存储在（喃喃自语）中。

43
00:01:43,655 --> 00:01:47,058
然后我们有用户体验的组件。

44
00:01:47,058 --> 00:01:49,040
这就是这里的组件，

45
00:01:49,040 --> 00:01:50,620
它只是输出所有

46
00:01:50,620 --> 00:01:53,559
使用 v-for 提交调查结果。

47
00:01:53,559 --> 00:01:55,647
我这里有另一个组件，

48
00:01:55,647 --> 00:01:57,790
调查结果部分，

49
00:01:57,790 --> 00:01:59,970
只负责输出

50
00:01:59,970 --> 00:02:01,980
单个列表项。

51
00:02:01,980 --> 00:02:04,140
那里有一些条件样式，

52
00:02:04,140 --> 00:02:06,248
一些条件 CSS 类。

53
00:02:06,248 --> 00:02:09,423
总的来说，这没什么太花哨的。

54
00:02:10,530 --> 00:02:11,363
现在当然，

55
00:02:11,363 --> 00:02:13,550
这个应用程序有一个问题。

56
00:02:13,550 --> 00:02:15,771
如果我在这里提交一堆数据，

57
00:02:15,771 --> 00:02:17,800
我们在这里看到所有的数据，

58
00:02:17,800 --> 00:02:20,000
但是每当我们重新加载页面时，

59
00:02:20,000 --> 00:02:21,504
所有数据都丢失了。

60
00:02:21,504 --> 00:02:23,520
这不是一个错误，

61
00:02:23,520 --> 00:02:26,300
这是，嗯，它可以表现的唯一方式

62
00:02:26,300 --> 00:02:27,950
因为到目前为止，

63
00:02:27,950 --> 00:02:31,441
我们总是将所有数据存储在 Vue 中

64
00:02:31,441 --> 00:02:34,610
因此只是在计算机内存中，

65
00:02:34,610 --> 00:02:36,180
这就是这里发生的事情。

66
00:02:36,180 --> 00:02:37,810
所以我们创建的所有数据

67
00:02:37,810 --> 00:02:39,340
与所有这些组件

68
00:02:39,340 --> 00:02:41,212
只是存储在本地

69
00:02:41,212 --> 00:02:43,587
在记忆中，因此丢失

70
00:02:43,587 --> 00:02:46,440
每当重新加载此网站

71
00:02:46,440 --> 00:02:48,292
因此 Vue 应用程序被转储

72
00:02:48,292 --> 00:02:51,280
一个新的 Vue 应用程序实例启动

73
00:02:51,280 --> 00:02:53,440
因此所有附加的数据

74
00:02:53,440 --> 00:02:55,923
之前运行的 Vue 应用程序丢失。

75
00:02:57,020 --> 00:02:59,190
这就是浏览器的工作方式。

76
00:02:59,190 --> 00:03:01,542
有你对此无能为力。

77
00:03:01,542 --> 00:03:03,215
但当然，在现实中，

78
00:03:03,215 --> 00:03:05,554
您经常构建应用程序

79
00:03:05,554 --> 00:03:08,280
数据应该保存在哪里

80
00:03:08,280 --> 00:03:10,160
以及它可能在哪里

81
00:03:10,160 --> 00:03:12,329
不应该只保存在本地

82
00:03:12,329 --> 00:03:14,578
在您用户的计算机上

83
00:03:14,578 --> 00:03:17,696
例如，在文件或类似的东西中

84
00:03:17,696 --> 00:03:20,090
而是应该存储在哪里

85
00:03:20,090 --> 00:03:23,434
在您作为开发人员拥有的服务器上。

86
00:03:23,434 --> 00:03:26,377
想想亚马逊网站。

87
00:03:26,377 --> 00:03:28,785
那里列出的所有产品，

88
00:03:28,785 --> 00:03:30,220
他们当然是，

89
00:03:30,220 --> 00:03:32,590
存储在亚马逊的服务器上

90
00:03:32,590 --> 00:03:35,429
并展示给访问亚马逊的用户。

91
00:03:35,429 --> 00:03:37,260
所以你很常见

92
00:03:37,260 --> 00:03:39,600
需要一个保存数据的服务器

93
00:03:39,600 --> 00:03:41,890
然后运行 ​​Vue 应用程序

94
00:03:41,890 --> 00:03:43,970
在您用户的计算机上，

95
00:03:43,970 --> 00:03:46,200
在用户的浏览器中运行。

96
00:03:46,200 --> 00:03:48,770
那些 Vue 应用程序应该连接

97
00:03:48,770 --> 00:03:51,564
到您的服务器并从那里获取数据

98
00:03:51,564 --> 00:03:54,670
或向他们发送数据。

99
00:03:54,670 --> 00:03:57,560
所以这里的调查应用程序，例如，

100
00:03:57,560 --> 00:03:59,090
可能不应该只是

101
00:03:59,090 --> 00:04:01,370
在那里输出调查结果，

102
00:04:01,370 --> 00:04:03,710
但也应提交数据

103
00:04:03,710 --> 00:04:06,123
到保存它的服务器。

104
00:04:06,960 --> 00:04:09,220
实际上，今年甚至可能

105
00:04:09,220 --> 00:04:11,860
是两个独立的 Vue 应用程序

106
00:04:11,860 --> 00:04:13,393
调查表在哪里

107
00:04:13,393 --> 00:04:16,358
是您向用户展示的应用程序

108
00:04:16,358 --> 00:04:18,447
这个仪表板在这里

109
00:04:18,447 --> 00:04:21,100
您在哪里看到提交的调查。

110
00:04:21,100 --> 00:04:24,163
那可能是一个只有你可以访问的 Vue 应用程序。

111
00:04:25,670 --> 00:04:27,360
但是在这里它被合并为一个所以

112
00:04:27,360 --> 00:04:29,140
我们可以看到两者都在行动。

113
00:04:29,140 --> 00:04:31,530
尽管如此，我们通常需要一个服务器

114
00:04:31,530 --> 00:04:33,433
我们可以向其发送数据。

115
00:04:34,560 --> 00:04:37,070
这正是后端。

116
00:04:37,070 --> 00:04:38,460
这是另一端。

117
00:04:38,460 --> 00:04:40,730
这是不运行的部分

118
00:04:40,730 --> 00:04:42,570
在您用户的浏览器中

119
00:04:42,570 --> 00:04:44,150
就像你的 Vue 应用一样

120
00:04:44,150 --> 00:04:47,400
但它是关于在服务器上运行的代码，

121
00:04:47,400 --> 00:04:49,180
您作为开发人员拥有。

122
00:04:49,180 --> 00:04:51,080
这是关于你的数据库

123
00:04:51,080 --> 00:04:52,680
作为开发人员可能拥有的。

124
00:04:52,680 --> 00:04:55,256
该数据库也将是

125
00:04:55,256 --> 00:04:57,097
在您拥有的服务器上。

126
00:04:57,097 --> 00:04:58,780
所以它与 Vue 应用程序是分离的。

127
00:04:58,780 --> 00:05:00,713
尽管如此，我们还是想交流，

128
00:05:01,692 --> 00:05:03,363
这就是这个模块的意义所在。