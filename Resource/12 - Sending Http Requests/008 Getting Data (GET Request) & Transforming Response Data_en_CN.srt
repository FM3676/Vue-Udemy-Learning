1
00:00:02,260 --> 00:00:04,210
我们现在想获取数据

2
00:00:04,210 --> 00:00:07,010
存储在此服务器上。

3
00:00:07,010 --> 00:00:09,150
为此我想连接这个负载

4
00:00:09,150 --> 00:00:11,470
提交体验按钮。

5
00:00:11,470 --> 00:00:14,490
所以在 UserExperiences 组件中，

6
00:00:14,490 --> 00:00:17,030
我们之前收到了作为道具的结果。

7
00:00:17,030 --> 00:00:19,130
以后不会这样了

8
00:00:19,130​​ --> 00:00:20,870
所以我们可以删除它。

9
00:00:20,870 --> 00:00:21,920
而现在，

10
00:00:21,920 --> 00:00:23,990
我想在这里管理一些数据

11
00:00:24,870 --> 00:00:27,903
并将我的结果作为数据键。

12
00:00:28,870 --> 00:00:30,620
最初，它是一个空数组。

13
00:00:32,040 --> 00:00:34,980
现在，我也想在这里添加一些方法，

14
00:00:34,980 --> 00:00:37,720
或者是一种精确的方法，

15
00:00:37,720 --> 00:00:39,510
应该触发的方法

16
00:00:39,510 --> 00:00:41,053
单击此按钮时。

17
00:00:42,600 --> 00:00:44,540
所以在这里，我想添加一个点击

18
00:00:44,540 --> 00:00:46,780
空格键的监听器

19
00:00:46,780 --> 00:00:50,033
并触发 LoadExperiences 方法。

20
00:00:52,000 --> 00:00:54,320
现在这是我们现在需要添加的方法。

21
00:00:54,320 --> 00:00:56,940
因此，请确保以相同的名称添加它

22
00:00:56,940 --> 00:00:57,863
到方法，

23
00:00:58,760 --> 00:01:00,040
并在这里

24
00:01:00,040 --> 00:01:03,180
我们现在想发送另一个 HTTP 请求

25
00:01:03,180 --> 00:01:06,390
到我们之前将数据发送到的服务器。

26
00:01:06,390 --> 00:01:08,333
但是现在要获取数据。

27
00:01:09,620 --> 00:01:12,530
为此，我们当然可以复制这个请求

28
00:01:12,530 --> 00:01:14,560
来自学习调查.vue，

29
00:01:14,560 --> 00:01:17,623
并将其带到这个新的 LoadExperiences 方法中。

30
00:01:18,840 --> 00:01:22,300
现在在这里，我想向同一个地址发送请求，

31
00:01:22,300 --> 00:01:24,500
我用来存储数据的。

32
00:01:24,500 --> 00:01:26,810
但现在应该是 GET 请求

33
00:01:26,810 --> 00:01:28,180
而不是 POST 请求，

34
00:01:28,180 --> 00:01:29,703
因为你想获取数据。

35
00:01:31,030 --> 00:01:31,920
好在，

36
00:01:31,920 --> 00:01:33,160
这将是默认值，

37
00:01:33,160 --> 00:01:35,420
所以我们甚至不需要设置它。

38
00:01:35,420 --> 00:01:36,900
现在因为我们正在获取数据

39
00:01:36,900 --> 00:01:39,410
我们也不会有任何身体。

40
00:01:39,410 --> 00:01:41,220
所以我们也可以删除它，

41
00:01:41,220 --> 00:01:44,543
因为 GET 请求不携带任何数据。

42
00:01:45,930 --> 00:01:47,630
现在这里是标题，

43
00:01:47,630 --> 00:01:48,760
因为没有身体

44
00:01:48,760 --> 00:01:50,323
我们也不需要标题。

45
00:01:51,380 --> 00:01:53,400
所以我们有一个空的冲突对象

46
00:01:53,400 --> 00:01:56,870
因此我们也可以删除它。

47
00:01:56,870 --> 00:01:59,663
这将发送一个请求以获取数据。

48
00:02:00,740 --> 00:02:02,790
但我们将面临一个问题。

49
00:02:02,790 --> 00:02:04,665
当我们发送这个请求时，

50
00:02:04,665 --> 00:02:07,200
我们如何访问数据

51
00:02:07,200 --> 00:02:08,963
最终将被加载？

52
00:02:10,440 --> 00:02:14,070
好吧， fetch 返回一个所谓的承诺。

53
00:02:14,070 --> 00:02:15,130
现在，什么是承诺？

54
00:02:15,130 --> 00:02:17,770
为什么我们需要它？

55
00:02:17,770 --> 00:02:19,200
就像我刚才说的，

56
00:02:19,200 --> 00:02:21,760
数据最终会被加载。

57
00:02:21,760 --> 00:02:22,890
可以想象，

58
00:02:22,890 --> 00:02:25,270
如果您要发送 HTTP 请求，

59
00:02:25,270 --> 00:02:29,160
这可能需要几毫秒或几秒钟。

60
00:02:29,160 --> 00:02:31,090
Firebase 超级快

61
00:02:31,090 --> 00:02:33,400
而且我当地的互联网非常快

62
00:02:33,400 --> 00:02:35,100
所以应该很快。

63
00:02:35,100 --> 00:02:39,100
但仍然可能需要 100 200 500 毫秒

64
00:02:39,100 --> 00:02:41,320
以便数据到达。

65
00:02:41,320 --> 00:02:43,620
而 JavaScript 是一门语言

66
00:02:43,620 --> 00:02:48,050
不会暂停并等待其他代码执行

67
00:02:48,050 --> 00:02:50,370
直到那个结果出现。

68
00:02:50,370 --> 00:02:51,203
那很好，

69
00:02:51,203 --> 00:02:53,258
因为这意味着如果它会暂停

70
00:02:53,258 --> 00:02:56,510
我们的网络应用程序会一直冻结

71
00:02:56,510 --> 00:02:59,720
等待一些幕后的 HTTP 请求

72
00:02:59,720 --> 00:03:00,583
完成。

73
00:03:01,500 --> 00:03:03,530
这就是 Promise 背后的想法。

74
00:03:03,530 --> 00:03:05,760
Fetch 返回一个对象

75
00:03:05,760 --> 00:03:08,160
我们可以在其中n 监听数据

76
00:03:08,160 --> 00:03:09,470
一旦它在那里，

77
00:03:09,470 --> 00:03:10,890
然后设置代码

78
00:03:10,890 --> 00:03:14,240
将在该数据存在时执行。

79
00:03:14,240 --> 00:03:17,910
我们通过在此处添加 then 方法来设置这样的侦听器

80
00:03:17,910 --> 00:03:20,183
关于获取的结果。

81
00:03:21,490 --> 00:03:22,740
然后方法

82
00:03:22,740 --> 00:03:24,410
接受一个函数

83
00:03:24,410 --> 00:03:27,360
将在结果出现后执行。

84
00:03:27,360 --> 00:03:29,080
会自动执行

85
00:03:29,080 --> 00:03:32,340
数据存在后由浏览器进行。

86
00:03:32,340 --> 00:03:33,173
而在这里，

87
00:03:33,173 --> 00:03:35,110
我们也会自动得到一个参数

88
00:03:35,110 --> 00:03:38,070
这将是这个请求的响应。

89
00:03:38,070 --> 00:03:41,913
所以服务器发回的响应给浏览器。

90
00:03:43,170 --> 00:03:45,580
现在在这里我们可以使用该响应

91
00:03:45,580 --> 00:03:48,063
并尝试解析它。

92
00:03:48,063 --> 00:03:51,810
例如，它可以检查响应是否正常。

93
00:03:51,810 --> 00:03:53,240
这个响应对象

94
00:03:53,240 --> 00:03:55,300
我们由浏览器自动获取

95
00:03:55,300 --> 00:03:56,977
有一个好的财产

96
00:03:56,977 --> 00:04:00,960
这表明它是否是一个成功的请求。

97
00:04:00,960 --> 00:04:01,800
例如，

98
00:04:01,800 --> 00:04:05,010
如果服务器发回 404 代码，

99
00:04:05,010 --> 00:04:06,433
这是不行的。

100
00:04:07,400 --> 00:04:08,760
不过如果没问题的话

101
00:04:08,760 --> 00:04:10,870
我们可以继续回复

102
00:04:10,870 --> 00:04:13,780
并尝试读取其中的数据。

103
00:04:13,780 --> 00:04:17,560
为此，响应有多种方法。

104
00:04:17,560 --> 00:04:20,790
例如，它有一个 JSON 方法，我们可以调用它，

105
00:04:20,790 --> 00:04:23,190
这将解析数据

106
00:04:23,190 --> 00:04:26,413
如果它是 JSON 格式，那是响应的一部分。

107
00:04:27,410 --> 00:04:31,510
JSON 是交换数据的事实标准。

108
00:04:31,510 --> 00:04:35,820
因此，我们不仅以 JSON 格式发送数据，

109
00:04:35,820 --> 00:04:37,820
当我们发送请求时，

110
00:04:37,820 --> 00:04:41,360
Firebase 还回复 JSON 数据

111
00:04:41,360 --> 00:04:43,090
当我们从中获取数据时。

112
00:04:43,090 --> 00:04:44,140
所以JSON方法

113
00:04:44,140 --> 00:04:45,710
是我们想要使用的方法

114
00:04:45,710 --> 00:04:48,913
用于解析作为响应一部分的数据。

115
00:04:50,240 --> 00:04:53,910
现在，这也证明了一个承诺。

116
00:04:53,910 --> 00:04:55,950
因此我们可以在这里做什么

117
00:04:55,950 --> 00:04:58,770
在这样的 then 块里面，

118
00:04:58,770 --> 00:05:03,770
我们可以在这里返回这个响应 JSON 调用吗？

119
00:05:03,900 --> 00:05:07,330
所以我们可以返回由此产生的承诺。

120
00:05:07,330 --> 00:05:09,760
我们可以添加另一个 then 方法

121
00:05:09,760 --> 00:05:11,950
在第一个 then 方法之后。

122
00:05:11,950 --> 00:05:14,830
然后这个 then 方法将被触发

123
00:05:14,830 --> 00:05:17,083
当这个回报承诺完成时。

124
00:05:18,200 --> 00:05:20,180
所以这里我们有另一个功能，

125
00:05:20,180 --> 00:05:22,720
但在这里我们会得到实际的数据，

126
00:05:22,720 --> 00:05:24,993
JSON 产生了哪个响应。

127
00:05:26,730 --> 00:05:30,170
这就是我们现在可以访问数据的地方。

128
00:05:30,170 --> 00:05:31,770
因此，暂时在这里，

129
00:05:31,770 --> 00:05:33,063
我只会记录它。

130
00:05:35,660 --> 00:05:38,430
我们稍后会处理错误处理，

131
00:05:38,430 --> 00:05:41,860
目前让我们看看我们是否可以获得这些数据。

132
00:05:41,860 --> 00:05:43,580
所以让我们保存一切。

133
00:05:43,580 --> 00:05:46,140
打开开发者工具，

134
00:05:46,140 --> 00:05:46,973
重新加载，

135
00:05:47,870 --> 00:05:50,253
并单击加载提交的体验。

136
00:05:51,100 --> 00:05:54,130
半秒或一秒后，

137
00:05:54,130 --> 00:05:56,550
你应该在这里看到一些数据。

138
00:05:56,550 --> 00:06:01,280
这确实是存储在服务器上的数据，

139
00:06:01,280 --> 00:06:03,370
它有这个 Firebase id。

140
00:06:03,370 --> 00:06:05,370
然后存储在那个id下，

141
00:06:05,370 --> 00:06:08,683
我们有一个带有名称和评级的嵌套对象。

142
00:06:10,160 --> 00:06:12,700
因此，获取该数据有效。

143
00:06:12,700 --> 00:06:15,430
现在，当然，我们不只是想获取它

144
00:06:15,430 --> 00:06:17,140
并将其记录到控制台，

145
00:06:17,140 --> 00:06:19,940
但我们想在屏幕上输出它。

146
00:06:19,940 --> 00:06:21,240
现在要做到这一点，

147
00:06:21,240 --> 00:06:22,760
我们必须在这里做的一切，

148
00:06:22,760 --> 00:06:26,060
我们是否必须将它添加到我们这里的结果中，

149
00:06:26,060 --> 00:06:28,700
或将结果设置为新数组，

150
00:06:28,700 --> 00:06:30,363
其中充满了这些数据。

151
00:06:31,610 --> 00:06:34,110
现在将此结果设置为等于数据

152
00:06:34,110 --> 00:06:35,600
不会成功的。

153
00:06:35,600 --> 00:06:38,020
因为数据不是数组。

154
00:06:38,020 --> 00:06:39,540
这是一个 JavaScript 对象

155
00:06:39,540 --> 00:06:42,020
将此 id 作为属性名称。

156
00:06:42,020 --> 00:06:42,870
然后在里面，

157
00:06:42,870 --> 00:06:44,730
我们有另一个嵌套对象

158
00:06:44,730 --> 00:06:46,770
带有名称和评级。

159
00:06:46,770 --> 00:06:49,480
我实际上想使用数组来代替。

160
00:06:49,480 --> 00:06:52,070
因此我们需要转换数据。

161
00:06:52,070 --> 00:06:54,970
我将在这里添加一个结果数组，

162
00:06:54,970 --> 00:06:56,080
一个空的，

163
00:06:56,080 --> 00:07:01,080
然后我将遍历数据中的所有 id。

164
00:07:02,460 --> 00:07:04,730
请记住，数据是一个对象

165
00:07:04,730 --> 00:07:06,980
充满了这样的id属性。

166
00:07:06,980 --> 00:07:09,983
所以现在我在这里浏览所有这些ID。

167
00:07:11,590 --> 00:07:15,110
我会推送一个新对象

168
00:07:16,320 --> 00:07:18,540
到我的结果数组这里

169
00:07:18,540 --> 00:07:20,530
到这个临时结果数组

170
00:07:20,530 --> 00:07:24,910
对于我在数据中找到的每个 id 属性。

171
00:07:24,910 --> 00:07:27,030
在那里我将设置一个 id 键

172
00:07:27,030 --> 00:07:28,720
到这个id，

173
00:07:28,720 --> 00:07:29,553
我要到这里。

174
00:07:29,553 --> 00:07:32,420
所以对于数据中使用的属性名称，

175
00:07:32,420 --> 00:07:34,850
并设置一个等于数据的名称

176
00:07:34,850 --> 00:07:36,870
对于那个 id。

177
00:07:36,870 --> 00:07:38,080
所以这个数据对象

178
00:07:38,080 --> 00:07:41,190
他们正在访问这个动态 id 属性。

179
00:07:41,190 --> 00:07:42,600
然后那里

180
00:07:42,600 --> 00:07:45,380
我们有一个名称和一个评级字段。

181
00:07:45,380 --> 00:07:47,500
所以在这里，点名

182
00:07:47,500 --> 00:07:52,463
并将评级设置为等于数据 ID 评级。

183
00:07:53,820 --> 00:07:56,300
这就是我生成一堆对象的方式

184
00:07:56,300 --> 00:07:58,340
带有 id 名称和评级字段

185
00:07:58,340 --> 00:08:01,500
基于我们从 Firebase 获取的数据。

186
00:08:01,500 --> 00:08:04,793
我将所有这些都添加到我的临时结果数组中。

187
00:08:05,930 --> 00:08:08,480
一旦我们在这里完成了这四个循环，

188
00:08:08,480 --> 00:08:10,630
我将设置这些结果。

189
00:08:10,630 --> 00:08:13,740
所以我们在这里管理的结果数据属性，

190
00:08:13,740 --> 00:08:18,439
我会将这些结果设置为与我的临时结果相同。

191
00:08:18,439 --> 00:08:20,980
这应该是我们需要的所有代码

192
00:08:20,980 --> 00:08:22,960
转换传入的数据

193
00:08:22,960 --> 00:08:25,400
并将其加载到我们的屏幕上。

194
00:08:25,400 --> 00:08:28,823
因此，如果我们现在重新加载并加载提交的体验，

195
00:08:29,970 --> 00:08:31,360
我得到一个错误。

196
00:08:31,360 --> 00:08:34,200
无法设置未定义的属性结果。

197
00:08:34,200 --> 00:08:37,830
我得到这个是因为这个关键字在这里

198
00:08:37,830 --> 00:08:40,289
实际上结果不是参考

199
00:08:40,289 --> 00:08:42,462
不幸的是，我的视图实例对象。

200
00:08:44,230 --> 00:08:46,380
解决这个问题的最简单方法

201
00:08:46,380 --> 00:08:49,050
是我们这里没有使用这个函数语法，

202
00:08:49,050 --> 00:08:52,560
但这个箭头函数语法代替。

203
00:08:52,560 --> 00:08:55,620
箭头函数是另一种编写函数的方式

204
00:08:55,620 --> 00:08:56,827
在 JavaScript 中。

205
00:08:56,827 --> 00:08:59,250
它们像常规函数一样工作，

206
00:08:59,250 --> 00:09:00,763
但它们有一个关键区别，

207
00:09:00,763 --> 00:09:04,190
他们里面的这个关键字

208
00:09:04,190 --> 00:09:06,311
确实指的是相同的上下文

209
00:09:06,311 --> 00:09:08,860
就像在他们之外一样。

210
00:09:08,860 --> 00:09:11,690
因此，现在这将指

211
00:09:11,690 --> 00:09:14,010
到视图实例对象。

212
00:09:14,010 --> 00:09:16,173
所以如果那样的话，如果我设置这个并重新加载，

213
00:09:17,130 --> 00:09:20,170
并加载提交的体验，

214
00:09:20,170 --> 00:09:22,853
最终我们在这里看到了经验。

215
00:09:24,170 --> 00:09:26,453
如果我现在要添加更多数据，

216
00:09:27,910 --> 00:09:29,363
更多经验，

217
00:09:32,150 --> 00:09:33,600
我加载那些，

218
00:09:33,600 --> 00:09:36,470
我们看到所有这些经历都出现在这里。

219
00:09:36,470 --> 00:09:39,810
和这当然是向前迈出的一大步。

220
00:09:39,810 --> 00:09:43,090
现在我们可以将数据保存在服务器上，

221
00:09:43,090 --> 00:09:45,640
我们也可以从那里获取它。

222
00:09:45,640 --> 00:09:48,710
现在有一些改进和补充，

223
00:09:48,710 --> 00:09:49,543
我们可以做